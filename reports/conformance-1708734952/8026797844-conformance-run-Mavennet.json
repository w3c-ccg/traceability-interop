{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7061c363-3497-4c09-89c7-71b6b0fe0ea4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a87cc480-226e-4335-ae7e-0764f5f11670",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdebd622-1877-4b11-8560-0d57be8734fb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "815963d4-8595-487e-8835-e94604d18931"
                }
              }
            ]
          },
          {
            "id": "fe66c1ea-d2ad-4650-bdd4-c95cb7777bb9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1392c36a-370e-4744-b5e8-1c54b47b4b6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ae41cc0a-1371-4f51-a0c9-af08e8106217"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5d3280ff-4d18-4a4c-9b35-5d595733c8c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3fbcdee0-3255-4e2b-ae71-ebdb377e2e32",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4afc27b-c8f7-4d8f-b5f7-dec5b2267abb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f521f76d-9c6c-4747-89e0-64917349ebb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d435beb3-8c5c-406e-8271-8fa583260aba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "768e9046-27a5-45c6-a68f-c68669f394e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cbe405cd-07ee-4c64-8f2d-b543f237ce0a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5131b144-d210-4889-9503-09c6749f2086",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f3cf7a1-9485-4f24-9dc9-1ddd52629847"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3ac2fe8-2207-4f0d-93ac-09c2db965540",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90cf6c8f-625d-4885-a9a0-b7cfbe806949"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0ae80ef-83c5-49eb-9543-da828494713a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a8d412a-d317-4e51-b149-102b1b16849e"
            }
          }
        ]
      },
      {
        "id": "c2f650a3-60cd-4623-aef8-10bef87550ce",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1545ba85-b26e-48b9-8228-ef44f66cf5d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc62169d-1d16-4d50-ae9d-cab52fd73b24",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d9a6251-48e2-458e-a5c2-7314bf5f6d92",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cc13d5-8d49-41f3-b8aa-3a08ce317109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "359cb515-307d-449c-a178-b4aa59fab452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731f1e4d-2b76-4de9-9089-89c649e92062",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3a7e25-8315-4b0a-a5a8-27027bb586ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2bf223b-9804-44ce-af82-a6bd1416122a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235815e7-5ef2-4d8e-bb8b-0874ee608d7e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee5ad5d-aab8-4c08-b516-a4ec31bb29cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "351f7b8a-6543-47a7-bf63-7474eea68b22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9fc688e0-9e95-4899-8f9c-117445ad6cae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e128686b-9688-4381-8af3-6f085cb0ca0d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acf6b8c-947b-4428-ba08-8ebbc6e37951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8293cb7b-8223-43ff-8840-081d6b59ac24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5815d1-f2f0-46c1-acaa-7fe492c27280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b07a2d3-6d1e-4073-be06-c8af2e1834f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "31f52ede-735a-491c-aabe-92906366478f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8db611a2-c4fc-43b8-b915-31239c96c056",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63288aa5-60d0-40e3-8cfd-b19516abb903",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f013432b-df45-4ccc-b6c5-64328d380eec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41f28ff8-1015-4b28-baa6-e99d8a749a0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "893975ce-c6e4-4398-bf59-cbf4ac44e2ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a80a2300-6a71-4755-a15e-1dc328af7f55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39bd01b7-b1d4-452c-aaa3-2f80a016d9f0"
            }
          }
        ]
      },
      {
        "id": "55f33d4d-122e-4048-816d-bdeed195b304",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3ffefc79-8fd4-4338-a9db-3cd77e37adab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4e9e1a0-07b4-4f97-8519-d2f5816c17c8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2fc93a96-6e79-4e61-836e-9b89434d417d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afd5711-159b-4e9b-99d1-c1004b9c2eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc66e222-5a02-4a41-9c6a-832bb7c1ff26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4afafc-fa46-49cd-906d-cb46893fedb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ef5526d-de39-4376-bb8a-fa64e1be3952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a1441b-a133-4a5b-8a28-07016bf53d6d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57c5e01-0008-4b3e-8e23-b6d6b154c6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af8f749-7e1f-49d9-8422-1c763b405d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20410e12-0bb9-485d-95de-6c700be1fdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8a272cc-2428-4461-ab84-3bdd9b8898d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0821ecc1-6661-4abd-a317-676aaf422785",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4a26f9-6ad5-4f76-9fc6-b6eb88128631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9178acf-94f6-4d32-a1fb-ecfd51ff693e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb61b710-d339-4a6d-8950-983b4f036a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c78e7038-00b9-45e6-816f-45b358a040ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbee746-95f6-4621-989b-813ba4cbbd29",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ab35bd-6333-4131-ad50-3926e4f60b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1634ac88-248c-49c9-aaee-98ddc6341eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2058d2-27e7-40da-8a65-aa19f340d2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa3c9c82-216d-4f8c-ac60-791abcce75ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daffdc6-6723-42b1-87e3-d3c38a99fdaa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92d6a22-a999-462f-9744-47ea1711bda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4c84c0-7b43-41c5-8854-61cc766a4231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886f7010-2ac0-4234-99e2-b6b678a50b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ccc7bd3-a3ed-4b28-8fc5-fdcd191d0412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0cbdf5-f501-4a98-8753-682a5d0bb53a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441f581d-ea99-486a-ba4a-7c2bae1b871f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e94b0bc-27ac-41d3-9217-a6345035760a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfd651c-9999-44cf-bbd4-ddf2097f92e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1473d52-0bd6-4bef-ae45-acf4cc08f6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3055eeab-6b5f-41df-ae69-ae70ea2a3de3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ceb51d-c645-4a65-8744-09ae9000737c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28a2fa4-ba23-458c-8b29-4c328ebde766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea3cbec-19e4-4b2e-8f17-11bb7b010ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ff81ba9-29e1-4532-af51-4d06c9ab06d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d30728-f918-45ac-85d4-fc98a842851e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408ec222-35d6-4e95-9a47-b24866a7180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5681e68b-7b33-4993-922a-c36c00a71e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026dcb06-5691-4816-8ae1-8ac2fae412e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5be3d75f-f934-432a-b5da-6be2eee3d67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5d5a96-6159-4763-ad5a-f06913701384",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efef7706-7a56-4a07-bc9d-16461859a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f494504-e1c5-44e9-a72b-e9be8b3df0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94096409-d83f-4d47-8c8e-00b289676336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "506c335b-bca3-4637-ad52-af687b4874f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d58b57-9d7d-4065-917e-7f4d292b6576",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc452d9d-48c5-4529-9558-e8cde97bf4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1b0243-57ba-46fc-9e9c-2e2a0b2aefec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80735490-7888-4e2b-8ba3-c7c75eb21d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "341ff0c9-e80b-431e-bac4-f4c271f39400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c664ec0e-c4fc-417e-8062-e026e085b659",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9727a6-5754-475f-a7d5-05ecd399faf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b148ae-a4ef-4d91-92b7-137be73f2110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc2b00b-c14d-41e8-8d0f-aa7d13a8004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cbff3b1-f4a0-4a8f-a24c-8b5e8bc6eaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967b7718-e1b2-4e39-809b-429ec9dc6de5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c09bb9-7685-4bdc-8c15-4be6133ca2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee3eba1-149c-45ea-8952-41ede46665c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ebf271-9642-4996-aa0f-1c4ec750bb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e4faa89-b7d5-481a-959f-0c4e30cc7c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a779c00-4b88-4f0a-930c-389d9e634367",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32417573-95e7-4215-8ca1-71f161a5069d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8902431-b987-420e-87b0-5c0576b5a865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ef7ee-9269-498d-968b-092bff0a2e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a5e5f09-e012-42d7-9c79-c97705b5f3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b18a21-0452-4f75-8409-92e133277211",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a9974d-fc98-4d20-a074-4709fa9557c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4371d42-342a-4161-a58b-ceb35b33b998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0f0650-d452-4ab8-9853-c07568f5037b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d198c13-65bd-47ab-9024-7fa2f6cd60a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b0bcf5-697e-4f4a-b8e9-151b7c87622e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6601f18d-f89a-4723-8155-2a156731079b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44f6255-68d1-4699-aa67-a10d517df86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e8fd6a-7598-415e-89e0-8b330d93bba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8150825f-74ce-41a7-95ed-ba0ed86a1284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b2d8f8-62b7-4a80-956b-821dce059757",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450c1877-0fcd-40b5-bb6b-32d215787ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f78486e-1bf6-455d-9b4f-3979680efb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53962a76-fb3c-4d04-bf86-3d1cfffadc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7b61816-8f97-49ea-be79-1b57e1d3d5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8d94a2-02ec-46d0-ba53-94a3d62d6006",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c7d7c1-220c-48a8-98ed-08c7754f05a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72566e2b-2a6b-4643-9d36-a6caedd83d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6456b26-1d61-4594-aec4-b9867f004bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40a2c841-9aca-41db-bed8-30a91b5b6fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca15c5c-7a94-4532-882d-04462d95a7af",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e4ccf0-e0f9-4091-8a44-e2704c751ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d93247-890a-4234-96b7-80ac639f12b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8be1f8-f32d-4b94-afa8-25bb5b7c7412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3395099-1f07-43cc-a2e6-06f362ee3687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2700a7be-1906-43ab-96d7-514b17252a68",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783e5e63-3805-4c5b-b3be-e4530179ea83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aaa4064-ec46-4659-86c5-4c27f2459f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c4ab0b-f9bc-4f12-b706-ecca894b7f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9100d921-cf22-433e-9e79-9a93bf7d4519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0014d3-ae46-4c4d-abb9-9f96607fbefc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f416d4b2-2aae-46d5-be7e-915920f4d4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c352cc09-91b9-45a8-ab8a-03c060bce2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5601fb1b-d84b-4883-90ec-0e1f336e1d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "240b9fb0-db2e-4b5c-b38c-3877efdb9e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d90d1a-4a81-493a-bf87-1e7cb92f059b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e18cd42-3469-4093-845d-93d59394577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4756eeb9-827a-43a5-877e-32014f6f0b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85f7531-1ee5-4a79-9e53-fa10e8f4cc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b23df43-7882-466a-acc3-4f0aa5dddefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b7b4ab-0c5f-4f8b-b162-1b22b1e6703e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ec55c5-edaf-48b4-9c73-34bc8b7f76e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d004b4e-f513-49f3-b561-f802359a8845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23bbf6a-49b5-4a4b-b396-684bb4dbe69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1160ec5d-1953-4a70-99d9-19745d0aad73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337eed2f-68c1-4072-bba6-3799ba85bfe5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9d51e3-7b4a-4b4d-8e5c-abe671e12568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea29fe1-6023-4858-9aa8-ab7af898555f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977d08cd-239f-4a84-b224-effbccc673b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3842918c-09f1-4c76-97d6-401af8807b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cb9b71-1a7d-4e4e-85b2-e42dfe05614a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a473abfa-747e-4c4c-9088-ae2e43e972ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9459b266-4df0-4ba5-b0e7-5fdb1e478320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5797136-2f76-49ba-befd-9cae3a553b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a26b42-304b-4703-bb7c-4bd7299f9145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76fd540-6a11-47de-a0e4-6c86018144b2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096db16c-df47-466d-a5d1-41eea27ad15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273f7923-977a-4590-b4b7-ef23c97c95ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a10c52-5987-4137-bcb9-041bd1e204cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfc7941-122b-41bc-a34e-4654c3af3ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efee2bd-60de-4b20-84c4-a7824fa06139",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23a7d76-77d5-4809-b349-5944a4ef24d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49a7aab-ec4d-4d6f-933e-26ae4532134c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2201f2bf-ac73-412f-91e2-12a456b8a568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4456cfc3-e32f-4757-a4dd-607504694dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17f6621-3bc6-4cf5-a737-f92275e1fbdb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9e2c35-98ea-4c46-9a66-9e847030e052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a19eab-66f5-4b1c-8bb5-6729ca019531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54feaab-62ef-4079-8b59-d5aa1a846062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "878845ac-3bf3-4be0-83af-3f7e77248ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7048a52d-d162-447a-af72-ccc6ed3b8811",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211bbf68-5bc8-4d55-a112-42f6697a6af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e630c60-2fe1-469a-a237-2af4e605ba9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8116c289-f89b-494c-88ba-e104e2f9f22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a9ce27-a470-4d45-990c-29ddd0da49d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae165878-b62a-47f8-9ec8-758d94f4f6e1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4221fdf8-72d0-4030-9724-446c836e0438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e59095-23b7-4c50-b10a-02eaccf5c294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a18226-6187-4229-b591-6dfbd955fc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c188add-a3e0-4e60-9746-5427be7c3a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4388f567-fa5b-4787-91ab-24611a0a6c45",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dfdc4f-9d93-4404-b0ff-826088738336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b3b390-caef-447f-9248-a29b77004f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044d3d33-388a-4744-86ac-08a5f8753fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "df1770e8-cfa2-46b6-a0f4-e3c89626cbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3df2df-e51c-4d13-9a7f-09cb139b2f81",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c64c28-f037-410c-956e-a1ada3c4e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a081ef07-b7c5-4264-90bc-a1def024e580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26082d91-7865-4d52-a838-c5549b12dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01d215ff-f341-479d-94dc-4c81ae150180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db85902-d0cf-4f28-8c19-7daa772530f6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479dcc9a-6fdb-446f-8584-24d274519b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9272c0-be3f-44d6-8ff5-904bd9e3dcf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f3d047-14b3-4c34-8ae3-29fe4f562684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4175ea-c96a-4257-b728-a64f56cd1151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5e3ce9-fb50-4a14-bf6a-a04669a8e2e7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc5a8c7-f1f9-4a03-a239-51462ba327ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693505dc-aeac-4c0d-a636-1a82aa1906d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3eb6b4-9104-40ee-84ae-7f2f77de4cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae494c1-4a03-4fac-befd-7c1a3a35c134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653528c0-ccb1-4fb1-967b-89256e7dfff4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d2eef8-9586-40cb-adee-c5483429fc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1eadf2-4162-4f9e-863d-69bbc2b8b6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1228cc5e-4d82-4871-b08b-eaac9c601d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d251c9bf-f06f-4964-b227-a9d2e88c3014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd27102-7be3-47a4-8e87-2da089458f24",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52c11a2-2b6c-4fad-8656-7df8eb98d311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4855633-202a-430b-8b75-a0c86e5e4895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10cfc6a-a97a-4d21-a6f5-e0136df0b526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "27a945f2-1180-4436-9ed6-8c75d38613c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5648d30f-3c2f-475e-9bda-d4b02bf371ba",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ceb9fc-f0a3-4163-a357-9ce08c8c650c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8a4853-c4a1-4f47-a385-aa830f422e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c05e44-48bd-4086-a1b2-5a148c584595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0743088-54b1-49dc-8dfc-c493711042d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c3da25-bb73-4d80-bef5-bc52c2476a80",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742b5a17-4d7a-4344-a24d-afc246f287f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b05adf-84c9-4582-bfa2-5baae25763ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c10a6a0-0b4c-4d47-a38f-6917807782d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5894a8-17bc-4978-a239-c9da2d88e2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c9b175-ea32-4894-a7fd-98794b7f2c8f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931414ba-aa7d-4a70-a4e2-f5baa502646a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9817a405-711a-4e18-9f80-aaaa5e041a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578ed49b-32b2-4f94-9320-17a379fd1bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff6a32-c37e-49c8-97f9-2d91e329aab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1fc195-6a69-4fa0-9213-552284457d49",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1b459-4240-4674-b606-594d79f441dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe616e3-799d-4ce8-938e-3bc4935a0532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2583a8a9-ed66-4fac-b98b-b536d61b4709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f392565-9001-47a7-92b0-5b10493282ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1329f78a-69cd-4278-afb7-d0ec1c31bfe7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9af242-81e5-43f7-9d62-49bb68e20334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20089c4-58b0-47a1-9d3b-77e82f80bb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f33a54-1f1c-40bd-95b9-84248eea0378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f32aaf7b-15ba-4895-9e7c-0446e43722bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74458a7a-b540-48c6-ada3-bd779c38488d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61977d57-4a8a-4a6f-b3bc-9b1d44d1ac98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b2976b-a059-4abd-a854-37f3d8d040f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758d8263-4c9a-4e15-a986-e28361a1a08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84d4ad68-4378-44f3-8bc3-806b36f45b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f185bdda-483a-4c44-8727-e4e165f61c90",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc5f008-0b75-4f85-a72e-ce03dc426f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc4c971-467c-4fd0-94c6-e892b85b020e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9c0baa-2563-408e-9fba-78fbdbe0d76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0dccabc4-f081-45c7-98e7-748776f30141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de53dab-3715-48df-916a-e6da4fee9898",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3222c1dc-fe7b-4133-a5f3-61a29dea158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1e251d-bc04-4c72-960b-8b51a326ac73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b762e69c-7aad-4e10-83eb-55c7e91520b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2505ad47-7eb6-49e3-b757-20688751bf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caf6a12-6db3-4d30-8ed5-027fa404ed4f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768daa3a-eccb-4308-8d5a-7f480ccb7cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae107dc-9692-412f-9e63-ce0f32e6152f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6531d33c-f97c-40b9-b4fc-14b68a8bba82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a3a31a-c5ad-4da4-bef0-7dfd8542bef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d86d3-af7e-44cd-af1a-d98f84b69dfc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9693891d-f4d4-453b-9295-592cdd6bd7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc34c37b-9b24-468b-b5f7-1779db82f7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d09794-8e84-475f-b8a4-43197b9d33d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce97598c-5517-4536-8cc4-01db138b6f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ff7355-d88e-4535-b656-0e11eddd2754",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649183e4-783a-462d-b46e-bfc4de053172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f87b4f-9d8a-4151-85de-a2725f06dabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a14cbe-65b3-4b48-8dd1-c914158b7956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "529cc678-b400-4a91-a8b3-f12adde8262a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fe1c66-0ed1-4ecf-b5d5-c0cc52a0c449",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebb7740-de9e-443a-80da-05cfc515dff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4c964a-cda0-41b4-a5a1-26b0da076eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3979aa72-61c9-413d-b00f-3c682afa026a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca281583-588d-4fa4-9743-8e7f2ec619ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d193e08-1c15-4746-a933-7710eb6f4fda",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb0fbcc-627a-48c8-a99c-da4207425734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e4936c-8b4e-4d11-aaee-3c9ec667fd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c83623-573a-4064-a202-ec396335b5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5d4179-9d21-4335-82a2-145222fbbab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af513043-1c5c-47a0-9a01-d3152c6d5bf9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26be6e4-18db-4748-b229-2550b6481f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85892a7-5077-4c4b-b41f-77d282035dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b4278f-ae2b-4250-95c0-11c8fafb39e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff627429-6671-4a0c-a9b4-923e2d3c9b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72be218c-f3da-434b-933a-1472bf62b38e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e29892-88aa-4966-a8ae-971ede4f65c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf88301-8f32-4465-bf07-1f0d6ae4159a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0206c3-7df5-429d-9826-6f64de3d707c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80b4631a-1c48-474c-9c27-733278f7329a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a762b01-7a1c-439b-87c7-016cb6ca39bc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1475b0-0e8d-4532-8658-6cb8fef920cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c5553e-315a-4d28-a0e1-73dae7bc856c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e773ee-8b65-478d-b232-791d0950001f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7ff99d-7331-46e0-8f47-68154c3849d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212e259a-9843-46c3-b114-cc847580dd96",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346b3ab0-4337-46b7-a80a-ed8acac674c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf377c37-cf58-4150-99ca-0646597a2067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbaa94a-789b-40e0-a282-b947ee6d8500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e89b5e-e3bd-4cb2-9245-7de3afdb6e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c07c2b3-b52a-46e0-9229-d2124252530a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e011e8-bb85-4096-8743-337f99e65463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908c2523-e055-4230-aafd-a755fee5fd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55eaad12-8dd0-48af-ba07-0aea4633c082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "235795bd-12e9-4d55-ba1f-af085c3c054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7307e5-e193-4b8b-a0d4-81f3130f9236",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce169a6-0ae3-402c-a9e8-9ea4db13f01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027bb1e8-bfa1-40a0-9df6-ebdc9e9600e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6e1333-56d3-4e7a-966e-c7e0bd4ba8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70dfac5d-6548-4a0c-a6eb-85903a9a7762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54d719e-e8b5-42fc-b94d-231a16b96a76",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d39abde-3f85-47c9-9bdf-906ffc89ad06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09f962c-376a-4aa7-b71d-a0e0d4fb2125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a440a07-9da1-48e6-824e-1f46ec1340df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c931d518-df18-455f-9778-7796588ab664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aef6860-e2d5-4486-9451-80a7e28acf1a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf69566-527c-4250-856e-c43d31eb6a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f8d7b9-4282-4e1b-8a52-514a8f97cbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4d727e-737f-43c2-a0a7-45a79ad2304f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "30530945-ba14-487d-80c8-d2ca01b6b65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e05b1c5-0e33-4861-902b-928a62c26425",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8972c2-e534-4951-b635-884b93fdf79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c7ab00-4768-42a7-a516-4d2bad7511fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4f3ba1-4950-4eda-94d2-094f89eedf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "258758e5-4bc1-4ea8-9175-e6eebc853d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbd705c-6251-4fb6-8827-6407d17ce164",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd96845-e086-4117-891c-dda52223ddc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e24a0b-534a-49b4-ad1d-4f9c6664f933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d110c317-427c-4e30-a9b1-456f40274941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ffdb85-767f-4cef-891a-731a333dc485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7612a0a1-5fef-4e75-bdd9-8b1ec167a94c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c9bf5c-e9ee-4cf5-863a-f2941c2979b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc825a8a-6498-43bb-99c0-35f20a245eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faec0239-11bb-4302-92b5-426b334632a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca72ea4-7e2b-4a60-828a-f8b4b90d8d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8839d7e-89b3-4a06-9a1e-640c8d6448c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7def309a-1be1-4a7c-a33a-6545e1678f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18066bdd-efb1-4c83-9003-a714a6ce38e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2611e0-2bbb-460d-8324-376d1c3394c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "767939bb-14f4-41da-b712-44cef9d721e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd6396f-d337-42c1-966a-0d02fbdc2f40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c5dd3c-0705-4956-ad1c-aa1619040609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef28188-6901-4b9a-b3f2-94c45a8c8713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079a57af-d780-42cb-a68a-d6d957893c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ff344a-c833-43ae-9afc-d3152cab8f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c599b2-3045-4755-8b4e-d21e53f7c1d9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63196706-d596-4899-8594-c368a46002e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85a4e1d-494e-4773-b466-654224040f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328995fa-897f-4fd4-8230-892613aca1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3d380a-4147-4574-9c5a-a465b516f41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f886c8-bf23-48b9-8868-0217d3aa5505",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6811f6b5-a853-4c23-92a4-556664945bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fe2594-f3b1-487b-9a66-5552247690df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c3668d-8508-4752-b3ef-e041174f2479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b52e9263-c3aa-4806-b22e-17a86cc1f34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d243b80d-b244-4e0d-a9ac-38eea9f1b587",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5bfdf1-fcae-445c-b149-3b767a0d61fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9324e1-de9e-4087-9945-8b26ed38b7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62097038-21a5-4af1-b604-a0d658967b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e98b920d-7fc6-4e4a-a0ea-6e803c55e16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14b6153-9849-4181-a07c-9502f52c979b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a0e35b-8a20-4521-9f53-b0cc5b8e3adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e52e9b7-489e-4270-8585-dc94b68d2ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f76c581-3a0d-4a23-b71a-f5ded64f8602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "092fc9e2-25d4-4b6b-849f-01ab207b6195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503b0353-c929-412d-8153-d9b725cb909c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8521b3d1-45e3-47c6-9f43-b45b5a2af3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afa241d-2c93-47b0-b618-231c743bfc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0d1cff-cb03-4290-8f08-46289432a618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdfa6a0-7530-46e2-bb9c-703423a818c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9e2a1b-5fe1-4603-afcb-d0521c654bb1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c113184-cf4e-495b-b22b-20cd0c4b8827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2039bd-3092-4a08-9d31-f3ad02f40e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ec964e-866a-4fc4-b290-0f12edc94599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bccb83e-0dd3-4caa-8957-d3e70c96649d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd82385-6489-44c7-80d7-5cf4a22d167e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3466102e-92ff-494a-bd56-21b19c7bc86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be825bca-ba3a-4665-94f2-ed88490179b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bce0dfe-ec87-4c0d-877b-2eac9aa5aaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "faca02cc-259e-45ae-a607-8b6c43a02335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bb4da9-cdd7-49ca-ae04-28942f678228",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74a3056-6403-4924-9cd9-664b755a6c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565028dd-5b3c-4f2d-bcf6-4f43281b7e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f48ede-ed6b-4c8e-8c7a-a327ae565546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23fe08e8-36ce-42f2-98d9-dccde5e77fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934dd93e-0dea-4a39-8308-5312314e7838",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab306e92-4fa6-4ee8-8d13-2854fdf48c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ddf6d9-659c-49f0-b1b0-3a108e484d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413b8967-cd7d-4b38-8fdb-cde45f5292bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be5ca19-6ee7-469a-903f-5131bbd3138b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc5eebf-278a-4371-aade-d8c6862bdd0c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2e3cd8-c15e-4420-8e42-52eaf87d47cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed20417-cdef-41eb-aac4-20da246e7ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad04923-386c-4eeb-9de3-72fc126bb923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e74399f-7a21-4882-bf29-1ece142ade4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f6bde-26da-45da-9873-970f6134cb44",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9297a7-0e80-4bed-9b43-34349734f3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38853e60-9e96-4043-946e-c5df0190ee5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d08707-8f91-4f46-bfc1-e8423c1aeaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89fa3950-3a2d-4fe9-91bd-c7e71de90e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84be0cbe-8cc0-49c4-8a00-26ce6eb0c269",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ffb2a9-faa4-4b96-ba65-f974289502de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356d1edc-522f-4bbe-9fbd-b1ae91c192c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4f3e07-109e-43e7-811a-11beda4b5e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7eea3c-f1ce-4d4c-94c4-9362c3c595b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224819b9-8b37-4f32-936b-a669caec86bb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a6793b-7d78-4aa3-86f2-3d747d7dc4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b697942-a6cf-4872-ac41-9e55efa9133c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d67239-e9e8-4c78-badd-6643c597af76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd21210e-48e2-4d75-bc73-373ba6b35dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db6c59a-b0e2-45d4-8ca0-801d94c36de2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4af3e2-50ff-4dec-b495-5fa49abe4f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012f3d0c-340f-4c49-837f-2c8be632efa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977f60f4-046b-496a-b361-a79a1370efbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cf2fe8-263f-4a33-a125-e495db4a9676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44f7ed7-5ef8-44d8-80a1-4bc69049caa1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1a35c9-6098-4f6a-8488-a2d563529e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaa13d7-c878-41c1-ab93-239948986868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9593b3-dce4-409b-8837-6b0604a06565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02da237a-aada-4adb-9e67-a31ef1051bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d91c81d-8bd0-4846-9127-a3dbe72c6eff",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778c9521-9b23-4aa4-bf23-54498a0d8e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce7e946-06e0-40fc-8a91-d61b5addf792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c456c536-ea08-4e08-9f2a-dde65c50fe00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7862698-3075-4da1-9c06-64dbf48e3054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c655d10-03f5-4707-813a-8fee1a969df1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114cdf8-6e80-4d39-a74e-2cfeb584ea9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4309a694-d042-41ea-bafa-e888ff3db27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57df38ab-6d65-4bf6-ad4f-b9ba86ffadcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "237b9637-a009-4ad3-9cee-16a3385b1135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148c8284-00b2-46ea-8696-111dca3c7c16",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24f8e63-249f-4654-b21d-e0bea38ab5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934b17d5-006d-4cc5-9c01-47d55fb985a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcb2704-c58c-40c9-a556-d0b5d2387716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efc83c0c-b87d-41cc-80ee-47006f0b144f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c870be-7654-4fb6-9f86-aced80cb90c8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ad8a53-a5f7-47da-8f4e-94c4386e4a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ec0379-4a90-4fd1-83e5-ab6a31f2779e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e496880-357c-4ff7-8398-bb06ceaacfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "586f998b-f6f3-4d35-bd51-eee79bf3ddb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b02f05-9823-4145-bc5d-8c61e7f289a6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51a73ca-05ad-45c9-a348-d9807d973488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b2879d-aaea-40e0-8749-d2415d2f21c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceec76c9-ca5b-445a-a0b2-2df63093846f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d890556c-c13f-4a7e-9f00-11882d565410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688b15af-ebf2-4624-aae1-d7ab24de5ffe",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2060852d-e30c-42ba-bec3-05cd1c289b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3cc699-aad9-42a9-82a4-9eaa29ea8612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4139b705-5166-4def-891b-76eefbabad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7114101b-8041-45f9-b745-aa3fbaeb827d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5944a02b-3df5-4ee6-966a-9524075a1fdf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d73baf-4fa5-41cd-bfb5-0b9c69b7a4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6366c172-d93c-42e9-ba39-6f09d343c1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7ad735-8657-45ab-b5a8-aca3e3284f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9043b18-05d0-412f-80cf-fe5c1c9f4046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76f1821-147d-4db4-a311-e94de58fea13",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b996e8f4-aa00-47df-8ae9-472a075dedea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3ee84e-2d67-4302-bfb1-a9fb370a7a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79ce803-6ce2-4b32-894e-5feaa6a8958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9068c327-0664-484e-8917-21c3f92ea283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2491266e-54df-46c3-90d2-62a5b8f0c516",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff55002-894b-4d1d-9565-ca670fe3f112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b34a61-ab6b-43ef-8732-19f6c0577542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23ad3f7-dcb0-497a-a3f6-c9fe6ced999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f4f853-abe3-4cbb-b282-787dcfeeee2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73a5725-f9e5-459d-bb78-deebec5366a7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b553dd-1f95-4396-a046-3892bd20f005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798cf694-3432-4d24-ba52-9833885b317e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee434949-6f64-4e72-85e1-b08136d31142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c159886-d662-4fd9-abd5-2f6136eab295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d81244b-a921-4646-8a62-5028cf418b9d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a969e0-d1e3-4882-b384-20934e1f721c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e74a196-fc1c-4047-b6d6-66570cb4dca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f9e920-dc55-460a-85a1-76c96f9bbc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b259a363-e74c-4b6d-bc93-615146ec41f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c811d97b-b754-4d52-81a9-2c51e2386c68",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9cffcb-efab-4ecb-b288-13db5ae3d77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39968698-7467-4a80-a008-684ce60c4523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a9e683-e924-4556-bcc5-589a9edb816e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ae0731-3055-4dff-8431-7281edf2f222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5141af79-5328-4cf6-82ba-9c955152bdfe",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7449e1ac-21ec-41ac-9edc-20b293c2f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d50b99-62af-406b-9d8b-cdb86431f827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d646803a-68e8-4a70-8e8a-0ecb273741fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e41ba847-e40d-46cb-abf1-d11edff17685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19423d7-f534-4a21-8cca-7319132d384e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55535a0-1c85-4834-b3f2-c77dc91886d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb829030-6b9a-4aaa-aec2-2e9e67ef434a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df04040-0846-467e-afa0-acd96f88ff0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "133240c3-acb3-4bf3-8396-27f20b09e8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c2858c-aa97-4c59-9b63-5eea12eb11ff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa3fb99-a3e3-477e-8fc0-c2b0d8e0ec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2be911-f107-49f4-9a10-2fc0ef373759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee0a327-3c42-4fa6-b308-02f86ff35cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94dcd618-1de8-4033-9e59-057700fe0964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039cd0d5-138b-4c81-99ba-2565f1a1d3cb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8aaa55-c022-4fbf-bded-651e6848d20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dd303883-505b-473c-a1af-2d3daf90f116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33d5418-019d-4620-b864-b86fcfd48081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8500ce51-0fe3-4a1d-9d29-3d29a78c5a45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f28e4291-ad6d-4a16-9927-59c517870320",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a54185f-b1f6-4cb6-b101-0d02fd58783a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591dc0d2-5b75-4205-b3f9-182e7e209a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3db680c-594d-4e3c-b2df-fcd296dce723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb93216-413e-4eb8-aace-3239d41fb69d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da3de912-fe34-48e3-a20e-704aa101038c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a83936e0-e7e9-49a7-874c-f7c606352510",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbf8cd47-49db-402c-b6e1-08323c12237b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20a1b66e-5180-42c3-a638-6b87d473ed58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c024b5e-a726-4a59-982c-060421799823"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "176eebca-275b-4ebd-b5a8-4faf3b6f299c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c782f00-de65-4447-bc5b-6d76e98501d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5cd009e8-9426-43ec-8b65-78be82d1c136",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6038ab58-135a-4df6-b7e0-5a66af94a9bf"
                }
              }
            ]
          },
          {
            "id": "3f7899a1-241b-4590-8478-fbc649f22e9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "47ea5282-04ac-4e04-8873-b8849bcde0cc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5dcc8a68-55ad-4608-b049-58b19966d01e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456e0537-1d28-452b-b5e2-03f36c57dff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "afd5e8a8-5432-479a-9424-1ab1f17163b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad7284c-5e14-461e-9469-740f8506a151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb351f1-f933-4349-a57a-a06a7651ef3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a3cf91f-5859-41d0-b4c9-eb959235e9c2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c21a9c6a-0949-4f48-b147-c8c9ae7b7da2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b0e073d-e73d-4320-9618-0bd11807d1b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f57fa994-1e4c-4971-be5c-867e7511e135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b2da4160-3b4a-4b9a-9d01-7c0af8cf0a73"
                    }
                  }
                ]
              },
              {
                "id": "c369577a-e15d-418e-aaf3-374fcd300a5c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9707865f-b78a-41ab-a2b6-15634d7a91b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65f85eef-adc8-43fd-a8c5-40744c4440d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc3c279d-19aa-4527-9206-1370a2a700f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86d6ef24-af36-4e92-993a-80893329f539"
                    }
                  }
                ]
              },
              {
                "id": "ff50e07e-1aad-419b-89eb-9c7114fa44ea",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cd1adb9-da76-499a-a840-01cebed8f797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad2ea9ec-fd46-42c4-a217-ff57d31ace2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f62b6d58-0353-4722-9b98-957ac9cde3fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7336821f-96de-4f64-bc36-af8a3935c588"
                    }
                  }
                ]
              },
              {
                "id": "f7dfba48-d821-4317-84fd-b53ea5a319a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e934283-f2e6-4651-b261-f09463618d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "632f48ca-5798-4c83-9dca-ce9ccbd1464b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e908c8a8-f208-4c4a-bd12-72ee2092235a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70e7f960-5988-4bc9-bd14-6f6ee32500f7"
                    }
                  }
                ]
              },
              {
                "id": "5f1dc8cc-d446-4beb-8b58-299e801569a7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4b3efae-dee9-4b04-bd23-abccc2162fdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33813551-fd9f-4fe7-9259-4f1bd429e4a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18f8f694-a336-4766-a1d0-eeb41461da7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "53585864-dc0d-459a-a58c-839c76c40692"
                    }
                  }
                ]
              },
              {
                "id": "d7452070-13ff-41fc-921f-eb0f9b349715",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adcce674-2d28-485e-ba0f-7f22038ae79b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3371f5c2-1781-4410-96ae-003f4da14ff3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "606dde15-f533-412b-bf2b-6dcbc00a6c8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e370ef8-adfb-4c6f-a4ff-80f516c99cf9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df2d251d-9311-4dfe-8779-72f465ae9685",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8fd0149-f8fb-4225-9590-82bc4e6a77fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad630c99-a3e6-41e8-998b-a0bc007d3ebd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "420b3827-f50d-403e-b1ac-9a1785d3594d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e83d60d1-cb00-40a1-a420-5666d08a137d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4554ca22-2ea4-465a-844f-687541126d2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "049e08c8-8818-4336-877c-c688745c4652",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c047a755-e6d8-4dcb-ad1b-0791b3321314"
            }
          }
        ]
      },
      {
        "id": "e4900245-cbef-422b-a863-2ecd59fec1c0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e23cf1fb-be4c-4e05-9738-edd29db865e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34b1bd6d-370a-4300-916c-e78ddbe457be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "77a14680-3bcf-4fe7-ab2b-fc8a38e4b566",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaf8659-5184-41ef-89cb-0f270e1119c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c25c7d-5143-40b6-8b06-b270644e386a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76201be2-9ed8-4f03-86a4-737efcf4a872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5d6782-eef8-402a-88fe-1bb28cdf3df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86ba330-4639-4f9d-aefc-d4ef278d56de",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823be83c-2632-471b-939f-5966f67144aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0fbbe0-5cde-4bbb-a1ce-6483084980bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04e1171-a825-476f-a97b-5cc67714e05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26010222-fe04-4512-b7c4-59a747bc22ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee00f3f-46f4-4d62-ad05-db3f19f37562",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87143ad-fec0-4f5e-ad08-6a82a4880871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906c9378-659f-4453-9fe7-27e6ec7ca672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c9c925-7946-4fb0-a7f9-56f1ce6ca100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "356632e2-dd09-44d1-a718-eec0c2a88c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3365197c-5d8a-4d25-90bb-d018cf8bd6b1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6249c3cb-3361-4479-a87b-ea32a7b48f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d369db-0261-46da-a050-235e401e3b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee559c5-497d-47b2-a374-ccec0e8b6aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef8dea5-056b-493c-80d9-2bb81eb18ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08afc661-df19-4046-bcf3-e255e6a3ad98",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2740bf0b-9f8f-4dad-b2be-e659fa13b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601f16f4-10f1-4d3f-8832-7645ddb28c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed230e7a-0cfd-4257-823f-89ac41c65e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc797539-c69d-44d5-93fe-495c08520701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170304f5-2fec-4bf3-851e-0aa5fe27eb94",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6c61ac-6d91-44d2-a21c-6797e04b045c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b614aff3-5d18-4afc-ac2b-db0f1cbb2c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0780b88-a6ad-4c46-8738-3c16a5adea21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb2852b-1851-4845-9231-dffa5b95f47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db05418-a65a-40eb-aad8-c81d4b95a90a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379b25eb-0956-44db-bbbe-82d87886aafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff52b5f8-da20-4423-9777-879c2d5002bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9521b15c-13b0-4527-a82d-68bc34296d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d041ec14-c9b1-4359-a36d-7b17e0325899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed9c9d6-3853-4487-bed5-5a2554298278",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b010f023-af1a-4e1e-8cfb-b99a6635c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ae2b12-ae97-441d-80d5-85e51c0d44c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002effe6-4a16-47d0-aaf5-80b301912540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c58c0cff-a7b8-452b-9411-5baebf778aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60727d3-556f-4a43-8f25-f48ba251c04d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d1732c-9a26-4691-beaf-db2a8ab11868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643051af-ab3b-4af0-b293-c2a748fa3724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd716df2-3185-4e23-9f53-8904fe02f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8dac936-a7e4-417c-ae42-ac3dbd077916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d25d67e-10d4-4b8f-ac52-26b9d251b72c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c1c1e6-e24b-40a3-9322-1a4305763f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ed14a5-f44c-4481-b374-40b6e303e3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bb555e-25f7-41a0-8195-ff58fcc5dc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e506fe-10b5-44fa-9465-910c50a63d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7343de51-1fa3-4274-add5-b19226cf3462",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725f01a8-1ec2-4fd0-b824-0b83ceddf73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca0451d-641f-46ea-8b00-14afcaf86f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b839acfb-50bc-4b4a-a4df-961dd4abc460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8e637060-a503-4bed-b77a-b1c4ed7bffa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eab8e8-8d07-4bb0-85e3-e19c33fde3ef",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ec5aaa-492b-4f1a-87af-41e3ecb589aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9513a7-ce60-47f8-9551-6b1f70cbef5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e501c41-0634-45e5-a76c-e7488456d998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e884904c-5d7d-4fc3-836a-0de3af11cf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6390d88-70ce-43dd-b0b3-3a23cdfb9ace",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf39e23f-2cba-4288-9723-1fecfecbfbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83369fd-e968-4502-bc82-a7a8c88a1d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3198dd9f-4880-4e95-902c-72ffb46995f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ec76f7-5bde-483d-bcfe-e18247f0d400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a7932-adcf-4893-a8e9-494226355c19",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaa22a0-9377-495e-ac7d-bc6ceac2c8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b621f58-02fa-40f2-ab49-a164e5f3afe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f613a6d-88cf-4d67-b03b-29c8c98d424b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4acfdedd-3eec-4fde-bc7c-95f30013c8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f699505-9f91-43ca-b515-865cdc672b84",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bddc75e-5378-4af8-871c-f8f37d7f6e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8305d780-92e0-4777-b449-f882933f3a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d368eb-fb41-40e3-852d-f2f89b7e82cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "04735c4c-6fcb-437f-a6f7-76f1e8e3a95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196fb0e4-518d-4b6a-98e9-a3c70ce3673d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b766e64e-8a71-4601-a40d-01e53d54321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae24a905-0888-498d-a5e2-dfdaabc375d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cb528b-1311-4ba3-a8d4-dc140dda8c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "80fdf49e-5316-4103-b8a9-255063254c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b3767-7ff8-49a8-a5a3-1794f368ceff",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f07367-4c03-4e06-ab2f-ec6f2a2a8261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49aa1e75-035a-431d-b792-b14d695cd65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08abeddd-7503-45e1-a6e2-a3a4ebfde7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "27493805-ef86-4db7-8369-f30d8a23f08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f91e03-cc96-40bf-b91b-9dc84b608a2b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b7d659-0c37-42a4-8367-86cf0d577760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c592c1d-39ba-4efd-b231-9cc77de1f8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e83e0c5-679c-49b4-bf17-7982b744f998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87f981f-df01-4ec2-b99a-782489d52da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d4ecd3-654e-40a4-b365-b779f0112819",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40284f93-56e3-4cb9-8e07-6ba9662ce57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2906ac-67b2-4295-8b74-8b456dc29948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a179898-8a73-473d-a250-eedc2bc67f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca45708-935d-473a-8692-b5aef0552c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745aabe7-2d31-4897-9f48-6c0122305f29",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35cdd36-b4a9-4c8d-9f18-227505c3dce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23f5dd9-6f77-47b8-b82a-6d84e1b4770d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdf0982-8384-448d-a810-dde5d072c705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b51bfff-cda5-41de-b47a-650b9afa3cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44acaca0-444f-43d7-a1b0-e7687b397f21",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a28c0e6-4d3a-4e49-a4ea-bf3ea98b8c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f113ac20-2a92-4168-b9d0-ebcb21904831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd800fc6-1f2f-4cb0-896a-4cead62ab2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d456bc2-4e38-4da8-ab72-8e1dc31487a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b24f9da-7ef7-431d-94bf-4dcfd62e9986",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2043aa1f-2235-40f2-8426-bf9b300a2a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f09625a-1d1d-4ae6-8b67-5e2faf8996f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9727e6-58cc-4652-944d-f9d75a586a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "571bb683-8197-445e-856f-4597e7037c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03093585-60b8-4faa-bd83-bb266f99dcad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3411c375-6e33-45ea-b993-171e70733095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3970d43f-1331-40ec-9130-796cf5f41988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3679d8-4ce9-4c38-860b-bf4c22c295ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6238266e-1696-47e0-b7b2-e2254a06a08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d12432-cd23-41bf-9a08-85eb6a208606",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396744bc-22c3-4aa9-8ceb-21e6a31f5901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd5d27d-5870-40bc-92c4-c2f5378d3b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8942793c-bf21-438d-b929-6b922acfb523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26fec96-4697-498d-b636-50ce9302266c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd5654b-808b-46dd-a2ef-e187757bc069",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9416d8d-28c8-4527-a31a-9b40372d88aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9636aa28-3365-4303-8cdc-ee88bd8b98a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8baa842-d767-4593-94ac-afdad3d3807b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb20056-11a5-4644-a33a-5a66029dd0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eb388e-cdf5-4359-9a8b-de82a28e1515",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa21ed1f-038c-4981-b7d8-bc17a6d0b122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80310ff-31cb-48d2-b9a0-4dc392081b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8187e5f6-c468-426c-954f-e7b184c0d519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57cbfd7b-43e3-42d1-8693-68af5e5802ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef715d59-8493-4ccd-8ca0-b3004e632162",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19c9b95-1a5c-4424-9321-191e7626b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635b047a-4c22-42e6-b112-5b63419e219b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7432ab-d2ff-48ad-99b9-438038606a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ce62b0-f641-4701-a5be-818227aa6720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca821f4-8a84-461a-afe7-65bf40441255",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06fdda9-4272-43e8-9d96-f1c127082b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65eb666d-a0d8-48b1-8440-8438a48da429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecd53a5-9ef7-4c8d-bcc7-6c0a29791929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "021a87d8-0c7c-44be-9ee5-bb2468eb5011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774fad9e-85d6-421e-b58e-ad77df970610",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4def0390-e43a-421f-8017-b011fe227865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5324ddd6-f6dc-4419-aacf-fa592aa1135a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002606cd-dc74-475a-a22c-07bd7f623a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af8d2ca3-d501-4bab-92cd-5aa58c8f7557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c5230e-3ca5-4ab9-8425-e686fe6753e5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48955fbb-ca09-4a1f-9779-ac2a142adbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4c7880-cd3b-42c1-a624-e0a48436657c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac054b4-7074-47f4-b42d-c72d05c96f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf7ca71-19b6-4730-b1df-8b65f371ad53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59873d1-36f3-4d29-87bc-60df93456c29",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e45126-ba1f-4d9f-bf2e-e32f994f321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd860084-f9e7-464a-96ad-faf289f315f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf38293-286b-4eef-bfe9-7a432261929c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "518a0a19-0f56-4290-98cd-bf0c09d0f97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bcded5-d38b-40b0-9e05-f88c9404205d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ba653f-12da-4535-a6ff-bdd269c8f05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e06fc34-628a-4a9d-8b1d-91fbdad3d7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d691de-c90d-44b4-a2d3-ec133ba88264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea8a89a-784f-422a-9f56-5a64002a20b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9f2d194-347e-4d66-acf9-398166f8e4f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d387c57-e35e-4f1c-98e2-7daae93992cf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9197abf-1f39-4b8d-8ad3-44434b4a78ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2dd0d7-359f-4b30-8c66-b5fac2f4224b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2764f32c-4093-4499-93ec-b633cdcc0f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdf745c4-7105-4f94-ae46-3b5329a14354"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bf09dc5-f71e-40f2-b4f5-3292541445fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "924a4840-5afd-4182-9f9a-3e062cf79d61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86b84fcf-e26c-407d-9c0c-5320e2d2f2d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dd68b48-d101-4618-b78d-ae20964935fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78f78377-95e5-498e-a795-7fa960e75d10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fdcaa1a0-5ebf-4e57-90a0-a16e3b8c65b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1ade2bd-c4b9-460a-912e-da9572caacd7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "febdfc25-cf81-4f11-a6de-62cd431347b1"
            }
          }
        ]
      },
      {
        "id": "b59baf39-24f2-4364-8492-8e63859940bc",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4c0227b9-5fb8-4d87-a755-5db9ad78f3a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2011b8f6-2009-4726-b7f3-fe85617c9813",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99e7f043-0b1d-4e16-9bb3-e45f95139d6e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3345981-70ad-4f91-a62b-c8454be702e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a52b541-92c1-4e3a-8bad-d6af5bf22388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb44955-245e-44be-b0c7-b8b66349b8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c598c52b-fdad-4a02-905c-0c9b1030dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f66a0b6-f2e7-4791-ac80-60f1579dfc2d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813206a1-270b-44a6-a83b-794da89b24e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570ec48c-153c-45a1-a19b-8e29a295ec38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2fddac-06f1-4d71-8405-1a124f4a2060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "227cb5ea-cb6e-4732-8c68-bfc57201165f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fcaf86-79c2-444f-97c8-49372403587a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26ce365-9edf-4b7f-bbcd-2d97775724a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a263c3-fe2c-45a9-90a8-8a7caec13d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cfd4d9-cb50-4452-9107-2c98bca45b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a419aab-a6cb-4073-a15b-31fc977c0577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5952c9d-b743-40f8-95f0-e94401403797",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c85c41-1c46-488b-9597-0f6c77282eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804fe47e-3218-4d71-b230-095600314c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc6404e-ad05-476a-9519-56e8d3f35fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "731ba833-228c-426a-b5b7-79833daad8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c96d53-7654-46ac-9fe5-1478ca13aa69",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4641afa4-bd10-4ecc-aaa6-19ecd6abd5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0496ecb9-b0d8-4474-b933-0c7b3636da6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4d0d03-7c2b-42b5-81c0-938155e273cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d766c7d-e0b1-4724-ac81-a2b238fd6de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3412220-f63b-448c-b402-81a80a301c2e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f4283c-62de-45b0-9134-2f81eb5543f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6309a29-ba13-425f-be73-507ee4b41676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e3c83d-0bc4-41db-8083-14494a535e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f824f749-9b3b-4f37-8f56-04e5b6d4ef5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2405d323-a514-450c-992d-f18c5382c54a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263a94cb-fa91-420d-ae96-7eb473c46df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e43721a-2fba-4633-811a-209aec7fddac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76343c9-7725-4537-bad8-e540fdabb517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5be3bb0-4b59-4841-a220-1f41bd137616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e00991-e040-4bfc-b7e3-c8c85d4c7bf8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e53ab9-602f-451f-81e8-0d20b8140db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec314b8-7423-40e1-82fc-a6706721e955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0b16c9-ca4f-4449-8f52-ffc4d3d96ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "430c880f-3bdc-47d6-bd7b-ce3271ecc9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7841094-6a6e-4b14-974b-7016ab58069c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5addda06-5752-43b1-b04d-cc01093b26e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2e4678-d2c8-4895-9fae-5ec36e4101cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8029bd51-8093-4a35-a7af-e5a48a23029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e842ca47-3bd5-4b42-8a3b-e6d654c50dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f8a353-f74b-4256-84fe-0a4fd38e49f7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4869f45-8ec8-43ec-8dd6-8996ca72efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0792060-ddf7-44a0-83bd-20474fa816e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f712d579-ec6e-4baa-bbc1-13803f29bf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5227787-0360-49a5-82e2-291f15ee2b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01af977b-9c22-4b2a-a6ce-48537bec838c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df033622-57ac-4de1-8010-6ffec3db6cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba9bac2-8570-494d-a2e0-b490b586a85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dbe18d-a784-4f04-b779-d3fe4cc635e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ac765160-9b6d-44ce-93fd-bd0a757b137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21da7a62-d7bc-42ff-ab71-22170c1ca8fb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6209d2ff-e86f-4ee4-9d60-528e60fbfc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71af627-d13d-49ce-8863-c8f3db572555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266f0d05-904e-43a2-90b5-3e7d231672a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6711072-ac89-4db5-9be6-df2556382385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a79be51-78c3-488e-81bf-2cdb617c4832",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2fd85f-5f58-48b8-ba53-7758a925ee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0fbb785-8e87-4cc0-8dd8-1dac37ad9aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e84a61e-d9b8-4e89-ad57-743f45f6c0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14621a69-8c3e-4305-a743-f8a8eb5abbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c2e7f4-b155-4054-85c5-2c7344d1aba5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ff46f2-bfaa-490c-9e69-e215d51449ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8a3619-a00c-4106-84b1-0e3731ccf38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf62733a-5033-4e4b-9ccb-45310f65fd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b46dc28-5561-4fd2-abe0-3f9b844f5d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fd8b57-904c-4c14-b0e1-0a5039e4b419",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aa3337-1788-427a-a286-95ebea892e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f41cd64-ebb6-4234-b266-647f0885264f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e2dd57-8f64-46dc-ba13-9521a45fb918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f01ba42e-2412-4d76-a4ef-ccadcc803928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ef3560-2ba3-40ae-aa3a-61303bc7a787",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5fc26a-b99a-42ed-a51a-3dd639797cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf5d6da-6b39-477f-9e0c-2fb31da66681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0f5f2a-ad11-43e4-ac5a-5144245092ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06170580-bcf1-422e-af40-73fec7ed6b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac776e9e-1c83-4d99-821c-d1acf4adcfcd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbcc292-5a93-4af0-b77b-bbab5f8fd520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06557806-03d6-4221-890e-594fe91d3402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b71daba-1d5a-4241-a792-3fa727c4ef82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "136341e3-b831-44ec-a368-4f68201082d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956f374d-6a11-48b4-9b75-9d56b31a6acd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4270eae4-7612-43b3-8893-03ddab4a8d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2102a255-b98b-4171-a75e-d172150c9275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc97023a-deba-49a2-9c16-e75c3a78caf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59e1e9f-607c-43ef-9e9a-ca91162929aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a0b1d4-4e52-4367-b988-54cb4b167585",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba8ee23-551c-4333-9115-fa16b34dcca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d04682-3a6d-47eb-b422-249217e9463c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc90941e-756d-47e1-9689-87681a658be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b17a039f-df97-4538-8857-92228ef4ce1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33a06cf-f0dc-4736-b2a7-847e01ef3667",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9704f4fd-ea30-4ed7-bf44-72dc5fad30f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f86893-579f-4715-aefb-546330eb1312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67633791-35d3-4cde-b6d7-a5d575f88cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69193a1-3e22-486d-bb8a-fcb2d173076b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacc5e72-7d19-46f8-b92e-98e78329cb79",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efadff4c-81f2-45b5-a2e6-193134154163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0af2380-9d45-49c8-b7fc-6b21dba46565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d089d385-a547-46a2-9c4e-a957ea2bca07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ee0ac0-863b-4c0b-a024-07cef6d36682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6fca00-9d3a-4160-871b-2af405400964",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1699aa98-f536-4e55-a789-d1ac9d8e120a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86c85dc-e5e0-4583-9ced-3e98ff3184a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f35732-885d-42ff-adea-5e5d8fe89647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cceb60b-e76b-4af0-b04f-a3a58511fa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2391bfe4-13b1-4dec-8f94-7eb626fe8237",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07c99f9-d487-4ed0-a625-5776a33e81ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ba209d-1450-476b-be40-0eed93029f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71614d7f-b213-4981-adc9-2512b3d67006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc004f62-d16b-434b-be98-6888c16c7f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5aec04-41ea-4912-954e-6f4efeda489e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6272cc-7291-473d-a854-f8b96e7b579b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6d9f2f-1eff-4401-9f5f-4f5fa94ca0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fc0e93-fbd4-46bc-8a15-09eb7886885f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb399d90-43f9-4dac-8fa4-25eb938eb192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d658a-d31f-49f1-891f-202b13035bfa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62147dce-addb-45f8-83ef-c666ec99dfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485c574e-13cf-4f64-b1c2-2a30e0230557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f0feeb-5840-4c13-b108-b26b644452ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f115461-9c75-4fc5-b048-ee1598076259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008319dd-e7d6-46c7-b828-524b320380b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67bfe4b-8910-4a5f-abf8-a427b8ae3e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45a9724-287c-4614-8939-5d79f0b33961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83470844-709e-4a08-91da-eec436840496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4144850-b584-4a31-a7d7-95fccdb5aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be82ad4-dca7-426f-8a80-c5521817fcf3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374dc917-4c35-419c-9a3e-5d1b611c1c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ec321c-e5e2-4184-8d00-0394de9e1615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4e07a6-23e9-43f9-a104-8655a7a1e56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c681acf-2ce7-44b4-a261-be9a62033aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c39996f-47c1-4e33-82ec-13db17bc6b44",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8486d3-b88e-46aa-9f9d-cca5bff0b17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad248718-1995-422e-b339-2c044a16e0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f401130c-3e4b-41a9-adbb-a1fa29f79be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "632755d2-faf1-4cfa-8c1d-c57b942d55fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0681c896-e83c-42c9-9919-ab67fb406642",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d57a0be-be3a-44a7-83d7-a18464771ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0321d4-ad59-4539-8c09-5cb7a35f0016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e2ff5e-3ebc-4704-9827-544530de3949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16023f82-94fb-40bd-82fa-f01a70d2837f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2b7e62-6510-4365-9ef6-5863c1e2ffbd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9c8ccb-504a-495a-a40a-cbbc9d4e1ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3222ff6b-4498-4076-ad19-5345209a7750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d52b25-349d-4055-b7e7-0a8055b84ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aad4287-f3a9-43e0-a014-41def9aa5dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4476dc7b-110e-4c5f-93e2-15167f9ca0ea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91660cc2-4abd-451d-91ab-97fb4d80ecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fefce0-a545-43a7-8adf-0c0ccb6cbc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4efb04-0638-4684-a7e6-a9cfe7e65160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b070501e-af7e-40c2-825c-0974d36664e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acc79bd-4bff-4401-b89f-1b855af3a812",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e100733e-4066-4234-a368-2f3f0f2847fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61e779a-52cc-4fe2-9db7-038578028891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1308b498-644e-44ae-a34b-6ceeea9cdc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87dbd56f-8638-417d-93d7-555cd8a05e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07e475f-c6f9-40f0-9383-b9f09f2e896a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3977fbd0-2da1-4411-b69f-b76c264bc79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9be6184-cd6b-4fb4-8375-cdbaa82c807d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdf7a8d-c453-43f5-970c-795b85fa9118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e13cef0-fc15-4819-9d79-9868dd23923d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9975725-ca2e-40b4-aa9a-849f829c4216",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f411bf-5c05-45f7-aece-a06c2bc91ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe2fdd9-5624-4c07-b88e-0b5240730ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265f52ef-9e13-45dd-af13-2b80fcca71cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c148ee-08e4-4a2a-a427-2020609096f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631b0470-06d8-4654-9712-bc382e545b94",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe5058-13d9-43e4-9c40-cc7804e6a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af752457-63c0-4325-9ec2-42cb3076e3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5fbc02-5708-4fcc-85ca-c20b7d16a198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3460e0b-5dda-4fe5-979d-f71a443215be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46666f02-5070-4b79-bad1-0f513dc2b54f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b8f062-1350-4c5a-95ff-ff9ce59d31ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6c8335-bb91-4bb0-89e4-7799c7d8a82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4b4083-1ea9-4c91-891f-6e192dc6503c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "515b2618-10e9-4039-b62b-61a4476f368a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a3b079-c2f9-4e6a-80a3-4b70156ca3b1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6794b70a-c203-44f7-ad4a-401406766552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c2571d-adef-45ba-b3a0-e0be7ef7d1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa00428-cb80-4592-9091-8e04eeb8a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b18764-2c44-4f63-8c52-543cc8300ccb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0db407ee-f280-4350-a562-9c75b3a81f52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a60ad487-da26-4511-aa9e-5f500fb63f0a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bdffb4-9d30-49ae-a9f9-f4365d8a51b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb6b59e-ceb0-435d-bfd1-b5866352df02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb875e55-2a1a-4505-b457-f0298d6c7868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d8ea3ee-f23b-4155-965a-6a3ead479913"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbe5faf2-494e-4f47-8f32-45604eb41315",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e63773-7d01-455d-a415-21be4161e4d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e64f994-31da-49e5-a072-1fa449392695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74e84335-8bdf-44dd-ae00-6feeea174ede"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "396ef7a0-3e23-4b1e-b800-34fcbe6f82c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c31b35b4-6324-4e13-983e-fddcfb8ac3a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "600c9da4-617b-445c-a584-a60bf6e48c5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afd11121-f8de-4a77-991c-7c6a5817d264"
            }
          }
        ]
      },
      {
        "id": "832264a0-5e19-43b0-bd0e-b056fb5694a8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "03c5cd72-9d56-4f97-abef-7ddab089d96d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a99b1a58-b0e8-4add-86aa-5b7401f01e89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a513592c-7776-4c00-879d-f3b9d061bbf5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e664a3f-85d5-4940-b45c-7eceaad656f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b29321-5785-4b97-8c00-abae8f9579a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d77ddb4-9811-4697-86ab-7af668bf8f95",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34c9d7e-006d-48b9-8866-880c1d0d2b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b4ded9-73b5-468c-8855-c23067991b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a49b330-1f7d-45e8-b9b2-d6ecc9ea6adb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee67444c-8db5-427d-87e6-86f2ebde3a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2194fcff-c519-4290-87d6-9819a5661640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98530bce-0e19-4526-97e4-917591f1591e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07159aa-77b5-40cf-93a7-3fbadbccf1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2390d477-7467-4974-acbc-d2f7d01de328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aace7050-a0d4-454e-8a87-d3594eae9e4a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081821ce-4122-43e9-b12d-8245cd45f70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32eeafb5-4930-426b-bd92-e992ad945fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dff7bf-9659-47a0-80ab-b4258de4e281",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9446ce-abfd-4029-90bd-e5fd0230a735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4f87ee-ff69-4c90-8137-0eb9675e3fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89d7362-4f12-4143-bd73-30a34d9368f6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e77b30-9e9b-496e-a82f-e8e5e65c1cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c6775c-f0ac-4454-8f6a-425014fff17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8765ae-0e48-4a2e-8eb7-1d696fa54ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9938274-fa09-4784-a3c2-876ff143565e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae5c310-0975-4f47-85b2-d74448e923dd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9249eee2-10d3-41d9-aeec-daefea888bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00b1a48a-7592-47eb-acdc-1f1e363a0307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7530587e-ca69-492b-98e6-881fb9e5fd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aef4a4-820f-4b82-8156-faf1fcc2e32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1862b0e0-7f61-4221-9a90-4a830ad1b1e8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d45a9d-fef4-427e-aac3-c6e6a79cad28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "489290a8-bb23-4851-a086-b0d484e72c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12314fea-4e08-4767-a11e-9895ac95080a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24adf202-ceb3-4b0f-857d-a36fc880d1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee6d2fb-1046-4c96-b6b7-aaccfa00e76e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a644ad-dd2a-4a9e-a988-9f234aa58d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17375076-902b-4fdb-9707-09ba228057b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f34c203-2ae2-4d0d-b59c-321e874913ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f246553-5a47-44ec-ae4b-75c646d04ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82b6d03-0a5e-4e85-b47d-64c9666cb0b1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46805711-d838-4e1c-a25c-a427d224728e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7faed9-cabe-45b5-a2ea-d44edbcdc10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8703b08b-e042-4c5f-9f4b-48e5de32d711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88dd52c9-9983-4b59-9173-5b45ddfaa054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f5c7f9-4fab-4917-b21c-cbe6f3ee2a75",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bb1437-b65a-4fdd-8779-ccb8edbe6584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30494a83-c215-45b6-b881-3a4f92e47890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4367cd7-1b59-41b1-8ba0-d52b306f3e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bb9ed7-9b9c-45b4-95d5-af4e00681b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616a1248-444b-4d92-ac82-0d9993561f65",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6a88fa-39b7-4c99-b4fa-dd185e7f23b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96ef2bbf-b74e-45b1-b57d-7f4732cee11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc56ad71-ea01-44e2-95b9-6ee5403774b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e730e98a-49c6-4890-b445-c94cac1b951c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02737f14-04b0-49fd-9368-6bcc30f094e6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328eb0f8-fb08-47c2-8bdc-87ac9b388683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68dae763-7fdb-4806-8715-b0ff4e329376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919bf493-e68a-4024-8a55-7dbbd5536833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7320414f-2937-41a8-9f5b-4897e86b97a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487734cd-2250-42e6-a9e5-afaf0ff1c2c1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7976c784-1aed-4842-93b2-83bcc528a664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c408aa5-ecba-4c57-8c0c-726f86490715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f16398-7b56-446d-a912-ffbfb8e5621d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe1641b-e2ec-4e20-8587-c8e4e47fba08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e98d285-a1df-4426-a48e-8354ff0fe928",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48095d90-5ccf-4e91-83a8-504fb45ef470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b20165b-afb3-425f-ac38-2ee26d31f415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8d06a6-9b22-4fb2-b9fe-da693876f789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afc3e0c-b76e-465e-a335-64bb236f69b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329719dd-109d-4b9e-93ae-1d0357a28c84",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a1016f-0cb7-46e1-95e8-7628102fb945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7947f0-81a5-4d14-afce-09d38f0904af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab50a13-baf0-4701-a9ca-4a92f5da082a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9dd8ca-c6f7-4f6c-bf80-d4441a768d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89002e76-e4ea-43d4-95b3-d1ef69b5c9e2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80b74eb-f7d6-4279-b02b-7e488a5f831c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd2d014-8e2f-44b9-9d34-63bb97a09241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec7379b-1e0f-40d4-8515-6db3cb19d014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0ea041-ab54-4dfb-aeed-33cd1bfa050c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741bda8a-a1de-4dde-8541-d08bdbb7031b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007daee2-e7f0-43d4-930a-8c40cd038eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ee8414-67af-45dd-808e-b6be5e8edbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7168c9-4a6f-47d0-9903-c6d7cc011c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d45e5cd-5b79-47f5-b233-68fd82bed443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26da6e67-758b-4268-bbb9-73c010c8cdad",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8027c24-63a8-457e-aff6-2eeb554c80d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d249f7-5d10-48b3-a46e-62c4688715a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b71c324-eb19-406a-887d-c17c8f7ea28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed270c51-59b0-47a2-bc90-80f600a190c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86914777-c878-418c-bb5c-ae36d0f3d66c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f218d45-07e1-4150-85e0-fede86f6aecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12054e3c-ae17-4d22-900c-1c9ae9c73f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af171ebf-7f21-4911-9b65-36ca4e4ab4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38ca44c-9f08-4947-a5bf-2d7d8364227a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef2f662-7430-46ed-be72-1b638fdcb85f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda29618-46c1-4646-9d3d-4c730cf3de40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966c15ee-e31c-4635-b515-8fcbbbc6d685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b84af7-8936-4f57-a118-fe95757571f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd094b3-5171-4379-aa25-2b74e9302ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a741bed-26ab-4bbb-964c-3ccf2d1f6716",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4200ea0-bdc3-491f-8ca9-b4c2c13f0d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c5d50d-67b8-40ff-9b16-ebc9651ca577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb31576-cd82-468f-934f-510e5f5fe820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975c45dc-fc06-44d1-b22d-e62d2c2972e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115289f2-1199-401d-83e7-d739c0093e25",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f464f96d-91cf-49ee-a6ce-e4c0df57c355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0899253e-b706-40d6-b6a0-269bd8448fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712daff5-85da-42b1-ab30-2f41eace1141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0081dd47-53d3-44ec-8530-032b7b7652ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24c44bd-ed5d-477c-9676-f6d3103156b1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ca6d1c-546e-4e93-a62c-3578376f9750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b556cd-51dc-4796-bf08-0c24e0cf4e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7a22fe-99b6-4ad6-ad3b-01b98cdc8b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadf9e11-0970-44f0-8383-ecdfc853f916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e789e0-a5f2-4604-ac68-99e4bd5fc7f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcb87cc-384e-4e29-868c-43e62c7d5817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9ebd2d-a5af-4917-a5de-94ca26312ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14a12de-1b26-445e-81a5-7ee7174d82fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05402a2-010f-4ded-b2e6-3c51e45d6d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb27fa6f-1b87-4b0f-af14-f6d132a9a734",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449469d3-ff14-4583-bda6-d78501142d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de3f809-d467-40a6-916d-9f03e2867f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c917c17-e529-478b-9c05-3f7b2f14e0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0980ff11-56f6-406e-ad29-fba50eb961cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71512382-4a06-40a1-8132-6b6497ac1aa0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c24c93-f6eb-4107-bd5b-8b962d8a696f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a3449d-7569-4904-8e6e-800ebc51d4b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843931e2-d635-494c-82ec-6755828940ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908bd2c9-eaa5-4ddf-9951-f6820fbaaafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582f9778-48be-4bab-895a-472035207ea8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5e733b-46cd-4cde-a648-e801eb6685fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bad30b7-f952-4eda-8fb4-653cda3395a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c237a984-e9ce-48f4-9eba-5f7b1e50964a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90a054f-c128-4175-a704-9bc3222613ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eb01e4-9f37-4eb4-b75f-e60f72a5d06f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2594a8e3-e6bc-42a9-a91d-a256b4b775e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42d48e21-1254-4bcf-91e5-d83189cf415c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6575f7-0918-41a8-856e-be4a305d8698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c74331d-64e3-46fe-864c-a1491aad3bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50467da2-135c-40e2-b3fa-a3813dc47edd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4026f719-7932-4724-9370-f69b609128dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51223d8d-1b00-4437-9486-7b8171d28e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c1fd06-a29a-4830-821f-cac9820bc69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34f616a-f5a0-4b9f-a09d-308224efb7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e54efe3-23f9-49d3-a740-89f945ccfc2f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e29f82-2b38-4e4c-9e7e-29103453ca12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ddd89c4-fa5f-4cb6-b72c-fc6b66c6896b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51cf23f-09b9-48ba-b9f7-4c5186f85637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb38b32-9884-4018-aecd-582ff3195d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3eee87-defd-4622-ba18-b1c01f67a619",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1942691-4648-441d-be1a-666335a1d497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "229ca669-835d-4fd1-82c5-23746243ca02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffa9b36-9a7a-4ee1-aeb3-82a9848a63c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c119d51e-ed9d-43f9-8249-f28311827d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1e518b-58f8-46d6-9666-9ecb61e41498",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91a833e-fa1b-444a-af90-d4624eab9d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0056e867-5da8-440c-b93e-1061d131b164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9189e4-113c-468e-a245-3d369506766e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d457b1a-15fb-40c7-b342-fac69188a7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d42a30-2b06-4ea2-bb82-aca1323e8af0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cac577-b575-4f3d-809c-62c3b52c7bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934b0445-64bc-4622-b5a7-556a33fdfff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9273a4-7e96-45a7-9b00-93f47b466e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da7bcca-331f-47c9-b0b0-4b71d0851fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774c2320-e11e-4eea-964d-ac8bc3f834fb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80813a07-4f4f-4d72-9a2f-e14b754711ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9867ca92-26b0-4e17-8a0f-40e350ab5751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80384bfd-0fc6-48d3-9f66-29075a655e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22294af4-a104-4ae2-a983-1e1ac2f4d82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae85182-6608-4271-9d24-4f4d9f4ef74b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b90abb-45f7-4248-8624-0e3729b6043e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daac2135-a2e8-4b40-8d71-db5d79689852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5306b5-5dca-41f2-b6d8-98650d6b75a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14674a09-2cda-4ab9-9758-fa7266a24bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd09ea6-b7c4-44f2-b31a-361c595d51d7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe156c8-b8ef-4deb-babf-6012fdd8da5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe31983-c955-4638-a15a-719499d54672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b11a5e-1eaf-411f-a935-9f7f193a9196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d36ec29-2eb8-4569-ab43-42f065b21747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bb197b-0174-4765-b956-bdf7ab8fc2aa",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12b846f-8b55-4d42-a847-14e6907e0f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1e778c-60c5-4281-860c-b67210069eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6d869f-d545-4933-9ee5-ca2346997c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379ef149-c3f6-4db8-87dc-9079c4ffc27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3a3de9-e580-43c5-bce4-44be0fe1cc92",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6ac15c-925b-427f-bccf-550a61da5891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dac6b75-c06e-4493-82f8-7fd092449620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5326eb9-da2a-43ed-bbb0-2855f3cc56dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36de9701-ba58-4ec1-878a-eac30b0bf85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed7fea5-d3eb-42ab-b683-0866a860400c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70802c8c-cc87-467f-b629-dbde46912ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af6179a-113c-40bb-8ebe-7385ea038df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8ff052-fd6d-4453-a49a-81ced33b2df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1720cc0d-c240-4edb-9470-1496530779c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e17210-8077-4def-90b5-0478ea86652a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1e3a61-475f-446f-8c1a-de8db4ba9234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a7897a-62b3-48dc-bef0-0b5e4731fe94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb11be77-bdc7-4c8e-846a-6bcb73ea0af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3951bb9e-694f-4ba3-b50a-2248998a2294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5422a21-3926-4c3a-ba84-4be6dfbd124c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fe9f3d-8029-4df0-8cc9-98fbf5af6a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd5ed99-83fb-4502-840d-b7decef24f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fef036b-de4c-4df3-a941-ae90a90edd91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58953807-36ab-40a5-b304-ffaa77a11086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea3e291-b2ab-48ef-943f-48acccf31507",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366691e3-3f19-46ac-af61-f38e36915926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0731363-cb6e-457e-8fc8-bd0be27de0ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99971ac-40c1-4d77-9bf0-5fe656f36537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90831c4c-4497-48ee-a93c-d0a811325e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86c15d6-63a1-469e-b3e0-6cb2181fc616",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d3a729-53f2-4a5f-a9dd-c5cfac753347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2387f71-f686-456c-b75b-d6e205771325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54de1f03-a615-40b9-9468-c2e73c9bb81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3a5ea2-52be-49ce-b830-fd186f65a0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43b5bce-b8f6-4db0-b56b-d179d3c2cf46",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a1ac2f-0214-48e9-85fa-668d6be6759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724625bb-b9e4-44b7-9cdd-2afd835aaa5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d174697-0fec-478a-8178-8e1a9b6e9c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917f767c-f13f-4d2c-81a5-183d08bf434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fc2699-814c-40ac-83c3-fd1bdfd4d161",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e9054a-f321-4da3-a598-82e7c3679c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496b2f8e-a871-4c9f-82b8-fe5a9335e481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e5cbc2-1902-4d52-85b8-de55a5bd51e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f63dff-85cc-4c3c-889c-5b9ba0db3a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62275d70-bf4f-4161-b810-aa7a0bf09005",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5d3b39-5c9c-4526-8bcc-9d2a46fb84d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711bea86-9f5e-4a17-907c-e95bfbb74fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c4ac39-0a19-4d9e-aad3-fdbb1c436248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9bfcd1-e7b4-45ac-a379-a87e98f57c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2947a4-92b7-45b0-b594-33e437e4d675",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882145fe-3bc1-42df-b7a9-83c7045e09ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266977f0-0958-481a-b1ac-92269756c975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d759f4-3dbd-4dd4-b070-95b062732851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0799c2aa-a0b0-42eb-84b5-6dbe3e5e289f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f3ff52-767d-49ec-8ab5-db8eb6408457",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb29431-53cc-422f-8f40-97191108218a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3c8029-b191-474c-b973-4c99cbf57e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6999e7ad-c403-4f43-8282-0d5a870993d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b95876-a4ce-4b1c-85af-5787f5c5ecd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ed71c3-502a-4f06-9cb4-08094a94b020",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80610d6e-691e-4a69-bb30-c87f075fe2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328374b6-4bc3-493e-ba32-127fd9c994b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32151636-3ffb-438d-95d3-473796f7847a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00059fa-ca8c-4e74-9b34-67aa4f9aad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db82304-043f-4c25-bdb2-46656d9df59d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3eb463-4bd8-4a10-ac7d-545d0f281a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbef2bbb-9ddc-4394-9eb4-f81492f4e6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52eedc55-75c1-4deb-a8d3-1dec110ce763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f52ca14-39ff-430c-8cb5-edd1f43f9f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0280e89-c518-43b9-831c-5426ba014dca",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d378cc-fd9b-42d3-a255-97f65cc49003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538fdf76-9271-40a1-a97b-f116ff1c37b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ecde89-0e88-4a45-922b-f9faf07b934a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d91ca5-83aa-4f7b-9b58-70dbe9c829e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776f7e77-9a01-4208-9f26-e4bf3661443b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3930b7-e4de-4334-9d81-dd6f441b7dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a0ade2-d521-4d6b-986d-f88c2e4cf472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10db7b3c-9fc9-4879-844d-fb0cf4b6e439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5bc5dc-8991-457e-a6ab-35530b9e8224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb70212b-717d-4edd-907f-a22a8a7616d7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca93b6d-2428-48ab-9cf8-31f28e0efe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e79d05-9eb0-4b8d-84fa-292cd4f907c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b7b7af-8ea3-413f-b825-c390ab0f3cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d815662f-b003-4a05-864f-56f99f6dd126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2004e651-5d7d-48b2-937f-205f589f5f87",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe644f09-38cb-45e2-b1fc-10610e4d0914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddcdc25-bc2b-4d87-8dbc-abb8aab02ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce8e17d-ceb0-468a-aea7-9c5eead935ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4add8443-97be-4519-99ff-ad1501bbd9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2428867-c3a8-4bcd-bc06-b26271ac8134",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a63406b-e248-4ed5-8799-a61b8cd4fa10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664e7310-bead-45e0-8d4b-6e461c3ea979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c653eb3-09b2-4bb6-b92c-1428f8dd46c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f6c0b2-76de-47e3-b1b7-d2197cff89de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988f5134-8161-4c11-a29c-d455fa1b68dc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128e0237-f896-41c4-b52f-39de25ea24d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72ba71d-3aa3-4403-a181-247de0db87c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a221d0a-36d9-4717-bb60-91a98c098b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08c46cb-fc66-44a3-ac23-acf358db4100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0793efd8-5070-4788-a99c-cce07184e3cc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30039a80-f39a-44e3-9977-4b242cc32404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c000fd83-0238-4e9c-bf46-7665aa92e737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cf4d4b-4a57-4d67-9c9a-84731f41e47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2c9a53-8ee3-4be2-8980-c3e2f1cdbbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429d680c-3821-42b2-bd30-108e20fce054",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11a2e16-930e-4bfe-bb44-49b8ef40b1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013380f0-165b-45c8-920e-80af4aa36ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587c705e-3c20-449c-bcc8-94daa7842c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19bc123-9fc0-4a20-859b-4083422c4ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82b279f-9a72-4258-b60b-be4c5521ce5f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e69176-3835-4d55-9e66-ef717dea6d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbe4a80-2aba-44e0-af00-d64802da8d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba75943-af13-4824-ae28-47e17f9e0ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899aa0cc-156b-4e0d-9b71-4ddb458aa9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd89245c-d522-4217-ab02-10fd3e854387",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae8de0c-65bd-4da8-a8b9-4917fb3de858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58181276-2dc3-4294-83ee-d7d5570b0d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced65f24-48c6-4666-bd33-547e669f6cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba9c98c-9082-4ce8-8189-97a6cc97d240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc4d7fe-8728-41f6-bb4b-f2b4d242ce86",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3a653b-7285-47cf-ac86-bf4253358e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cadad1-594b-4cc6-b2f6-a1b8eace858c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8967002b-b4bb-491c-a7cc-92dde4a1edd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e7c4b7-61ca-4e2e-bab9-de6c32faba56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a43a73-7ada-4ffc-853f-e6d5d48d66fb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9544d63-e0e6-4429-af84-fdf5b2477d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "302d3542-d17c-4468-ac66-dc4e6f2448a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8190af0-6ced-439c-b73a-f1a9a76b82ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4ff65b-6a84-4698-ae23-0dffef490458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1127f706-e7c0-49cb-98b4-5cce9438282a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6705bb2-921c-4300-b5a5-25b58b0608f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08819fa9-c90a-4b9f-af08-b67e0bca48af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3a02da-f1b2-4b0c-b146-fd5f3072888a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc5247d-00c2-4ae7-9a03-9857b48a5099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faef039-1889-4871-bb3c-ab9c9e196516",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb43d4-d7e4-4572-bb7e-fd9108be5e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bde6400-5606-492d-b99a-bd729e562caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e26692-b678-411c-9fe3-aa466d686819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6478221f-6484-4f75-a326-ba9c7522a8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b04d71-0467-4a2b-a0ca-44ac01b23b43",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04e8d9e-8152-4437-b7af-44c18a047d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb92aca-a6b2-4072-8991-182f266af403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d48aa1-23d0-44e4-bc46-5a297e640533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb401365-1a7f-4b09-9756-c22e3acd999d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4654bcf0-a782-4d7e-9986-5c30786a25b2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760108c2-c2e9-45a5-a70c-192146036293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5de58f-3ce1-4b7e-a84f-e63a07dd428f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7c612f-83b0-45d7-bfe5-660d7f004f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d043c4-70fa-481d-8daa-2c6f317d724e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7029e9-173f-4522-9e36-814ac1474779",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94773623-5ec0-4069-ba86-eafe148d679a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "737dfdf8-5eab-47a3-a740-e94ebde57704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0201e9fa-4cb2-4769-8ebc-a83a1bc6df3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95149774-73a8-407d-a953-7268873836b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892f3dee-301b-410f-a4f6-6fc303eca296",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df19ccc-1deb-4e31-9409-7566718fcf9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e62a328-84b5-42b7-9557-7f17bf6c3ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac95abb7-282c-43e6-912f-98b59588b2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ff5e59-0f4a-4cc8-92c6-dd9f2c5aef46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54c217f-fa14-4ae4-94fa-4d1333256b37",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf36036-c2a8-48d4-994b-a0ab240d35fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc21e370-8dc1-4cfa-bd52-e7ec34444b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc06f28-fccd-4f74-bbd0-4152b810f940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481c28b5-0ae7-4e1c-b918-463a6ae4dd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61368b7b-fabe-4224-8b1a-3fdb5aa5b0d7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225fcfbf-13b6-4207-8fa7-286bcdb11723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994fc337-fae4-4ffc-adbe-997378b762d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b265a2-c8fc-4fe3-b5a1-2799a5499600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc6f517-52d1-4fea-8be4-e2f074725796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec5ae32-e646-44e6-8ca9-8716ef82bfab",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10b1da7-7b21-43da-991c-58f2d40c2ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a2f0d7-a6a6-4146-8864-a8c1cd179c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e882ab-d82c-4b0c-b760-a929726c26a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cede15-66a6-44d3-9da9-e9c6b43a1d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30de1f93-7731-4d4b-a897-55c0b8e51abd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfe8efc-fe10-4017-bfe0-92c5b1f6933d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f275aa4a-beb4-433e-b3d0-866bf68e21f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73c3930-9647-4480-9f6d-e9c0be20463a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447d1d18-fed4-4cd9-9468-61a374be573b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a51f06-47a3-48a5-ba45-030de9b133e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efed61a4-d48f-4e9a-b768-f4305404c0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "403fd079-23d2-4f72-b8b9-ebb191e22c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac82d83-2d42-4b8f-b30c-5bd6df3aebc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cbd2fa8-653a-4a97-a956-678bf5e45022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8367bafa-c298-4d55-be90-7be8a4f5d7ef",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8a78a3-4ced-4e99-968e-b13a3a3b5b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d4521f3-b37d-41dc-8e58-797ddbd8be4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ccc6e2-64a2-4800-973f-abcf7f1e36e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf95f3bd-ed60-4ec0-ac5f-7c1ba89cb75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a012c2-267e-4774-ae82-1faf9bb84ec5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826ad542-85e0-466b-ab41-59ead3457c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f15460e-2d94-449d-8e43-45b528865232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b09975c-afb0-4d79-bf10-22fa77fccb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75edede2-bf00-48ed-8b3c-e2195d5e4d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f90d75-3298-4eb2-9b3a-078670ba67f8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c886f5-1ac3-4cff-a132-4c9c38270898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757e5d6a-b3fc-4f1f-ad79-6d36ce069878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90725f6a-0fcd-40c1-ad79-5a8069808d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd0ae66-d19b-4ad5-b7bb-29ddba10f5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a14f1d6-a65e-4109-bc1f-b9237890cc28",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe71495-ae1c-42b4-b9d4-5612b17aa7dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e0218e-cb03-4718-a8c3-f15a8af80913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bbcc86-e146-4491-9244-6e828371d4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67dffa3d-98e9-4c44-b979-9138c9dc8b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110afe11-5e83-4181-abeb-4b85a53a7bf7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea062d3-be91-45b5-91c1-45a19bd893ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9653fb-8d22-4cd5-b95d-ca0fff101ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c64617-aecb-4414-8e4c-1050c73bfb56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e674c8fb-c4c1-4fb6-964a-091099d75f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1fcbdc-04df-466f-aaeb-4eb62da00a17",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4af9505-2ab0-46cf-b466-b915ecd4f498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f746bd-1bfb-4622-abae-3305369770f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ada08f0-2884-415b-bb0a-c1f8eeb81d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96065739-ab0c-4f11-a501-139bf56e35c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652f11ab-38f3-427b-811a-0a1c464a7622",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27938be4-1af2-47f0-98eb-58da4114ab27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2362a44f-4251-4da9-b9c2-196024f66d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "314bc51a-c6e5-40e3-a9b3-ba416b181cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5474269f-84e0-4695-a859-c9b00999509c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f65420-b6c6-4996-b981-52475efbafb6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065780ab-95da-41c6-8970-cdf74b32d0af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8587f85-3a49-4306-a549-1a149f9d8a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd44821f-ec43-4a8d-8fc1-ffca625cd542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9127a3a-d147-45c4-8566-37a412eb8a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1175d07e-892f-4b83-92f1-1627ecc4489f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e39782b-dff3-40ed-969b-0ef5efc323da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a28d4d0c-7b45-4421-97cc-be83589856af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e92511-43ce-4a28-a64b-c288e6c2294f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116797b9-4498-444c-a0fe-90a82eb1d8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b44a8c5-8b6d-448a-89c3-4b16260e2a67",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c916d6e4-684d-48e5-84aa-56115cdccc48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b70334dd-a955-41a1-9899-596e9d955683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3084c4b-1c69-4a61-8d2d-26481be9a12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2af45a-c193-46bb-b42e-b7df00cbdcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317eee3d-de1c-4c51-9e70-e1c5603f4a7c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4074a4-0ca5-4bdb-af83-2b68b2c4989b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39da4b6a-8505-4175-9f7d-ab4b924bb42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ad8b0a-6f32-45dd-9f23-ec0d3999ced5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a5a7df-0cb4-4b14-a4e9-215ccc0b834b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cd7abf-444a-4de7-9128-2f3abf1bab7b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8789816-744a-4d58-8aab-0f71cfe96726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c799b0-4ce0-4bb2-ba4a-521858b30628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0215df63-cba4-4e4a-a972-ed3ca647e23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7ef9fe-7f80-4fb3-9254-e9d6860abbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5774361b-55ad-4c78-ac3d-97a6faf1da54",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7139317b-01b3-44e7-928b-4b79b1c57ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10bb3566-16b1-4f7e-a61e-8312991fd15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1963539-be88-4144-9b0c-00166b33e22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146073e3-503a-4171-b485-9c02353119ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b412eeb4-8c23-4ce5-8623-5fb72fb960d5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2174847c-ef68-4204-8cc9-cf199d1de977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61566e52-de94-49e6-88d5-cb6fff5b6b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6f2850-0f37-4e21-8f51-246fb7d95c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63446b4c-1a04-40fc-a6c6-4816124b35a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb4d4de-a5ed-454b-a330-fff7a3d9d00d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c34b31-051f-44bb-a03b-43a7e4759341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4be121-933c-4e56-9444-2241f90e789b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c032b5-6a2d-4172-8199-9663b7495a75",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5efe91-283f-470a-a510-ee07ae881073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8633574f-3d4e-4bb8-996f-3b63a24f6052",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e657cb-f704-4fbc-a578-6be4a53eb6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f03ff8ba-133a-40c7-ae58-7df00f3de76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bb5057-1c11-4531-a759-b28e683eaa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52be1246-6d6f-4c41-8293-f95cb261941e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42984c75-d618-4cce-be37-7f60fe770de5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb0f641-ee34-43de-8421-b74e6dce5cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fdfe06a-b411-47c5-ad3a-87e378353b67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f061b8f0-b01d-4c65-a6a1-edf1ee401479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc97ecb-63dd-4bf8-a879-d33ad733437c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cf8000-b518-4c9c-ab9b-74e21c626129",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8982f6-8c66-4813-b272-0fcf42e62f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf369b04-8c68-44a9-94de-a0677e9fa5c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112bcc5b-b63a-4e09-89ef-f5bd47167d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1e5541-2347-45e6-874e-cef7570128da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db27838-2feb-4c35-a02c-0101813e09ca",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6424fde-9023-49ea-a6a9-72b185bb98d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ee8382-03af-426b-b901-11954370a5ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b3b0e8-e4c2-4ac1-abaf-62e5d4bc2d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d2539d-d47d-44f8-ae31-fd38149c0da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071dcacf-c21f-4746-9e4b-e67fb14c7e4f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db4254b-0ff1-437e-a543-6d884dc2444e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61db309a-4687-45c7-ae0a-965779087da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ee024f-c73f-4b71-9af9-961cd9835c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185ff875-b822-43e8-a6ef-1d287c9ec7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a775d963-9fcc-4c94-a87f-4a24be3d3a99",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b3ed16-78d8-41e2-9fc3-ca5b5abdbd6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2baf7bfa-ae20-471f-9e72-21b4ccf9082b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30891dc-55b1-4e9e-a20c-b459bf565aa8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e4e94d-dd4c-4ef6-86a2-e7da8d358ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa00dee5-d217-4199-9793-c3c5de3c3d83",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c18dae-38e7-4ef6-8fff-6c6e7ffb8f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e524258-fcf0-47b1-94bf-74ebbd920427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb707e4-3871-4aad-8344-97484ea2c6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d17e4f-6825-44b5-acf3-84fc75158d50"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "398f4320-1fc9-4c94-854c-49b0873edf02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c997b6f-00a5-47c2-8fac-ff4d49ece136"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7a2e442-ee7a-4966-9495-403ae033058f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e32e6821-ba7c-4660-9c0d-430889c87dd7"
                    }
                  }
                ]
              },
              {
                "id": "d61e9380-dd44-47f7-9f04-fe98ae82177c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43072890-e2eb-44e7-a51e-fe594c2add48",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f54ee0e-4c61-4261-9adb-1512470003c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9decd3d2-2063-452d-a25f-7b1121aaba28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e582cc30-0a7e-4f2d-a05f-7b6b41625ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "901448bf-8c10-4046-ba65-bed8cfc82b53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6d9b235-9621-43c1-856a-cbcd8751b08d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d367aed-4233-4e1e-90c7-3679302c1ceb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a55c4c2-428a-4fbf-8cfd-2b70ead27137",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc67a31e-b66f-49ee-a1df-79decb2230ba"
                    }
                  }
                ]
              },
              {
                "id": "3052cfb4-da7c-44ec-a428-4af3cc383fa6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f9dcb6f6-bdc9-4bcf-adf5-d29d86f07ad6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b66e86-65d6-4201-b57d-c8393337cab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "721fc96d-5163-4ffb-a67f-8522d40af0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfc05ed-e866-4966-80a3-8a810836394c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb687ed-0bfc-4b3c-b9ce-b5104825a2fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1acc153e-d728-48eb-965a-baeccbafa4de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e346ad2a-71cc-4538-87c7-8acecbdcd2d4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2069623c-1ecb-4173-985f-68b50a69a89f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6d8c80b2-d5ee-401b-a43d-2956506e7e90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78fd1a93-525e-4fad-9ba6-50117f2ce531",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2074f56a-b701-4029-a0aa-bc939d6fe9e8"
                    }
                  }
                ]
              },
              {
                "id": "55e9ff53-127d-4f9d-958a-8f26e7e77b68",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef73b567-7371-4ba2-a733-8eaf8ee26716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2ceded5a-5a48-4c7a-9e4c-f9443c4f4de6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eba8065-1059-49cf-9f87-a13eda5fab2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "144dc5fa-e487-4bb0-a609-bb7572544966"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "445bd53c-5d5f-4fd8-8d67-e90c67c8ac2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "54679c9c-0874-44b0-a9d8-462ede4cd190"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c2f047d-eb67-43c2-8f84-41e8109fd0c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5da09f2a-21e4-4d49-8269-c9fd11e7f20e"
            }
          }
        ]
      },
      {
        "id": "59efafcd-4598-4c42-9dfc-28bf4757e727",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5ddbedb5-c5ca-4040-bfdf-c1d749dc7971",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e19c1f0d-072e-47f3-8091-1c1d21f1cd56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d671178-442c-40ad-86b5-cb5dc24df81a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82c3d94-6cc0-425a-934e-07009e65a083",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7f96cc4e-f292-46b7-a234-ac4050c9401c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2285d025-1cba-49c9-828a-da5d7c169610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ffe25dc-7f0f-4ada-a58c-4d5e46fa1bd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3c2eeca-8916-4048-a0a5-ef9205fbfbbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b61f3abb-71b9-4aee-8715-46ec9d269b1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e3994d9-1d90-4ab7-a826-5196031d988d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d4990c-3db1-4086-bce4-ab6ac450264c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bc05ca7-0f86-4224-bc10-90384983a8d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6fcc9f6f-b702-413b-a288-afd1d31d432e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84fe737c-54a6-4764-a788-bd9992dd9502",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc6a3736-1ba4-4f30-8ba6-050b29ccbf30"
            }
          }
        ]
      },
      {
        "id": "5f234a49-9908-4e89-996d-a46c0352c89a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2426e5c7-6d88-4c03-a35e-cad3e29ffa4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37d283c3-a224-47bd-874c-dc19bdc7f071",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b90b75e8-2b15-45aa-b1dd-27a72334217c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66dbe61d-a37b-4812-8775-d8cfd0242ecc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2a7da3b-6842-45f5-955c-80cb5fa8f613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3327f4b-39f1-4853-bea8-42031aa4e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c90237eb-7b9d-4f89-ae8d-2ad00ac87a7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "260f0ea2-232f-4cb0-8798-d8d17ef56f2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54d3a943-c4d3-4fb2-976c-ecd17885921a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd0b156c-5a03-4c08-80f4-c82df158a43f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6102ec03-46ec-40dc-bed7-56fe8026e26f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce078211-f59b-4cd2-b773-ca0a3d4bbfc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f14980b-e74f-4466-808f-d9e024185ff2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cafc17a-fa64-4528-a8c2-fc17cc03c54a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a37856cb-8bd1-4c67-9f5b-c5ebe9f95155"
            }
          }
        ]
      },
      {
        "id": "7babcf9e-1ec0-46d6-98a9-2338e8f7b982",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f5617cb3-aa9e-463e-8eb3-1fb9eae7bfd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db2f8e11-719d-41a7-9210-0b9dbee5431c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2180181-ee9e-4ecf-94a8-fb0f579cd8d1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bb578f-90d9-4fb8-8863-2d2e1a16e6fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce635072-6d5b-43a5-a122-62418fe02c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c618f5d-f3e0-41b5-90a0-eff2c9b42d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8278b920-c447-4697-9f33-be4bccbe87e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69236461-2577-47f8-bfc0-ca4a4d00ad0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "570dedcf-ca77-462c-bc59-02a61a16ba73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dcd5605-9e8b-47a6-95ab-1afae77dfd57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "665728ec-9de4-4b5a-bc97-4c028d15c056"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1619f66e-545b-4b20-a3f7-e84a3e1f8b16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "37c252e9-f363-4bfd-8458-8a6f35ab2479"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43ce127e-23ff-4f18-93bf-67b6955231f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcd7a537-5898-4338-afeb-fe88107a631f"
            }
          }
        ]
      },
      {
        "id": "1d0efada-eb42-4bcc-8f33-0be5eb5d5b28",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50c202fa-673b-45f6-bc05-d51336bccd33",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45410fcd-7732-44b2-961e-3568b3143df5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2dc2b324-32ce-4be1-9097-f32387e739d0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ee71c7e-25e0-423a-891a-d23cb6252ceb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9a9bd2e-ec4d-402b-a812-459eaa98ca4b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.67368421052626,
      "responseMin": 5,
      "responseMax": 914,
      "responseSd": 93.51376017767099,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708734730204,
      "completed": 1708734774547
    },
    "executions": [
      {
        "id": "a87cc480-226e-4335-ae7e-0764f5f11670",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f6df4699-d2e0-4f4c-a9d9-0d051c21e811",
          "httpRequestId": "7eb6f50f-d61c-4fa2-8b80-591cfc8f0fce"
        },
        "item": {
          "id": "a87cc480-226e-4335-ae7e-0764f5f11670",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1431ed75-7aa3-45c6-8d0b-21779b7089d5",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "fe66c1ea-d2ad-4650-bdd4-c95cb7777bb9",
        "cursor": {
          "ref": "608bc12e-3567-4b42-8d12-4877b9c00366",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "40e5e341-9d59-4f1d-895b-53e9774717fb"
        },
        "item": {
          "id": "fe66c1ea-d2ad-4650-bdd4-c95cb7777bb9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1fcc5cb3-f55a-463b-9c2b-d09cb1ee83c1",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "f4afc27b-c8f7-4d8f-b5f7-dec5b2267abb",
        "cursor": {
          "ref": "51345690-dd83-4d4b-8470-fe302289ced6",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d4d14ed9-2ca6-42d4-aec9-b0a196b119b3"
        },
        "item": {
          "id": "f4afc27b-c8f7-4d8f-b5f7-dec5b2267abb",
          "name": "did_json"
        },
        "response": {
          "id": "31658e10-6096-46b6-a76e-10edea479261",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9a6251-48e2-458e-a5c2-7314bf5f6d92",
        "cursor": {
          "ref": "c0c5a28f-26c1-4c1c-9cd8-f8a551c6b20e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e162f03e-7b21-4627-b8ac-aa874b78d730"
        },
        "item": {
          "id": "0d9a6251-48e2-458e-a5c2-7314bf5f6d92",
          "name": "did:invalid"
        },
        "response": {
          "id": "419b887c-731f-461e-9bf6-0fecaee04b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9a6251-48e2-458e-a5c2-7314bf5f6d92",
        "cursor": {
          "ref": "c0c5a28f-26c1-4c1c-9cd8-f8a551c6b20e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e162f03e-7b21-4627-b8ac-aa874b78d730"
        },
        "item": {
          "id": "0d9a6251-48e2-458e-a5c2-7314bf5f6d92",
          "name": "did:invalid"
        },
        "response": {
          "id": "419b887c-731f-461e-9bf6-0fecaee04b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731f1e4d-2b76-4de9-9089-89c649e92062",
        "cursor": {
          "ref": "13f5736d-e69b-4aa4-827a-34fa76acc77d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4cb2d9ef-34b8-4e8e-bbac-55dd16be7b2c"
        },
        "item": {
          "id": "731f1e4d-2b76-4de9-9089-89c649e92062",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b9f2a3f0-5435-47ac-bbfe-f4a583b8a138",
          "status": "Not Found",
          "code": 404,
          "responseTime": 149,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235815e7-5ef2-4d8e-bb8b-0874ee608d7e",
        "cursor": {
          "ref": "7b31b483-a311-448e-8732-42caaa36e3ff",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65fe09b8-b066-465d-ae78-a10db54db7df"
        },
        "item": {
          "id": "235815e7-5ef2-4d8e-bb8b-0874ee608d7e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "43903910-6568-44ca-92aa-bd87ca12eadd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e128686b-9688-4381-8af3-6f085cb0ca0d",
        "cursor": {
          "ref": "e67014d0-a1d7-459a-927a-b3b870255fcf",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6ae99e45-fbc7-461f-82ad-02909c0fbe5e"
        },
        "item": {
          "id": "e128686b-9688-4381-8af3-6f085cb0ca0d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "491cc8e5-6d41-4253-b449-abb19ae7c086",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db611a2-c4fc-43b8-b915-31239c96c056",
        "cursor": {
          "ref": "d6780b32-62ea-4c23-aec7-16cec538c9c2",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c2e77f17-c4e5-46db-94c9-ae0ebe5ae2d1"
        },
        "item": {
          "id": "8db611a2-c4fc-43b8-b915-31239c96c056",
          "name": "identifiers"
        },
        "response": {
          "id": "f7d5f620-127e-499b-9a0c-a6de438bbb41",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc93a96-6e79-4e61-836e-9b89434d417d",
        "cursor": {
          "ref": "d16ecbb0-4d2e-4e4b-a567-f427c1900fe3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6c668c6b-7d8f-4a73-b3d4-853cb1c9a032"
        },
        "item": {
          "id": "2fc93a96-6e79-4e61-836e-9b89434d417d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9f69b7d3-2bc7-4ad0-aae4-cc8f99fb7430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a1441b-a133-4a5b-8a28-07016bf53d6d",
        "cursor": {
          "ref": "faeb4544-005d-4557-a080-32edc123b445",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "944c1464-900c-4bf4-9909-ea811131bc6a"
        },
        "item": {
          "id": "20a1441b-a133-4a5b-8a28-07016bf53d6d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "004416f5-dbcc-403d-87d2-ddc4273c54e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0821ecc1-6661-4abd-a317-676aaf422785",
        "cursor": {
          "ref": "a65e9066-af7d-4d2b-9983-e4a55a80e04f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "741b7969-38df-48e8-b961-cfa242ecba89"
        },
        "item": {
          "id": "0821ecc1-6661-4abd-a317-676aaf422785",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "17efe87b-4b68-46f4-aa64-ff1c976d9471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbee746-95f6-4621-989b-813ba4cbbd29",
        "cursor": {
          "ref": "d577b1c7-4903-40ec-bbce-ccd016b086d9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cb54085d-819d-44a2-ac7b-a48d82ed9d87"
        },
        "item": {
          "id": "3bbee746-95f6-4621-989b-813ba4cbbd29",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a5452c25-0582-4483-a9b3-e8a765ace944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daffdc6-6723-42b1-87e3-d3c38a99fdaa",
        "cursor": {
          "ref": "b6a9eaba-8614-4995-8d13-7a1c7f3ad920",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5938679a-b86b-4da8-b31e-5d1c6dab56d4"
        },
        "item": {
          "id": "7daffdc6-6723-42b1-87e3-d3c38a99fdaa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0d723021-37c8-4b2d-815c-3686494eee93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0cbdf5-f501-4a98-8753-682a5d0bb53a",
        "cursor": {
          "ref": "eb63e02c-faa0-473b-a850-7ac3f4f15724",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8224197f-a834-4b29-8e85-54f0ee49ffcd"
        },
        "item": {
          "id": "1b0cbdf5-f501-4a98-8753-682a5d0bb53a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4ae58639-411b-4189-aa04-78f8023ebb1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3055eeab-6b5f-41df-ae69-ae70ea2a3de3",
        "cursor": {
          "ref": "3cae6120-5328-4b07-8dd9-c371515abe80",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e0d437c9-d3a9-4d76-b902-d2f8ed12bba6"
        },
        "item": {
          "id": "3055eeab-6b5f-41df-ae69-ae70ea2a3de3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3564fb4c-f6fa-4171-98b5-f00300b3ba22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d30728-f918-45ac-85d4-fc98a842851e",
        "cursor": {
          "ref": "37e424b1-e627-4ef8-816d-031fb9c61ce7",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "df29719d-1481-4c60-9e71-76e1a0234a2f"
        },
        "item": {
          "id": "a4d30728-f918-45ac-85d4-fc98a842851e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "60ba2984-7393-45cf-994c-6d6c3cde9e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5d5a96-6159-4763-ad5a-f06913701384",
        "cursor": {
          "ref": "4c156d1b-f448-4cd0-b557-987bf8b481fb",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "31eed1fd-2848-4663-b7ef-3faab0f987e5"
        },
        "item": {
          "id": "2e5d5a96-6159-4763-ad5a-f06913701384",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c8f4b8a7-e532-465d-9bab-b404fa846d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d58b57-9d7d-4065-917e-7f4d292b6576",
        "cursor": {
          "ref": "9ccc9a68-c52d-4a75-a851-24987dae853b",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7d7522f0-820c-4f3d-9fd3-fb988e54d214"
        },
        "item": {
          "id": "90d58b57-9d7d-4065-917e-7f4d292b6576",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3ff7eebc-9123-44e7-b820-a58cc916a1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c664ec0e-c4fc-417e-8062-e026e085b659",
        "cursor": {
          "ref": "ba16278e-0cf1-4d64-a7fa-6d86fb1025d4",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "84294d82-ebcf-41a2-b1f9-df30717e552a"
        },
        "item": {
          "id": "c664ec0e-c4fc-417e-8062-e026e085b659",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "90c9e496-82e7-4fda-ba84-d203dc68dc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967b7718-e1b2-4e39-809b-429ec9dc6de5",
        "cursor": {
          "ref": "ab2ca467-999c-4c46-95da-58d34daef0e3",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4ac35111-5fc8-4fb8-a187-336c5d2dd310"
        },
        "item": {
          "id": "967b7718-e1b2-4e39-809b-429ec9dc6de5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67c04a15-6d85-426f-920a-4061523a8049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a779c00-4b88-4f0a-930c-389d9e634367",
        "cursor": {
          "ref": "2e1ad70c-96b0-4397-8a26-c5580640d090",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dcad979a-6e8d-4091-8227-e4a9a29f1ff5"
        },
        "item": {
          "id": "3a779c00-4b88-4f0a-930c-389d9e634367",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5cd60655-00aa-4c0d-ac65-c1e5f7fde56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b18a21-0452-4f75-8409-92e133277211",
        "cursor": {
          "ref": "ee2a8ba6-5afd-47c3-a627-9152df15c240",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "20106161-1831-4fbf-a259-2bbd6df7a5a9"
        },
        "item": {
          "id": "f8b18a21-0452-4f75-8409-92e133277211",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "11ad16ad-9294-44c0-bb3f-712169e9e0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b0bcf5-697e-4f4a-b8e9-151b7c87622e",
        "cursor": {
          "ref": "e1decb0f-2b07-4e9e-989d-2b1f1904c6bf",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5d23b56d-d373-40c8-85a6-d4a8b38578a6"
        },
        "item": {
          "id": "42b0bcf5-697e-4f4a-b8e9-151b7c87622e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2d9f946-0d1c-4a6b-bdf7-3568a7647666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b2d8f8-62b7-4a80-956b-821dce059757",
        "cursor": {
          "ref": "ce229e50-cb40-4363-ac9b-d1cf48c0d5cf",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef4a33ea-6988-4e8e-b125-4a16aae21e82"
        },
        "item": {
          "id": "c7b2d8f8-62b7-4a80-956b-821dce059757",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "92656f53-79d2-4d78-8301-8ed14549880b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8d94a2-02ec-46d0-ba53-94a3d62d6006",
        "cursor": {
          "ref": "c291c7d7-c96c-4590-a3ee-d0027a901eb9",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5e40c43b-ea6f-463f-8fc5-0ad083f24db0"
        },
        "item": {
          "id": "eb8d94a2-02ec-46d0-ba53-94a3d62d6006",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ba6eaab4-a303-4660-b2eb-1c7c3dbbad71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca15c5c-7a94-4532-882d-04462d95a7af",
        "cursor": {
          "ref": "c8b62c01-e60d-4100-a5f0-28fe6bd3c55e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3ada25b8-c4b8-499e-bf3e-80f4b62c9c5e"
        },
        "item": {
          "id": "cca15c5c-7a94-4532-882d-04462d95a7af",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "73b7490b-b3ff-4d09-9230-4c1f3972df3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2700a7be-1906-43ab-96d7-514b17252a68",
        "cursor": {
          "ref": "2ebb60cc-7e71-4430-92d6-e3d064e2c8e9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "33c7686d-fc99-431a-b39f-d47ca5278590"
        },
        "item": {
          "id": "2700a7be-1906-43ab-96d7-514b17252a68",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d65ca96f-6af5-45d8-986e-65432e734e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0014d3-ae46-4c4d-abb9-9f96607fbefc",
        "cursor": {
          "ref": "2c6a92c6-42e4-4c41-af05-7bc28c21acd1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cebba09b-8bfb-4a18-b552-9e5b46d73b66"
        },
        "item": {
          "id": "4e0014d3-ae46-4c4d-abb9-9f96607fbefc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "83541776-27e5-446f-ad04-63caca21fcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d90d1a-4a81-493a-bf87-1e7cb92f059b",
        "cursor": {
          "ref": "4ebd1afc-d4d4-4011-93fe-20cc5f996dab",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4defcc9a-77af-4f77-8880-f8589fbc1043"
        },
        "item": {
          "id": "c6d90d1a-4a81-493a-bf87-1e7cb92f059b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "15cf4f2c-14c3-45f3-a840-509c3c68620e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b7b4ab-0c5f-4f8b-b162-1b22b1e6703e",
        "cursor": {
          "ref": "76f9cd5d-295b-49d7-b079-53415d7f78d2",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5e5c12a5-a521-4ed1-82d1-64f3fce2a5fd"
        },
        "item": {
          "id": "c0b7b4ab-0c5f-4f8b-b162-1b22b1e6703e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9b09ee5b-b50e-49ce-aa72-b5651e0d0da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337eed2f-68c1-4072-bba6-3799ba85bfe5",
        "cursor": {
          "ref": "0b9dd6bd-28d7-460d-af87-8f9d72ccfb3f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4744bf18-ff05-4649-9b21-9e6611d738a9"
        },
        "item": {
          "id": "337eed2f-68c1-4072-bba6-3799ba85bfe5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "04f76dd8-6908-4148-ae21-d6f5b29e80d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cb9b71-1a7d-4e4e-85b2-e42dfe05614a",
        "cursor": {
          "ref": "917a4a2a-d41b-4f84-9479-2481908e9259",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ac7e6fac-09d9-4e13-824f-153d33158541"
        },
        "item": {
          "id": "42cb9b71-1a7d-4e4e-85b2-e42dfe05614a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "67e835ae-2838-4095-bb0e-ab4a60a2eaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76fd540-6a11-47de-a0e4-6c86018144b2",
        "cursor": {
          "ref": "ac0b5035-bafc-46d9-95ba-1eb6cf2b1faa",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bf9015ea-b7a0-44d5-bdb3-060963bce348"
        },
        "item": {
          "id": "d76fd540-6a11-47de-a0e4-6c86018144b2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "de3ed66f-93be-4791-827b-e779f142267a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efee2bd-60de-4b20-84c4-a7824fa06139",
        "cursor": {
          "ref": "501cd6a1-2229-44b0-b8cd-6172648c7589",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1e94105a-abf1-4d5e-9735-7a03d0df7012"
        },
        "item": {
          "id": "6efee2bd-60de-4b20-84c4-a7824fa06139",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "db75c841-d5a1-4403-ab44-d4cd9f8dac24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17f6621-3bc6-4cf5-a737-f92275e1fbdb",
        "cursor": {
          "ref": "7d6ed0c7-6ed9-4efd-9afa-7d49b9a0a8e5",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6bc214b7-62ae-4050-aed4-ec1a78f3de2f"
        },
        "item": {
          "id": "f17f6621-3bc6-4cf5-a737-f92275e1fbdb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "67dbf4a4-da64-429e-9160-84b35935f757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7048a52d-d162-447a-af72-ccc6ed3b8811",
        "cursor": {
          "ref": "bdeadcbd-e173-40a8-819a-8ccc6821d6cf",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5ce31c28-7e23-4fb2-96ac-5481f2b7b174"
        },
        "item": {
          "id": "7048a52d-d162-447a-af72-ccc6ed3b8811",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dd3029d2-3340-4862-a50b-9ec61e73878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae165878-b62a-47f8-9ec8-758d94f4f6e1",
        "cursor": {
          "ref": "345a2004-d51e-44c2-b1c3-5e6668f7348a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0a0e2df5-d6a7-4459-90e8-f41e49dd4dd4"
        },
        "item": {
          "id": "ae165878-b62a-47f8-9ec8-758d94f4f6e1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "492885d5-b802-4cb8-a8fa-3fd4e7f6107b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4388f567-fa5b-4787-91ab-24611a0a6c45",
        "cursor": {
          "ref": "84311009-1ffd-4bd8-8c39-8a869b3f5abe",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ed5b68c8-4e1f-4c2b-a52f-06efc7e0b316"
        },
        "item": {
          "id": "4388f567-fa5b-4787-91ab-24611a0a6c45",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8999e35d-77c2-4bf6-b2ce-87e8c74cd0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3df2df-e51c-4d13-9a7f-09cb139b2f81",
        "cursor": {
          "ref": "16a805be-dead-4378-a0c2-a7b8047b35b1",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5c47191b-749b-4cd5-8c05-688306808326"
        },
        "item": {
          "id": "6d3df2df-e51c-4d13-9a7f-09cb139b2f81",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "673721ac-4266-4a95-b048-58566b1ad1e4",
          "status": "Created",
          "code": 201,
          "responseTime": 914,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7db85902-d0cf-4f28-8c19-7daa772530f6",
        "cursor": {
          "ref": "dec52eaf-92ca-488f-8315-b0e586638c83",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ddb8505-6786-4816-8640-12813e8b5bc4"
        },
        "item": {
          "id": "7db85902-d0cf-4f28-8c19-7daa772530f6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "95ac03b8-c084-42df-ae99-7b750beec790",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fa5e3ce9-fb50-4a14-bf6a-a04669a8e2e7",
        "cursor": {
          "ref": "b48d8ed5-8b34-4f1d-911a-90e9eb61d145",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a8ea3bdd-11f8-4c81-a84e-34f44f677ef6"
        },
        "item": {
          "id": "fa5e3ce9-fb50-4a14-bf6a-a04669a8e2e7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4c2dd8ff-8e90-439e-8de4-c71c79076f0c",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "653528c0-ccb1-4fb1-967b-89256e7dfff4",
        "cursor": {
          "ref": "da84114a-1ac2-4866-b644-3c4aead8a0fe",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "178ad58a-4767-47d7-8a3b-2e53de203f58"
        },
        "item": {
          "id": "653528c0-ccb1-4fb1-967b-89256e7dfff4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "86ce4d65-a76f-48b7-bf93-36b50c8dc09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd27102-7be3-47a4-8e87-2da089458f24",
        "cursor": {
          "ref": "e4bd6cef-febc-4097-a349-fc239a72b432",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b5874676-b122-4d22-8236-e7baa44dbbfb"
        },
        "item": {
          "id": "cdd27102-7be3-47a4-8e87-2da089458f24",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "65198bd6-e94d-4c4c-a53b-ef3cb3409cf2",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5648d30f-3c2f-475e-9bda-d4b02bf371ba",
        "cursor": {
          "ref": "44941a73-193d-4bef-9d61-40450f1cb800",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0fc06ee7-97dc-455c-b785-be00cda7d15a"
        },
        "item": {
          "id": "5648d30f-3c2f-475e-9bda-d4b02bf371ba",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b3684dce-4d40-4f9f-9419-7f1eb83ca48c",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b1c3da25-bb73-4d80-bef5-bc52c2476a80",
        "cursor": {
          "ref": "cb64d87b-4f01-4787-afa0-c22a23e8a84e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f44dad75-e786-477d-8151-cffe75edd7fc"
        },
        "item": {
          "id": "b1c3da25-bb73-4d80-bef5-bc52c2476a80",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a75f2ab5-979a-4bce-a374-ea03c880850e",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "83c9b175-ea32-4894-a7fd-98794b7f2c8f",
        "cursor": {
          "ref": "247b3e00-4b7e-48e4-b702-ed5b5e96f59e",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4531e0e1-b3da-4a33-a653-78dd772dd588"
        },
        "item": {
          "id": "83c9b175-ea32-4894-a7fd-98794b7f2c8f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ec863d63-9f06-47cf-b4e4-456bc60632c0",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4d1fc195-6a69-4fa0-9213-552284457d49",
        "cursor": {
          "ref": "9a0633e4-e170-4f12-a82f-a20fef890778",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e2658af1-3a93-40b1-876e-856f49f0f74f"
        },
        "item": {
          "id": "4d1fc195-6a69-4fa0-9213-552284457d49",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d513eb7d-9c05-44a9-8766-ec9b32682b35",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1329f78a-69cd-4278-afb7-d0ec1c31bfe7",
        "cursor": {
          "ref": "0c2d8b10-b5e8-4395-b292-6f069b7f6993",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "762c52c0-522f-4800-831d-bbacc1b65d13"
        },
        "item": {
          "id": "1329f78a-69cd-4278-afb7-d0ec1c31bfe7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4b8ba17d-f0cb-41b4-901a-4a7a1be0ad84",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "74458a7a-b540-48c6-ada3-bd779c38488d",
        "cursor": {
          "ref": "01e7eb9f-5c8b-4865-b70b-1ba84119138a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "11e28dbb-b2d0-4f35-93dc-7bcd95c132da"
        },
        "item": {
          "id": "74458a7a-b540-48c6-ada3-bd779c38488d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ec81bbc0-c5a0-4e37-a65c-e138405eb1a0",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f185bdda-483a-4c44-8727-e4e165f61c90",
        "cursor": {
          "ref": "efe282e3-afa6-415c-8256-1376ecb134a6",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e1cd3db4-4c30-44bd-bf5b-f7a510bb931a"
        },
        "item": {
          "id": "f185bdda-483a-4c44-8727-e4e165f61c90",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ff6b2273-9c81-4f3e-9e51-97367f89e78a",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0de53dab-3715-48df-916a-e6da4fee9898",
        "cursor": {
          "ref": "f4c0829b-06e8-4791-989c-ae94e77f0bc1",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ffabc606-446c-45c5-b078-d95bea45a35e"
        },
        "item": {
          "id": "0de53dab-3715-48df-916a-e6da4fee9898",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "67893531-1ec7-446c-8765-bbb3013d2881",
          "status": "Created",
          "code": 201,
          "responseTime": 497,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5caf6a12-6db3-4d30-8ed5-027fa404ed4f",
        "cursor": {
          "ref": "aa2b8605-b503-4d0a-b394-be771a99f3a4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f3ad6ad0-95d6-4cdb-a885-a40d95ed0d45"
        },
        "item": {
          "id": "5caf6a12-6db3-4d30-8ed5-027fa404ed4f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7b033fa1-5d58-4c2d-a280-15fa06ee8aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d86d3-af7e-44cd-af1a-d98f84b69dfc",
        "cursor": {
          "ref": "d9f8c524-aaec-4a26-8efb-24cf0ac55c32",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c604ba88-bc67-4065-8f6e-5e3803c4bdbc"
        },
        "item": {
          "id": "d24d86d3-af7e-44cd-af1a-d98f84b69dfc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5dfab231-eb8a-4e05-bfba-ac64224a027e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ff7355-d88e-4535-b656-0e11eddd2754",
        "cursor": {
          "ref": "37c03452-6ef1-4388-be96-7304c091cc73",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "35c6ce5a-7195-4922-b4d4-f6dbff65e30c"
        },
        "item": {
          "id": "52ff7355-d88e-4535-b656-0e11eddd2754",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e194ae19-9480-41c0-a6ef-73ebd81c5840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fe1c66-0ed1-4ecf-b5d5-c0cc52a0c449",
        "cursor": {
          "ref": "78d52a20-3cae-49af-8ce5-90f072cbaa1a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "417219ae-1e1d-4557-82f5-912e4a43ac46"
        },
        "item": {
          "id": "27fe1c66-0ed1-4ecf-b5d5-c0cc52a0c449",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0625a010-d9d9-4fce-9321-4785ca048a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d193e08-1c15-4746-a933-7710eb6f4fda",
        "cursor": {
          "ref": "38f94397-a669-4dd6-ba8a-c152e9a56da0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "000eaecf-d901-43f8-a3de-9b18d5d1d291"
        },
        "item": {
          "id": "3d193e08-1c15-4746-a933-7710eb6f4fda",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1c0f50c9-5317-4a64-b197-823d86cb3f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af513043-1c5c-47a0-9a01-d3152c6d5bf9",
        "cursor": {
          "ref": "cb279eba-9320-4702-b5ce-08e00ccdcaeb",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c4e12914-5559-44a7-96bf-30d8c37c26fd"
        },
        "item": {
          "id": "af513043-1c5c-47a0-9a01-d3152c6d5bf9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8369ff05-88c0-4d40-9d5b-8c50f0608b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72be218c-f3da-434b-933a-1472bf62b38e",
        "cursor": {
          "ref": "75537167-e2a9-463a-8d40-89dd78bf1e3a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1d781c31-30d3-4663-9e34-098852b95cce"
        },
        "item": {
          "id": "72be218c-f3da-434b-933a-1472bf62b38e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8d90b6bd-4ac1-45b6-9697-cf36f3265a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a762b01-7a1c-439b-87c7-016cb6ca39bc",
        "cursor": {
          "ref": "3f0ef58d-fdce-45a6-9c18-0aa468c27d4e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "21a5eb78-4eb1-4bae-a77c-d742ee8e54be"
        },
        "item": {
          "id": "7a762b01-7a1c-439b-87c7-016cb6ca39bc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d4b75ee6-f243-4c72-974d-aafaa8876dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212e259a-9843-46c3-b114-cc847580dd96",
        "cursor": {
          "ref": "f2a4e85b-1725-440f-9102-e036b5380ab0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fd9fc90f-8982-464a-883a-ce3980ac3386"
        },
        "item": {
          "id": "212e259a-9843-46c3-b114-cc847580dd96",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2a1b4248-0898-4c12-a520-06aecfd5b0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c07c2b3-b52a-46e0-9229-d2124252530a",
        "cursor": {
          "ref": "80324dbb-5bb2-483f-85e7-22bc4fd16277",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5a040267-c727-4ad7-8d92-0e1dbbfeb672"
        },
        "item": {
          "id": "6c07c2b3-b52a-46e0-9229-d2124252530a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6541978-edae-40bb-afbc-c33bc1be74ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7307e5-e193-4b8b-a0d4-81f3130f9236",
        "cursor": {
          "ref": "f71abbf0-e03a-401e-bdf7-a743f55e07f4",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "102b5041-74a7-49ff-ba12-f649c307bb92"
        },
        "item": {
          "id": "fa7307e5-e193-4b8b-a0d4-81f3130f9236",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "45999511-7da4-46fe-8847-26bf52c74494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54d719e-e8b5-42fc-b94d-231a16b96a76",
        "cursor": {
          "ref": "0ebd2edc-25ac-4034-862c-531114e64acc",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be9618ba-584e-4305-bbe1-1cb929a4c58e"
        },
        "item": {
          "id": "d54d719e-e8b5-42fc-b94d-231a16b96a76",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f3739d94-be5e-42c9-8fa4-9a82cdd2f2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aef6860-e2d5-4486-9451-80a7e28acf1a",
        "cursor": {
          "ref": "0418f208-aae0-48ec-8cd4-25334fcc2912",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3a707e7f-abcb-426b-a356-9d017515c7e1"
        },
        "item": {
          "id": "8aef6860-e2d5-4486-9451-80a7e28acf1a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8508bfe1-5de0-40e4-b48c-082c9e97308f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e05b1c5-0e33-4861-902b-928a62c26425",
        "cursor": {
          "ref": "dfdad4e8-1833-48f4-9cab-d3c827103b6e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c455deed-ccfa-4cc1-810b-ed9edf19e96d"
        },
        "item": {
          "id": "9e05b1c5-0e33-4861-902b-928a62c26425",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9334040c-a803-4954-bf43-03fcf6dbaae5",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4dbd705c-6251-4fb6-8827-6407d17ce164",
        "cursor": {
          "ref": "55b7065e-790e-4e35-9cfb-62e063ce2b19",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3e312898-e55a-4f21-a72a-dc70debdec15"
        },
        "item": {
          "id": "4dbd705c-6251-4fb6-8827-6407d17ce164",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1181e217-d38b-43ac-bc55-75e0bd807eb4",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7612a0a1-5fef-4e75-bdd9-8b1ec167a94c",
        "cursor": {
          "ref": "4f436396-4213-4ef1-a12b-331736268b6c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c190fc21-3071-4392-9289-a14eabb8d3c1"
        },
        "item": {
          "id": "7612a0a1-5fef-4e75-bdd9-8b1ec167a94c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9e1ba06c-557b-4147-ba15-ac10ebd3f47a",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c8839d7e-89b3-4a06-9a1e-640c8d6448c6",
        "cursor": {
          "ref": "74fa10b3-74df-409f-9678-0a39162aec4b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5e517dc2-0e2e-404e-b438-80cfac812395"
        },
        "item": {
          "id": "c8839d7e-89b3-4a06-9a1e-640c8d6448c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e5ac5fbd-e24b-471d-9b18-f3d1da1df73e",
          "status": "Created",
          "code": 201,
          "responseTime": 410,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1cd6396f-d337-42c1-966a-0d02fbdc2f40",
        "cursor": {
          "ref": "f53cfa06-5cd1-426c-bef5-5aec7740423b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c42d1e27-3eb3-4d4b-8433-b9515dea621e"
        },
        "item": {
          "id": "1cd6396f-d337-42c1-966a-0d02fbdc2f40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c1ee3672-52dd-40f7-9441-d67c189fcb69",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b3c599b2-3045-4755-8b4e-d21e53f7c1d9",
        "cursor": {
          "ref": "671f2131-b0e3-4f9f-9253-bff30962b7d2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "87bde10c-d3f9-4b8e-b543-ed3580729412"
        },
        "item": {
          "id": "b3c599b2-3045-4755-8b4e-d21e53f7c1d9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "337c0d94-b997-4dee-9df8-a78e79f9159b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f886c8-bf23-48b9-8868-0217d3aa5505",
        "cursor": {
          "ref": "fef68a67-5929-4a42-9284-1b7c0e36398c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "41255511-65e2-4ae4-9a37-d1f5a1f2e425"
        },
        "item": {
          "id": "70f886c8-bf23-48b9-8868-0217d3aa5505",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1d030b00-8b3d-48ee-a11e-0e758a82dc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d243b80d-b244-4e0d-a9ac-38eea9f1b587",
        "cursor": {
          "ref": "2ddf666b-bc9f-45c0-8c7f-bab557633ca3",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b700b1c6-cf55-4223-a288-33d768a7b4ba"
        },
        "item": {
          "id": "d243b80d-b244-4e0d-a9ac-38eea9f1b587",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4af5657e-d209-4588-83c4-7a2ac0c57ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14b6153-9849-4181-a07c-9502f52c979b",
        "cursor": {
          "ref": "545f0fa7-8a82-4c2d-814d-a628220779a8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "410bdc70-c6b7-4ed3-a0dd-05bf7925a812"
        },
        "item": {
          "id": "f14b6153-9849-4181-a07c-9502f52c979b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f7929d5a-a57b-49a7-abe6-1225fbf9c21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503b0353-c929-412d-8153-d9b725cb909c",
        "cursor": {
          "ref": "75bc1a18-eda2-48a1-97e6-9b7ce6cd17fc",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "621b306c-5126-4d9b-be0b-df9bf0f1763c"
        },
        "item": {
          "id": "503b0353-c929-412d-8153-d9b725cb909c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "66b6c962-5820-4b96-abdc-a4810d8da0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9e2a1b-5fe1-4603-afcb-d0521c654bb1",
        "cursor": {
          "ref": "f5de1893-a74b-4b92-96d7-a6218b970a37",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fb4c28e1-4a97-4e8c-b2e6-1fe4f31e35e5"
        },
        "item": {
          "id": "8d9e2a1b-5fe1-4603-afcb-d0521c654bb1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bebfe149-b018-439f-b605-b2370614e4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd82385-6489-44c7-80d7-5cf4a22d167e",
        "cursor": {
          "ref": "0504f2bd-7967-49e6-af09-661dd547f4b5",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0c464db7-4869-44e0-aae0-6f4c97310470"
        },
        "item": {
          "id": "cfd82385-6489-44c7-80d7-5cf4a22d167e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0230ad17-7c27-4833-a55d-1454d405ccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bb4da9-cdd7-49ca-ae04-28942f678228",
        "cursor": {
          "ref": "f097e41c-37e7-424f-8493-529d90063c0f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "04b7e909-034a-4190-b07c-ab0b1214ff8e"
        },
        "item": {
          "id": "e2bb4da9-cdd7-49ca-ae04-28942f678228",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c7c5f88c-1736-40bb-9ccc-36a9cd639a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934dd93e-0dea-4a39-8308-5312314e7838",
        "cursor": {
          "ref": "011e7049-2ac1-4e8a-a22e-acb5971e13c3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bde5d0e7-4c3f-412f-9693-b13bff2895dd"
        },
        "item": {
          "id": "934dd93e-0dea-4a39-8308-5312314e7838",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9a38169-0aab-4921-8e5f-8ce181b8c1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc5eebf-278a-4371-aade-d8c6862bdd0c",
        "cursor": {
          "ref": "924bad4c-2624-4614-a727-b4ac5fd1ab47",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "81a875f6-f22b-41d5-8e5d-062735e224fa"
        },
        "item": {
          "id": "afc5eebf-278a-4371-aade-d8c6862bdd0c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c7214b9b-98eb-4f4b-aeb9-baeb2367725f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f6bde-26da-45da-9873-970f6134cb44",
        "cursor": {
          "ref": "a14f9ed7-67b2-4db3-a3f2-c3f77dcadb08",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a671130f-8421-4f03-a1b6-a46dc008415e"
        },
        "item": {
          "id": "266f6bde-26da-45da-9873-970f6134cb44",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e967bcc1-0ea3-4c57-8393-e3e58e4a59cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84be0cbe-8cc0-49c4-8a00-26ce6eb0c269",
        "cursor": {
          "ref": "598c0455-eac5-40de-bb13-26aae395aa34",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "46c1eddc-244e-4810-96cb-3b1499dba75f"
        },
        "item": {
          "id": "84be0cbe-8cc0-49c4-8a00-26ce6eb0c269",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b2c6c4e7-396e-4ec1-8638-74c550240389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224819b9-8b37-4f32-936b-a669caec86bb",
        "cursor": {
          "ref": "721a441a-6c27-490b-a143-f3a57a2edc8e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4bb80d64-e597-48e7-b2d0-157f2123c8af"
        },
        "item": {
          "id": "224819b9-8b37-4f32-936b-a669caec86bb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9b40b324-0987-4898-9e6e-885c326abf19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db6c59a-b0e2-45d4-8ca0-801d94c36de2",
        "cursor": {
          "ref": "05617f49-4dfe-4a74-b981-93ebebdf6766",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a65147f-e0bb-4731-ac67-3fe8012c12a1"
        },
        "item": {
          "id": "7db6c59a-b0e2-45d4-8ca0-801d94c36de2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b5d6511e-27e6-4170-9d0c-2c3d73fc5e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44f7ed7-5ef8-44d8-80a1-4bc69049caa1",
        "cursor": {
          "ref": "ce558190-b3d4-4b5e-8972-b74600d5301b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cd34d408-8443-46ab-bfae-e70312d2868e"
        },
        "item": {
          "id": "c44f7ed7-5ef8-44d8-80a1-4bc69049caa1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0c6e4069-6a03-485d-a844-e77e069d8449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d91c81d-8bd0-4846-9127-a3dbe72c6eff",
        "cursor": {
          "ref": "b7dbbb89-1fb2-4d8b-aaba-3aada89ae69a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "60ae921e-50cb-4bea-b2e8-bbc206731d79"
        },
        "item": {
          "id": "6d91c81d-8bd0-4846-9127-a3dbe72c6eff",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8f8756c6-0942-4861-8ee8-2f916de8686e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c655d10-03f5-4707-813a-8fee1a969df1",
        "cursor": {
          "ref": "b89d8d8d-a924-4f4c-ad67-e8a7b1e5f5de",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "34a2eb3c-16f6-43dd-acbb-559cc6730155"
        },
        "item": {
          "id": "6c655d10-03f5-4707-813a-8fee1a969df1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bf59f722-fb5e-4ddd-b8b7-813ec3f97fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148c8284-00b2-46ea-8696-111dca3c7c16",
        "cursor": {
          "ref": "6cecfab0-915e-488d-997f-70d9eb5be5a4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3fbcdfd3-77f4-4530-b159-adeda5e93021"
        },
        "item": {
          "id": "148c8284-00b2-46ea-8696-111dca3c7c16",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f6f04a96-13da-4dfc-ba5b-bba22115c2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c870be-7654-4fb6-9f86-aced80cb90c8",
        "cursor": {
          "ref": "c6b32ca4-515b-4a1b-9ca7-5918a9545329",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6107c9f1-e1ab-49db-8808-a5f0fa5bda5e"
        },
        "item": {
          "id": "e9c870be-7654-4fb6-9f86-aced80cb90c8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d3746695-6e04-4963-87ba-c0328016fb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b02f05-9823-4145-bc5d-8c61e7f289a6",
        "cursor": {
          "ref": "042483ea-8e1a-4d45-829e-24e0062c9bab",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "80627313-b771-42da-ac27-c4b7402e9a07"
        },
        "item": {
          "id": "a8b02f05-9823-4145-bc5d-8c61e7f289a6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "181b54d4-4654-4a13-b660-e9279bb2c8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688b15af-ebf2-4624-aae1-d7ab24de5ffe",
        "cursor": {
          "ref": "1a478049-1609-42b2-933f-89179a8b3d1b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3fc43835-b131-412b-89fb-cbeb8a1729cc"
        },
        "item": {
          "id": "688b15af-ebf2-4624-aae1-d7ab24de5ffe",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "95acf97b-3b58-4f5e-9a96-b99799ebd580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5944a02b-3df5-4ee6-966a-9524075a1fdf",
        "cursor": {
          "ref": "18810726-07ee-4d91-b192-102c128ad5b8",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b641ec38-a882-4bef-b65e-3361eea1ba3d"
        },
        "item": {
          "id": "5944a02b-3df5-4ee6-966a-9524075a1fdf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "42b36830-2d57-4735-959e-900b6248eaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76f1821-147d-4db4-a311-e94de58fea13",
        "cursor": {
          "ref": "273923b8-7d56-426a-a455-0a2ede4511c1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3140f570-c05f-42ad-8ffe-013f872c5b26"
        },
        "item": {
          "id": "a76f1821-147d-4db4-a311-e94de58fea13",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "771ce8ac-8574-40eb-a690-74cdbe754d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2491266e-54df-46c3-90d2-62a5b8f0c516",
        "cursor": {
          "ref": "5a0dc0e6-8faf-4909-a1cc-cbb33ae3f7a9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a803fb26-9378-4d36-964e-23cd1e7d381c"
        },
        "item": {
          "id": "2491266e-54df-46c3-90d2-62a5b8f0c516",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4f8e6f3d-ff5c-4809-ae01-411147a3592c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73a5725-f9e5-459d-bb78-deebec5366a7",
        "cursor": {
          "ref": "745b60bb-b4d8-4af6-b952-e72fcbac70c4",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1d92ea34-e02a-484e-83ed-10c27136354e"
        },
        "item": {
          "id": "f73a5725-f9e5-459d-bb78-deebec5366a7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a3bd0bd8-a4ad-4123-9cc5-ce39cfd4fb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d81244b-a921-4646-8a62-5028cf418b9d",
        "cursor": {
          "ref": "2b9fdab3-b33e-4aaf-a59f-38930b761209",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "089ad58d-8614-4828-93cc-feac51cd60f4"
        },
        "item": {
          "id": "9d81244b-a921-4646-8a62-5028cf418b9d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7ca0a24e-8814-4d1f-bbc9-3387944637f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c811d97b-b754-4d52-81a9-2c51e2386c68",
        "cursor": {
          "ref": "7dc38273-546a-4d52-8dfe-8a81024c4471",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b5b95359-9062-4a74-8f02-cad128a7c528"
        },
        "item": {
          "id": "c811d97b-b754-4d52-81a9-2c51e2386c68",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8d4717b9-995a-4f2f-a797-789e77b4fdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5141af79-5328-4cf6-82ba-9c955152bdfe",
        "cursor": {
          "ref": "2b50d020-ad66-4811-8498-e381699a3f2a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ffc47b0f-d0b1-4da4-bfad-76b3dc601f4c"
        },
        "item": {
          "id": "5141af79-5328-4cf6-82ba-9c955152bdfe",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "db944317-2b70-4e17-82d8-331dfe013d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19423d7-f534-4a21-8cca-7319132d384e",
        "cursor": {
          "ref": "07d571f3-3729-4e1e-9787-ab9155b301fa",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9ab8cee6-8bca-4e50-84c9-df2f7a8c924f"
        },
        "item": {
          "id": "e19423d7-f534-4a21-8cca-7319132d384e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3346ca4b-5bac-49a0-b07c-9f1008cf6fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c2858c-aa97-4c59-9b63-5eea12eb11ff",
        "cursor": {
          "ref": "7c2d38c4-04ba-4f9d-91c4-b429cfa24320",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c74ba7e5-cb97-4a8c-8d13-166ce018d051"
        },
        "item": {
          "id": "71c2858c-aa97-4c59-9b63-5eea12eb11ff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f618655b-19b7-45d5-9ad1-626510f8aa56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039cd0d5-138b-4c81-99ba-2565f1a1d3cb",
        "cursor": {
          "ref": "0b57875b-2dae-4c02-be80-c0233311f238",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1fb9890e-8ef3-433b-822e-241a1a449af2"
        },
        "item": {
          "id": "039cd0d5-138b-4c81-99ba-2565f1a1d3cb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f7434426-490f-46e6-9892-cedb69743c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a54185f-b1f6-4cb6-b101-0d02fd58783a",
        "cursor": {
          "ref": "bf273a6b-6731-4a02-bb25-2cad60db7454",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8af29906-b70c-4acb-8ecf-1c3dd740f7d8"
        },
        "item": {
          "id": "5a54185f-b1f6-4cb6-b101-0d02fd58783a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a7304b4a-d183-462e-9e3e-73cb57c20c93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcc8a68-55ad-4608-b049-58b19966d01e",
        "cursor": {
          "ref": "58ad91c4-25e4-47f6-bb9b-359f0b6eff61",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "300fb54e-b1f5-4b38-a47b-6533d6932070"
        },
        "item": {
          "id": "5dcc8a68-55ad-4608-b049-58b19966d01e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ba1c1f10-b656-4cc4-845e-73ca34a3de39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0a3cf91f-5859-41d0-b4c9-eb959235e9c2",
        "cursor": {
          "ref": "0feb618a-66e3-4316-a9e8-070809b6841d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3cc6657d-3d17-42cf-92fb-71628c85503a"
        },
        "item": {
          "id": "0a3cf91f-5859-41d0-b4c9-eb959235e9c2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "390a7711-5d45-4636-bb91-83feb2f03dbc",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c369577a-e15d-418e-aaf3-374fcd300a5c",
        "cursor": {
          "ref": "1255518e-b098-413e-8c3d-b21e26391eb2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d405b707-a680-4e0e-89c6-0082e950610b"
        },
        "item": {
          "id": "c369577a-e15d-418e-aaf3-374fcd300a5c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "edf1a8bc-6c0d-4528-8612-8dd2b891f7cd",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff50e07e-1aad-419b-89eb-9c7114fa44ea",
        "cursor": {
          "ref": "e14a31d1-2807-422f-96e6-53f107f97f77",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fa170314-bf75-406f-b684-89d9ca44a48a"
        },
        "item": {
          "id": "ff50e07e-1aad-419b-89eb-9c7114fa44ea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8b87ba09-aac6-42f9-b807-51416394da78",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dfba48-d821-4317-84fd-b53ea5a319a2",
        "cursor": {
          "ref": "dcd833e5-3c22-4ffc-befb-5a30c41f8112",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e844a776-c408-49cd-97e0-4cfc45aa6a7e"
        },
        "item": {
          "id": "f7dfba48-d821-4317-84fd-b53ea5a319a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dfe450ae-1e1d-4271-b345-ae947bc69c06",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1dc8cc-d446-4beb-8b58-299e801569a7",
        "cursor": {
          "ref": "7cffaa60-91e6-49d5-af7b-551a3c2b15d2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0622ae8e-c933-4f0b-9818-41ccff5f33ce"
        },
        "item": {
          "id": "5f1dc8cc-d446-4beb-8b58-299e801569a7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b779878b-2b42-4fd2-b8eb-953ced07809e",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-24T00:32:30.541Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-24T00:32:30.541Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d7452070-13ff-41fc-921f-eb0f9b349715",
        "cursor": {
          "ref": "e1d3428f-d2f1-446c-81f6-105c8c47ad8e",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "611719c8-6af7-4f20-8414-bbfc7d4258e0"
        },
        "item": {
          "id": "d7452070-13ff-41fc-921f-eb0f9b349715",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9a0c39f2-f782-4393-ae75-5beedf11a4a7",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a14680-3bcf-4fe7-ab2b-fc8a38e4b566",
        "cursor": {
          "ref": "54bf388a-6336-4c09-ad82-d0f17c698628",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "77f09377-c765-448d-9218-b4b4e4b8205f"
        },
        "item": {
          "id": "77a14680-3bcf-4fe7-ab2b-fc8a38e4b566",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e5f95062-b25b-4af6-be51-304bcdf965e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86ba330-4639-4f9d-aefc-d4ef278d56de",
        "cursor": {
          "ref": "cedc1c89-298c-472f-bf27-5a424641ddb5",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0cf98e28-79a0-44cb-a040-3fa7b7e66026"
        },
        "item": {
          "id": "e86ba330-4639-4f9d-aefc-d4ef278d56de",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3e9d523-7409-45b5-886b-3493fbcd2974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee00f3f-46f4-4d62-ad05-db3f19f37562",
        "cursor": {
          "ref": "e0a823b1-8ece-4506-b9a5-d9b870186b92",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3accf228-70d7-4e96-abc3-cc7ef71c49ef"
        },
        "item": {
          "id": "6ee00f3f-46f4-4d62-ad05-db3f19f37562",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f1e74434-e58b-497c-8651-659c8f35010a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3365197c-5d8a-4d25-90bb-d018cf8bd6b1",
        "cursor": {
          "ref": "980e61a7-823c-4479-b5d2-5bee0de1517f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a14eb414-d513-4445-9517-5e5bd7eaa54c"
        },
        "item": {
          "id": "3365197c-5d8a-4d25-90bb-d018cf8bd6b1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f6fd8f04-d85c-4f00-8823-fd776e58714c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08afc661-df19-4046-bcf3-e255e6a3ad98",
        "cursor": {
          "ref": "d74fd111-002f-4e27-8008-e024bc3839b2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "83946793-346a-4970-813e-e95cfece6cc7"
        },
        "item": {
          "id": "08afc661-df19-4046-bcf3-e255e6a3ad98",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "844adc47-0e37-4e3d-86e3-30d514e20043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170304f5-2fec-4bf3-851e-0aa5fe27eb94",
        "cursor": {
          "ref": "565d9462-c4c8-4fba-90a5-67ed6ade290b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a42bb978-3dd1-48d3-90a5-b2b321ea4b13"
        },
        "item": {
          "id": "170304f5-2fec-4bf3-851e-0aa5fe27eb94",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "728dd220-29bc-4e71-a6ac-2e3e5db4b2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db05418-a65a-40eb-aad8-c81d4b95a90a",
        "cursor": {
          "ref": "c722dc71-74f0-4d10-9173-d368180cce17",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "228eef45-b3cb-460f-9548-432c59827f36"
        },
        "item": {
          "id": "3db05418-a65a-40eb-aad8-c81d4b95a90a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "767357b1-4965-42ec-8d44-f1635e8927ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed9c9d6-3853-4487-bed5-5a2554298278",
        "cursor": {
          "ref": "c7a1b1dd-012b-4004-815c-cf2debae2086",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8fcb2c1d-9802-40c2-8a75-ba5051c87692"
        },
        "item": {
          "id": "8ed9c9d6-3853-4487-bed5-5a2554298278",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0f37ce73-018c-4133-8484-dc26548fdb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60727d3-556f-4a43-8f25-f48ba251c04d",
        "cursor": {
          "ref": "601c8b68-c4ad-4e51-a3a9-55f5213b04bf",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4b4b1246-dff5-4deb-abc9-17eccf1e877e"
        },
        "item": {
          "id": "d60727d3-556f-4a43-8f25-f48ba251c04d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "734a33a3-e047-4577-aff1-1f05c2a7d220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d25d67e-10d4-4b8f-ac52-26b9d251b72c",
        "cursor": {
          "ref": "96b1e77c-ac81-4781-b5ce-a9f968917a65",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e51434fc-231b-4e31-8e92-42687b9908e5"
        },
        "item": {
          "id": "1d25d67e-10d4-4b8f-ac52-26b9d251b72c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18390837-1c81-4d1c-ad34-85e4d5045e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7343de51-1fa3-4274-add5-b19226cf3462",
        "cursor": {
          "ref": "113c4d70-13e6-4f4d-8572-dd52d92bc47f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c5cb8407-5281-4ca8-8d93-bb0e222740ba"
        },
        "item": {
          "id": "7343de51-1fa3-4274-add5-b19226cf3462",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c7666038-e9e3-4db8-a6e4-46eb4196d40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eab8e8-8d07-4bb0-85e3-e19c33fde3ef",
        "cursor": {
          "ref": "b5e68fd6-193d-4c7c-b6a8-20212694b106",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b44673ea-abe8-48bd-878c-091efbf8d93e"
        },
        "item": {
          "id": "d3eab8e8-8d07-4bb0-85e3-e19c33fde3ef",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "649e9d05-ead3-4f7b-8579-39f1e792a0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6390d88-70ce-43dd-b0b3-3a23cdfb9ace",
        "cursor": {
          "ref": "4496c421-22c2-4754-8ac7-894eee67ab2b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5c7d3ce2-2d11-4afc-9268-f7f6463a11da"
        },
        "item": {
          "id": "e6390d88-70ce-43dd-b0b3-3a23cdfb9ace",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5cece2b1-e197-4f69-b495-cdd163c384ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 162,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "365a7932-adcf-4893-a8e9-494226355c19",
        "cursor": {
          "ref": "a8a060eb-2090-4359-819f-aa49dad76065",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1664711f-ea27-4f42-a1a1-cb59d2a25b62"
        },
        "item": {
          "id": "365a7932-adcf-4893-a8e9-494226355c19",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "10f4fa03-f7e0-4d00-93a0-bd6b86fa3fa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 147,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7f699505-9f91-43ca-b515-865cdc672b84",
        "cursor": {
          "ref": "7e0011ec-790c-4e35-b352-f5444d377e8f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "72d500fe-6344-45fb-962d-28ed6e4f0c6e"
        },
        "item": {
          "id": "7f699505-9f91-43ca-b515-865cdc672b84",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1fc8ab87-a914-4725-aa02-df8d92f2ba14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196fb0e4-518d-4b6a-98e9-a3c70ce3673d",
        "cursor": {
          "ref": "dc0e8369-1787-4f17-af62-2d20b8512443",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5532c928-c5ae-4f67-9192-c7834c693738"
        },
        "item": {
          "id": "196fb0e4-518d-4b6a-98e9-a3c70ce3673d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b3ce10ec-5798-4087-9002-c76fa09def50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2b3767-7ff8-49a8-a5a3-1794f368ceff",
        "cursor": {
          "ref": "786b4cfc-ac49-4199-9b8e-fd729c910937",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "97332282-7db5-42f7-96e1-9bace45d784f"
        },
        "item": {
          "id": "4d2b3767-7ff8-49a8-a5a3-1794f368ceff",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d6f1493-e5dd-4442-825f-1a76c7d342b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f91e03-cc96-40bf-b91b-9dc84b608a2b",
        "cursor": {
          "ref": "341cd16b-a46a-4705-9e2e-daf56eeca155",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b64c3036-e1d0-4547-8fc8-cf4d4a1e3837"
        },
        "item": {
          "id": "00f91e03-cc96-40bf-b91b-9dc84b608a2b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3ebaca1a-04e3-4a5b-bdce-9a5f8877a14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d4ecd3-654e-40a4-b365-b779f0112819",
        "cursor": {
          "ref": "b87a6a36-260b-4f21-942a-70855b95ee1f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e5bb7c0c-8031-42df-84ab-6e470de99729"
        },
        "item": {
          "id": "d4d4ecd3-654e-40a4-b365-b779f0112819",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e6244030-25fb-43ea-a760-d074de9b891b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745aabe7-2d31-4897-9f48-6c0122305f29",
        "cursor": {
          "ref": "7af71e96-285b-46b6-80a0-7b1e3f6c961d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d8e2e93b-0c28-4ad3-8245-9e8aa46d5a7e"
        },
        "item": {
          "id": "745aabe7-2d31-4897-9f48-6c0122305f29",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e5c10e51-5b54-4394-9eb0-82e24993ae20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44acaca0-444f-43d7-a1b0-e7687b397f21",
        "cursor": {
          "ref": "c61f058f-696f-42e6-8337-902f77c545ad",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2e1cdd7c-6cd1-488a-b8b7-978530e5917a"
        },
        "item": {
          "id": "44acaca0-444f-43d7-a1b0-e7687b397f21",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e4e8c7f5-ade7-4599-8bfc-e0303d9c2970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b24f9da-7ef7-431d-94bf-4dcfd62e9986",
        "cursor": {
          "ref": "f248e4f5-8ac0-41e7-995d-efce602b9b9b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "69f7e509-1936-4f14-ae0c-8bbf49ba92f9"
        },
        "item": {
          "id": "3b24f9da-7ef7-431d-94bf-4dcfd62e9986",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0f4e6007-613d-4ccd-b485-db9eb80dc73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03093585-60b8-4faa-bd83-bb266f99dcad",
        "cursor": {
          "ref": "994a269e-7b40-45b6-8020-6732ce9014ac",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "facf9f6b-2e11-42c6-a9ff-d91a5d54d93c"
        },
        "item": {
          "id": "03093585-60b8-4faa-bd83-bb266f99dcad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e3c4147d-ce05-454a-b8bb-0b440f037f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d12432-cd23-41bf-9a08-85eb6a208606",
        "cursor": {
          "ref": "4a3e9b16-652c-4229-9f21-0c7c18bea6e4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ff309d21-84a2-4b17-9e4f-22b946d82f50"
        },
        "item": {
          "id": "a0d12432-cd23-41bf-9a08-85eb6a208606",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d52ebb67-d046-4a54-8c00-2a99de451fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd5654b-808b-46dd-a2ef-e187757bc069",
        "cursor": {
          "ref": "8667fc32-cb4e-4193-9159-f637faa8c122",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "33245323-e52b-421d-8af1-d876de96265e"
        },
        "item": {
          "id": "dcd5654b-808b-46dd-a2ef-e187757bc069",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d0983b58-2a49-44a1-b1f4-296658527517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eb388e-cdf5-4359-9a8b-de82a28e1515",
        "cursor": {
          "ref": "3a7c9545-c4d1-4b7c-9530-ae083e44bd24",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "236b5506-7a14-4ed0-991d-9276154f2658"
        },
        "item": {
          "id": "90eb388e-cdf5-4359-9a8b-de82a28e1515",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e5c563b1-3e5d-44f5-b453-60563b2b4bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef715d59-8493-4ccd-8ca0-b3004e632162",
        "cursor": {
          "ref": "6907e9c4-83e8-4fd9-8599-4685748c5cc8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f3b9dbc1-9bb0-4972-96a5-7c776e9adfce"
        },
        "item": {
          "id": "ef715d59-8493-4ccd-8ca0-b3004e632162",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c6dbd883-78ba-44fe-8115-5915b5f0596b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca821f4-8a84-461a-afe7-65bf40441255",
        "cursor": {
          "ref": "c277d6fc-f8a0-439a-ac25-3358a58b38a5",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f089eba6-ad98-42bd-9e50-9f10c9e81851"
        },
        "item": {
          "id": "eca821f4-8a84-461a-afe7-65bf40441255",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3b30bca4-ff2d-45ff-8857-7a5948e36637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774fad9e-85d6-421e-b58e-ad77df970610",
        "cursor": {
          "ref": "3ca56d42-bd68-49a9-ba1e-b8e2dfe2e234",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ff0fd9ca-d912-4162-9931-7aac1b95cf6e"
        },
        "item": {
          "id": "774fad9e-85d6-421e-b58e-ad77df970610",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1f698bd8-e5cd-439b-980e-9db56e0f56d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c5230e-3ca5-4ab9-8425-e686fe6753e5",
        "cursor": {
          "ref": "ad4bfc10-600d-463b-8b75-7f1ab6f7178f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0bfedd9b-7e08-4881-bc3b-def6d291e5d0"
        },
        "item": {
          "id": "b0c5230e-3ca5-4ab9-8425-e686fe6753e5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8f99bc21-b3e1-43f3-bf1f-f52c837a018c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59873d1-36f3-4d29-87bc-60df93456c29",
        "cursor": {
          "ref": "3a42603e-03c8-4ea1-ae05-a6515b4d1222",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "107d48f1-2867-43b4-89dd-5e4020ca84ef"
        },
        "item": {
          "id": "b59873d1-36f3-4d29-87bc-60df93456c29",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1765dc32-54f0-4947-98ab-9edb608e1581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bcded5-d38b-40b0-9e05-f88c9404205d",
        "cursor": {
          "ref": "03606e28-7e26-41bd-b370-edb8fc66d92e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "84d54ca2-bac6-40d7-8038-315ff5d1e16e"
        },
        "item": {
          "id": "62bcded5-d38b-40b0-9e05-f88c9404205d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ecb7a3da-f9e9-44eb-a462-bb03dbe30490",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 142,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5d387c57-e35e-4f1c-98e2-7daae93992cf",
        "cursor": {
          "ref": "841bb958-c1a5-432e-9bd8-8065503866e4",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "99673993-a651-4f90-b660-c9c3ca2a3afe"
        },
        "item": {
          "id": "5d387c57-e35e-4f1c-98e2-7daae93992cf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "659c9dd6-f6b3-4c4e-8f31-3f14c6e9bf28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e7f043-0b1d-4e16-9bb3-e45f95139d6e",
        "cursor": {
          "ref": "70df7cd1-45f6-4853-bd8b-cb492519c56a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d612e9d3-ac28-4c80-93f8-2e270bc7af76"
        },
        "item": {
          "id": "99e7f043-0b1d-4e16-9bb3-e45f95139d6e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f3a664dc-fdc6-4296-842f-7bfc38d33a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f66a0b6-f2e7-4791-ac80-60f1579dfc2d",
        "cursor": {
          "ref": "ef0d9755-b9fb-4939-959a-facc5c2d63e0",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6657fc93-7533-4aee-900e-635f3aa40887"
        },
        "item": {
          "id": "0f66a0b6-f2e7-4791-ac80-60f1579dfc2d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "67cb058b-3a0e-485b-85ff-0831267fa578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fcaf86-79c2-444f-97c8-49372403587a",
        "cursor": {
          "ref": "25b0708e-b40f-4332-bfb7-732ae9049926",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0af37588-b71c-403b-b511-14492227f926"
        },
        "item": {
          "id": "25fcaf86-79c2-444f-97c8-49372403587a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c0183aa4-758e-4113-a3d3-16efe65bc33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5952c9d-b743-40f8-95f0-e94401403797",
        "cursor": {
          "ref": "30a12457-ec82-48a4-910c-597b759d74e5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "741ec3b3-c47d-4bae-8d1d-e3fdbbde2023"
        },
        "item": {
          "id": "b5952c9d-b743-40f8-95f0-e94401403797",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "da9c288e-47fe-42c5-8d50-74b0e0fa2d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c96d53-7654-46ac-9fe5-1478ca13aa69",
        "cursor": {
          "ref": "32a12057-125a-499d-9be9-a689fd1ae2a1",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a811496e-1160-4448-85a4-96db375ffc52"
        },
        "item": {
          "id": "90c96d53-7654-46ac-9fe5-1478ca13aa69",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "114a4fe3-d817-407e-add1-fef9e6f6f0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3412220-f63b-448c-b402-81a80a301c2e",
        "cursor": {
          "ref": "f67115eb-8cf1-4b70-8a1d-180401f9ec2c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d2454d8b-bd32-45cc-b729-02309b7bd791"
        },
        "item": {
          "id": "d3412220-f63b-448c-b402-81a80a301c2e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e4cd5e5e-1e08-42c3-8671-f26d2415ee62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2405d323-a514-450c-992d-f18c5382c54a",
        "cursor": {
          "ref": "be7589bf-5f7c-4032-ad40-ace362a521c8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6b19fd5e-e5e7-4a3b-a49e-bf8c0f4110b8"
        },
        "item": {
          "id": "2405d323-a514-450c-992d-f18c5382c54a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "accad6ec-4ab3-4dec-9e3a-5f5d09a5d745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e00991-e040-4bfc-b7e3-c8c85d4c7bf8",
        "cursor": {
          "ref": "9f5ff285-d030-487d-9041-bc1f08ab6181",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "59fb47b8-ce00-4999-8e45-075611b4e7fc"
        },
        "item": {
          "id": "22e00991-e040-4bfc-b7e3-c8c85d4c7bf8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2ef8c82a-8409-4ef7-9c3d-6be91c41aacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7841094-6a6e-4b14-974b-7016ab58069c",
        "cursor": {
          "ref": "05db8b81-48a1-47c8-a84b-cb8c2325a7db",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eb615fa6-0530-4778-a473-8eb85421353d"
        },
        "item": {
          "id": "d7841094-6a6e-4b14-974b-7016ab58069c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ed8eb5ee-2533-4167-b14c-f36f53368d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f8a353-f74b-4256-84fe-0a4fd38e49f7",
        "cursor": {
          "ref": "c61a9b47-fb68-49c2-b1e2-5867c77c3b91",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "50a955e3-225d-4ea8-8074-829c8ee08d27"
        },
        "item": {
          "id": "88f8a353-f74b-4256-84fe-0a4fd38e49f7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1da25cda-28ca-4455-8647-554d6f19e6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01af977b-9c22-4b2a-a6ce-48537bec838c",
        "cursor": {
          "ref": "a77d8ece-da45-4a05-a0e5-38a97bba5b7d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7964fe81-8089-4cb7-8f94-da29ff750623"
        },
        "item": {
          "id": "01af977b-9c22-4b2a-a6ce-48537bec838c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2e2afc6e-f84d-46d7-b0c9-75d540935520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21da7a62-d7bc-42ff-ab71-22170c1ca8fb",
        "cursor": {
          "ref": "fb81e5bc-a620-454f-9bd8-a9f6d500ec1c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "acdb4b35-079f-448d-ad2f-f6423f06524a"
        },
        "item": {
          "id": "21da7a62-d7bc-42ff-ab71-22170c1ca8fb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2a4f6bed-eb36-4fb8-a300-ad758dd0be4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a79be51-78c3-488e-81bf-2cdb617c4832",
        "cursor": {
          "ref": "d9d0237a-1330-49ef-9896-28d68edd647a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "69b3b4b0-c417-4f7d-8d69-a2be8e3eac00"
        },
        "item": {
          "id": "7a79be51-78c3-488e-81bf-2cdb617c4832",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bddecfc0-84ab-42e6-b72a-9fa2ea59b6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c2e7f4-b155-4054-85c5-2c7344d1aba5",
        "cursor": {
          "ref": "b402306a-9a8a-4357-b443-794527967df3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2cdb22eb-1c31-4688-b231-c3ee8e7748d5"
        },
        "item": {
          "id": "44c2e7f4-b155-4054-85c5-2c7344d1aba5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8fc111b-b0fe-493f-9fa4-ca9aa9e646a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "17fd8b57-904c-4c14-b0e1-0a5039e4b419",
        "cursor": {
          "ref": "6bb7dd26-95da-49ce-997e-a5b7ca140a86",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ec17f64f-b339-44fc-b98d-1fb1b4423289"
        },
        "item": {
          "id": "17fd8b57-904c-4c14-b0e1-0a5039e4b419",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "465b1d47-836b-4fb7-964e-8b3718be3f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ef3560-2ba3-40ae-aa3a-61303bc7a787",
        "cursor": {
          "ref": "af67bffd-88af-4abd-a4d3-89282c28c5b5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f4a95aa6-2efa-4544-a336-44077ee651a1"
        },
        "item": {
          "id": "f8ef3560-2ba3-40ae-aa3a-61303bc7a787",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "98633908-028f-4b8e-b53d-e74162f4d8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac776e9e-1c83-4d99-821c-d1acf4adcfcd",
        "cursor": {
          "ref": "6ee49aa6-407d-4713-b7e6-5070f40b4aef",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "08352970-40f3-44a4-94b5-bbb3a688ba8d"
        },
        "item": {
          "id": "ac776e9e-1c83-4d99-821c-d1acf4adcfcd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e9b2d76-f79d-4a61-8455-7e322facf0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956f374d-6a11-48b4-9b75-9d56b31a6acd",
        "cursor": {
          "ref": "b1b3900f-da2d-4a13-b9a1-5ead1665b9fd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "35e7f0d0-c355-426d-bd36-0aa317df5984"
        },
        "item": {
          "id": "956f374d-6a11-48b4-9b75-9d56b31a6acd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "af9229bc-f755-4406-b7bd-4c66578f3934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a0b1d4-4e52-4367-b988-54cb4b167585",
        "cursor": {
          "ref": "e78923e7-9093-4882-a08c-436560b0b3df",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "00e79c86-9393-4972-a50d-178eaa44dc60"
        },
        "item": {
          "id": "37a0b1d4-4e52-4367-b988-54cb4b167585",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1ba03634-33ce-4828-b92d-2d496cbe558e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33a06cf-f0dc-4736-b2a7-847e01ef3667",
        "cursor": {
          "ref": "6fbaa92c-b16e-4f48-beb1-3e6d168eb64e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9dc9ef82-275c-4dbd-af10-e5394c0b6b95"
        },
        "item": {
          "id": "c33a06cf-f0dc-4736-b2a7-847e01ef3667",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a8cfb4f6-aba8-4ca2-8aad-5690d0faeff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacc5e72-7d19-46f8-b92e-98e78329cb79",
        "cursor": {
          "ref": "e6a24301-aed6-461e-b7ba-bc103c85ac43",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "446ac187-016f-47cb-871c-1299b31fbe6e"
        },
        "item": {
          "id": "dacc5e72-7d19-46f8-b92e-98e78329cb79",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "42644081-fddb-44cc-a703-05f62db589d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6fca00-9d3a-4160-871b-2af405400964",
        "cursor": {
          "ref": "d9617128-04f4-435d-8dda-b0167140a9d7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ed23d037-03b1-4d0a-bca6-1aa3ef1359c9"
        },
        "item": {
          "id": "0f6fca00-9d3a-4160-871b-2af405400964",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a195118c-30b8-4b3c-a4e5-44802d8d0a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2391bfe4-13b1-4dec-8f94-7eb626fe8237",
        "cursor": {
          "ref": "fddbfd9c-6e02-4704-82b9-a90b8cb3a0ed",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c1e33552-23c5-4449-b6bc-872d1f5ee7a9"
        },
        "item": {
          "id": "2391bfe4-13b1-4dec-8f94-7eb626fe8237",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f30ac12e-f171-473a-b386-6def808f0f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5aec04-41ea-4912-954e-6f4efeda489e",
        "cursor": {
          "ref": "75a401f2-f6ad-4363-b309-e1061a464e71",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4507ab6b-a45e-43a2-a6fb-84506a5031a8"
        },
        "item": {
          "id": "3b5aec04-41ea-4912-954e-6f4efeda489e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0e2d0de0-3376-4076-bf1b-c47969e4ecfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5d658a-d31f-49f1-891f-202b13035bfa",
        "cursor": {
          "ref": "9136e21c-77c5-418d-8d36-62cff47c1899",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e2e355d2-1bc5-4e8d-907d-9cee84144991"
        },
        "item": {
          "id": "8a5d658a-d31f-49f1-891f-202b13035bfa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "433d88bd-e91b-42aa-9c76-2ecccdd66c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008319dd-e7d6-46c7-b828-524b320380b5",
        "cursor": {
          "ref": "d8817be8-2520-4533-920d-fb0849c505f3",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c1b82424-a63a-4708-bb85-34996feb12d8"
        },
        "item": {
          "id": "008319dd-e7d6-46c7-b828-524b320380b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "db242381-a850-4fab-8adf-3df807c99cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be82ad4-dca7-426f-8a80-c5521817fcf3",
        "cursor": {
          "ref": "1a47af59-0570-4f99-b5ee-cfdcbd3ca109",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f39cabc6-eaad-479c-b6f5-47330658d05c"
        },
        "item": {
          "id": "9be82ad4-dca7-426f-8a80-c5521817fcf3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e5953417-67d6-4c3a-bca1-9d44b0ed76fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c39996f-47c1-4e33-82ec-13db17bc6b44",
        "cursor": {
          "ref": "740ad3e2-f4ee-4779-ab59-4f1530ff4bab",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7861dfdb-7150-47dc-9b95-b552b38ce54c"
        },
        "item": {
          "id": "7c39996f-47c1-4e33-82ec-13db17bc6b44",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d591abd9-4b5d-4bc6-ac87-11abbdb73079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0681c896-e83c-42c9-9919-ab67fb406642",
        "cursor": {
          "ref": "51601f9a-470d-46a0-afc5-40e0a1826061",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c7a9f15f-dfd9-4ec1-9b7f-e40a1a09c476"
        },
        "item": {
          "id": "0681c896-e83c-42c9-9919-ab67fb406642",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f540e7cd-d580-4a88-9935-10de13dc6dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2b7e62-6510-4365-9ef6-5863c1e2ffbd",
        "cursor": {
          "ref": "e29b87d7-921a-4fdb-a432-de469d303f4e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2c3f24c5-a3e5-4ba4-8834-3e06ff7e6cc5"
        },
        "item": {
          "id": "3a2b7e62-6510-4365-9ef6-5863c1e2ffbd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4b880c38-5699-41b4-89a5-03fe9c1d1a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4476dc7b-110e-4c5f-93e2-15167f9ca0ea",
        "cursor": {
          "ref": "cad12eeb-e100-48e2-aefa-57c2e99fa5da",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "81eeeb5a-6f39-4f69-abce-411c76d8366c"
        },
        "item": {
          "id": "4476dc7b-110e-4c5f-93e2-15167f9ca0ea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "109052b9-fe8e-4295-8bf5-22d7bf4191e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acc79bd-4bff-4401-b89f-1b855af3a812",
        "cursor": {
          "ref": "d8990887-af3d-4c1c-aa3a-c99cea5fcf40",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "274efcea-21e6-4995-b7d8-1a08343754bc"
        },
        "item": {
          "id": "1acc79bd-4bff-4401-b89f-1b855af3a812",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5dfd3b7c-1fbe-4e6c-8d5b-bcd6b86955cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07e475f-c6f9-40f0-9383-b9f09f2e896a",
        "cursor": {
          "ref": "153a064b-15da-451d-b80d-cdbe2b679732",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0ce31052-16b7-4de7-993a-1418fe5f4a43"
        },
        "item": {
          "id": "a07e475f-c6f9-40f0-9383-b9f09f2e896a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1f66ae38-e466-41b5-a357-82669894eaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9975725-ca2e-40b4-aa9a-849f829c4216",
        "cursor": {
          "ref": "5a9d241f-84cc-482c-aa6f-2607e7fba61d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e953b90d-1ffe-4903-b7f8-d97966deb904"
        },
        "item": {
          "id": "b9975725-ca2e-40b4-aa9a-849f829c4216",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0a03ced9-b993-4283-8574-1a195f8b7b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631b0470-06d8-4654-9712-bc382e545b94",
        "cursor": {
          "ref": "00689ac1-098e-4e93-8488-71bbbf465e9c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "85421e70-c413-407a-b38d-2d6c71bc374a"
        },
        "item": {
          "id": "631b0470-06d8-4654-9712-bc382e545b94",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7c0e0117-9b66-42a0-8ffa-3fc296d31120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46666f02-5070-4b79-bad1-0f513dc2b54f",
        "cursor": {
          "ref": "53d0b111-ceb1-42bb-9adc-8fc6098c03a0",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e430c9d2-7f87-4d43-9d4f-b042dade9926"
        },
        "item": {
          "id": "46666f02-5070-4b79-bad1-0f513dc2b54f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2e2d5530-70d8-4b6c-b515-adfd99a9edcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a3b079-c2f9-4e6a-80a3-4b70156ca3b1",
        "cursor": {
          "ref": "040149a3-ed20-4fe4-bb64-dd48ff758fcf",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5ccfb39-847a-4fc7-a8c1-89e6bd1fa3df"
        },
        "item": {
          "id": "50a3b079-c2f9-4e6a-80a3-4b70156ca3b1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "571714e4-99db-462c-b293-1e9ac82b9636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60ad487-da26-4511-aa9e-5f500fb63f0a",
        "cursor": {
          "ref": "09dff712-b51a-4693-8d12-5ee2372adc77",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d41b295a-546f-4ca8-8b90-989189009b6b"
        },
        "item": {
          "id": "a60ad487-da26-4511-aa9e-5f500fb63f0a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4b885d97-e0ef-4379-be03-adcc656e91fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a513592c-7776-4c00-879d-f3b9d061bbf5",
        "cursor": {
          "ref": "11c80497-e0b6-4160-a6d0-9c6709ed3cb8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "550585a0-0820-435b-934d-93af7b954e36"
        },
        "item": {
          "id": "a513592c-7776-4c00-879d-f3b9d061bbf5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3089d4d9-7783-41cd-98cb-041dccd99546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d77ddb4-9811-4697-86ab-7af668bf8f95",
        "cursor": {
          "ref": "ff937c4e-c877-416e-a5ab-473bc4602d8d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "97cc5fc3-b239-47e6-b0e0-195291c41808"
        },
        "item": {
          "id": "4d77ddb4-9811-4697-86ab-7af668bf8f95",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d7321b03-6020-4549-a5b7-e43ac8bbbaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a49b330-1f7d-45e8-b9b2-d6ecc9ea6adb",
        "cursor": {
          "ref": "40a7c8af-806a-4e5e-bdb6-3f3ecc5712c5",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cf54260b-8cb5-408d-a13f-84625d0f7960"
        },
        "item": {
          "id": "4a49b330-1f7d-45e8-b9b2-d6ecc9ea6adb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8fedd87e-b2c2-4bf6-b1f0-263e47c80523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98530bce-0e19-4526-97e4-917591f1591e",
        "cursor": {
          "ref": "bcb48e5f-93f3-4746-a1f5-5a742dcd65d0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "89f401ee-5e1e-44bd-8668-40f95087e929"
        },
        "item": {
          "id": "98530bce-0e19-4526-97e4-917591f1591e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "385be620-777b-4538-9978-7aabe569f648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aace7050-a0d4-454e-8a87-d3594eae9e4a",
        "cursor": {
          "ref": "8a2577b1-74c1-43cb-9a5d-8ca482b216de",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9d2eb5b4-3fb0-43d3-970c-ba308f26c2bf"
        },
        "item": {
          "id": "aace7050-a0d4-454e-8a87-d3594eae9e4a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "33dd271d-29d8-4164-a911-dab29f0562e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dff7bf-9659-47a0-80ab-b4258de4e281",
        "cursor": {
          "ref": "b3aca955-eb2f-4c00-8630-4198f7377d43",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "69635425-11aa-4388-bfb5-2f31c427bbe4"
        },
        "item": {
          "id": "74dff7bf-9659-47a0-80ab-b4258de4e281",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a9e4008-dc92-4579-8119-4ae11014b40c",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c89d7362-4f12-4143-bd73-30a34d9368f6",
        "cursor": {
          "ref": "b3ab3153-3247-492c-b874-ec3ca67850c9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b91eb505-6dca-48cd-8b32-6c8d71114614"
        },
        "item": {
          "id": "c89d7362-4f12-4143-bd73-30a34d9368f6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7d49ffa2-90ad-4003-b6d1-f59095cd11a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae5c310-0975-4f47-85b2-d74448e923dd",
        "cursor": {
          "ref": "6507559e-276c-4b02-905d-0b3079bde6bb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3e08f23a-5f59-489c-bb6d-119dc3484b20"
        },
        "item": {
          "id": "5ae5c310-0975-4f47-85b2-d74448e923dd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0a6ee16d-536c-4d52-afb2-42b5a10ddab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1862b0e0-7f61-4221-9a90-4a830ad1b1e8",
        "cursor": {
          "ref": "e43fd9ee-6e92-4040-8cdb-bbdce11fbe74",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7fb0b9a3-2891-4d7c-a6b0-469e5f5765ea"
        },
        "item": {
          "id": "1862b0e0-7f61-4221-9a90-4a830ad1b1e8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc053cf2-0d03-4597-8794-c535cd65e24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee6d2fb-1046-4c96-b6b7-aaccfa00e76e",
        "cursor": {
          "ref": "e66da1d6-066d-41d4-895d-0a636a34d0d8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e354d4b0-7560-4a01-8e0d-6d25f7828d4b"
        },
        "item": {
          "id": "bee6d2fb-1046-4c96-b6b7-aaccfa00e76e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b3d80b2e-15f7-4014-9b08-f979e7531998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82b6d03-0a5e-4e85-b47d-64c9666cb0b1",
        "cursor": {
          "ref": "016729a1-7e06-40b5-9f8e-598956a14e16",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "be695cf6-1575-486a-af12-626b9eb35ca7"
        },
        "item": {
          "id": "f82b6d03-0a5e-4e85-b47d-64c9666cb0b1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "502f9baa-a29d-426d-85d8-24400f1bfe33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f5c7f9-4fab-4917-b21c-cbe6f3ee2a75",
        "cursor": {
          "ref": "8e42efe7-652a-41be-8542-16070b352a14",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3f5e0806-30ad-4e18-9191-723c68ae1a3a"
        },
        "item": {
          "id": "55f5c7f9-4fab-4917-b21c-cbe6f3ee2a75",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "77aa3fc0-ca3a-417f-b653-7a609feb8739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616a1248-444b-4d92-ac82-0d9993561f65",
        "cursor": {
          "ref": "e99dec45-e2ee-41cc-b4cd-24fdfb135e57",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3321474f-1aa7-4b56-936f-1f5fa2747c5e"
        },
        "item": {
          "id": "616a1248-444b-4d92-ac82-0d9993561f65",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3c5fb64d-0492-44a2-a67d-b25cd759e268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02737f14-04b0-49fd-9368-6bcc30f094e6",
        "cursor": {
          "ref": "db85d2c2-e1ab-4aa5-b832-9f49597aa3f2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ad450aff-b9f4-4eef-900a-dc2f48a3306b"
        },
        "item": {
          "id": "02737f14-04b0-49fd-9368-6bcc30f094e6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d8984013-c63f-43eb-85ad-8c97512ebc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487734cd-2250-42e6-a9e5-afaf0ff1c2c1",
        "cursor": {
          "ref": "6f6a70be-e3c5-4b39-ab8b-dafe8cb44739",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d4b40190-4b28-4f82-84ac-4964bf39e99b"
        },
        "item": {
          "id": "487734cd-2250-42e6-a9e5-afaf0ff1c2c1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "777a2846-377a-4ffd-a53a-1785ee6a5dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e98d285-a1df-4426-a48e-8354ff0fe928",
        "cursor": {
          "ref": "24be4d44-1d48-4ff8-b3e6-54e1b703c7f7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "728dad9a-d6ab-4bd0-91aa-d3c6bddcf96d"
        },
        "item": {
          "id": "9e98d285-a1df-4426-a48e-8354ff0fe928",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fe1dc0a9-db37-4a1d-b49d-b554322872f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329719dd-109d-4b9e-93ae-1d0357a28c84",
        "cursor": {
          "ref": "2e1befdf-bbdc-4e85-9581-a18552785bac",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0bc162f-d668-4ae0-a86d-10236881044b"
        },
        "item": {
          "id": "329719dd-109d-4b9e-93ae-1d0357a28c84",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "34e447f6-53fa-4d81-9ae7-fae59c4fab25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89002e76-e4ea-43d4-95b3-d1ef69b5c9e2",
        "cursor": {
          "ref": "d79e1835-c3d1-49e1-b490-3d4a21dc9dfb",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b84a2e6c-294f-4831-9a7f-0fb9453dce16"
        },
        "item": {
          "id": "89002e76-e4ea-43d4-95b3-d1ef69b5c9e2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fd775016-7528-481f-b4ff-b190ca46e2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741bda8a-a1de-4dde-8541-d08bdbb7031b",
        "cursor": {
          "ref": "82710372-aa8c-481a-9185-515d4eef2e57",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ea5b9bca-8d4b-449e-8ddb-a7d543ce1aec"
        },
        "item": {
          "id": "741bda8a-a1de-4dde-8541-d08bdbb7031b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "97266c41-4d35-4437-93a5-34718f51cc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26da6e67-758b-4268-bbb9-73c010c8cdad",
        "cursor": {
          "ref": "42269175-5409-4f4e-a06c-382ff586e507",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "025497b6-f7e8-4ca2-ae9e-b63b14933abf"
        },
        "item": {
          "id": "26da6e67-758b-4268-bbb9-73c010c8cdad",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d3de104a-f8a4-4a16-b4eb-525dd22112c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86914777-c878-418c-bb5c-ae36d0f3d66c",
        "cursor": {
          "ref": "f146d7fb-a35a-4604-9858-2ba3aa25c95a",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2e37eb26-9a83-4eda-8887-02c4d00e35d6"
        },
        "item": {
          "id": "86914777-c878-418c-bb5c-ae36d0f3d66c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "99350731-2a3f-4bad-966e-e31b4c89db66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef2f662-7430-46ed-be72-1b638fdcb85f",
        "cursor": {
          "ref": "b1f365d4-a325-4be8-8240-b3b91f292354",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4a69fcbe-7215-4273-a8d8-7fb7c3a32a40"
        },
        "item": {
          "id": "8ef2f662-7430-46ed-be72-1b638fdcb85f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8bd3b552-5a93-46d9-9f1d-6fbec946f061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a741bed-26ab-4bbb-964c-3ccf2d1f6716",
        "cursor": {
          "ref": "96e20414-3aea-46e3-97a6-3d8abda46f87",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bead505a-ab50-41e5-ab59-0063494315ef"
        },
        "item": {
          "id": "2a741bed-26ab-4bbb-964c-3ccf2d1f6716",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "570e967b-da10-4043-9673-131b4d7b68b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115289f2-1199-401d-83e7-d739c0093e25",
        "cursor": {
          "ref": "d9037d1c-20cc-49ba-9e75-aa6d1a5c41a3",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "78fd2124-aa84-449c-95b0-a16420856aeb"
        },
        "item": {
          "id": "115289f2-1199-401d-83e7-d739c0093e25",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "754fe02e-bfc8-4198-95db-e0bab6b60562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24c44bd-ed5d-477c-9676-f6d3103156b1",
        "cursor": {
          "ref": "3f08587b-889d-46b2-82bf-cfb83dec7b39",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "53b442b9-b89a-447a-8944-74cd6bacd91a"
        },
        "item": {
          "id": "c24c44bd-ed5d-477c-9676-f6d3103156b1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9342264d-ad2c-4557-b66d-11cb2c220ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e789e0-a5f2-4604-ac68-99e4bd5fc7f9",
        "cursor": {
          "ref": "89854362-db17-4b97-a91a-55cc1c766986",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "136ee88c-d600-4841-9f54-9c5172c7f0b5"
        },
        "item": {
          "id": "43e789e0-a5f2-4604-ac68-99e4bd5fc7f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e422fc0e-e45e-413c-8bcb-081a4272431f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb27fa6f-1b87-4b0f-af14-f6d132a9a734",
        "cursor": {
          "ref": "aef224f5-40d6-4a23-a657-192ddfd5fbc7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2b44aec5-7a58-48fb-b89d-618e7ab7fe19"
        },
        "item": {
          "id": "eb27fa6f-1b87-4b0f-af14-f6d132a9a734",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bc7c8bad-061a-4e81-82cc-cac7ded88e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71512382-4a06-40a1-8132-6b6497ac1aa0",
        "cursor": {
          "ref": "fb273646-3662-4f43-bf36-f4c1d71b6e6c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "25937630-b3d0-4ef5-84a9-b28605fbf3e1"
        },
        "item": {
          "id": "71512382-4a06-40a1-8132-6b6497ac1aa0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cf8267cd-0e8d-44e4-b525-313bfd8ad1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582f9778-48be-4bab-895a-472035207ea8",
        "cursor": {
          "ref": "4b486d99-3bea-4193-9e9f-690827278a1c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "972d2fd5-ff9c-4876-8dbc-9731410e0ecd"
        },
        "item": {
          "id": "582f9778-48be-4bab-895a-472035207ea8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "09cba25a-9e75-442a-b8ab-7af1c064497e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60eb01e4-9f37-4eb4-b75f-e60f72a5d06f",
        "cursor": {
          "ref": "e2f690cf-242f-47ee-bd70-898e26018909",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8243ac66-8ead-47b9-b15f-eeb53dd12cc2"
        },
        "item": {
          "id": "60eb01e4-9f37-4eb4-b75f-e60f72a5d06f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "585cb467-064b-4a94-a16e-a4c17c231b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50467da2-135c-40e2-b3fa-a3813dc47edd",
        "cursor": {
          "ref": "1395504a-81c1-49d4-bf4a-b41c98b151d3",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6cba6541-fc20-466c-b595-df1d8fcc4cc7"
        },
        "item": {
          "id": "50467da2-135c-40e2-b3fa-a3813dc47edd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "437cc64a-e264-457f-8fa9-d6ca7c3e1b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e54efe3-23f9-49d3-a740-89f945ccfc2f",
        "cursor": {
          "ref": "5ec2bf46-ad80-482e-8256-b8476b869cb4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ea4e7f97-0393-4561-bf97-f7c0eadce70e"
        },
        "item": {
          "id": "7e54efe3-23f9-49d3-a740-89f945ccfc2f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "704e611d-2ee8-4bcc-9c48-f9254d68c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3eee87-defd-4622-ba18-b1c01f67a619",
        "cursor": {
          "ref": "d39f27e5-9f25-4826-8a26-796a79ae2512",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "83ebadd3-23b0-4a4e-b814-1b5747034a94"
        },
        "item": {
          "id": "ea3eee87-defd-4622-ba18-b1c01f67a619",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f41513b6-56d6-438e-be51-104b3c79f770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1e518b-58f8-46d6-9666-9ecb61e41498",
        "cursor": {
          "ref": "afd06829-86af-4a77-9848-a9f24d3d6900",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4c19d359-74ab-40bc-a27b-0c0a63ef0e7d"
        },
        "item": {
          "id": "de1e518b-58f8-46d6-9666-9ecb61e41498",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f6a1562d-68a9-4948-ad83-f6a6f3126f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d42a30-2b06-4ea2-bb82-aca1323e8af0",
        "cursor": {
          "ref": "7c99f4ad-6dc5-4f98-8468-ac3ccc499471",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "710a8e55-cbe0-451f-b996-08161da96920"
        },
        "item": {
          "id": "63d42a30-2b06-4ea2-bb82-aca1323e8af0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "da17fe73-978d-4211-8bb2-9eb5772ad488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774c2320-e11e-4eea-964d-ac8bc3f834fb",
        "cursor": {
          "ref": "51ee851f-9fb7-4629-858d-47cbf1828b85",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9754c9ac-8f5f-4ff5-ad4d-a5a230075d20"
        },
        "item": {
          "id": "774c2320-e11e-4eea-964d-ac8bc3f834fb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "41c19668-e474-45ed-a24f-ce3586636cef",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0ae85182-6608-4271-9d24-4f4d9f4ef74b",
        "cursor": {
          "ref": "a346972f-3de0-4796-a6a4-7deae6bf97ed",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "76f3fb84-0066-4a75-b2e0-8a7cc4617ca2"
        },
        "item": {
          "id": "0ae85182-6608-4271-9d24-4f4d9f4ef74b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b0485aa2-de3e-49bd-9d89-f71dbcffcc2a",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "abd09ea6-b7c4-44f2-b31a-361c595d51d7",
        "cursor": {
          "ref": "9b8744fb-8074-4b0e-817a-9390c199f7d6",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "43277f5b-3daf-4525-bc5c-b980b22f0856"
        },
        "item": {
          "id": "abd09ea6-b7c4-44f2-b31a-361c595d51d7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2e3ae57e-d275-4dcc-81aa-d67f5f54015f",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "10bb197b-0174-4765-b956-bdf7ab8fc2aa",
        "cursor": {
          "ref": "c041c828-ac7b-4aaa-b8eb-f79f323b37ae",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7f83e34c-a2e5-4c63-bf2d-180d408e3481"
        },
        "item": {
          "id": "10bb197b-0174-4765-b956-bdf7ab8fc2aa",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c05e40e5-b9f0-404d-81b7-bf26a044955d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3a3de9-e580-43c5-bce4-44be0fe1cc92",
        "cursor": {
          "ref": "914145f4-a9b6-496c-921e-f0b23a43e4fc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "218ecaf5-0a94-4469-8a2e-bd646682702c"
        },
        "item": {
          "id": "0d3a3de9-e580-43c5-bce4-44be0fe1cc92",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2ca811c5-40d0-4ba5-a8c2-5d376f62741b",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1ed7fea5-d3eb-42ab-b683-0866a860400c",
        "cursor": {
          "ref": "ebd50b33-f36e-4390-85c6-a58b7cd8d8e6",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca209298-3901-40c1-befe-19192aa4dbaa"
        },
        "item": {
          "id": "1ed7fea5-d3eb-42ab-b683-0866a860400c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5a53e8ed-af98-4e8e-90d1-e4534d79cbff",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "43e17210-8077-4def-90b5-0478ea86652a",
        "cursor": {
          "ref": "b178fd2f-4eb8-4a54-9bfd-2694d2366c88",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dcdd8cf6-17fd-4577-bc88-4c3e6033d7ba"
        },
        "item": {
          "id": "43e17210-8077-4def-90b5-0478ea86652a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4be3936-6b95-46cd-828d-b001e7badcff",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c5422a21-3926-4c3a-ba84-4be6dfbd124c",
        "cursor": {
          "ref": "724ec185-e15d-4d66-8b2d-8392a3af2431",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0f4339d5-cdd0-4233-8bbe-bc305411b12c"
        },
        "item": {
          "id": "c5422a21-3926-4c3a-ba84-4be6dfbd124c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7ad7831c-612e-47a8-b5f7-51704ffa1a37",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3ea3e291-b2ab-48ef-943f-48acccf31507",
        "cursor": {
          "ref": "92d6980b-16aa-4a73-aa65-38c36c1854b1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e2fc48c1-b94e-4c4b-8a8c-3b2995b47f66"
        },
        "item": {
          "id": "3ea3e291-b2ab-48ef-943f-48acccf31507",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bd566e20-f987-4676-8bc6-e9aeca64029e",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a86c15d6-63a1-469e-b3e0-6cb2181fc616",
        "cursor": {
          "ref": "54e951d1-7ef1-4702-b981-b6370debe8ab",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1f2f403a-f30b-43bb-9a58-f07afa32175a"
        },
        "item": {
          "id": "a86c15d6-63a1-469e-b3e0-6cb2181fc616",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f194dd9e-a1c3-48e3-85f7-fbcc16951e78",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a43b5bce-b8f6-4db0-b56b-d179d3c2cf46",
        "cursor": {
          "ref": "3897597c-1a56-4222-a0ec-77a6f60afbed",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0c0132ef-44d2-44e5-9d9a-f7aec418a0c8"
        },
        "item": {
          "id": "a43b5bce-b8f6-4db0-b56b-d179d3c2cf46",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a3dae1b-6d8c-4a46-b14c-15479242a908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fc2699-814c-40ac-83c3-fd1bdfd4d161",
        "cursor": {
          "ref": "94cd70c9-1c6b-417f-a0ca-28ea7bcac9ff",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7a6dd242-ffb5-46a3-8c70-99e8b87c4dc2"
        },
        "item": {
          "id": "50fc2699-814c-40ac-83c3-fd1bdfd4d161",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "171e2162-5cd9-4a97-bf31-c85981c500f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62275d70-bf4f-4161-b810-aa7a0bf09005",
        "cursor": {
          "ref": "e228f51d-2480-4642-866a-c15933f51ed4",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a19d6676-7fcb-4067-b76e-82fdcd617dd4"
        },
        "item": {
          "id": "62275d70-bf4f-4161-b810-aa7a0bf09005",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6ad57859-e43b-470b-ba00-328934a8a086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2947a4-92b7-45b0-b594-33e437e4d675",
        "cursor": {
          "ref": "44669ecc-a78d-463e-a61c-8dea347456b3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fd9b7724-cabd-46dc-af70-f56b4c20c80c"
        },
        "item": {
          "id": "6e2947a4-92b7-45b0-b594-33e437e4d675",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "11d76c29-6597-4ebc-8508-b361aa16466b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f3ff52-767d-49ec-8ab5-db8eb6408457",
        "cursor": {
          "ref": "856f3164-d215-4718-8b94-6dda9ddd0102",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "823f6287-8c76-4574-8daf-585bb4344925"
        },
        "item": {
          "id": "34f3ff52-767d-49ec-8ab5-db8eb6408457",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9753d6fb-9999-4318-8c47-a0e54ad23c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ed71c3-502a-4f06-9cb4-08094a94b020",
        "cursor": {
          "ref": "8e92a937-9a22-4f1b-ba76-719c8ba56844",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a89a07c6-82d1-4f0f-9224-de999347a547"
        },
        "item": {
          "id": "94ed71c3-502a-4f06-9cb4-08094a94b020",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ef314fd9-64b9-4b75-b4f0-6c13d5d16bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db82304-043f-4c25-bdb2-46656d9df59d",
        "cursor": {
          "ref": "28cb6254-b63b-486b-9b66-45cba67c511a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a88e7e90-d331-412f-b65d-659e5d82a7b1"
        },
        "item": {
          "id": "6db82304-043f-4c25-bdb2-46656d9df59d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4418f02c-8851-48f4-bea2-92b470e0e5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0280e89-c518-43b9-831c-5426ba014dca",
        "cursor": {
          "ref": "1f4e8236-4769-40bb-b3f3-efd009a3c136",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cb0f79d1-e7ed-4899-9ee2-96dd26695511"
        },
        "item": {
          "id": "b0280e89-c518-43b9-831c-5426ba014dca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b934e9f6-5685-49c9-810e-39915286c31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776f7e77-9a01-4208-9f26-e4bf3661443b",
        "cursor": {
          "ref": "3a6bbc75-5a4f-49fd-91c9-93127f458518",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1dd75be0-fd38-406d-822b-4c2a5e35f016"
        },
        "item": {
          "id": "776f7e77-9a01-4208-9f26-e4bf3661443b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a0926d84-0058-4967-ab7d-d93ba807fe00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb70212b-717d-4edd-907f-a22a8a7616d7",
        "cursor": {
          "ref": "7f0d2a3d-6cee-4ab4-bd90-23125f2125c0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9fd41cb4-10a3-4cc9-8461-e71445762793"
        },
        "item": {
          "id": "cb70212b-717d-4edd-907f-a22a8a7616d7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ae32289e-1a31-4bd0-8e7a-97a5d6db51dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2004e651-5d7d-48b2-937f-205f589f5f87",
        "cursor": {
          "ref": "ed0f7a06-8208-4649-80f0-d77ec72c63b2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d92fb955-daaa-485b-abfb-63893d5c6cac"
        },
        "item": {
          "id": "2004e651-5d7d-48b2-937f-205f589f5f87",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "29852f7c-759c-4732-958f-e2b895b7bffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2428867-c3a8-4bcd-bc06-b26271ac8134",
        "cursor": {
          "ref": "fdf0e961-7f01-4a11-a9f8-2d932ed21fd5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8fff7276-e85b-49c7-a104-91a7a206f91a"
        },
        "item": {
          "id": "f2428867-c3a8-4bcd-bc06-b26271ac8134",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f809da37-6ae4-4736-976e-ad5ea217284f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988f5134-8161-4c11-a29c-d455fa1b68dc",
        "cursor": {
          "ref": "cfa6c4d2-a83a-4e53-aa2f-591ccc248210",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ef2f583d-d0d9-43a6-a612-87ff2d13abc3"
        },
        "item": {
          "id": "988f5134-8161-4c11-a29c-d455fa1b68dc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0b570e97-dbd8-4dc9-b4d4-c59a0f5c3dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0793efd8-5070-4788-a99c-cce07184e3cc",
        "cursor": {
          "ref": "10c536ac-5cc1-40ba-9cfd-964c9c17c158",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3a02972f-7430-4057-bc38-9d3a2b5a6c36"
        },
        "item": {
          "id": "0793efd8-5070-4788-a99c-cce07184e3cc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6f487756-16aa-4cb4-85e4-28bd02533ef2",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "429d680c-3821-42b2-bd30-108e20fce054",
        "cursor": {
          "ref": "31b36162-6237-4f04-9757-c3845605fdf0",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "edde8157-0447-462b-a1f4-8a6063009507"
        },
        "item": {
          "id": "429d680c-3821-42b2-bd30-108e20fce054",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7873767c-589b-4f20-997b-f099949e0ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c82b279f-9a72-4258-b60b-be4c5521ce5f",
        "cursor": {
          "ref": "7439a7b1-7a48-4532-b06e-a8f2232d05f1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eb0c8423-5634-41e8-a606-42eb5c862d88"
        },
        "item": {
          "id": "c82b279f-9a72-4258-b60b-be4c5521ce5f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "55359b67-5f3d-488a-b0f4-3837efa95819",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "dd89245c-d522-4217-ab02-10fd3e854387",
        "cursor": {
          "ref": "f4acf32e-3aed-4ded-b780-4ea6235f07b5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7712953b-77c8-4e9d-aa86-a312eabbf550"
        },
        "item": {
          "id": "dd89245c-d522-4217-ab02-10fd3e854387",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6cacaee0-6007-472e-ba70-cd07dc5a42a0",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ddc4d7fe-8728-41f6-bb4b-f2b4d242ce86",
        "cursor": {
          "ref": "0a60f7f0-113f-4c6c-9ced-8c9d3e509cfc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b3558b84-cb09-4ca0-bb1c-d7ef8e1fc143"
        },
        "item": {
          "id": "ddc4d7fe-8728-41f6-bb4b-f2b4d242ce86",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ddbbc32c-18bc-40dd-8136-d8089c0e5a8f",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "23a43a73-7ada-4ffc-853f-e6d5d48d66fb",
        "cursor": {
          "ref": "ae975297-17f6-4fbf-b7fd-6b44b7a47d2d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fb6e935f-91b4-4982-bc5d-6aaf7164169b"
        },
        "item": {
          "id": "23a43a73-7ada-4ffc-853f-e6d5d48d66fb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "121e0205-56c4-4bb9-b374-e9ff0e648fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1127f706-e7c0-49cb-98b4-5cce9438282a",
        "cursor": {
          "ref": "d232dcc4-cd43-4012-ac80-ebf231d4ad80",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "af5e73d0-8e1e-499c-b051-d273c1436156"
        },
        "item": {
          "id": "1127f706-e7c0-49cb-98b4-5cce9438282a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e33877ef-4089-418e-839b-4ad550129b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faef039-1889-4871-bb3c-ab9c9e196516",
        "cursor": {
          "ref": "b822db01-a510-4895-b8ab-641011d8b584",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "54c20c3b-5e6e-4302-854a-5d34413f5db1"
        },
        "item": {
          "id": "7faef039-1889-4871-bb3c-ab9c9e196516",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e59b64a4-c517-47ad-a764-484edac6c719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b04d71-0467-4a2b-a0ca-44ac01b23b43",
        "cursor": {
          "ref": "ca599b6c-5693-4284-8d76-4c1c08ccc323",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "05f5647a-91e3-46d4-b144-44e4d614a51a"
        },
        "item": {
          "id": "45b04d71-0467-4a2b-a0ca-44ac01b23b43",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ace0338a-514e-482c-aba2-8b794d7fe4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4654bcf0-a782-4d7e-9986-5c30786a25b2",
        "cursor": {
          "ref": "776f03b3-afdc-4308-ae29-9ab5a5e5e24c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cf7c837f-3754-4cbe-8629-3480c3b3e3be"
        },
        "item": {
          "id": "4654bcf0-a782-4d7e-9986-5c30786a25b2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6bfbd581-a608-466b-85ac-125a51e9d0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7029e9-173f-4522-9e36-814ac1474779",
        "cursor": {
          "ref": "0829311e-5a22-4750-bc56-476edbbeef1e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "967b0a83-323b-4e8d-b828-0539bc5415c6"
        },
        "item": {
          "id": "bb7029e9-173f-4522-9e36-814ac1474779",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e2b9791-21c5-482a-921f-344231167bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892f3dee-301b-410f-a4f6-6fc303eca296",
        "cursor": {
          "ref": "2af5b0eb-6d0e-44a6-86a5-cf8e10c67b05",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e54f88da-dd0d-4161-904a-abd84d652865"
        },
        "item": {
          "id": "892f3dee-301b-410f-a4f6-6fc303eca296",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "153298a8-7a7b-4a5b-b621-f8969f60e742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54c217f-fa14-4ae4-94fa-4d1333256b37",
        "cursor": {
          "ref": "66d0c459-7154-4a74-9a27-7e1da088287b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "72da9fe5-5729-4ab2-afa1-514bc6024884"
        },
        "item": {
          "id": "d54c217f-fa14-4ae4-94fa-4d1333256b37",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68898ea5-3cdf-41b5-8f25-c33d206e6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61368b7b-fabe-4224-8b1a-3fdb5aa5b0d7",
        "cursor": {
          "ref": "f93c4200-bf8c-4962-b481-9f083f9fa98a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "326bcc2c-09d6-48fa-ac9b-958cdabd08c3"
        },
        "item": {
          "id": "61368b7b-fabe-4224-8b1a-3fdb5aa5b0d7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bf0e5ed0-4e91-4caa-9c6d-833401256e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec5ae32-e646-44e6-8ca9-8716ef82bfab",
        "cursor": {
          "ref": "d5214e26-95c9-4a4b-8836-a4ada27446b0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5c594d21-e64a-47f2-9777-47cffcdfba53"
        },
        "item": {
          "id": "2ec5ae32-e646-44e6-8ca9-8716ef82bfab",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cf1da1a1-31cb-4f56-a488-8372a90ac7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30de1f93-7731-4d4b-a897-55c0b8e51abd",
        "cursor": {
          "ref": "c46e8322-7432-46ae-a1a4-16bad980efab",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "52e80469-7cb4-428e-8b48-d49229ffb512"
        },
        "item": {
          "id": "30de1f93-7731-4d4b-a897-55c0b8e51abd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8d0c5a4c-2127-4de4-a2f8-e7fd533f7f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a51f06-47a3-48a5-ba45-030de9b133e5",
        "cursor": {
          "ref": "0dc79dc4-7823-49aa-9aca-3d9ec7a13300",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7e88a4cb-0091-443b-91f3-7cadd3cfae3d"
        },
        "item": {
          "id": "e0a51f06-47a3-48a5-ba45-030de9b133e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8f6b0280-fecb-4ef7-be01-e1721a257b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8367bafa-c298-4d55-be90-7be8a4f5d7ef",
        "cursor": {
          "ref": "c5024771-8741-4749-a5fd-c262fa9cbe3e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4ec33d9e-3511-4428-852b-c879d2e1db44"
        },
        "item": {
          "id": "8367bafa-c298-4d55-be90-7be8a4f5d7ef",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fea52e94-51d5-4566-a4b5-01a7c63d88bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a012c2-267e-4774-ae82-1faf9bb84ec5",
        "cursor": {
          "ref": "18d7fb31-dea7-4b62-b2e8-59c398e6d838",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fb2a8030-b6ee-48c1-bc39-be1b8914a33b"
        },
        "item": {
          "id": "65a012c2-267e-4774-ae82-1faf9bb84ec5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "432211d1-4abe-4ce3-b26c-2b7b8b618b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f90d75-3298-4eb2-9b3a-078670ba67f8",
        "cursor": {
          "ref": "980bf54c-2d03-46f6-82b3-d6c1f26c2e5f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ea04a8b5-0f46-4402-9640-771822fbe804"
        },
        "item": {
          "id": "b4f90d75-3298-4eb2-9b3a-078670ba67f8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aece31d0-823e-4e67-9222-69ae1839c326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a14f1d6-a65e-4109-bc1f-b9237890cc28",
        "cursor": {
          "ref": "047195ff-2c68-4b20-9dde-b5aef486bbc1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bbc98e1a-2b12-4ea1-ad6c-6585d05f5322"
        },
        "item": {
          "id": "7a14f1d6-a65e-4109-bc1f-b9237890cc28",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2811506a-3374-4ef9-a672-692dd37bb61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110afe11-5e83-4181-abeb-4b85a53a7bf7",
        "cursor": {
          "ref": "88419bda-2814-40d4-9700-ece09fe8be3e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "baf39199-0176-43d4-81af-753ef5b9756f"
        },
        "item": {
          "id": "110afe11-5e83-4181-abeb-4b85a53a7bf7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f5606f3f-a4bd-403d-b5f0-39a44b851bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1fcbdc-04df-466f-aaeb-4eb62da00a17",
        "cursor": {
          "ref": "b59b6139-e17a-40bd-9183-d4ae76999273",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "85243941-5aaa-41b7-bafb-e3a98fbe445c"
        },
        "item": {
          "id": "fb1fcbdc-04df-466f-aaeb-4eb62da00a17",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bdbdb27f-d478-4e57-9d29-c8cfc3c34d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652f11ab-38f3-427b-811a-0a1c464a7622",
        "cursor": {
          "ref": "be019657-ff13-4c90-a52d-65faf09a4754",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "75ce3672-4823-4858-b02e-6a50d368907a"
        },
        "item": {
          "id": "652f11ab-38f3-427b-811a-0a1c464a7622",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0b4c5bbd-4b51-4ec9-bc40-a3430a214800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f65420-b6c6-4996-b981-52475efbafb6",
        "cursor": {
          "ref": "f7925101-0ae9-4c5d-84ae-41e26ec0489c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6521c2a2-6b96-4624-b475-f3ae205d5631"
        },
        "item": {
          "id": "92f65420-b6c6-4996-b981-52475efbafb6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "15c61277-9602-4864-851f-b0f903aa33c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1175d07e-892f-4b83-92f1-1627ecc4489f",
        "cursor": {
          "ref": "0ab477d2-dc32-4343-a728-5ab88c2f954d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "52b8ca6d-daeb-4581-8b8f-81f4d2397d57"
        },
        "item": {
          "id": "1175d07e-892f-4b83-92f1-1627ecc4489f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff55d94d-396c-46a3-b07b-c1e518a3fde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b44a8c5-8b6d-448a-89c3-4b16260e2a67",
        "cursor": {
          "ref": "573611e0-52b5-41da-b907-120a88208fc7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "37f672ff-e8f6-4338-a5f7-b508294ff5ba"
        },
        "item": {
          "id": "8b44a8c5-8b6d-448a-89c3-4b16260e2a67",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5cadbc81-727b-4a9e-b383-226d31a8d308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317eee3d-de1c-4c51-9e70-e1c5603f4a7c",
        "cursor": {
          "ref": "a8f73434-69f4-4d83-a11e-dfaadac1dc13",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cd88c278-6967-4430-b9a4-e5f4a483d5da"
        },
        "item": {
          "id": "317eee3d-de1c-4c51-9e70-e1c5603f4a7c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3d73c3c6-45c9-41a6-8431-1502ea48d1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cd7abf-444a-4de7-9128-2f3abf1bab7b",
        "cursor": {
          "ref": "ae86d23c-2284-4232-9c71-5f9c2aa03a5e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fb234dd3-3d76-480f-9f04-6ac55ca9bd10"
        },
        "item": {
          "id": "41cd7abf-444a-4de7-9128-2f3abf1bab7b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "67cb6e18-80b0-4e93-8e4d-02df58a885e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5774361b-55ad-4c78-ac3d-97a6faf1da54",
        "cursor": {
          "ref": "7d2f7a7d-d437-430a-9089-ea876c347f01",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ee2bbad7-3911-4b2a-8f31-b11d3dc249fa"
        },
        "item": {
          "id": "5774361b-55ad-4c78-ac3d-97a6faf1da54",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5a4e9fad-54e6-4e22-a6fd-ce76e53fb9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b412eeb4-8c23-4ce5-8623-5fb72fb960d5",
        "cursor": {
          "ref": "3acb586e-8d91-41e9-bc08-85b6b2190e1c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3b5bff7c-4510-409b-8c7a-3513b913be49"
        },
        "item": {
          "id": "b412eeb4-8c23-4ce5-8623-5fb72fb960d5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "850d78e9-5296-4919-8d46-376b4eb041ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb4d4de-a5ed-454b-a330-fff7a3d9d00d",
        "cursor": {
          "ref": "702b1544-f33d-43d7-a405-59dbd9703745",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "df8f771d-f40d-4a01-80a0-cef29b30e09e"
        },
        "item": {
          "id": "efb4d4de-a5ed-454b-a330-fff7a3d9d00d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e838244f-1c4c-4e7c-8a20-ae74aea0b9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8633574f-3d4e-4bb8-996f-3b63a24f6052",
        "cursor": {
          "ref": "d502727a-e6eb-4353-b018-c994e43e229a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e834ea3f-08a6-4cec-aa8c-13583f3a1c4c"
        },
        "item": {
          "id": "8633574f-3d4e-4bb8-996f-3b63a24f6052",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6603fbaa-35a4-4ba3-abf1-af426902da01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42984c75-d618-4cce-be37-7f60fe770de5",
        "cursor": {
          "ref": "fe408327-ad08-473c-8aa8-4f8b6b776bf0",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a94f67f3-ceaf-4f63-92d0-ab4e914eef15"
        },
        "item": {
          "id": "42984c75-d618-4cce-be37-7f60fe770de5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c49494b-47df-4757-b733-d0643e1b0926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cf8000-b518-4c9c-ab9b-74e21c626129",
        "cursor": {
          "ref": "7b14ae2d-44fa-47c0-9a87-08b5f81e8a36",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "58d63c3b-21ea-4f9f-8264-ebdbaf645e94"
        },
        "item": {
          "id": "01cf8000-b518-4c9c-ab9b-74e21c626129",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d32df0c7-7364-44e3-8b40-865c256b4739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db27838-2feb-4c35-a02c-0101813e09ca",
        "cursor": {
          "ref": "cf0e8e3a-54f3-43cd-8a35-991bc1903669",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2aa70a69-5548-4db3-8e40-0738bd843953"
        },
        "item": {
          "id": "1db27838-2feb-4c35-a02c-0101813e09ca",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8ee0bfc5-9147-41e1-afba-a0ee0f718e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071dcacf-c21f-4746-9e4b-e67fb14c7e4f",
        "cursor": {
          "ref": "a3df111a-7b80-46cb-8556-b689ce70b035",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a3df789f-d5bf-4125-9678-932276155384"
        },
        "item": {
          "id": "071dcacf-c21f-4746-9e4b-e67fb14c7e4f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7658bfe2-43ea-4c4e-b835-e46feade7ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a775d963-9fcc-4c94-a87f-4a24be3d3a99",
        "cursor": {
          "ref": "5a3166ca-f92a-4944-ab36-91aa9049081a",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "61a84074-aca7-456a-8dbc-c2d5a9af6eb8"
        },
        "item": {
          "id": "a775d963-9fcc-4c94-a87f-4a24be3d3a99",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3783a3e8-0d49-4344-9220-272af120e35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa00dee5-d217-4199-9793-c3c5de3c3d83",
        "cursor": {
          "ref": "b189fded-63d3-45f4-8370-39de407cec6a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "13cb3206-f3bb-474e-912f-951214780688"
        },
        "item": {
          "id": "aa00dee5-d217-4199-9793-c3c5de3c3d83",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1829396f-11af-4fe3-bdc0-5024fa1cb7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43072890-e2eb-44e7-a51e-fe594c2add48",
        "cursor": {
          "ref": "4ac23ce9-633e-4212-918f-a8c23d86fc59",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f7c7c7b3-6eac-45d0-96e6-b3f8c2e4e2db"
        },
        "item": {
          "id": "43072890-e2eb-44e7-a51e-fe594c2add48",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9c90e1fb-398f-4849-bbb4-4834365b1bbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dcb6f6-bdc9-4bcf-adf5-d29d86f07ad6",
        "cursor": {
          "ref": "dc6310e4-aad4-4bd8-8d86-7a03d6b892ed",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "54cca1e6-2690-43d8-90cc-e014952cb8dc"
        },
        "item": {
          "id": "f9dcb6f6-bdc9-4bcf-adf5-d29d86f07ad6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a30eaa06-d7cc-420c-837f-a7e361c724f5",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e346ad2a-71cc-4538-87c7-8acecbdcd2d4",
        "cursor": {
          "ref": "537c0b2d-32f8-45d6-97b0-069ba5e8a0a2",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6fd4bd6d-97d5-4d5f-b05a-3ce2f65304ce"
        },
        "item": {
          "id": "e346ad2a-71cc-4538-87c7-8acecbdcd2d4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1276dfca-bca0-48bc-af54-aee0740f6810",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e9ff53-127d-4f9d-958a-8f26e7e77b68",
        "cursor": {
          "ref": "1df4f6cd-4f93-40c6-82fb-325efe4dba36",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a99269c4-0f19-428d-b637-fb47aaecfec6"
        },
        "item": {
          "id": "55e9ff53-127d-4f9d-958a-8f26e7e77b68",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1f31aa94-9d37-4e54-982e-c22dbd8d126f",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d671178-442c-40ad-86b5-cb5dc24df81a",
        "cursor": {
          "ref": "0ea71566-08d1-420d-bb70-9d4b76e23660",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2eb1e639-fd41-45d8-92d0-ed7101486e04"
        },
        "item": {
          "id": "7d671178-442c-40ad-86b5-cb5dc24df81a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "827cf12b-a2b8-4f51-a1f8-42c7445f81d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d671178-442c-40ad-86b5-cb5dc24df81a",
        "cursor": {
          "ref": "0ea71566-08d1-420d-bb70-9d4b76e23660",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2eb1e639-fd41-45d8-92d0-ed7101486e04"
        },
        "item": {
          "id": "7d671178-442c-40ad-86b5-cb5dc24df81a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "827cf12b-a2b8-4f51-a1f8-42c7445f81d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90b75e8-2b15-45aa-b1dd-27a72334217c",
        "cursor": {
          "ref": "acce881f-a2af-43fa-a3cd-9fa7a10228e7",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "df00f10e-6d8a-41bf-a364-e1ff31561a0d"
        },
        "item": {
          "id": "b90b75e8-2b15-45aa-b1dd-27a72334217c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6086f842-bc25-4c21-bed0-093dd832e546",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2180181-ee9e-4ecf-94a8-fb0f579cd8d1",
        "cursor": {
          "ref": "f819b49f-8d21-4d6d-97c4-4d286588aa80",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b27829b0-dea0-456c-ae6d-94154b8afcbe"
        },
        "item": {
          "id": "e2180181-ee9e-4ecf-94a8-fb0f579cd8d1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0ba7d72-59b5-4f26-96a0-a066f28d5507",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}