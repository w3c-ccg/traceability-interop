{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "255e02b1-b0b5-468d-870f-821ec805412b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a03327d0-b5cf-4135-8f46-d7b97c1bcdbd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab37621f-1526-4b0d-905e-bbe0ec7b251d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2666243a-cd04-4654-a233-2d189f845e00"
                }
              }
            ]
          },
          {
            "id": "7b80eff3-a264-4b07-b223-f43091b7f250",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12902748-f29c-4a6a-adf9-e277614fafb8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5c160214-1d0d-498c-98c0-d51a5dd108a5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2e6631a7-915b-49a0-8fcb-30244aa490b0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7fb6d5f7-ba81-4091-81e1-cc1fb4f23062",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0cde275-583b-4f6b-b267-4217e3e6497f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eba7230d-6b3e-4e7a-accf-b6ec077f5c0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2035c42c-4cfd-486e-bdea-98749a5ff350"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9dde942a-9c7a-463b-9e80-bca9c9b8f1ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "556c8926-6e28-478c-b0ed-404cfa63bbc1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2819e45-94df-49e7-b50a-570f4a46f41d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83326d5e-b892-4c9f-8750-aeb2a0136092"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d451091-190a-491a-83c1-6f97e8d780df",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "59c94cd9-3edb-48d8-badd-00eb96c2ca72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81eea691-b360-4043-826c-ac9e8e84196f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17a1cf69-d6e7-4281-bc42-d5ca3bea8a7e"
            }
          }
        ]
      },
      {
        "id": "3cf83b72-42fc-4e0d-81ab-2cf2ba6502c5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2d2f52e1-8e12-4044-a0d7-4c65688c2a35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d386e4d-cfb4-456c-9713-f54d4f8de863",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d70b8e53-ac9d-4a2d-8c67-e2afc403ae72",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d9c9b7-ee6f-40b0-81ac-97cc0a834a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d848c427-a829-4397-b291-dcb9545dad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54970977-e867-48ec-bbdb-eb5704510b60",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6fd10d-67f6-4373-be03-ebfca8f71bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb37fb15-99c7-42fc-bd18-8a223e3cde18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d156cf25-c967-4178-b761-30d9a43dfd1d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ecc07d-81f9-491f-8696-25ae8034fe1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fda934dd-06ac-446c-9d3c-0205687ab1b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a98cc7b-5ed4-47ae-923d-48f34601328b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc47d71c-a3b7-417e-b608-2eda86c9b9d4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3db060-4fac-4f33-a4ca-ae4b7304cf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d4cd992-d1ea-4544-a32b-c1e52a760c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1ea247-0600-4442-8c2d-014e5bfeb70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ea173a-8d31-40ab-b95f-7c7853054ddf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "edbc79b9-3aff-41b9-bf63-7d18f3e3903d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d99c1ec1-60eb-40a1-9823-df15b1cdbfe9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "112f7de9-b805-427c-89c2-bc801dc55a1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "531cc4a9-70bd-40b3-b3ad-fae63fe4a6f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7114829-a33a-4697-a35c-559a4bc0b8a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "828353fe-ec2c-4350-ba13-ab449d71dda9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1948cc4e-87f7-432b-ae24-1cbee30e3905",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b102ea5b-969c-4a71-bc75-42ed59bba92c"
            }
          }
        ]
      },
      {
        "id": "d671de8b-5b99-4690-8b88-cf50b526d2d2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "44d06a9f-f4a0-4895-8570-0a5d71da48e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43f2026a-1514-45ce-b9c9-cdf00eb17099",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fe82a14a-8998-4d57-827e-9d7c8b0d4228",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056f20ae-3acc-437c-9588-f103f3e42776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9083f2-a91e-4e5e-891a-6f75e3171d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71c0dfb-afb7-4539-88c3-308e901efa40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "362ec425-ca01-47c2-8a39-773e3606d311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f210978-9e87-430d-9a5b-a2e56c7c5243",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc283b52-24e6-4f65-8194-502705d15868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199be20b-747a-47c1-9ace-d5f9ae80ad1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8ea031-a138-46f0-a2eb-5a40fdff55a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "570cf8d1-082a-4732-be42-788976094ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0ce4a0-8d96-49f8-bbfa-e740c6261570",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fff112c-ca0d-4ff1-acfb-ce2839771c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa543027-9a54-4d00-b569-4a77a8e919fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf66ed4-6d10-46af-9a1e-54e7427c4668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5721d909-bd50-4ad0-b312-c49c700d2321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b93985-58c7-4e80-9324-f31be173889f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ae12df-7db8-4c34-8abf-43636b539d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8304eeb3-9a3b-45e8-9f7b-cc3901e64a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07ef2c3-09a4-467a-9e0c-e166f2423904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12cecad5-b412-4d88-b6d3-5d5b4d905e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd2e9ba-3dc6-465f-a9e1-190bf1d6b17f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe863d9-e89c-410c-8158-2881048f95e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c69157-2027-4cab-ae24-d2e98f46b794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83cb8b5-d1a6-42f2-9425-c51337775678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bb16646-10ea-4e49-91c1-9505f51aaf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b49f71-fdfb-41c0-9805-7517797af230",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025ff7e1-e6d0-48a7-b9de-8649430fe766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774ea4c5-62a8-476e-a177-e2f54e574388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78ba0d9-5185-4937-9561-2d04d102a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e555ad05-4328-41c3-a37a-0a388d8476b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6817c257-a143-4715-af02-4727a2813b9b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36dd214-1bf4-4547-b92e-bee5d47cf0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773faef0-c83a-4fda-b442-3da0b099c7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e04c074-2b3d-449c-af64-bec4ce98a57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "187e7d81-0ed3-4aaa-8564-28b7de9dd215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8671aa7-ecba-4dd4-858e-06948315fb13",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b345622-8647-4981-ab2d-6cdbe302fada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1bbc01-0e00-4c04-918d-b3bfd8447238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1990dcc2-ca1a-4878-acba-bf20614fb787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5091236-1e21-4bf6-a0c1-210fc51b1466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a192f682-16e4-40db-b83e-b5600363a360",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313fafbe-6bf9-44df-86b0-19a590c752c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d93c2c4-456e-4b9f-b8de-a6424a3efb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09537f47-16c1-4287-b686-12cc3e3b49d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98b8ea2e-58f3-4e1b-8a40-b3b266d17e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a70db3-b14d-4309-81a1-944c729011bb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0802d0de-5f45-4a23-8baa-10d87fa16c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a835bc40-84d0-43ee-a1c3-c62122f36295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c38719-99d2-49ab-b264-85320fb782b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa288216-024a-412a-a66e-da87536cd756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e51323a-8222-4fef-a278-1ad52da154e0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f743b41-d0a0-4a9c-bb25-085c13adde26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f049693-aa01-498b-b446-372686735366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5367a9-af22-42cc-875f-6a5db54abb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3450d9b-99cf-4de1-bfa5-a86acf094156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc23e0d8-f72a-42e6-8a84-18f8cc212505",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f3779c-5811-4e7b-8016-af865d6cd858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae28ce5-96da-4931-9f60-26fd127378bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fc8f4b-ce41-4d37-821a-143b0b374ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f06509a-bc0a-4616-84f8-fbcc841f4d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cf2fd6-4a6a-4708-9aec-b55f6601c452",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1403b2a4-1465-4deb-ae69-87965e92729e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4476aead-c0bc-4464-8ff4-2439ff6bc305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa990007-be7c-4a02-8b93-592819ca1abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1265d901-6bef-4397-a23f-049c11dae542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3048880-5648-4f1c-bf5b-43d05c0c4b29",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0969f6e7-eb02-4793-8582-00d33ced2f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abdee52-3215-440a-b26d-1186fb522808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f5d4a4-f042-4d9f-a2df-f10d6fd522f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a14af6-3feb-4b5e-a351-6144c37c5ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0091c4-157f-4079-b796-f49d2c0ea257",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da98628-2a43-4060-921d-29ffdf130ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c191f4-9974-4ec3-b0c9-33a851bc1d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a2e2e4-6e8e-410f-8976-195b37cc4558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae30e8f2-fa60-41a1-b047-e40684712220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7cda85-2bdc-4237-803e-face8f38fb0c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf8a5e5-8e7c-4320-92d6-542c7fcbce43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4746a182-5f41-40f9-b4b7-7f2966aa433c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a1c3a5-a26d-4505-9b66-7f0caaa2497a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "574ded43-da06-400c-b62b-53c1e68949a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69eeeac-7ae1-48c0-b49c-ce74ac413554",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00bc5d-08ef-4451-91ce-ae918973fefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844bff0c-c601-4071-b2cd-1a0497e44b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d19d1ff-b292-4d83-a0e4-bfa48b3b0a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21a667e4-18ce-4593-ab88-9a22f4988802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cdaba2-8435-44d7-a638-1702e8ef4281",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b07d4b-f6ef-47f9-bc20-191c9dcd6a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199b36bb-0b15-4ca8-bbeb-44fad4e3d85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e597aa0e-fc94-47c2-bbc3-c30061c8e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7e8526-d4b1-4d31-b53d-dfc6d332e522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9caafc-bf6c-47d4-a412-760806b6c8c3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b32325-93bb-4a06-bb23-edc7283a4594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874f9f27-a76f-481e-b0d7-08039e15391c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca943d12-c558-4890-a84f-1b2eaf898139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e97d202-4325-4074-83ba-013b4b0131ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd8aeba-cc66-4ff1-b60e-da62494699ae",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bc996b-3389-40ce-802d-28c94908df5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5097bf68-ea12-4be5-b845-693d9cda75d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee91e6fc-0a6a-4103-b552-3aaaa8380805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a460e9b5-b474-4760-bef8-1c06398c42b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee9f738-a765-4898-9392-16805e6ca0f0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdf4eb8-ac59-4e16-a58b-9065b76cb3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519d7c6c-4c98-402b-a6da-d17095b7077d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2503dd19-65bc-4c09-a830-efebcc2825b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81190bc5-7c15-418d-97cb-abd8c21fa879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9f58b2-2c92-45aa-9627-2f48b2915b8d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d86a1f-3cf0-40b3-a06b-be6a63cc721b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191bc89d-d39f-46b3-a941-e9f0b9de0244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9530fae8-63f1-4452-a1b2-812a21f0deb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62518ede-b3ac-4ec2-863c-c7f156735bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdc6c89-eb60-4f79-8cf7-c5d9c402fc00",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781d54a1-9b4b-478e-93df-52e712b8c02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b2d826-afc2-4aca-a615-89d3dc1a1ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a48fbfc-5373-4c3c-97bd-065a9a4863c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b300ad3-912c-45dd-acac-f34da1852c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b068a84-f55a-48f3-af57-28fb21b848f8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d42775d-1438-488a-a349-f3d0e542c09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759c2a4a-c44f-4653-bdec-91a1ef8c60bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356de30d-83c1-49d0-b563-3d1d8542ccbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9c13de-3db4-479d-90d1-a64ec2f4178a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771102ee-cd88-4c97-877a-b080824ffd82",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f688b81b-2c83-4262-b704-ac4e68e60ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e409f9-ebb4-4e2d-b2cb-2b0c8a367618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7070c052-1ffb-405f-8805-9b93e5f0dfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9bd70e-e100-4944-9e07-1170aca535fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63028343-7db9-4afc-a5d7-ce6d7133d70b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71e8e71-12fc-41b7-9b91-3628c5b2d9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07cb84de-44fd-4b44-984b-8cb3930cf1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ad9e79-00fc-4214-a927-2249644a5505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8a132b-4fa9-43e6-9a2d-6b2668563701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c31222d-e678-483e-aaa1-24b4bd912aac",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd20dc6d-a3d9-4146-ae9d-de7c90c59c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea92ff6-3371-4f8d-8379-4abec07849ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4b2a41-e49b-4f8c-afbd-917511e8b858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5a8857-5ffc-4548-ae6e-d0908dca5720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b168366-6f4a-4917-a3fd-8c4cf6c91b9b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17765d0b-c7b0-40ed-868a-082d5d4c0417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d90b32-d87a-4d55-a1ff-37160c226fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1b81d4-381d-4abc-9124-3eb3adb1434a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0dda204-01ca-4f39-8137-f2a35ffd76dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0b5686-8f4b-4458-bfa9-6441a2526096",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba36fe7-656b-4705-9d6b-01bf181cb8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6648883f-bf2e-4587-ba63-3db236af7f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1109957-65e2-46fe-84e6-d5f6dceee6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc4376e-a758-4a15-9573-f8f34076cd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f882f84-bb12-48b3-8ad0-542a8eaa13ee",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3504733e-ff86-4a3c-8143-e0e62a34f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18b94a3-6019-41f8-ad1b-a3b9c02c018d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436751a9-caa9-42b2-aa92-f5ffb9b7c5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "73050a02-39fb-4112-846d-18c870c041b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993dfd54-c6a3-4c04-aec5-c139298691be",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3f2d75-d889-4ffb-8e8b-56cd69f7f29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c39b6ed-a489-485e-bb63-a8a47b729fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197f23df-4fbb-4847-b555-ad1a5cf48400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd885a0-d8ad-439f-aa7d-9f97a07bd7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0a50f9-1724-4b38-8e61-e0f527defca1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119e32ec-16d6-43c6-807c-14c45d1859ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f41a09-dc42-404f-955b-11aed3f6b091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d702284-2f41-4ae4-979b-ddc45c59a7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adfb2197-292a-4e93-ad28-b33bb333c55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feae1b6-b85b-4d89-b18b-45de7d32be14",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d879b83b-04b5-48e5-873e-a94f7cac22c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69bd09a-adfc-4f3b-863a-9daea50c92d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44587c6-bb98-4579-ae02-3fb1dd7d2b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30bebd86-451a-4ddf-b860-a265469198a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a80924-a477-4aae-a3ca-b6517db9a148",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a0efc7-8c42-409d-bd98-8896b86793f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b6752d-3c67-4d0c-b5ed-6f7d91705f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f0c11f-a6ec-4cf0-8a62-87db5691a30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2267498-ef3b-421a-82c7-eefa6b9549a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb0a644-a3f2-4e7e-8d2f-8137faeaabb6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa931ab-7e3c-42bc-b7c2-ae05afd2337a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043a6a7d-e851-464c-9ee4-ab52ed1fbda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869ba746-b85d-4208-a1b0-7ab2d6d5ff30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "158aecf0-195c-4fa0-b690-b89ce8e53543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6f6b8d-76a3-4990-9218-e69d08f92bda",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bc5032-4e60-42fe-8f56-b944bf71fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a3b1a44-b62e-49ad-ad2a-e1fc31c55039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412fca17-3975-4fe3-b9f9-834efd2ecbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9e6be5-dd98-471c-a3d3-7f11030c4c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea38dcb7-e06c-468f-bcb1-abe6246d2968",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdd8498-6ad8-4bcf-8384-6beb3d938246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd88e75a-64eb-460d-b09f-55f0e89a618f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972f59ff-6293-40b7-be0a-4d9109d82937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bba09ab-33d9-4b0b-9026-0bf1a43c7a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85ccbb-4b2f-4a14-8e62-6f87fd4419b1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc8d9c4-a8d1-4f76-97e6-9f534cafc808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100ea5f6-3f9b-4209-9c41-d94771a9b171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bd29ea-5f67-482a-af1c-8dede3213be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "47ee0c0c-81e7-4d17-8ab0-4d911439e91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6086b-f216-4e9f-901f-5852aeae2c2b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27da22cb-0c71-4d30-80af-5ba8b345d09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106c1d2e-e261-416b-b7be-b68e3741627c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde536f7-019e-4596-8e8b-84420b60913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52dbd932-97a8-462e-b399-8dab06d0df1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba16119-da79-4831-9f20-34ae39065402",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1082163e-8206-4193-8870-b42948adb665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d6a64b-8127-4a7e-9dcb-c1b29d86d374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebfe23d-9434-489e-87bc-8f7995078653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b414160-9f73-452c-91ff-e39014c99af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41acb6b-d449-47ad-92a2-a0a88bbc4d61",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd96e36f-0e0e-4f2d-92e1-77c81eef4b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84963f1-cae0-4618-b605-9fc5694504dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79ae555-f4e0-49e0-b4ef-f0355e79f3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a53867dc-44f3-4a51-a72c-923c62b3bdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1e1372-2a3d-4fde-b5dd-0b3185cd2b89",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ab0186-3f85-4cd6-b691-23259653f5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6298d633-23fb-4c9e-ad79-61a4b743083e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564aeb1b-40e3-4396-bb6d-9415bd61ea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad3861a-4af0-45f4-8aaf-15219c5f6dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9322f9-d102-47a2-8a28-848c27b4b3be",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d160928-807d-411b-a723-e09926e0e92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e59b5d-eeca-4a32-8b80-16998bae5c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8558e6e3-f2d2-4cc3-8b1d-46505993b391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a819b9e1-7cd8-48d4-84c9-334562bb9fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e94ee52-0d91-4d25-a755-b93471cf974f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0981da2b-66ad-41cb-bb15-59f97f1143bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e344a4-b24c-40dc-a0e5-b40942a7bf84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b0c2ea-d6d9-4bb7-a198-e0ec7f958786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72123ef-1bcc-49c4-a24d-399f98e8bf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531be6eb-e6b5-4853-8260-6b9785274a40",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1ccda5-f91e-43a7-81e8-9092476adea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345891ac-1545-483b-a74f-3b7be6997f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d85c161-a695-409b-90af-7b1a66f6713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3067f1-b621-469b-8695-a282a860a998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ba1acc-737e-4de5-bf34-cd5e23f98519",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa61183-129d-430e-bda4-b6d1bc6ceff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59a2f7b-8bbd-42ad-a93d-69eeced0a901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b09d51-45af-45b6-b8f6-c8d7dc0c0598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d61c9793-e4f2-41b8-94e4-6ba877acf355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6b1d4d-6ca1-4944-ba83-e37acf283f6c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2a6f36-77ad-40ab-a6ae-1c1ab0d39df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b7c572-99bc-4e22-ab2a-ad442ea4d6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a03599-eec0-4ceb-9a37-691f8fd46238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b82c5160-2d33-4717-b71d-e145e40a0f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dd086d-7d44-463d-80d6-8cca4ea69203",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206e56cf-bdd7-4140-baf7-9975532d2101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199cc652-3dda-4ca2-a461-94a9b0e0ec4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8451e816-de34-4100-a126-bee52594c0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36587d21-f512-44cc-b568-9bed2e7c3f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572aebc7-ff7f-479c-8ec2-0209e537c56f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2f4385-2324-4cd6-8ee9-472c6736af94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d40a1d-cf8d-4ae0-89dc-ca729a55b713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bc4efc-38a0-4c0c-9aad-2a12feefa9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9213164f-82d3-4227-8c25-b2c93b510898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e55eca-933a-42a3-b4e2-0787b44fe6af",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c5d684-4422-41f6-bd4a-057fe3c9d650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ca81a0-8f24-418e-9979-c367767ed970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fb904c-8de6-48c7-b2a5-06f69e1c2d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8cdb4ca4-58c1-4012-baf6-5b1792872229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b69592e-1624-40ee-8aaf-aaf8369c0684",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f4d298-4870-4d15-9f7b-c5895d406cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f923e0f9-e4e9-471d-81cd-0d28755f9a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f491221e-6765-43a8-bd1e-8929dac49f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4d9d3c-e5a5-444d-a1f1-810f27a6a205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e929af-c6a5-4b22-80e3-77aa4f430b82",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc8acad-624e-4083-86b4-382e46870393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095271be-c372-47a1-9e0e-6e9f642edfdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaa23b6-7a39-4b4c-a448-b719e6afba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0304441-d6df-485e-a0d9-71e024b8be0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4b0ac0-7cfd-4054-a1da-6ad4368419a2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba36be59-9993-40cf-88f3-ce173abd40e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a00a9f-0bba-47c0-a7e9-d6641608d907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740a2d73-29e9-47ea-98f1-73d544726916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcef03a-8626-4cc0-bb6a-815504ad220c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303bdd08-bdec-4d97-ae9e-b92038cc50bc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23333da-e449-4cb2-bcfa-746682243a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a128484d-eff9-4980-bf61-86c3685f15f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac9b0d8-cdda-4287-aaae-aaa231c21116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ca481b-629f-47db-8f38-feffd36758b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf2fbab-056f-4e48-a8d4-a93ac0cf4096",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cc0563-0c09-44e6-a1ea-b1450d9e6abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63ac3d1-f2bb-4dae-a61f-3487e6845942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251190aa-3916-43de-a183-1211f4393361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "984fe4fc-4e5e-4875-b30f-701c5a76f63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4940aa9e-3c0c-4d80-9227-d9b67362eef9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7171768f-8c88-4326-bf4b-f06cf474c988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfac749a-37b0-434e-b31c-1fd0cc305af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177a894a-d696-425b-ac89-66e6932df10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8de7ac19-0af9-48ee-b4b4-e1ecc5ef58b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86dbe7b-ba72-48e2-be33-df9d5af8b3bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4181cc50-9604-4480-ad19-114a28b1d46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b61df7b-3b3a-4e3b-ace1-3297a51445fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64d82a7-1e04-456f-8da7-996802eef137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67303bd3-ab8f-4417-9da3-2c4da80c17a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6a071c-d930-49f2-a791-51ccc772cb15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c53ab7f-8795-40f9-a837-3d6fed42edd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86579d09-612b-4991-88ec-0b12d2783dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1e6356-ae40-4ded-8bef-78329208ed25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f83590-0224-4960-a906-0aab54c994b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373e85e7-72a2-4060-b62f-daf0a4e3e148",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce24f586-5155-4477-b31a-5f1d0729955d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ec0a32-71ed-4911-b833-26da9d74335f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae84ba9-fede-4b41-8860-3d0edeaa3cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49d91e00-4630-46be-8b3a-a857684f7b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4ced83-be16-42c7-b817-e315ed1c5479",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a8b565-4d66-4e60-82b1-a751a71b3550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db130cc7-6e54-4c07-8e74-44e80e57f517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a8a20b-cef5-40c9-b3c0-3a7e2454d4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f483f5-019f-407a-9fe2-90f81d285e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf31a7d6-2ad9-4edb-b9b7-43a0b46bd6cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd96e13-13d8-451c-9bca-2158a5e8605c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6bf4a2-0999-41d2-b715-ae7ff2911419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e13c0c-d2fd-482e-9b99-92f269d2bb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f44178-85e6-47f1-aa2f-ea4058e0f0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f77b2d-88a3-4335-8f3f-1af86ba8e2c1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab53640-7377-472f-b8c3-fb0b1efbfe29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6e022e-152b-47ce-9e1a-e82d608e8b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba86163-c3fd-4270-bcc0-6507d2a8cbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "99c967d3-b616-4730-a8a0-f81d3b10be34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35092628-c8b6-4cc9-8817-9369baff23c0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1fa31d-a1b4-46bf-a2de-3bbc5933a092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e114b163-1264-4063-9751-805f874c55e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575c9801-8758-4ccf-b2f8-d7aa4adf6225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d270d6-6173-4824-85bd-aff5d29102bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9503b8d-0575-4303-9684-73a007c66010",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5559fb88-ea99-4e11-b988-fbbd32beaf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612fbc3f-a447-4d9d-bd23-87183d6fe244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0f0596-5233-4197-9246-4a5a0038da8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c11108-f9b4-43d2-b4d8-b0f44b4224f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7110669c-4c5a-4684-aeed-9087c11f626b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515b435a-734f-4d9b-acef-da83766be5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db6a8a3-a9d5-4d1f-b2c7-2606810e9b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc456fb7-1646-4778-9527-c82a490d6f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0654cac-2fc6-4db2-a058-035e2a56df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9e237c-9a1e-4fc7-9129-a8653c7d64c1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e6328e-e990-4638-92fe-ca4e8ba662d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafdd1e7-afb6-4979-ba35-5d3e5338ad87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241e1064-6a19-42b4-bc03-2e50a9646a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "397f4fa1-3b7b-4a3f-882e-6f664a551c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44b3054-ffa7-45bb-831f-c3ab8580cb45",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4008628-5fa7-461e-8cdb-89059c4229e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b45c65f-4bc3-4a59-80f5-268f8aa30667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abac0c13-371d-4d0d-8adf-afbbf745f42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da39a8c3-4df6-4831-940a-99de80e18da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84314e68-a6fd-4051-81d9-18f5864869a0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5ec03b-7afb-409c-8573-cab31b1fa57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfb3452-04fb-4599-8c13-a892ae8ce2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbbcec0-1ae3-4064-bf00-96536d5e1329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "89a67183-61a5-44b0-b508-78cf6db1e489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f10d5f-34a0-4062-bd52-2515a53d9843",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83427f5f-4fd6-4755-a4a6-75286544e0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389d268f-1446-4870-a6cc-1adbf49ee6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab09298-a96a-4a0a-ba2f-b6b63778547f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07eb53d-5dcf-455f-b5ea-131dbbca4505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31b38de-9544-4206-9714-4c377f9d99f9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa94aa65-f9b5-4e3d-9349-dcff8957328f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71efc831-0a22-4559-8e2c-15ec6d2b53d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d990f9f-d187-432a-93cf-427fc578f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1826057e-885f-48fd-9a5d-4d82094ab165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26e28f9-c5a3-426d-b760-d5553eedaf54",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbe108b-ac6e-4f2c-a0bc-d2a6912d9448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1424c53-dd40-4ede-943a-6dac20097b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d3afbf-0865-46a1-8359-29a9760018c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6db73f-653b-4911-9427-547578f4db14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0be6d8-0256-4a49-9029-4323e1e5cd71",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824f58be-7faa-4f08-93ff-757327d47e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6dac3cd-853a-4060-8b42-90c3e5bb5073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607362fa-fc18-4cf4-bc20-e53813ab458d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f74ac4-8ff2-46aa-b0da-16d67bebadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905ef174-70fd-49c7-8f3c-35fd611c0bf1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4175060c-82d1-4073-b6ae-93c9e0cdbeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd66ec9-ff83-4607-a003-546d5920542a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9859a1a-97c4-452b-b470-8ca4979012ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7903f6b-48a3-47a0-97da-26a4e1480b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d3fc40-4374-49e1-a161-5c72dd1ab05b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d520257-7595-4a28-9325-580e048e5d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c5350c-62fa-4493-bdb4-b48651265e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b71d74b-1b8a-4f53-99c6-2031ba56c1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "705cf86e-cfe6-4225-a57f-234dc693d8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446848fa-d33f-4e15-b119-c1e19b3ad1f2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81b257-e9c9-4562-b608-4dc8dc77cc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3c8fd3-c1be-461d-8976-08d632eb77d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a853742-ce96-41c5-895f-8f7e4e26466a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c20dfd29-4736-43cc-95fe-6e190dc1ee10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5684a8a5-f389-457e-a40c-361973bc4430",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04163823-fa71-4195-92bc-efe132a0f79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f2a6e8-06b6-43c3-a13f-02bc16c3da51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6324168a-2014-4186-916f-1d84a8df761d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00e64a3-6b79-4966-95ac-04b800778a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0173d5c-d12d-49f5-95c0-9fcddd5d1009",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9341595-58af-4d9f-b4e0-e25449a45f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bddc81d3-699f-4ac1-9552-0a2ad0e94943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf3b5db-a447-4705-bb3c-5c42b0b8cc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4e0f0f-9b9c-4952-ad01-189c05479faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355a3814-1fa9-475e-89fe-33be54633fa3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df7a1a7-4b8a-46fa-a1fb-0a9008d9e7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a362492-4aa6-4e01-a012-7bdf0fff11d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13709d53-be14-4efc-8b64-566b6e528b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a830b7f3-4430-468c-b5d8-a269ce8e1b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333d4121-148b-41d5-a091-0c44ba1a971f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0ef753-2e95-4b3f-b268-d66feeaf802a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19408042-327a-467d-a8d3-5587aa18e474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad012c71-7fb8-4ad9-86ce-0b2d4c468ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "606fdfe9-10af-4d85-b32b-b7d49c3bfe47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfe9073-55fd-416d-8b00-2d25c67782d9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e931bdb3-4637-43ff-9e79-065184433337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06b4cda-13a4-4fff-bdc2-fc2fa893f657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dd42bb-b643-4feb-a1ef-7d374d6bad73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3095cfc3-6a46-411c-b104-3b188e4a8410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0013e0bb-40ed-4431-acf0-0732143e0528",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45376d5c-71d0-4a90-bcf8-92fc7d64db11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa676e9e-5218-4f96-ac4f-808d1d41eec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dd188c-c46c-4b8f-975b-32a93cc5a53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05b58e80-ea64-4c4a-a77b-370b8851167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8338f7b-be86-455b-8dac-2a935786a2fd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c70f01-a5ca-4ab0-9f1c-108b5ec9055a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4ad9c4-25e7-4ec4-8626-300b50b52fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47f505d-a8ae-49ec-acda-908c8f07d194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b07e52d-67c7-4a5d-bcf0-d2c6021bbbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008b4fcd-65ce-4cdb-9020-327c2c56e8f6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b105bfb-101f-476c-80fa-aa8839701021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216ab58a-d8b8-4890-a250-7a7c64948827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc17513-58c5-4a0e-92c2-a6ba15e908a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6438db0f-d582-4fe4-9220-d8b03dcff4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b9d394-6963-4408-b968-63c70d07ee45",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb59427-730f-4bbc-9700-3c545a107321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d830b3b5-f260-433f-929b-7d820cca3574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4089a5a-4157-4f4f-a638-d98687470c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2498cd30-13fb-49c2-8338-e828aea0c892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b6ece2-c229-4735-a1f3-ebda45f9fc40",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1e9840-c0cd-4091-a52a-d891582ee568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed279c49-bcb5-42af-8a22-2b919d034a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2227acce-d077-4f0a-9d2b-2dcefaec8700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc893c7-073b-48eb-af90-310236c8ed83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61fdd82-0191-4128-a4c0-7cced6a04155",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803d40a6-5ec9-4a8d-9f40-9d97f2b0c015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5e978e-ef60-43f6-85e7-848beb38070e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd5c861-4d79-4b1b-a108-49319e180d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7fac89-3a93-4f76-9c2d-426395a9fe7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04156b6-a247-41f4-927b-158db77822d7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5030ca2c-d6f7-4d98-9db1-b319f0368b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1254026-b239-40c9-bd29-63446fe2c205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7699fc30-21ef-453e-9917-0387c2546fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe6c012-8b14-4d2e-b817-24d226557d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9248692b-04d1-43b9-8628-00dc413d8fc9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9149f090-58a1-4093-b83e-f2edd3944347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bc1ae1-ba72-46ef-943b-f3abe30ca80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55ff09a-8877-450b-acd0-d1183c0a133b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d561efb-e77a-4ec6-8f03-bd8db207528b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2ec58-1844-4dd2-9acb-faaa933a53b3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b9d1c1-77dd-4fbe-81c1-59961cf74ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f20e7c-d77d-439f-9b5e-b668df5231cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083688cd-b65e-4175-8e07-865120e8d44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c44cebf-1eac-405c-ac1c-15b44f5d6f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3eabbf-c428-40e1-a349-8e121cab2447",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ede28d-889d-41f9-90b6-0f2ade7f19fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190ed529-d821-4491-93a7-d8b5c93ec067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095dd6c3-50e0-44e7-9a9b-99cbe2b1a07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a27aeb8-3d2c-481b-a7ff-ab22ae1a1561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566b2a42-1cff-480f-acb3-504ba5b5f118",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7fac60-e6b7-4a4b-a8b7-adc6f8ecbc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78c2127-530d-4183-81d7-efab7320d204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec5eabf-5fd8-49fd-b156-9bc28fc7eee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6caaa2-0584-4e12-8a3c-baea4cf698c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5579dc-876b-49c6-bb39-01aeb2062785",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e23db9-27f5-4d42-bcfe-7250e935f862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "769e769e-aba1-47b6-b968-b6098abb4178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149bbb6e-327e-402f-9986-88697da33c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eee514e0-2258-4022-b28c-7893527e433a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a93bddb6-fe7b-41d9-9ec2-9168a314aba6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42cda4f0-ade5-483e-81e7-a28a0e35a282",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb94a1c-337a-4a35-96e5-1ccf6cc968b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "396e4d6c-c141-4d96-bd5f-c5a244dac163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816ef68e-89a7-405b-bc2a-e0027303bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cff4a487-15a7-4517-800d-546c8fe24d66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0df74816-ad9a-4902-9978-703d46fbc3f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7edf635d-016b-4d19-b029-971668288d95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27a679a-0ecf-441c-aad2-2a69aefabdd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93ae4786-4e7d-4da6-83fa-d6141bbd1df2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4959599a-d95e-4143-9e16-2b73c64698ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "203221d2-9b8f-4999-a3fd-cb59842df30d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "674f277f-6a2a-455e-b9de-883472db3045",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a48781b2-9328-4a8d-a669-f63b727a01e0"
                }
              }
            ]
          },
          {
            "id": "201c12e3-8049-4625-a546-77ad576c829f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5123bcf3-6ef9-4977-9edd-18d34569857e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d14fd93-ab47-4bb2-abf1-1eafe0f2853b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3812e1bc-24f1-4aa7-880b-ff3d6adbdd8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5c40b0c-0962-44a8-aae4-b1b74d4cabbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b08bd12-0347-461c-8568-3a17b4f6b610"
                    }
                  }
                ]
              },
              {
                "id": "6b3bf157-1e6b-4c45-aff2-a52d02a51ba0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a60e211f-3b7f-4c17-90ad-1542e932b9e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdf31768-1897-4652-809f-cea9911419e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f605dc6-f2f7-46c7-84ae-267d70d6f6a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c1b464e-1a0a-4658-aff2-00c91ab43526"
                    }
                  }
                ]
              },
              {
                "id": "92b2e090-9379-4237-b9e1-9069dd74b690",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21aac955-5ed9-4fe3-8fd6-34bc0a3ae4d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f125ba6-be08-4256-9595-63370d9edb0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b0881f6-90d5-430c-9696-5ee18e1cbe0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55731dc1-54e0-42c4-9200-d88c9a9a404a"
                    }
                  }
                ]
              },
              {
                "id": "e1896723-c5bd-4ed4-9cc7-866271ba447b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "717e8404-1004-41a2-a59b-01d956949aa2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bcfb0b1-4caf-4bca-b1fb-2d935388059b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d18232e-bbca-429d-904f-ae6bad79452f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0dfcaf1e-84fb-4b6c-85e9-23596e1763f2"
                    }
                  }
                ]
              },
              {
                "id": "c7a3b9dd-c19c-4770-8ff9-62c7b084e32a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b74b7c8-b0cf-426e-b684-c03b9fca135e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b0be692-7978-4dc2-bf79-40f57373e195"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dfdc7d1-0980-40e6-959a-7b40fff3fa70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b2c5da7b-24c1-41c9-8b89-6d2d11cde7c3"
                    }
                  }
                ]
              },
              {
                "id": "d4eaab70-356b-4126-8885-84585bd7c815",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43568c9c-2981-49e8-8a6d-376048705554",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f685d5d-d389-4e31-befd-1a1dd152e53c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e588ff99-bb20-4e63-8480-e5e2baaefb72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64351d4c-ad94-4c93-b6d6-3df3034c34e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "641432fd-c175-4585-9be8-bd6f586e1015",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24331bc4-3af9-45f7-b280-707d6c2ef07a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ae18634-838c-4fa1-9139-0747febd4e54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22111e57-59ba-4d5f-984a-f4b69a484121"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "348e4774-81c4-4a72-84b6-4d12f5449b99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9c0529ea-0e1c-4e34-a9ca-e2db6835d67a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "576fc7fa-f3d7-49f4-8e06-8884f6da45f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b06167dc-9eca-4105-8911-d2915dd9206c"
            }
          }
        ]
      },
      {
        "id": "baac271e-12af-48fb-af12-d494292474a0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fa128533-2cd3-4cd0-af2e-6c163ed3ec2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98321ddf-69eb-45e8-b36f-f6614b5a817f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "21ff2170-d257-44b4-802d-56fcc7b9180d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8400d522-16d6-43a1-b61d-cad0ee82dbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9348bb24-679f-4224-abcd-7238723c9e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec8be0c-bd23-44f7-9a6e-fdfb484370e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ae5d29-ff43-4b47-be29-f79895865288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42b555f-7f62-439f-bdcb-8da69a2646c4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0568695f-e930-4970-a889-4b1c6a78df08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e714cc10-5495-4cd6-a53e-21c3d3c71298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec696532-46a1-4de8-b3ed-40bca157096f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64ff56cd-639e-4ad5-9c43-4a53b4b4ddcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ccf336-591e-44d0-a39d-8191169f0e30",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d63e881-3172-4594-9b99-3da8d82b02a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1a961d-7ed5-42a0-860b-16f296f37471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5e889b-f29f-497c-ac60-be4d0c1f3def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afe15f27-5815-431d-a4da-7c7138ee7684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6473a1a-3fe1-4b37-a7c1-45383eed8767",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a2c1ed-f714-46c5-a556-6f3f830de526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1325863-f3b8-4a60-846d-7f07e4e32454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01beb80-8065-4dbc-89b6-fec78cb5e01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef29413d-8c76-4191-a105-602470000bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b0dc8e-97ab-4ac0-bdc8-7df0e2542b2e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25715dbd-6d67-4927-9f3a-bafe2d264b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115aae2f-d901-4505-8c81-d19c158763c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40a49e-44d7-48bf-8ca0-e07c82d7a8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "660d154c-92d7-4f4b-a9d5-b96d21663bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5712714-9008-49b1-9d29-6f02e34e7664",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2508792-d47f-4646-a743-ec6c9818399d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a009a35-1372-48d9-9c32-974d95bfdea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4d25e2-2a55-4626-9079-14d88fefeea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96931e34-30ea-424b-986b-4c7165bac146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a758cc-1ac5-4446-94fc-c37853f4667d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef1fce6-f730-4593-9b00-e74f624f83ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50f125d-a592-4086-8a25-3b0795aed4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdd5b57-2524-4f71-bdac-467d0f66efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "352f6d0b-fb13-4ba2-b92a-fa38b612cb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5282ce8-7491-47f5-9dac-0d2fb50f20aa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd056e16-b38f-4ee8-acfd-8f66a829c97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59a71aa-b8dd-410f-bbbf-828252d0f8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047b5fc6-8dcf-4c23-9b89-d4707150c028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b376f078-afab-4072-8300-583417a59682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423ef545-04e6-4609-bb5e-9e6092339007",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18de4e2-c621-4a4c-8702-101133634ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859c30bb-a847-4472-b8df-3349c62b8975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e663a732-2f7a-4e91-88b6-a80602ae5ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdfd20b-7d1d-41f0-977b-f34b907802b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bec6f1-3f64-4414-b448-2dc45953622d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f689faf-0840-42d1-80a3-a3336a3b0823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad2dd22-fef2-4e7c-9f69-7e6fe807e520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806c73c4-4307-498a-a7fc-fdf447d843db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e12137e-6584-4c68-9f96-c4b78bcaf0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc36a50-19e2-4862-9399-19bc68932326",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d5df17-5c9f-4db6-bf21-ddfb01f5184f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9571103-859e-4f48-96a9-ff48aa281980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c291a94-b878-4cdd-9299-d1e4db47402a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "db76993b-561b-4cf4-b772-def061752d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fe0bac-e1e4-4d77-86ef-85c54a4afa0e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f7cbe0-e665-410c-934b-fa6950c862fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab570aac-d5c7-4f48-b994-05494a8d2562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e113b9c-c445-4554-8c5a-9f82f690aae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f04c354-dee3-4cc6-bb45-f90b58802c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661cfe69-f8a6-4737-a414-cb6f9b189d0a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71c7278-0589-4254-93a9-4a0973f6f5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c9c9f8-fc07-4480-8289-09a02f460ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bbd724-8f4d-4ba5-ac54-3fc430a80db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0aa47b-593d-4f44-8a88-4ff1d2f4b284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcf8335-4fd3-43a3-9a46-f07ba8eb06b2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05a1e3e-156f-45d0-997d-a32496e3c642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd027181-c548-409c-8c69-609071e34127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd38679-bce1-49d3-9606-bc16b437c321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "735c197e-c7a4-42fa-a576-183dfc960d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687d13d1-8eee-4eac-9805-847ec8c32384",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdbc974-9a22-46b8-8762-ae60f46f3c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93926c93-a025-4994-b4f8-335af76446c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cac210-e498-4d78-bf3e-fce590490c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "37b7977d-422a-4dc0-8519-996a766ef5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a97e86-6bd9-4cef-bf4b-92fa50583326",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700491d8-5c4d-49e6-848e-7bb9c0835d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65581d74-5f60-498d-9333-dd8ba8595627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2475d6-45fa-4ab9-97ba-d0f998c70b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a259dfd-6014-4eb5-9776-79643c6e4d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31cd0db-af4b-43b0-b509-ca89de2f4043",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ea651e-7222-4d54-84eb-ea8461b0c055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ab6276-b1fa-43f4-94d5-2e28f7eca291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f347b815-c2b9-4742-9b0f-7f458b837304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "84102a70-dd39-4304-80bb-af422beb0bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe40dcd-f3e0-4ded-94e8-6986a501767b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922fb4a1-5f93-4d0b-bb0c-9a2e1bf18c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afc1181-6faf-43c3-bd97-6a93ee9ed661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b66567-5e58-4731-b769-97d6805f3a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b242a35e-7e11-445a-bfa8-d54a51effce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2c8a35-1b1d-435a-ba7c-5fe04a7f0dbd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7717e643-4d5f-4f0c-8a0b-8eaaad345c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fdd851-4cee-414c-aeae-51d0b6deaa1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb382b09-f98c-4238-86f9-ed7e653f8faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b42fb2-1c19-4c0a-a899-e647eb6a314d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b9346c-21f0-4edd-86ce-fd66e024cb38",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc012afd-d719-48e0-8e2f-7ff9f0b0764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f06457-28de-42bd-a19d-598b6e9e6c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69418af8-b73e-44d5-b8fd-94961f665db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4235c0a7-fc84-45d0-ade5-5416890ec0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8434a89c-2ae2-48f2-b043-dcfb3abe4a32",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca42459-7eb0-4cb9-961f-8dce2a0567d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a0bd8d-d723-487a-9075-599d2d2099a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e59bd6-89d1-4142-9094-1ba39fcc5929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbebe7a-39d5-43a7-8a59-ea783796870e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d0a1e3-27a4-40fa-90c3-a04f32be24fb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dafae17-4bc9-4f73-9112-e87ded9e12ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a5a5f6-a403-43fc-9765-6428f00ade22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837c46d0-4437-4412-867c-6c9177b423cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95607734-a138-43f2-8b03-cb5e06384a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d948349-fbcb-4f3f-b766-922d960a8dd0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b167b864-60fc-48a9-9c0d-28a9b11e9693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f496b9-f2f6-4b82-a8d6-28a02725245d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fa0b5d-5c7c-4f60-8ce9-b195433630f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb66a557-768c-4a02-97de-0e3b02c1098e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85ecc68-0541-4200-9560-c0453aa83118",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53adf0a4-210c-46c9-bc98-0d5c542ba876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe3cba6-837b-4cc8-bb52-c0b86c3d2a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897ba9f1-5281-418b-b317-b0c2beb7efd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c000aad0-0f26-41c3-94e6-f1e8dd387169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b25bd87-51b5-4035-b117-693af7f32cb2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45c8edc-f8fd-4fbc-84ab-371997ab3ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704f3b5e-88d9-4f59-ab32-73677c7b1652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c920647-a72c-4fa9-a981-477921e85917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e481fe7c-6a4e-4d3f-88c8-dd464de517a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b43511-c1c0-4e5e-9889-b8bc357fd903",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b81e00-9326-46de-ab04-2ab338e032a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1241586d-0265-41b3-8c48-0589963119aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e886588d-9bd1-4469-a27c-29eee5e006a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a503ea-ed4c-4f44-8d71-a1372c4d07a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86a4c0b-3b10-412c-8af4-71d985a5f4a7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed591e2e-5944-4a54-b072-0dd3b6e67fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7f5105-1401-41b6-9bec-43abecf2dd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adcd3b7-c1fd-4cce-8187-a6ad70dc40c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b12c287-2e57-4c47-a703-b965b6d6b9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2f38af-f842-46b0-99da-2ac222cdc49a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc84149-7c3d-4fa4-bafe-a2705e2cecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59daf850-0cbc-48c6-b50c-1e33bfc02708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7318ad-b351-42b3-aa2d-8fb2a2b14002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5249f04c-c23f-4be9-aaa1-93c740acb204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9080db58-8353-4550-a853-6f73ad44bbf1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83917e3-1bef-49e1-94fa-e1772c39a098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c4bf46-7941-41de-88f2-950048957c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b3038a-e9f1-4b4a-a834-53a8183c4548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa792fab-f418-4189-9b49-7e318f476a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadadd14-9182-447a-803b-740d2e282fe8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a949d177-707f-4cef-a1ea-a450eb820849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983ff369-c773-47b1-8bb3-6983200dbf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07d858e-8446-4a34-a775-82f71628d623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cee668c-82bb-4d42-a5de-ff19afc3f801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cae36e-7265-424c-ae21-31e3eb624644",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf95247-6877-4674-a815-f1dc975a450b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fc4b92-4958-4377-8054-4a38cb5fce6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d6fee4-6915-4aa6-a855-b2f46f9737a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61762232-d676-497a-89fd-2d7da855f8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe510fce-de99-4430-9218-6aa33f72cf8e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077fff7f-3d15-475c-9585-894ee137f6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544dc3e1-5934-4713-b0a5-f156bb809daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2712423c-bf35-423a-ae7a-70c258797bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ce67d8-b1c2-4b44-aae7-ce6a30787eb6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46fceb0d-354e-4455-bbb4-38a4f9fe6d22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94ce74d4-38bb-40ec-9c5a-178611378749",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11dcb0f-0368-4d82-a8a4-0ad07126c3cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c70d80e7-e882-4a59-b7ca-c90582faf687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11be1ffe-cdb6-4e76-8eaa-e252d468b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bd4e8ca-b900-4df2-8fc6-bca2d7604cdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0a77811-b92d-48a7-a7ad-b9249b2a62eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2364f345-3543-4cf5-b6d9-b5921362dd46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "334c30fb-e412-4676-8720-c8aae110de2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "440e57ab-dad7-4f33-a0ab-88a7fec6e063"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d6fcc25-90e1-41dd-a692-1447f039d563",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d829239-2127-4478-abb0-eec3260b7a5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6bdb0eb-287f-422e-94c6-d71b04602883",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b47f265-10f7-41d7-a31f-c5b6351ca8c4"
            }
          }
        ]
      },
      {
        "id": "54f75603-0c25-4a4d-83d6-2dbc7585cda5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a3ff57ca-45f8-4512-9179-f9e887027c22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3da4a72d-b119-499e-9a59-81ee806f5814",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5dcbd033-81fb-4035-9547-abc1114808f1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fc8ccc-61ae-4ac2-8f7f-7ed9e0642acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dfdbe1-6e9d-4fb4-8b9c-46632aa26293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec0268e-3a0e-4d57-b129-51eeb1b53134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d739f45-f9e9-45d3-bd55-178b2c187df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c8c4ae-52bc-4671-aebe-6eb160704e94",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80c8843-a972-43a5-9376-7f911e6e56f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c4b793-5f07-4fd5-9173-71577e6e819f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e46d63c-0cda-49bf-9a90-5f4cec939197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d801c6-4fc8-4c47-8355-1c5875dc9621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8712cc-7454-48f8-99e1-0c646a4dbd26",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28752beb-71b0-46d0-b497-0f960b725d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e21547-bf62-4d32-b63f-8f327dabad9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de92650-4ae4-4094-bfca-b3844c88e955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e7dd37-cf3b-4be4-aab6-183313188c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491577da-2697-41c9-a253-78ab215bd101",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d8d418-cbf0-4bd7-85c8-5f7c2706a569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dddae54-5f4c-493f-9d66-9df2d342cec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6675d459-1663-4e18-abea-2110b238467c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "245e7aaf-deef-4ab6-97aa-ded20a682c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33f96c1-1825-4ca7-bfb7-50e3cd89d4c9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1587a9a4-34d3-436a-8033-1a74c45b100d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f283cd6-f1f9-4c56-92ef-aa386ce63c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de186567-bba0-4aab-89e9-9a047dcf0190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07f41c6-bcd6-49e1-8f5c-efa2c84e07a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6576a3-4c81-4646-86fa-6ef2ac27adf4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6198089a-7b6b-4985-a117-fa8f50f0ab6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c8b87b-4932-45fc-af03-fce51eb82338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7652b31b-24e4-426a-af88-852084877002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "442f9546-5647-40ba-bff1-cba4726a8168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d90b23-c7d5-48db-8f71-6c2a02319549",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8068f5b4-30a4-4580-8981-b680212fc443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b474ffa-750d-497e-981b-e1c36c5a85fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695b614d-7d59-4afb-825a-ae9812ea7da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f589607-7443-4670-84f7-559d46027eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05448546-e375-4702-bd34-019be102e5bb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7315eba2-364d-4f48-b3b2-d62a6d7a12f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e42ec7d-c53a-46af-9cc8-adbf3633e528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01abbb7a-02de-4163-b28a-a6c915c17bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caae6666-3456-4c77-9f33-50797c46d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6be6b4a-ba78-4ec2-98f6-d0bd8e6d4838",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee05abc1-302f-43fe-938f-101637cd7276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebdb8fa-4c32-4d89-91f2-c563ec66ddaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca15f61-18fd-4d0a-ab28-91498f60962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac5ff0f-be66-4016-962c-94e3417cf78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd44a2c0-bafa-480a-ab73-e323d5a5c8d9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70eebaa3-1b09-47ba-b3f6-c8967c27c98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5561c196-2196-4771-ad67-7d7f78165982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fcb995-650c-4fc2-b438-92f617c1652e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c74ebba-a756-4b2c-aab7-1c5133c752f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e8640e-7ded-444f-90ea-e76457d0f8dc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae058ef9-5596-4de0-a68d-0d174a72283f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b1bce3-7c80-43ec-a29c-c6ed2231fad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b865727-b152-48f7-ac79-dc352b889c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c83fd767-edbc-4fe1-9e04-00bd07b77377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9fd7b3-9b9b-46dc-a02c-5a30519d3077",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88df715-784b-40f4-95aa-5b2a778a1d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8695a79-54aa-4192-9031-cf2d03b55102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cfeac5-81fa-48bc-8cf7-ca3e05b59b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f711701c-5839-4451-b8d3-75d392363500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6946b424-3be7-4940-abf7-ddc06ef8a72f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757440db-806a-4930-9d36-a1ffa69870c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce0e486-9646-4d3f-9f51-cedc68ecd073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29103e0d-12dd-469c-a0c8-9d3f195037ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f99c3c1-5a5c-45cc-9cf2-ff1e53b34145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3771f4-26c5-4165-878a-e7fc40ba6069",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e68652-2677-4569-a587-5a0a30d70da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7caf2c-375d-40b1-88eb-a2146163b86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518669f2-49f9-43d7-8359-321e717e147d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab5080b-e934-47a8-911a-cd23b05d8acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d6e3e1-74fa-44ac-bb30-c10006e7ae61",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11bc021-0312-4e11-98f6-4eb5fcf3194e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684ec3c6-eae3-4b17-931f-446f64631e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289efd3e-1f1e-432d-af1d-a768975942ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c91e87-3a83-4f07-ac6b-a5e9f296518e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf1d59f-3d45-4d5e-841f-8025e9eadb19",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343226a7-a4af-492d-8e2d-17a64e8049a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bffb76-0987-4e9d-99be-e74631d4b9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5396a2cd-1751-4ed7-bdf4-81bf9a2b32d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "62f190ab-9f37-4fe3-afb9-b49158857dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6063dbfb-4a62-4643-871f-2d76cd23d99f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b745a0-f04e-4b7b-9f3c-45ded03f3412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ea19b8-8a9c-47bb-ba02-6813af4c4b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763454ba-c5eb-4ee0-8e4f-96a53552e569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d251b205-0415-40f5-98ef-99868492b8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121a5fe8-54c1-4e0b-92ea-3480db2d4de8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8372b21-e0ea-4b1a-9627-7bb62e916026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064a00a5-7f12-46f3-b97a-d83907f707e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05ae486-b2c7-4f5d-9c58-ad9c52757085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "683814b6-88be-45c0-be87-674430738ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc67e94f-2ce3-4f4d-a9cf-e23654b6340d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f56a085-d1f5-42f8-984b-4da4f214bc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ff918f-70bd-4612-9849-6a233f822bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412cd457-7731-43ea-a997-339df54aff4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1fc1a9d-b071-4a8b-882a-09fc7620ef3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b29029a-f7d1-480f-991a-ad44a05d68dc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e08cc25-b556-47c5-a1f3-368099c6ceea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f497c71c-917c-44dd-9225-2d178fbc5b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca4b94a-14e1-484e-aed2-0318406af7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62c9032b-d675-4be2-885b-764119d27570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fab541-a117-4ce6-9179-20fb6655d844",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526cee4f-9c72-479f-bd88-cfc7f1657ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e4d575-eb8d-4c81-bf9a-5be459709fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19371cbe-a6bf-49c9-837f-c44373b6a50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cef1a49-2495-472c-9f1a-191d8b20d682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af61fd3-a083-44d7-8b75-31c59f22f464",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a2e1c2-0df5-4a59-b07e-b4fa036c0c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0dafe3-fd85-41c7-aa6e-47dc356d5cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6546b195-ca9d-4574-9477-922ac1e1f90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd17f4b5-3e23-48c1-9e14-dcbe784cf628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f09312-b1cf-4624-95b6-bbe6df3ffffb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcea22fa-94f9-4b02-94e1-0107f4eccdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bad6cd4-dc82-4d49-a9d0-53c63f1b7747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f11effc-84a8-4465-9951-43da7b14e9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf42e23f-8258-431a-8b8c-33caad40d7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2216e1-4e7f-4600-aabb-f7ba0122349c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d3b0a2-f7c3-4096-844f-f81ecd7593a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb891e39-6431-4bf0-be87-f34959d7dc79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a19515-9b5c-4649-9dcd-02134d2c7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da42d6be-602f-4794-92ed-c10d28a9ffae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b50c6f-8bff-461b-b314-80b96c5fd62c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe5e4ca-b14c-4078-8843-bb9f05acf49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a12d40-cf16-463e-8c4b-5cb6a395b1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af02e06-b2bd-49ac-a77f-54454839b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eed532-42c1-4564-9835-f6fbb113dc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058c3cc0-4996-485a-a069-5d62576458e0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfe0ae0-4cc9-481f-bbd7-ad641d49a19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c125d1f-8b6b-44c9-81d7-f67e6618a32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f993809e-1f59-40a0-8291-63040fc40925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d67c71a-3794-41f0-b23e-fc2cc3d4019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f342cb3b-100e-4c5c-a832-c301db751f03",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbcba83-43c3-494d-8384-40ec1d44f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee2cb2d-6ec0-4400-99e1-5f0dbffd8164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573c7e6e-4031-44ae-b33d-53d1af70d857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6d7af0-1229-456a-9f4f-dfe5102f34a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95371a02-70cf-402b-95d5-596e0427ec96",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce96299-2f32-4e6c-b6d8-d0d16bc9f50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2967a867-7214-438a-b33d-72a34bef4f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a9a896-0517-4a59-8bd8-2bad7f020cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29bb650a-7b72-44d6-a4fb-70426c36d5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e508542f-35f6-43d0-baf7-9244a755760a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c33183-e44a-4f12-b428-2c5ad725aba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3db1447-822e-4808-be3a-f6cd7b470de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419b5e3b-bff4-4683-b41c-78550e156366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f2b1d4-f1c2-43f8-8e6e-53e3898a93f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2daa60-c568-4931-be0e-e8bd2b815989",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4911f126-6f8d-4929-bb81-3b5de1d782a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45f83c7-84df-4f5b-ace3-563be453a62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d6bead-66c2-462d-b552-bd7efde6c756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9065d7-2b6e-4b97-bf15-3b8d09a56340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9df03a9-c77e-4127-8af4-e03e9a61f7a2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6343a68a-c642-4b51-89dd-c0496bcea9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5011df-ed26-4fe2-90ef-03b2dc5ad0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00eb37b-1e69-4185-8abc-6827050f14f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e0a49c-0a7e-4b41-bdad-589daf0923f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e98cae6-3ccd-4f9d-bf5c-c558a5d099e6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a878088-84fe-4ea3-bff7-b8a0e8e188bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b6a066-df9a-413e-a692-597b564271e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2427b9-8b70-4acb-8d6c-4ecb69b88158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "498e2fa2-81d4-4a27-9968-f76441441fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ad4bc6-07c0-4089-959d-88bc6fdd16b4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a968a838-d7bc-4f59-ac31-f0de696e5235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d083db64-245f-4676-9cf9-9f95608db840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a42cfd-753d-44a6-904e-5f69faf7c8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70c9a3d2-74f3-419b-84b0-ff3583d7ca68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b47faa9-5eea-4502-a898-8cf076308cd7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b500a3-68cd-4840-821d-7226ef6e06b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde48a30-c914-4c09-90ba-f676526903fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fa3e11-a5bf-4e05-9fd4-9ee38d354956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1293f17-290f-4121-8ca1-1a6806c850e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251177ac-7a56-477b-aaf1-4f35cf6dcd26",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31b7c5e-7b88-4499-b60e-0867dfeaee58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb8bb94-161e-42b2-ade0-8de925e71558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a0c884-67af-47b5-b245-ee71afbf5427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d732bf07-8571-44fc-a0d6-5b2738018845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309483e1-d48c-48aa-92e8-420c1b448f9e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0011a2fe-9431-49c7-a73b-0a88498eaf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66e57e3-87d9-462e-9663-85c53091bf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b4cc50-bd97-47e2-91dc-41f41546cc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eae27a8-ae50-4330-a3a9-6e5650ffb377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cea1bd-c766-4cdd-9c69-b377d825be21",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcd6297-656b-443d-8a88-64eab6051b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b78098-e394-43fd-bf8b-d24c958cda3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e8619b-3eaa-4122-8fde-f4178ddfdcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d54c73b4-9bdf-4168-b884-5409690d918b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c793e62-a034-42c2-bec4-4f29c1d6dc0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06a77f78-2fdc-4c86-9fba-4b791d08e67c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e35e461-2fab-4f5d-b6f3-474fefd1fd69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "15e915ad-7e86-4a26-887f-ec793c38fa53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb617c9-402b-4bdd-b69f-05639f617a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1322b5f4-40d7-494b-b966-3ebd6d4584fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a15ab09-fa76-418e-80d0-086dd3c232d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "598e558c-f72d-4532-89e9-f3c2a6ae6829"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d60b6ea2-afdf-4ff2-9ba6-57cf51f907f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b895ac0-b096-438d-9539-f0a11526dd9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0311122-dd8c-4ade-90d2-8cde3c7afb3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d63b0c69-a147-427d-9430-d4b87e15e060"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2219b8ed-5f96-40f2-bcc0-8df8bd652b24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2c28aaf-9c20-439e-9e57-02bfd104f7e7"
            }
          }
        ]
      },
      {
        "id": "d9e48112-a6d9-486d-8ca0-32d8cb9cda84",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "223ddf38-bc1f-490b-9927-b33e6f121ec4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9edeb69d-815a-4f81-98b0-80c41bb7c717",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bb3d5968-ede1-4c13-a83c-9316d0790f72",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4834ec80-7d8b-493b-9f4c-f6b98af79866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b24280d-99e5-402c-92a3-60ebaf51ba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bde9db3-4dd7-46dc-a814-4fc6eda0aab6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da98782a-a4e9-4348-b011-aaf9f948fecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0917617a-9ee7-4618-a2e0-c05d1ae4f331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6b9931-b363-42b0-b9ab-203243a61858",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62ac412-3545-4c8d-bfbb-78f39bafb7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e190d93-8600-42fc-b545-3c1c197a26cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b3c81f-a67b-4893-8e40-e4c6e9cb354c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0019d34f-07c2-4344-b79f-d7c1c55fe53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a1cea3-169e-422f-9d7c-93155f19c2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bcfa38-9612-4410-a353-2c8710de2507",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311dff95-c5af-4b8d-b5ba-0c379a35d4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4025d11c-4c6a-4e79-b276-5b3abe28d40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809d1d6d-c565-4058-88dc-e30e1701c341",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d924a9f-9baa-4427-aff2-a47fbb8d72df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485f34e2-b5c2-4f30-9b01-f8b96f2e3f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f485936-4a0d-45ea-a900-8d4687f90647",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e48eee-a24b-4f88-8152-61ac2eed1f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e48ca1d-2629-4321-811f-256d5c505028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5347e900-d645-4b7a-bf6f-f35eec461de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92aec4e-60f0-4bd7-9bbd-f1f19d2697d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fb521d-b4e9-4202-90b9-c1e91638be75",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b1ec80-6b33-4aef-8eb4-3cd4a24d95e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afac8cd0-960b-409e-9ef1-bc014c6e31e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed27e282-5535-43b4-901a-e1d51ccf5c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c77e10-b7fa-42f4-ab1b-4263449d0402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bc4158-a8e4-4caf-98d4-f5cfd8a99f0e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42ad42b-26a2-4947-a982-ff8e9403c992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c93c7a-3ea2-4b48-bbf1-4ac0d2df9db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8f1c72-8560-43b4-8cc7-1c1fe18e4d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d934410-492d-43b3-9116-1a160a0a987c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a5a355-b773-4758-8398-e4fecf11f533",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f2733f-581c-41d1-8f8b-a8f6dd23206b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b51b5aab-51a9-4990-aa9f-9a2c9318188c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7c50cc-ed9d-40bf-88ab-6752c106f750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8615d3f-480f-42ca-8f66-3dbfc1d33f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5514ea-8ee5-4164-901c-9a77fb906690",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fbc6cb-d831-4e53-9fba-2ea69231452b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbf95bd-071f-434c-9ae3-9b292658b283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8241512-c5bf-4826-a5e1-72a18762aa24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc7fa25-0953-417d-a764-7fe409b38cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b72e51-881c-451b-9588-8799ba1024d9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d18294-71e0-4572-80e3-621be1abc3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f27f5fa-1b61-4b6d-9aa7-a78f98e7a7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfcbe63-d6ec-477a-a761-444a309e4894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2eff60-80c6-47c9-a33f-07d8eb16c620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03065bf0-54e4-4546-8e3d-7548c8c77775",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58d460e-c228-45fc-b72f-3aeff3888b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9823d074-992e-4ae5-90fe-6c87549c91aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb71bbd4-0a9d-4dcf-b90c-02153bd35abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51439e9a-b694-493e-85ef-3eebbdd03bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eb7f1a-9013-4262-a849-16dc596c6531",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d570b2-7e4e-448f-9e24-06ba66db4350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66e5c5f5-a994-432a-a9d1-58fb213b5767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd38f3b-3e68-4660-b6a1-f4c6db1cc141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4184b1-7d9a-46a3-b649-07a7add0af8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5f7816-67bc-4ac1-a4c8-0d086ab93833",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d683e1-a69f-49e9-8293-444f44331f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "877ca6cd-b2a8-4f3a-bbd1-cbc5b71c769c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44b781c-7a70-4cc1-978b-33ea2b0d0edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca7211d-f1a3-47ce-80e7-45c9dbd41ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5af2f22-8e15-4696-9560-74696da84262",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a2b1f4-9899-4e8d-a383-eedd26b705bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be92b3cb-e185-4a79-b758-aac1e707a210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0534eb4-48b6-4fe7-9286-faed3ec82225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886ae3c7-da34-4951-bb5b-9b1fb3253c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dea2a1-7bc1-44cb-b4fb-96a994522ff9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fa9171-adc5-4693-878e-e71e4839e831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544e8b59-b61b-43e3-97fb-0fb4162b8f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496c90a0-591b-4397-bb3d-de43077a1bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a0db3b-47f3-4330-ba28-b05599c5b4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f1f1bb-75ee-4200-8776-1206a5a6d897",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e485137f-228d-4feb-b771-dd4fb6ca5191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef37601d-79cf-47ea-9b11-d4dc36be1ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeda1d0-3ead-4e53-b480-f0071dcedf45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644967b7-30e1-44fa-b31a-7fb2b0ad14b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef75157-c4cf-4fa9-937c-7a5fb4f60ebd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7276ca-67f1-43de-9bb5-7f969726cc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bb0aaa-b21f-4ef5-9c60-826d0bb24686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2959f195-7e70-4ae0-879e-0c8e9f4f042e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e164a80d-c93c-4268-8463-3df29529420a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9326412-aa06-4bc7-ae65-50422a116517",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8a92c3-98ef-4c5a-b301-f15a2a29ed22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6225f00-9b07-4e42-96b9-b4619a17cc61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776d1d8-1cad-4660-af7a-9c6c1fcafe50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3169da7-2888-4821-96b7-492a395fd8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc58cac-913e-4fa8-83cf-ab3fd715c801",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8978c0-f621-4033-9e92-d6e90586b884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06397f9a-5d57-4e6d-b883-2cae2966b4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d0c479-e0d1-4c7e-8601-41b78bae0902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a18c534-1286-4118-afc8-9ebee7bff9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ca9bdb-03f8-4277-ab5a-6681c13148ea",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1012613-8c0e-4068-9173-79ef2da8b579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d859ff-6d5d-447c-b885-c34aaf2122ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d09c07-28e8-47f6-818e-991220ceb8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d66e08d-d405-4bed-8bf7-f77ab279aeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4333eb8-77a7-4eda-ae5a-e989b7d64e32",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ec1afc-aa94-44e8-8127-8bf3d5ec0f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b433f240-db07-4fa1-b6c5-71464fcdcacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c550a3-88a4-49b9-b79c-91ba653dd7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c72e93-dd8f-4183-a8af-0566dd5fca41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5db518-d04e-4049-ac3f-6c7b1c31ec38",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0798e2c9-bc45-49a7-bf98-d2eaf269c638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4885b529-5ff8-49f9-95ff-eede118d9091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77cba03-3fa6-4e9d-b3a8-5c3bf9fedd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afee93ca-fed1-4b05-91f9-0472a9532836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d2b69c-eeaa-457f-b209-d30d50399ffb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a7098d-03d0-4349-8b5b-7bf9f86ca7d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d75940f2-2334-413c-a8f2-e874880a040b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4c106c-ab2f-453e-8c84-aff20654594a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec8454c-230b-43c5-9ada-88811a162538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92cec33-55f9-4868-a3b1-fda2e5f63e3f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979c38d3-b602-4696-b669-f17da8a33034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15772be5-3b75-400b-9b3b-799223ee3d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61ef572-c258-45ab-aa39-a10b5dccc4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff41cd6-affc-47f0-a10e-ee7acf6cc136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa0516a-c78f-462c-a0ad-9c89da35fc1d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f786a7f-22f7-4d5c-b56e-f55b230a19e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74aee5cd-ca32-4043-970c-024df2e405d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7250fb85-1696-47dd-a108-4a9078506e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c86c80-115e-4d98-891f-21c9141b24f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99e2f39-56df-4d51-8bde-793ade6ede21",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111d55bc-ed37-4fe2-9a16-0a424c899157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25e217d-37fc-48bd-80db-409b1ceb4852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de24d119-5a40-4ccb-a01b-fa4ed06355ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e82e7b-444c-4bd2-af5b-0efeb391896a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c070fb46-74e6-4de8-ac55-9f5116f66335",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca48e0cf-0e70-48a0-be0d-ecd5e5e15f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c339edf1-fb7b-4a9f-a66b-1709eab56230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c37bde-1bef-4b90-ae22-e2bf93a006a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5aa3088-af3d-4f49-95e7-09197e7342ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a9936b-6c56-4746-a5c8-75d965d53fd2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c5a050-9e99-4f0a-bcf3-aeeee584fe35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153b6135-2614-4b2a-ba85-03bdd12a6b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e70f543-d8d1-42b9-96d3-0de6ee74d81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23f2b0a-ca81-4502-9e5e-64de6d0f7d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013e87bd-6f31-4bfb-a49b-3cf86a4fd494",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b566f0a-0199-4ed0-8864-951671bff5c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28b90ac1-151f-4752-b8f5-63ab91f4ca1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e60de5f-ad87-4e05-8fe9-3ef0e90f9d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d046cbc-9747-41db-a913-2187fc522634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e016d01-e10d-4c3e-93fc-b8014bafc513",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d42b8b7-0968-41c2-a206-7e5221698df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a67cd26-cf04-44ed-968e-7de760fb3dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca70522-50a6-412b-b37b-2fe293f4d371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ba2401-f319-4733-a0a6-7337a3fb5808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc99b861-523b-4a0d-a58f-52dce3b7ad41",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c26cf-ccb6-4610-829c-55323fc40588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f935c3-e447-4c92-b8c0-be2b6f856742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7b3a8-ca75-4093-bcbc-1fc0b9ed114b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274aec9d-2c73-43b4-84b2-0ef9953b4925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c919c291-11ed-4c53-92ff-fbc94f201f3b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e615a5b5-5dda-40b3-b7da-4a148ceea95d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69061329-9ba8-4de3-b5d6-722561d307f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb58de5-8e41-4acf-9336-d5b1dbb278bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5639b7c4-d78d-496f-a071-7cf95e83e14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a14ec3-925e-4987-a0f5-8a98fb62349d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f74b7-4646-4854-b378-892431e6c25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0ef88f-8c3d-4264-bba7-ce3592c518c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f7badd-14d8-4c6d-ac50-3f0fbcaf8bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaa8465-4466-421c-a88e-00ea1c186e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d75e47c-e74d-4af1-91a4-9bdc2bacd02f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a87f9c1-5749-4652-9177-6b581c4a25d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ca1c56-e301-4542-8bb1-47d40e6338b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457c6ee5-10ac-4ac1-831e-b99068453e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb16bc30-f40a-4a53-8398-7a77bdadc8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c8c667-92e9-492b-9336-576680557432",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ea1555-ae74-4aa3-9415-09e5d2124fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29f5c47-ee21-4198-8733-14eb3715e4cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa4cd7c-85e3-44a4-bef2-1d40587910fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07ffe7f-241d-413c-9baf-c8726f60df8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c933ec2c-0088-4dd5-a0f7-a9cbb8ca1823",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e152bf-0546-4f6b-85f2-cea6185e08ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726c29c9-d31d-4fbf-8d2b-4fc2ce3a8d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607a561a-7993-40da-adf9-a8b6c212b463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7237c0-ab0a-44d1-ad3b-560f623bc2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ee8921-5703-492d-9d90-5458ccd1389f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab158d3-179e-4bf1-8f47-b7aee6f48936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14648965-5481-42a2-be3d-9a3cb9dd015e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266a0225-59ad-4c6d-8000-49b57a67b074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bce8d3-cd2b-4f84-877e-fb0faf02ee7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e9fc72-7abb-4cee-9cce-10aa9d4bde98",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c910934d-c51d-43ea-9b0e-7bf19ff7d552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db941ea3-5595-4c47-9ab1-231861416eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112ed7f5-c440-4ce7-8ab8-ad52e082cb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f87b8d-7065-42ce-8dca-754af52e5cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fb30c0-2022-4534-9315-6de4e9289c59",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d23e40-cb44-4e54-b376-8a3e20be4208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32901077-6bb7-4f79-aed1-f869c0357d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef98ffa-313b-4539-8d1a-e0c87c66414d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38bd8d0-080d-4e79-8e43-0fa4b360af0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714e936a-a1c6-4b07-812e-b49ac1ada875",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763336a2-d0b1-4a08-ad18-d39ef36558bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2665e8f-28c3-4e5f-a475-32c349d05569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383428fe-816a-4f93-80db-a1400fbcc4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e37baa5-c29e-4b45-8f39-b1d33dd09290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06efb57d-0eb9-410a-90b8-c70090aa2828",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6696e122-6341-4a6d-b17d-6ef3d3ada2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "360608f9-a342-4aa1-ab23-fd2b512f324f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cef265-f965-4911-b8ff-60b16086c8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a8bea8-7acf-4202-946a-8a58b222e648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f56d166-1eae-4a98-93ae-1f86e0a18a48",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb75c288-334e-4867-8d25-2771efd547fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623e8aa1-e5fb-4be0-9c17-0d0069029f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66983058-0e3c-4ee7-868b-aa76457cecb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e860062f-c73b-4249-8956-0b4db0befe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a942ce6-8cc5-4224-a987-767612820700",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a452cbc-b0af-4e50-86c4-71f54cc34676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19d4e0b-a729-47cc-a2e7-1cb78a20a948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cdb4c4-096f-49e2-9f3d-762bfbbcb303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0335db6b-4dce-421d-952e-01c23fe33929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db603e41-7dea-47cf-a150-28d536daafc5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437396f2-9b28-4f34-9e40-18b94dfe8640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b542b4f-c43e-48ed-a65e-28ed4e8cf54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb68fd9-a15a-4a59-8b8b-4d2214b04984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc39ee7-dcf5-4fc2-b20c-5d33b41b863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5c50fe-c5fa-435d-9d1e-719815e04d1f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a6c8cf-0188-48f1-afd8-e93fbb75c1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412525ee-463d-4328-be58-fb91aa4cf5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d993aa-8d33-46e2-8b98-2c08f3510c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc053e65-7fc8-4846-81bb-9a0d84db722e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbd0701-0a80-4f16-8717-dfbf1ab64805",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f06714a-2550-41ef-b061-18afb7687131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3bdbd3-a2f0-4bd3-acad-a9d0dba573b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2494e7a-0950-4118-914d-6808cc581a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024db845-a364-4e16-997c-1b365351fcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc5a344-0915-4ff0-9b96-f2e3507fc442",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a45afb-0f30-4673-bb39-33cf89da0fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c98c3eb-7c20-4717-b98f-59a4e19ab40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bdf5e5-b275-4a38-8848-7e2a21030b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39445d9-fac0-41cd-8974-928cb839b5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9f4f00-8bdd-46da-93d8-7e4cb906480b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca49500d-1fda-4b87-8723-de0292c05522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5cbcec-923a-4a12-85ee-8f6fd7b2ba56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd5e709-f719-49a8-8053-816a2d260870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218b710f-d8cb-4293-b3aa-73b4cd6f62bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b70f8a-7c8c-4350-ad97-83bef7e2c43e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a3c8d9-f8c8-4553-9478-b4c5aedec22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658f4326-ec66-4a87-87a6-3cd0d79d3e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b24efe5-a334-46f0-9c93-c815dbb0186d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230d832d-2004-4d91-affe-a88da7ec9873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ca75f8-58a5-4c94-8467-8519432994b1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5445e0-9975-4d1f-a09f-f89eac16088d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64687c96-ae27-49f2-a14d-f2013cbe40c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6126bd-6699-4fe4-8b2f-2aa25292da02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e470ac42-b24d-43d2-9c4c-6cfb58f9242a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3fe74d-cde4-431a-ae29-34d23128720d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef4e586-d7e3-4ae2-b7a5-7f6037bcc401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8455c1-ed97-4520-ae5c-f4222f776de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4692831e-7884-47cb-878a-a9c662f2eb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72e8f35-9493-4c51-a799-ee9b93b13465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de838227-aab4-41cf-af64-ce7c9477a571",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04379171-4827-485e-bed6-cba818fd1ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37970717-3075-4b9c-bc1c-60091d9f3e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f68b5d0-1a3b-4b2f-aa69-a31666a2118c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5fca4d-11b1-4379-96e8-053d7b2f7e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c330ab24-2386-4a37-9b1a-57c6bc633b0c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9177f08-3efa-4b94-b41f-60cc05a4cb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc631bc-a9c6-4614-b33d-0d5eaedde4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb6e10b-4c9e-4500-a3dd-87c8496dd23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0469413-9569-42df-b576-a7f36d2b9ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bdee4e-f8e4-44de-85cd-d510e2efde0d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf697e27-97d2-4f0e-8cc3-4ef020a87b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd55af7-b62d-4646-8fad-f0b573c4e322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c939717c-8c0b-4f1e-9487-627db009267e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab0b5af-7aed-41c7-86ce-2c7cc6a1e42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f89f91-f186-4ea2-82fb-fa577edce6c1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84256f28-5218-4d53-9110-a5fdec844f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4e4f9d-3893-4791-9819-71b61706616a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366c2d34-3068-466f-bfc3-b090444ec70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cece9c73-b88c-45a3-9f7a-c0bcd0737c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954b003d-787a-4f34-b6f7-68704e1345d6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52da75bc-44c7-4fc1-abce-b7cfe0d78f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27650f99-04ba-41dd-8c89-aad0953ec7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a825292-16a1-422e-904a-ba2a84791af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b105501-87a4-4ef9-bf99-a47bac5f7d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b741664-3619-4e7d-99d2-2c5fc9dae3ac",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7378c9de-d522-47d9-be54-9e0db4c03649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7c02dd-35f0-4a31-b559-14072c663c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d118a3d-ba00-4751-9bc9-d0027ff4d986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f255b3c-08a4-416e-8f24-86b80977defa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe012e1-b0d8-4921-acff-7e40921427c1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe529bf-178f-4b73-9be3-35bc77d30cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fab3aa-2c5f-4ee3-91d2-57b8aa268cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfcf874-9135-45f1-87a5-ec4caa559c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc77690-b65c-4a3d-bb00-8020ed07434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9597e5fe-bc00-4794-8e58-865a1083f03c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d94cfc6-9886-4d5a-816c-dcaa16b66d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856f514c-aa54-4728-a711-0c2b7a5f62f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af4a0a7-2bce-4e23-b4f8-a5159e06a6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6791f5-5582-4233-b558-d97c42f0d273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea50490-d9ca-4081-abff-6ad96dca8f49",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5056b703-fb1e-414c-a86d-cc849170501e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44c525f-edfd-42fe-803c-18f5c2a822f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d571df1e-cd8b-48c3-835c-55d768520367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03243be2-1a38-45bd-8116-c571f8c4cb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b8db99-b755-4a49-b79b-97acb945ddbb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b604ca-d901-41fc-b02f-c59ef74ac392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d6876f-52c7-4e7f-9b47-5967d915e809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591e5b7c-0eb6-4a95-91e2-20ce84da55e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13837abb-954e-484c-bdbc-9f3ba4ed68d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eae333-6953-4593-9d0b-d95b67e24a2f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e42b971-66c6-4c57-9427-5cc66631116b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cafeb80-0d8c-4286-8cc9-8e7ef7783771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f01e7e3-8faa-4728-ac60-e987fa72e27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4907b5c8-11d0-465c-95aa-a44a0a102c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d20b6b-9951-4c7c-b83d-07f0f4d42889",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8713c4a7-9630-4227-9e3b-55f3f3cc8930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e2585d-a05e-49ea-b94a-76d5d8408813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24a5231-e033-4e01-a974-0eae55d1d6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72ab14e-c87a-4d93-9081-a32657e5e961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7afe60d-0589-42c8-9e8c-8bf70837e4e7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a77ce2-5a7a-46df-998b-848efe9eab61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b1b7a3-af12-47ed-90e6-fdb930c7051e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cc884b-cce9-4a2c-bf94-5323e4b07e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd31088-0184-4d61-9482-7883ff77cb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c4fa5b-72d3-4f51-a747-e2de49fd87b0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64969420-72b4-4a10-9992-239f1ae63dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96ac208b-79f2-4276-a5c5-d216c60ba642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304fac91-d43a-4736-8aa0-95e00c290d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ce81ee-b7bb-40a5-a3c2-dc3f0451d123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13497045-a8f3-4acb-9384-b50aa1c73ced",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdb600c-fc21-4d08-b590-3cbb6242b463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa827b1-86b5-42ff-a246-f5a221a532f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992a17d1-7ac9-47cc-8e3f-34a0af204e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240f1392-00b6-4b28-8ae7-6aa6cd731e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c48b15e-9d83-455a-a8d5-0050130d0e9c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5713dc89-4628-4047-8ba9-58676b0bd744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847796f5-0e5a-400d-ac73-4617ab58375a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74c4647-d115-4465-b627-f470c1c418d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31748775-2ddb-4d61-858c-8001693bfa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63126f6-f8b1-4fa3-88d2-42b957899c59",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f682f00f-71c3-46f7-8081-8e1ece8ecb55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf00d33-136f-45db-9748-9ec0a1a35d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12b2096-0ce1-432a-9fcb-294f6a6bb0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa052586-bd42-4eef-9c5d-7801244bb8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d0be42-b3a2-4658-9d9e-5068edeb677f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84f32f3-ab2e-4855-a04e-afa9f05bb486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a600912-ceaa-487f-9ab0-cb8341d711d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6641dc6-2103-4883-ad4a-a3101e28cf02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd7aeae-89cf-4754-9f41-35eca17ccf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c20f1b-2330-4d03-a385-5aaf505eee44",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50657b0b-2f6a-4fd6-91ce-c680b840a7f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4feecce0-ef0f-488f-b115-f2daaef6135d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3451921-6bbb-47d7-b2bb-eb087d12d2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c18c67e-66bc-4e96-9376-6d55120f9863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d9de8d-7e3f-43c2-81f2-16989a59c01d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b798d3-d92c-4f3e-9416-92446f29739c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5dec9a8-d4fa-4a93-a888-baaa66de117d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fa2439-223d-4c24-bba3-ad9779096285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277377d0-474c-41e6-b22d-6b37ab057978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2448160a-964a-4790-a3a0-115b5b74d848",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee814131-ce45-4df9-81e5-3221acbd94a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be6654be-285a-4f5c-923b-a5a7840bcca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0e6757-d29e-4583-9dcf-3181c0d05090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8895270a-9de7-4646-9d4e-591b81c77af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c6bce7-12bf-423e-abc9-95007df8a6c4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180bc89e-323a-4045-bb44-089b8c0e4a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7188fb-57f9-43c0-8426-b8ea2ac5acf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedb089b-2059-4d14-b9ec-5b2be3758577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ccc3bb-c6ec-4b2c-aaae-b5206fb790ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4625a11-d3e9-4223-b2d3-fb2150310f2e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2708b5-7bc7-4690-abb7-8120c1fce6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888ed368-efb5-41ca-a6ef-49172440d6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dd0eb3-9c26-4d80-b411-d6de74e55ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fc0a7b-1dbd-46d3-83f4-9c2538fa981b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2d3731-4a9f-49a4-b256-7aa6792d0c56",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d6524e-2f40-4160-93a9-ab490d36a4d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684bd488-3b2f-461b-970a-f175097a59a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0142be-13eb-435b-9273-e148f972a49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52220ae0-0f01-47a0-acf3-121a9d58a069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abb90df-86c4-4e43-b01d-b1885935c908",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4004464-4412-4df1-b356-9804266d0586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b61807-1c6b-4576-943f-1e9b5de6e52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b809dca1-2dd5-4edd-8c45-4cc6699a7625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9424e26f-90be-429a-ad43-7bf36abdf984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5736f4b3-7385-498d-8882-74a90fcd8be1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398f5f36-79c4-4649-94da-ece472d57261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fe64950-adb3-4827-b7af-821d294ac4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4439e9ab-64fd-4f5e-a01c-4a2aa2066a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606293eb-3b75-4752-93fb-75718490248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0215f81a-7204-4773-a261-b54b3a23ef8f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a2e225-336f-44d1-9624-07e763ab9f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bee7681-1bca-484a-9e0c-9c27f60ab739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd837aec-b937-4c34-90d1-31ccd854bf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0637f3da-ac4f-48c1-80b8-0d1a6fa92cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97817139-5ac3-45a0-873c-9f810139aa4b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb398d1-1e7a-4afa-9c5a-b08356ebd06a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b73f074-a0a2-4a8b-b0a2-3c77fe273847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bcb497-d2b6-4082-8983-703f212bb3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63adafd-c27d-4107-823c-eb2a024f3356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42cdacc-ea5f-45d3-86b4-514f15f856a3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b15163d-8303-4cca-a9f6-ec612703710a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e867097a-a726-4229-a54a-7a12008245b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b77201-e2da-421f-a878-a8d933b0db42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83a6197-034b-4af1-b172-8b12b740f09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834cb45d-88f5-4edc-8d17-79ec25a2a1c8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3544d58-ced6-42f3-9f4b-1804fcef6be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5141cdf5-2c4e-4dd7-b691-b857607dbeaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97fa067-5a78-4d61-86e5-f6bb5b2ab393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63485a39-3418-48a9-9cfa-93d953193c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736e99eb-5560-4852-aacf-7dbde438a30f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3625b4-7313-4592-8664-13f31eb2f55f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e37f9c08-1573-4ba7-b379-7cb708f0626d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ae9bbc-abee-42b7-982a-5659f94eca09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505fc21e-f03e-4d38-99f3-598e6002ef32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0ba96c-9241-4d59-8625-7895839eba5f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3959be-7dd1-4567-992c-167cda3abef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f8a6776-c3aa-45f2-aa3f-07688474c18b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4e9f16-f1cc-413b-aba2-b278e52787a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096819d8-e906-4464-872b-80814e87c3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69feda83-dca0-4f33-bbe8-1977af34982b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de8e633-9ac0-46ee-98cc-654f3b54349b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa354f06-be1b-4cfd-bab8-73030485b4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "373ed60f-3e7e-402d-ac8f-bc804afb9522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abf9ab4-e44d-4942-97e7-ceabd966e273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c7752a-99ed-4ba0-8f3b-6f4dc7ed3fd4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edc5597-62b8-40c0-8ba3-2aca290eb40b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb79752e-e3c0-4d99-9626-dfd8063deba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472960a4-160b-4d84-888f-fae6bd08f6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cc3040-86a0-4c98-93d6-3e6a1e09da8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b1d372-476f-440f-997a-34c6fc2b9338",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bda36c-3e52-4c0a-908f-afc1b46a13cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208ce7ea-ca3a-45f5-8e3f-b07992674f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfe5f8e-8b4a-465c-ab1d-b39e516cd523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4a786c-c37c-41cd-b3e4-10f5c1cb01f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87908452-176c-4902-9c79-a6081ee71290",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc5b895-da44-491e-a1d1-ce0069199142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c9f30f-13d1-43f9-b631-2ba58ed664aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b915eb7e-27e7-431f-ae98-44f81474c338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0fad26-0a0d-49b9-a125-af7a08d85053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15c7adc-3a6a-42e0-b05a-7cb4a8857623",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d84ec8-5def-4077-972d-aa9118061d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958f478a-f96d-405d-acd3-a286ca8c065a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e07fe39-aebe-4a4b-a10b-46878e69b069",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a754c550-cef8-4624-b4d3-63681a24710f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8636fb93-2f84-486b-80b4-6a5d86eedc16",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c44a37-bc3a-4dc7-a82e-ddddeb15b4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944a440c-4644-4d4e-bd6e-79377cd5f8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6474cee5-3edc-4b0e-9866-5808128fd4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f6f94e-cb3b-4a1e-8f51-e707a57ff124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c2bbbe-a1aa-4ab9-8c98-9fd812dbd23d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f47cef-8df8-4486-a3cc-28f54939e249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803c952b-6fc2-4937-ae31-199d6ea0ce1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcd2118-c5a1-45a3-9723-62e64802448e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086fc9d7-bf8e-43af-94d1-ec51ffdbbf7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33de9c84-3551-4339-8e3d-628024d64ae9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5998f0c4-790d-497c-9674-90ef3b0438ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e9033f-fbbb-481c-b5ec-4237c7eb7b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad839a6-6443-4458-9bd7-82f3ed12245c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19181b80-c90b-4fd5-a386-3616924c131f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fffa569-b0b4-4591-b7fc-b073d4eb25ad",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227483cb-da3c-46c9-a4c2-b738cfe0a78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40aed502-9fb6-4a08-8961-a05d8723ee00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4008322-42ca-46c5-be23-2ce03526c060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8992fe-0e1a-4e8c-98eb-9429f7a6624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79644cde-a2bd-4862-9313-e7a524dc451d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a19daa2-1cd6-430e-aedb-68b15e26c4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88378baf-e39b-4f79-8c89-44fbbdfd55c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347029bf-edfd-4546-8534-a6ceca5602e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed32497-c982-44c6-958b-6d93fb5a042d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcc74e7-f61f-4d5b-86e5-446a04c9c21c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b79ad6-7855-4640-bf81-a5de8c8f8cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3819820-1508-4313-a0b6-68fcffa1b76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdde6bec-00ff-4f4a-8373-8fb2efaf5260",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7684edb1-872a-4b3c-b3fd-3f0eaae526f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465f046d-f7b7-4ee9-9e3a-a7e0acc96493",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f2ca36-2516-4951-9e5e-1dbc5c61f0cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b1b6b14-5a64-4aa1-a585-2abe34dbfb09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b978c61-b797-495b-aa34-4d33a0f81b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35346ab7-92e1-4d12-a858-25ea68e6fac7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79b86ba7-2c81-4243-a09c-611f3cdbc64d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cce8a0a9-bded-4a06-b2f1-4e10c322d8c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "993b6465-fbfe-413b-bc2d-f3b5abac50a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32cae38c-abf0-440d-a26e-5415130ce05c"
                    }
                  }
                ]
              },
              {
                "id": "953ceea4-8334-401b-9532-74fb4c560b6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "624f3c84-1b14-4be5-9df9-c8c2fa35cf40",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecac625d-4be5-4ff1-9b1d-a49ce93d9d57",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9aa218cd-82a7-420b-9fd8-7d28698781b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2d8092-a477-42f7-b0ce-fcecdeabd39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1f597bd-0a8e-4d00-8928-f95942f91bcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e213ea38-86ec-4029-84d0-9636168c9ee8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6397699a-063a-4820-97ae-f0be3f5e952e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf80bc8c-f809-482d-9e8e-2ad4d99f0a7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6c9f488-07e7-4b93-9b3c-c056569447fe"
                    }
                  }
                ]
              },
              {
                "id": "bbf9369a-2d04-4f9b-888e-d4e2a25a3164",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "69a3caba-6716-4084-9f9e-2a8b2fc719b5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7284c9-fa73-47f7-8c50-e64e5c3c4ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "40375077-1c63-4658-884d-69551d2e6d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc09960-eea1-4249-8d52-b8ed884b6fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edb54ec-d777-464d-9eb7-ad3121cbfbc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "21368e48-ea90-4a18-b491-523c0c529fe4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b4c64f9-4938-4224-916a-9c3285f08a33",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c8e025f-379e-4456-90a3-5d122769d401",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "352d7f93-721a-4121-99ed-68698a134f67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "910c2e01-79cd-4fbb-939a-39ca2d037fb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31f96287-c451-46ed-ad81-61a9f66878d5"
                    }
                  }
                ]
              },
              {
                "id": "4b6577a5-dfb9-4dd3-9b8e-9ec22ba5b8c6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73f1ac36-d1a0-46e4-a2ea-989238610755",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11081e8c-d08a-48d1-9e08-e5ab18ca061a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa95db48-883a-4e2d-b126-8f0c4f03d730",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbeffe8a-1229-45df-aacb-e8a3e280a54c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1b9af7f-ae9a-4416-8ca3-de68a0bc0a28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e6e4b850-c011-49b4-9846-e6cb80662db2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1b068bc-433b-406b-bbdf-a854df4f6c17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfb321b0-62eb-46d0-b0fb-cb5b561757fb"
            }
          }
        ]
      },
      {
        "id": "802d542d-7b29-48c1-93a3-7d09d0b1ba59",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0cd5de68-a6b8-44c0-958f-2715105af037",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0debf5a4-ba08-4ab6-87aa-31c4640d5b8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e412124-e83b-452b-ba46-df2788d28aef",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "50ba5568-9963-4449-81f3-f63552e356e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaf8c05-3a46-49cf-91a9-ddad1f2b0880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d95f12fd-3d03-48b2-bcd4-f3891b45df44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a07408de-40f3-4117-8dc5-93077ec3ff1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0da129a4-06f5-4b2b-a17f-aa2d1c6e8cbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3450bf9-dece-45d3-9c0b-15dfb49e5552",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e63bde3b-3bab-4932-baf3-b341c2455064"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c0e04f0-9c01-4e2b-bd90-61ee344dc31d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e33d069c-68ae-412f-92bf-7c0932ee3d10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5b39924-3e66-4ed9-bf0f-19b0db686f94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb5410bc-d42a-45fb-9c91-018cc473a96b"
            }
          }
        ]
      },
      {
        "id": "9c2f8bda-7abe-430a-a945-d78a977f94f9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "87837cb1-b065-4b6b-bdcc-038cc000d1fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d977eda6-f666-4aa8-b060-d4c3a94bbdfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f53acd-0f41-41fe-9653-c482bd29f31c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "645546d4-301f-4499-bd7c-357c056174c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ba6785-fad9-489c-b28e-70b1871d9dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e68a98d0-7a67-4c05-b501-41633b94ba20"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "305820e9-4521-4581-a562-932f0777f6ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad6408d5-3b47-4ec0-88a2-f064d5c89534"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ed469a5-6d2b-4ec6-b886-af1d06e57a66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c496829-1dd8-4159-8540-c201c754616e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cc735f2-eb72-4293-8f33-eda3acf0730d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "93d2f4dc-c7e0-433b-be36-9ef01b6ae8e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e586437a-b020-491c-87bd-7a07aacae195",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97ff39ad-bda4-4ded-897f-a86859c2e874"
            }
          }
        ]
      },
      {
        "id": "aa2c2f75-14ba-4ee9-a823-3df425f6117c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "22b48d48-0b16-47fb-948e-96303a79c12c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6871bb1-b32b-4fb9-bb83-454731a2be29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a9154c-0726-47f3-acb6-ef9a88733006",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8838dafb-dd22-4a47-b719-3bd6b7d405a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5ceca0-ad28-495e-91ae-e11d9f64244b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8f9d320-6da4-4c14-8d73-41286b9a2199"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4579dc9-710e-4ade-bd38-8ac6bbe4601a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0027ee2f-a578-487a-9eb5-a747fd124455"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c3894e7-fe3e-42e3-866d-d447e8121aed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20718432-328d-448e-b904-c43ef7edb5f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4540394-37ec-40d2-8328-166d79cdc4af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1fa54eb0-1bc0-4e23-877e-dd2190023d2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5024ecc-c0e1-4712-a907-4c7d578c6bbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c247f929-fb92-4f5c-a40c-42923d7a9fb4"
            }
          }
        ]
      },
      {
        "id": "a67ff045-c337-4b2f-a459-c190dd7f40b6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfea9c0e-f5da-4b69-9899-8b95f68018d9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc0c7ac4-a157-4b59-968e-14e8c24f1c07",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3d1551ab-d79a-4a23-8ee5-ac2f20978fbc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2453677c-3837-473d-90d7-d8878df623ba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdf10a27-f421-4fd3-8a8f-a80d139d4eb8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 570
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 719.9628647152767,
      "responseMin": 10,
      "responseMax": 41914,
      "responseSd": 4806.256010775813,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696120705153,
      "completed": 1696121121217
    },
    "executions": [
      {
        "id": "a03327d0-b5cf-4135-8f46-d7b97c1bcdbd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "acf824ee-aa7e-4c59-a95f-1415d84e0503",
          "httpRequestId": "5498ee4a-a7bf-496c-b816-fc0eb37f49fd"
        },
        "item": {
          "id": "a03327d0-b5cf-4135-8f46-d7b97c1bcdbd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7e56af40-69a9-4164-a85f-302cf1f9725a",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "7b80eff3-a264-4b07-b223-f43091b7f250",
        "cursor": {
          "ref": "4a4fb4ab-394a-46e8-aa48-b1eb9fae4b63",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5cb1ca29-9aba-4682-ac49-f86187cb43d0"
        },
        "item": {
          "id": "7b80eff3-a264-4b07-b223-f43091b7f250",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5c2c8a0a-b3d2-45b3-a364-2886b06cb470",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "e0cde275-583b-4f6b-b267-4217e3e6497f",
        "cursor": {
          "ref": "32d7b3a3-1266-4963-a72c-d82f73de2ba0",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "79f40d36-f320-482a-9222-a0761ff5ef77"
        },
        "item": {
          "id": "e0cde275-583b-4f6b-b267-4217e3e6497f",
          "name": "did_json"
        },
        "response": {
          "id": "e7fd21a9-967f-4783-a94b-591d3b2a71e5",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 41914,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "d70b8e53-ac9d-4a2d-8c67-e2afc403ae72",
        "cursor": {
          "ref": "29dc8775-56b8-4c41-b963-e52e483512d5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c358dc59-08b8-4488-897f-b95f9a784342"
        },
        "item": {
          "id": "d70b8e53-ac9d-4a2d-8c67-e2afc403ae72",
          "name": "did:invalid"
        },
        "response": {
          "id": "e5d51e8b-72f2-4145-9df0-e4032d88e8f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8879,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d70b8e53-ac9d-4a2d-8c67-e2afc403ae72",
        "cursor": {
          "ref": "29dc8775-56b8-4c41-b963-e52e483512d5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c358dc59-08b8-4488-897f-b95f9a784342"
        },
        "item": {
          "id": "d70b8e53-ac9d-4a2d-8c67-e2afc403ae72",
          "name": "did:invalid"
        },
        "response": {
          "id": "e5d51e8b-72f2-4145-9df0-e4032d88e8f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8879,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "54970977-e867-48ec-bbdb-eb5704510b60",
        "cursor": {
          "ref": "37e62489-77fe-4c17-9293-967e82e6e24c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9594177f-bb2a-467f-affc-c8ee394d2156"
        },
        "item": {
          "id": "54970977-e867-48ec-bbdb-eb5704510b60",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d38bffcf-f88f-4bee-93ac-40dd5368ed7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "54970977-e867-48ec-bbdb-eb5704510b60",
        "cursor": {
          "ref": "37e62489-77fe-4c17-9293-967e82e6e24c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9594177f-bb2a-467f-affc-c8ee394d2156"
        },
        "item": {
          "id": "54970977-e867-48ec-bbdb-eb5704510b60",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d38bffcf-f88f-4bee-93ac-40dd5368ed7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "d156cf25-c967-4178-b761-30d9a43dfd1d",
        "cursor": {
          "ref": "7c6cfd99-455f-498b-b267-420047586941",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "080efd6e-b911-46a1-9a2d-a86b50c3ffaf"
        },
        "item": {
          "id": "d156cf25-c967-4178-b761-30d9a43dfd1d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f18d8a32-0bfd-43a3-b78c-96d0b9e32126",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d156cf25-c967-4178-b761-30d9a43dfd1d",
        "cursor": {
          "ref": "7c6cfd99-455f-498b-b267-420047586941",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "080efd6e-b911-46a1-9a2d-a86b50c3ffaf"
        },
        "item": {
          "id": "d156cf25-c967-4178-b761-30d9a43dfd1d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f18d8a32-0bfd-43a3-b78c-96d0b9e32126",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "cc47d71c-a3b7-417e-b608-2eda86c9b9d4",
        "cursor": {
          "ref": "8d550db8-275d-491f-9899-8aa8cf7a973c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eb5705be-22dd-4da6-a953-7d8c99744a99"
        },
        "item": {
          "id": "cc47d71c-a3b7-417e-b608-2eda86c9b9d4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "abfc5a6d-8bee-494b-939b-4ce0ca871401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "cc47d71c-a3b7-417e-b608-2eda86c9b9d4",
        "cursor": {
          "ref": "8d550db8-275d-491f-9899-8aa8cf7a973c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eb5705be-22dd-4da6-a953-7d8c99744a99"
        },
        "item": {
          "id": "cc47d71c-a3b7-417e-b608-2eda86c9b9d4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "abfc5a6d-8bee-494b-939b-4ce0ca871401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d99c1ec1-60eb-40a1-9823-df15b1cdbfe9",
        "cursor": {
          "ref": "f41f8287-e2dd-49b3-894b-ebc043d1928d",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a3a8f01d-4e90-4105-a622-5935e3b179e3"
        },
        "item": {
          "id": "d99c1ec1-60eb-40a1-9823-df15b1cdbfe9",
          "name": "identifiers"
        },
        "response": {
          "id": "569a464b-197d-4954-bbb0-e8e4fd9d8981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 184,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d99c1ec1-60eb-40a1-9823-df15b1cdbfe9",
        "cursor": {
          "ref": "f41f8287-e2dd-49b3-894b-ebc043d1928d",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a3a8f01d-4e90-4105-a622-5935e3b179e3"
        },
        "item": {
          "id": "d99c1ec1-60eb-40a1-9823-df15b1cdbfe9",
          "name": "identifiers"
        },
        "response": {
          "id": "569a464b-197d-4954-bbb0-e8e4fd9d8981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 184,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fe82a14a-8998-4d57-827e-9d7c8b0d4228",
        "cursor": {
          "ref": "d8d00181-5443-42fa-86f9-e98fa148fbd1",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c29ee335-929e-42f0-9fa7-be7e2a826edf"
        },
        "item": {
          "id": "fe82a14a-8998-4d57-827e-9d7c8b0d4228",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc7ece8c-e892-474f-9d10-dcbde7f9fbda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "fe82a14a-8998-4d57-827e-9d7c8b0d4228",
        "cursor": {
          "ref": "d8d00181-5443-42fa-86f9-e98fa148fbd1",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c29ee335-929e-42f0-9fa7-be7e2a826edf"
        },
        "item": {
          "id": "fe82a14a-8998-4d57-827e-9d7c8b0d4228",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc7ece8c-e892-474f-9d10-dcbde7f9fbda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "7f210978-9e87-430d-9a5b-a2e56c7c5243",
        "cursor": {
          "ref": "af42c450-d778-450e-b21f-f6dff453abd2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "edb0c93f-a9ce-459e-b9c9-122112e080a8"
        },
        "item": {
          "id": "7f210978-9e87-430d-9a5b-a2e56c7c5243",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d3f05509-5497-41d5-be97-d0bc42526caf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "7f210978-9e87-430d-9a5b-a2e56c7c5243",
        "cursor": {
          "ref": "af42c450-d778-450e-b21f-f6dff453abd2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "edb0c93f-a9ce-459e-b9c9-122112e080a8"
        },
        "item": {
          "id": "7f210978-9e87-430d-9a5b-a2e56c7c5243",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d3f05509-5497-41d5-be97-d0bc42526caf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "dc0ce4a0-8d96-49f8-bbfa-e740c6261570",
        "cursor": {
          "ref": "8d5c3a02-7428-447b-83d6-249592fdd4d0",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99e5935d-34f7-4f1c-9000-94499a911623"
        },
        "item": {
          "id": "dc0ce4a0-8d96-49f8-bbfa-e740c6261570",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3f4533b0-faab-4678-9f40-a467f57d0980",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "dc0ce4a0-8d96-49f8-bbfa-e740c6261570",
        "cursor": {
          "ref": "8d5c3a02-7428-447b-83d6-249592fdd4d0",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99e5935d-34f7-4f1c-9000-94499a911623"
        },
        "item": {
          "id": "dc0ce4a0-8d96-49f8-bbfa-e740c6261570",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3f4533b0-faab-4678-9f40-a467f57d0980",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "58b93985-58c7-4e80-9324-f31be173889f",
        "cursor": {
          "ref": "23c408db-9020-4469-83d6-aaac5e56b93a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "99414c68-48a8-4619-a0af-3bfe82781d9b"
        },
        "item": {
          "id": "58b93985-58c7-4e80-9324-f31be173889f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a44a1f7a-aabf-4c9c-8dc0-2f0e2265003d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 153,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "58b93985-58c7-4e80-9324-f31be173889f",
        "cursor": {
          "ref": "23c408db-9020-4469-83d6-aaac5e56b93a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "99414c68-48a8-4619-a0af-3bfe82781d9b"
        },
        "item": {
          "id": "58b93985-58c7-4e80-9324-f31be173889f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a44a1f7a-aabf-4c9c-8dc0-2f0e2265003d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 153,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9bd2e9ba-3dc6-465f-a9e1-190bf1d6b17f",
        "cursor": {
          "ref": "22e20548-452c-4251-beaf-0090a69abcbf",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f548a7c-aca5-4f58-9e1f-fb56164376b8"
        },
        "item": {
          "id": "9bd2e9ba-3dc6-465f-a9e1-190bf1d6b17f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5d20dbd7-7f5f-49fe-96db-01e04c3da13f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9bd2e9ba-3dc6-465f-a9e1-190bf1d6b17f",
        "cursor": {
          "ref": "22e20548-452c-4251-beaf-0090a69abcbf",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f548a7c-aca5-4f58-9e1f-fb56164376b8"
        },
        "item": {
          "id": "9bd2e9ba-3dc6-465f-a9e1-190bf1d6b17f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5d20dbd7-7f5f-49fe-96db-01e04c3da13f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f1b49f71-fdfb-41c0-9805-7517797af230",
        "cursor": {
          "ref": "15fe3903-bf26-440c-8882-63c4f802b513",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e368c3f7-4696-42b7-90a0-05c615e7616c"
        },
        "item": {
          "id": "f1b49f71-fdfb-41c0-9805-7517797af230",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "344eedfd-5801-402b-9612-bf8652092bcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f1b49f71-fdfb-41c0-9805-7517797af230",
        "cursor": {
          "ref": "15fe3903-bf26-440c-8882-63c4f802b513",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e368c3f7-4696-42b7-90a0-05c615e7616c"
        },
        "item": {
          "id": "f1b49f71-fdfb-41c0-9805-7517797af230",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "344eedfd-5801-402b-9612-bf8652092bcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6817c257-a143-4715-af02-4727a2813b9b",
        "cursor": {
          "ref": "dd103867-a758-408a-aab8-77c2c949fb04",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ad0c3b3-e46c-4829-817a-1231960167fb"
        },
        "item": {
          "id": "6817c257-a143-4715-af02-4727a2813b9b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "399d8cad-2151-4831-a0ff-defa15df3b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6817c257-a143-4715-af02-4727a2813b9b",
        "cursor": {
          "ref": "dd103867-a758-408a-aab8-77c2c949fb04",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ad0c3b3-e46c-4829-817a-1231960167fb"
        },
        "item": {
          "id": "6817c257-a143-4715-af02-4727a2813b9b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "399d8cad-2151-4831-a0ff-defa15df3b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e8671aa7-ecba-4dd4-858e-06948315fb13",
        "cursor": {
          "ref": "ddd7b1bd-ada3-4d0c-be92-54edc33fbbaf",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dad619bd-fcc2-4725-b5ba-6b760a91e90a"
        },
        "item": {
          "id": "e8671aa7-ecba-4dd4-858e-06948315fb13",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "282e080b-d386-4bfd-8402-f626adc3d25c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e8671aa7-ecba-4dd4-858e-06948315fb13",
        "cursor": {
          "ref": "ddd7b1bd-ada3-4d0c-be92-54edc33fbbaf",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dad619bd-fcc2-4725-b5ba-6b760a91e90a"
        },
        "item": {
          "id": "e8671aa7-ecba-4dd4-858e-06948315fb13",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "282e080b-d386-4bfd-8402-f626adc3d25c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a192f682-16e4-40db-b83e-b5600363a360",
        "cursor": {
          "ref": "41b8d8e1-f448-4307-b6ee-fe9965054211",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "338b4973-154b-496d-8a75-7bcc066d9e81"
        },
        "item": {
          "id": "a192f682-16e4-40db-b83e-b5600363a360",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "71c8cdf3-6aa6-4ae1-9bab-1a7bbc9bad48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a192f682-16e4-40db-b83e-b5600363a360",
        "cursor": {
          "ref": "41b8d8e1-f448-4307-b6ee-fe9965054211",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "338b4973-154b-496d-8a75-7bcc066d9e81"
        },
        "item": {
          "id": "a192f682-16e4-40db-b83e-b5600363a360",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "71c8cdf3-6aa6-4ae1-9bab-1a7bbc9bad48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "16a70db3-b14d-4309-81a1-944c729011bb",
        "cursor": {
          "ref": "dfd38b81-aa63-4190-82f0-19c0569e0c98",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b7a8b72d-e45a-45b3-bfc6-941a442fc86b"
        },
        "item": {
          "id": "16a70db3-b14d-4309-81a1-944c729011bb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8c51e9d2-42f8-4b14-a09d-b38d27468cc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "16a70db3-b14d-4309-81a1-944c729011bb",
        "cursor": {
          "ref": "dfd38b81-aa63-4190-82f0-19c0569e0c98",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b7a8b72d-e45a-45b3-bfc6-941a442fc86b"
        },
        "item": {
          "id": "16a70db3-b14d-4309-81a1-944c729011bb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8c51e9d2-42f8-4b14-a09d-b38d27468cc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2e51323a-8222-4fef-a278-1ad52da154e0",
        "cursor": {
          "ref": "b9ef99a8-8215-4c17-ba66-67065bf2e57d",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "82320bb2-7711-4f16-8bcd-0d0fbb121c7b"
        },
        "item": {
          "id": "2e51323a-8222-4fef-a278-1ad52da154e0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7dbf2f70-4639-4b25-9f99-a2c88738cb54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25684,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2e51323a-8222-4fef-a278-1ad52da154e0",
        "cursor": {
          "ref": "b9ef99a8-8215-4c17-ba66-67065bf2e57d",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "82320bb2-7711-4f16-8bcd-0d0fbb121c7b"
        },
        "item": {
          "id": "2e51323a-8222-4fef-a278-1ad52da154e0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7dbf2f70-4639-4b25-9f99-a2c88738cb54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25684,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dc23e0d8-f72a-42e6-8a84-18f8cc212505",
        "cursor": {
          "ref": "b133dca0-940e-47ce-8c79-fb2a26a7fbd9",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d282b695-6f5e-464a-872d-7a50ed872bd4"
        },
        "item": {
          "id": "dc23e0d8-f72a-42e6-8a84-18f8cc212505",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0c3eeff6-5c9d-42d6-b6c3-c1d66069b55a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "dc23e0d8-f72a-42e6-8a84-18f8cc212505",
        "cursor": {
          "ref": "b133dca0-940e-47ce-8c79-fb2a26a7fbd9",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d282b695-6f5e-464a-872d-7a50ed872bd4"
        },
        "item": {
          "id": "dc23e0d8-f72a-42e6-8a84-18f8cc212505",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0c3eeff6-5c9d-42d6-b6c3-c1d66069b55a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c3cf2fd6-4a6a-4708-9aec-b55f6601c452",
        "cursor": {
          "ref": "ab15d3f6-f98c-4cca-8648-7f0c63a0bd1c",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f8566163-e265-4a6e-89dd-c588c1aeff6a"
        },
        "item": {
          "id": "c3cf2fd6-4a6a-4708-9aec-b55f6601c452",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d71d2ba4-a221-4ab3-aa25-3221e787c448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c3cf2fd6-4a6a-4708-9aec-b55f6601c452",
        "cursor": {
          "ref": "ab15d3f6-f98c-4cca-8648-7f0c63a0bd1c",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f8566163-e265-4a6e-89dd-c588c1aeff6a"
        },
        "item": {
          "id": "c3cf2fd6-4a6a-4708-9aec-b55f6601c452",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d71d2ba4-a221-4ab3-aa25-3221e787c448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d3048880-5648-4f1c-bf5b-43d05c0c4b29",
        "cursor": {
          "ref": "c85635bc-9b71-475c-a446-bc5a42feade9",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94a63596-da8f-4226-8fc5-bafa9d04fb7d"
        },
        "item": {
          "id": "d3048880-5648-4f1c-bf5b-43d05c0c4b29",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1457b68f-d744-44f2-9136-a71336bbdcf6",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38346,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d3048880-5648-4f1c-bf5b-43d05c0c4b29",
        "cursor": {
          "ref": "c85635bc-9b71-475c-a446-bc5a42feade9",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94a63596-da8f-4226-8fc5-bafa9d04fb7d"
        },
        "item": {
          "id": "d3048880-5648-4f1c-bf5b-43d05c0c4b29",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1457b68f-d744-44f2-9136-a71336bbdcf6",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38346,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6a0091c4-157f-4079-b796-f49d2c0ea257",
        "cursor": {
          "ref": "e31f91b6-a773-4b08-a170-68154f07059f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2e441a08-1ebe-40e8-8c1a-7b8a054cd0db"
        },
        "item": {
          "id": "6a0091c4-157f-4079-b796-f49d2c0ea257",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "71388398-3328-4acf-a78a-28523837f690",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5197,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6a0091c4-157f-4079-b796-f49d2c0ea257",
        "cursor": {
          "ref": "e31f91b6-a773-4b08-a170-68154f07059f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2e441a08-1ebe-40e8-8c1a-7b8a054cd0db"
        },
        "item": {
          "id": "6a0091c4-157f-4079-b796-f49d2c0ea257",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "71388398-3328-4acf-a78a-28523837f690",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5197,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "cd7cda85-2bdc-4237-803e-face8f38fb0c",
        "cursor": {
          "ref": "04be7f44-33ef-4f27-8146-fff0f7111d96",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c36350c8-2688-4a78-b9d4-f7306efdc8d6"
        },
        "item": {
          "id": "cd7cda85-2bdc-4237-803e-face8f38fb0c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ef8cfa00-ddd0-44f6-9e71-e4fa4c8ff9ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "cd7cda85-2bdc-4237-803e-face8f38fb0c",
        "cursor": {
          "ref": "04be7f44-33ef-4f27-8146-fff0f7111d96",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c36350c8-2688-4a78-b9d4-f7306efdc8d6"
        },
        "item": {
          "id": "cd7cda85-2bdc-4237-803e-face8f38fb0c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ef8cfa00-ddd0-44f6-9e71-e4fa4c8ff9ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e69eeeac-7ae1-48c0-b49c-ce74ac413554",
        "cursor": {
          "ref": "671f8b5c-4287-4839-8ddb-31ee2ff2d198",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "07469037-68c5-4c7e-a601-b71467e01fb6"
        },
        "item": {
          "id": "e69eeeac-7ae1-48c0-b49c-ce74ac413554",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "017d3fa0-0c0c-4d96-9361-1f39d21e7ec1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e69eeeac-7ae1-48c0-b49c-ce74ac413554",
        "cursor": {
          "ref": "671f8b5c-4287-4839-8ddb-31ee2ff2d198",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "07469037-68c5-4c7e-a601-b71467e01fb6"
        },
        "item": {
          "id": "e69eeeac-7ae1-48c0-b49c-ce74ac413554",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "017d3fa0-0c0c-4d96-9361-1f39d21e7ec1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "86cdaba2-8435-44d7-a638-1702e8ef4281",
        "cursor": {
          "ref": "fec5f03b-9e8c-49a1-86b6-115a9bc65b4a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba3d5d35-d963-4a1e-be74-e1b1ee482920"
        },
        "item": {
          "id": "86cdaba2-8435-44d7-a638-1702e8ef4281",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "34cca80d-ad23-457f-9bd8-29078864d009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "86cdaba2-8435-44d7-a638-1702e8ef4281",
        "cursor": {
          "ref": "fec5f03b-9e8c-49a1-86b6-115a9bc65b4a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba3d5d35-d963-4a1e-be74-e1b1ee482920"
        },
        "item": {
          "id": "86cdaba2-8435-44d7-a638-1702e8ef4281",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "34cca80d-ad23-457f-9bd8-29078864d009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5f9caafc-bf6c-47d4-a412-760806b6c8c3",
        "cursor": {
          "ref": "f2845fbf-e80c-46e3-8674-140a227c5f9b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5f83c754-c610-45fc-8eb7-32e7ee9c2807"
        },
        "item": {
          "id": "5f9caafc-bf6c-47d4-a412-760806b6c8c3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0a350a40-8388-444b-8841-ffdb1c97beeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "5f9caafc-bf6c-47d4-a412-760806b6c8c3",
        "cursor": {
          "ref": "f2845fbf-e80c-46e3-8674-140a227c5f9b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5f83c754-c610-45fc-8eb7-32e7ee9c2807"
        },
        "item": {
          "id": "5f9caafc-bf6c-47d4-a412-760806b6c8c3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0a350a40-8388-444b-8841-ffdb1c97beeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3bd8aeba-cc66-4ff1-b60e-da62494699ae",
        "cursor": {
          "ref": "aeb4b43c-1c69-47e0-a6eb-e3020939cc5f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5028e08a-41e8-40db-9790-f7531a5bce13"
        },
        "item": {
          "id": "3bd8aeba-cc66-4ff1-b60e-da62494699ae",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "10a6385e-4593-40fc-8fa6-48f2b7f08777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "3bd8aeba-cc66-4ff1-b60e-da62494699ae",
        "cursor": {
          "ref": "aeb4b43c-1c69-47e0-a6eb-e3020939cc5f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5028e08a-41e8-40db-9790-f7531a5bce13"
        },
        "item": {
          "id": "3bd8aeba-cc66-4ff1-b60e-da62494699ae",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "10a6385e-4593-40fc-8fa6-48f2b7f08777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "aee9f738-a765-4898-9392-16805e6ca0f0",
        "cursor": {
          "ref": "91aec9f4-b5f9-44ed-9c1e-317773b08f77",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "751c42c2-ee87-4b6c-bf4f-006a347c8935"
        },
        "item": {
          "id": "aee9f738-a765-4898-9392-16805e6ca0f0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dfba5830-027a-46f2-bccd-192c26169987",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "aee9f738-a765-4898-9392-16805e6ca0f0",
        "cursor": {
          "ref": "91aec9f4-b5f9-44ed-9c1e-317773b08f77",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "751c42c2-ee87-4b6c-bf4f-006a347c8935"
        },
        "item": {
          "id": "aee9f738-a765-4898-9392-16805e6ca0f0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dfba5830-027a-46f2-bccd-192c26169987",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3e9f58b2-2c92-45aa-9627-2f48b2915b8d",
        "cursor": {
          "ref": "12526c57-bfb1-481e-a51d-86b63b780cf2",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a945c1d-1c62-46d9-a7e0-d53f825d4932"
        },
        "item": {
          "id": "3e9f58b2-2c92-45aa-9627-2f48b2915b8d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7b2cad79-873b-4bd2-9f8a-197f2b24ed93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3e9f58b2-2c92-45aa-9627-2f48b2915b8d",
        "cursor": {
          "ref": "12526c57-bfb1-481e-a51d-86b63b780cf2",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a945c1d-1c62-46d9-a7e0-d53f825d4932"
        },
        "item": {
          "id": "3e9f58b2-2c92-45aa-9627-2f48b2915b8d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7b2cad79-873b-4bd2-9f8a-197f2b24ed93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "2bdc6c89-eb60-4f79-8cf7-c5d9c402fc00",
        "cursor": {
          "ref": "09d9b62c-2245-4ee2-a20a-5e31b55466b2",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9cff89c-8f46-4665-804c-7435f0aca482"
        },
        "item": {
          "id": "2bdc6c89-eb60-4f79-8cf7-c5d9c402fc00",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5f5120d4-7d9a-40b8-b75a-e6c868187de7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "2bdc6c89-eb60-4f79-8cf7-c5d9c402fc00",
        "cursor": {
          "ref": "09d9b62c-2245-4ee2-a20a-5e31b55466b2",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9cff89c-8f46-4665-804c-7435f0aca482"
        },
        "item": {
          "id": "2bdc6c89-eb60-4f79-8cf7-c5d9c402fc00",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5f5120d4-7d9a-40b8-b75a-e6c868187de7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8b068a84-f55a-48f3-af57-28fb21b848f8",
        "cursor": {
          "ref": "3deada6b-2ca1-4bb1-99ac-fa885432ecdf",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3c85871a-7e66-413c-8962-6a2d45d6e291"
        },
        "item": {
          "id": "8b068a84-f55a-48f3-af57-28fb21b848f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "89ed79c7-a137-440b-b59b-df4647635303",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8b068a84-f55a-48f3-af57-28fb21b848f8",
        "cursor": {
          "ref": "3deada6b-2ca1-4bb1-99ac-fa885432ecdf",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3c85871a-7e66-413c-8962-6a2d45d6e291"
        },
        "item": {
          "id": "8b068a84-f55a-48f3-af57-28fb21b848f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "89ed79c7-a137-440b-b59b-df4647635303",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "771102ee-cd88-4c97-877a-b080824ffd82",
        "cursor": {
          "ref": "33a9701d-89a3-40f8-9b1f-14200e6073b3",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec5b70c7-6238-4a9b-9891-5c771bd4fda9"
        },
        "item": {
          "id": "771102ee-cd88-4c97-877a-b080824ffd82",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "09cee432-872f-467b-98c7-277222f1bf90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "771102ee-cd88-4c97-877a-b080824ffd82",
        "cursor": {
          "ref": "33a9701d-89a3-40f8-9b1f-14200e6073b3",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec5b70c7-6238-4a9b-9891-5c771bd4fda9"
        },
        "item": {
          "id": "771102ee-cd88-4c97-877a-b080824ffd82",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "09cee432-872f-467b-98c7-277222f1bf90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "63028343-7db9-4afc-a5d7-ce6d7133d70b",
        "cursor": {
          "ref": "6228af30-076f-40b0-ae59-040d15c1aca7",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7052c091-e01a-4355-956a-512dabe34c30"
        },
        "item": {
          "id": "63028343-7db9-4afc-a5d7-ce6d7133d70b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ac518cbd-f8e4-425d-b11b-2a86f98e3390",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "63028343-7db9-4afc-a5d7-ce6d7133d70b",
        "cursor": {
          "ref": "6228af30-076f-40b0-ae59-040d15c1aca7",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7052c091-e01a-4355-956a-512dabe34c30"
        },
        "item": {
          "id": "63028343-7db9-4afc-a5d7-ce6d7133d70b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ac518cbd-f8e4-425d-b11b-2a86f98e3390",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7c31222d-e678-483e-aaa1-24b4bd912aac",
        "cursor": {
          "ref": "378d57d7-45ad-4733-90a0-ac5d92c511c2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aefe2944-e85f-4c01-a3f3-b63d1fd034ee"
        },
        "item": {
          "id": "7c31222d-e678-483e-aaa1-24b4bd912aac",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f14366ab-d8a7-4b17-a712-afa3f24ba893",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7c31222d-e678-483e-aaa1-24b4bd912aac",
        "cursor": {
          "ref": "378d57d7-45ad-4733-90a0-ac5d92c511c2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aefe2944-e85f-4c01-a3f3-b63d1fd034ee"
        },
        "item": {
          "id": "7c31222d-e678-483e-aaa1-24b4bd912aac",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f14366ab-d8a7-4b17-a712-afa3f24ba893",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8b168366-6f4a-4917-a3fd-8c4cf6c91b9b",
        "cursor": {
          "ref": "5ee462e3-b1d4-449f-b0bd-d1279bc36b8d",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7588e820-cb4d-4d0c-bf5a-d83ca5ef47d3"
        },
        "item": {
          "id": "8b168366-6f4a-4917-a3fd-8c4cf6c91b9b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9ebf432d-45ba-4a1c-bd7d-53eb1097522c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "8b168366-6f4a-4917-a3fd-8c4cf6c91b9b",
        "cursor": {
          "ref": "5ee462e3-b1d4-449f-b0bd-d1279bc36b8d",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7588e820-cb4d-4d0c-bf5a-d83ca5ef47d3"
        },
        "item": {
          "id": "8b168366-6f4a-4917-a3fd-8c4cf6c91b9b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9ebf432d-45ba-4a1c-bd7d-53eb1097522c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2a0b5686-8f4b-4458-bfa9-6441a2526096",
        "cursor": {
          "ref": "4605b597-cfb1-4ff5-bf74-fb50ebc4dc98",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ea6789c2-84a1-47e7-af56-800b27c4d6c5"
        },
        "item": {
          "id": "2a0b5686-8f4b-4458-bfa9-6441a2526096",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f26cc57e-02d9-4473-8a0c-475469606791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "2a0b5686-8f4b-4458-bfa9-6441a2526096",
        "cursor": {
          "ref": "4605b597-cfb1-4ff5-bf74-fb50ebc4dc98",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ea6789c2-84a1-47e7-af56-800b27c4d6c5"
        },
        "item": {
          "id": "2a0b5686-8f4b-4458-bfa9-6441a2526096",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f26cc57e-02d9-4473-8a0c-475469606791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "8f882f84-bb12-48b3-8ad0-542a8eaa13ee",
        "cursor": {
          "ref": "12d55199-42b6-45b1-b1e3-fdfd86fb4a26",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3caeeaa-95d2-4e68-9fd0-ce6e257d9643"
        },
        "item": {
          "id": "8f882f84-bb12-48b3-8ad0-542a8eaa13ee",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3d34590d-3e35-4e60-9f32-df30d9598679",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8f882f84-bb12-48b3-8ad0-542a8eaa13ee",
        "cursor": {
          "ref": "12d55199-42b6-45b1-b1e3-fdfd86fb4a26",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3caeeaa-95d2-4e68-9fd0-ce6e257d9643"
        },
        "item": {
          "id": "8f882f84-bb12-48b3-8ad0-542a8eaa13ee",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3d34590d-3e35-4e60-9f32-df30d9598679",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "993dfd54-c6a3-4c04-aec5-c139298691be",
        "cursor": {
          "ref": "83825084-d025-4ef9-9392-a16e35d1f985",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "86df5478-e797-481f-ad56-cfb61032fcab"
        },
        "item": {
          "id": "993dfd54-c6a3-4c04-aec5-c139298691be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ef781434-f021-47f1-b77d-6af73ffa5e20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "993dfd54-c6a3-4c04-aec5-c139298691be",
        "cursor": {
          "ref": "83825084-d025-4ef9-9392-a16e35d1f985",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "86df5478-e797-481f-ad56-cfb61032fcab"
        },
        "item": {
          "id": "993dfd54-c6a3-4c04-aec5-c139298691be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ef781434-f021-47f1-b77d-6af73ffa5e20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ca0a50f9-1724-4b38-8e61-e0f527defca1",
        "cursor": {
          "ref": "03c5edf1-3676-4e0a-8b40-15e072661823",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "af5060b8-c694-41d3-ba99-7b1eb278b11b"
        },
        "item": {
          "id": "ca0a50f9-1724-4b38-8e61-e0f527defca1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "20919d81-f650-4a0c-8eee-3e256c464805",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ca0a50f9-1724-4b38-8e61-e0f527defca1",
        "cursor": {
          "ref": "03c5edf1-3676-4e0a-8b40-15e072661823",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "af5060b8-c694-41d3-ba99-7b1eb278b11b"
        },
        "item": {
          "id": "ca0a50f9-1724-4b38-8e61-e0f527defca1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "20919d81-f650-4a0c-8eee-3e256c464805",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9feae1b6-b85b-4d89-b18b-45de7d32be14",
        "cursor": {
          "ref": "fa8402a5-6b37-4069-a664-5d874b30880f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "827f78d6-274e-4d8c-be11-3ab2464f30ae"
        },
        "item": {
          "id": "9feae1b6-b85b-4d89-b18b-45de7d32be14",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "818b95da-7125-4d39-8150-086f963d1162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9feae1b6-b85b-4d89-b18b-45de7d32be14",
        "cursor": {
          "ref": "fa8402a5-6b37-4069-a664-5d874b30880f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "827f78d6-274e-4d8c-be11-3ab2464f30ae"
        },
        "item": {
          "id": "9feae1b6-b85b-4d89-b18b-45de7d32be14",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "818b95da-7125-4d39-8150-086f963d1162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d5a80924-a477-4aae-a3ca-b6517db9a148",
        "cursor": {
          "ref": "a2a85ff8-c404-44dd-ad92-3a2c6ae5a45a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7943c853-6151-4de5-82f1-9f34ddd51efd"
        },
        "item": {
          "id": "d5a80924-a477-4aae-a3ca-b6517db9a148",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8baacb75-22e3-494c-b2bc-f9997a259a22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d5a80924-a477-4aae-a3ca-b6517db9a148",
        "cursor": {
          "ref": "a2a85ff8-c404-44dd-ad92-3a2c6ae5a45a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7943c853-6151-4de5-82f1-9f34ddd51efd"
        },
        "item": {
          "id": "d5a80924-a477-4aae-a3ca-b6517db9a148",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8baacb75-22e3-494c-b2bc-f9997a259a22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3fb0a644-a3f2-4e7e-8d2f-8137faeaabb6",
        "cursor": {
          "ref": "b0661811-0679-4600-9d71-aa9864a5e02a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e4137e84-f2f9-40da-9dbe-4a03574055b1"
        },
        "item": {
          "id": "3fb0a644-a3f2-4e7e-8d2f-8137faeaabb6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ebab6ff1-d3fa-4147-850e-5005c8c39e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3fb0a644-a3f2-4e7e-8d2f-8137faeaabb6",
        "cursor": {
          "ref": "b0661811-0679-4600-9d71-aa9864a5e02a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e4137e84-f2f9-40da-9dbe-4a03574055b1"
        },
        "item": {
          "id": "3fb0a644-a3f2-4e7e-8d2f-8137faeaabb6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ebab6ff1-d3fa-4147-850e-5005c8c39e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9f6f6b8d-76a3-4990-9218-e69d08f92bda",
        "cursor": {
          "ref": "13481bf3-b2f9-436f-8501-3744c3df85b7",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "524c628e-d708-401e-bd39-3d2afb43a36e"
        },
        "item": {
          "id": "9f6f6b8d-76a3-4990-9218-e69d08f92bda",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eaa3adb3-0528-45bb-9438-bb8fa783c537",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9f6f6b8d-76a3-4990-9218-e69d08f92bda",
        "cursor": {
          "ref": "13481bf3-b2f9-436f-8501-3744c3df85b7",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "524c628e-d708-401e-bd39-3d2afb43a36e"
        },
        "item": {
          "id": "9f6f6b8d-76a3-4990-9218-e69d08f92bda",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eaa3adb3-0528-45bb-9438-bb8fa783c537",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ea38dcb7-e06c-468f-bcb1-abe6246d2968",
        "cursor": {
          "ref": "16ec0e1c-e277-45bb-85ef-0686c307f706",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fe2d1aa5-7b51-47df-8530-749b779334a7"
        },
        "item": {
          "id": "ea38dcb7-e06c-468f-bcb1-abe6246d2968",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "256e7895-6b27-4288-97be-49a4bfa87bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ea38dcb7-e06c-468f-bcb1-abe6246d2968",
        "cursor": {
          "ref": "16ec0e1c-e277-45bb-85ef-0686c307f706",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fe2d1aa5-7b51-47df-8530-749b779334a7"
        },
        "item": {
          "id": "ea38dcb7-e06c-468f-bcb1-abe6246d2968",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "256e7895-6b27-4288-97be-49a4bfa87bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4c85ccbb-4b2f-4a14-8e62-6f87fd4419b1",
        "cursor": {
          "ref": "b541b75c-4eec-4256-8a2b-35dc50d10da1",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b42a5739-68e5-469f-9e03-075740bdb40c"
        },
        "item": {
          "id": "4c85ccbb-4b2f-4a14-8e62-6f87fd4419b1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1f3cc38a-a6bb-4632-8c51-4adc225b187e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4c85ccbb-4b2f-4a14-8e62-6f87fd4419b1",
        "cursor": {
          "ref": "b541b75c-4eec-4256-8a2b-35dc50d10da1",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b42a5739-68e5-469f-9e03-075740bdb40c"
        },
        "item": {
          "id": "4c85ccbb-4b2f-4a14-8e62-6f87fd4419b1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1f3cc38a-a6bb-4632-8c51-4adc225b187e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c5f6086b-f216-4e9f-901f-5852aeae2c2b",
        "cursor": {
          "ref": "db369fb0-b026-4681-b0c8-7cec1036f400",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "499a489a-f5d3-4028-85f8-ea193d3e2928"
        },
        "item": {
          "id": "c5f6086b-f216-4e9f-901f-5852aeae2c2b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b0d16e9f-805f-4526-b506-c357c174965d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c5f6086b-f216-4e9f-901f-5852aeae2c2b",
        "cursor": {
          "ref": "db369fb0-b026-4681-b0c8-7cec1036f400",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "499a489a-f5d3-4028-85f8-ea193d3e2928"
        },
        "item": {
          "id": "c5f6086b-f216-4e9f-901f-5852aeae2c2b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b0d16e9f-805f-4526-b506-c357c174965d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3ba16119-da79-4831-9f20-34ae39065402",
        "cursor": {
          "ref": "eabc6d13-7ba7-46ff-a86a-9b8b8c45d622",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d8efb1cc-f1c3-4caf-91d5-847dd93f49bc"
        },
        "item": {
          "id": "3ba16119-da79-4831-9f20-34ae39065402",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9cb18f46-06a5-4c93-82da-3390cb1dbb7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3ba16119-da79-4831-9f20-34ae39065402",
        "cursor": {
          "ref": "eabc6d13-7ba7-46ff-a86a-9b8b8c45d622",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d8efb1cc-f1c3-4caf-91d5-847dd93f49bc"
        },
        "item": {
          "id": "3ba16119-da79-4831-9f20-34ae39065402",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9cb18f46-06a5-4c93-82da-3390cb1dbb7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d41acb6b-d449-47ad-92a2-a0a88bbc4d61",
        "cursor": {
          "ref": "3324d107-6ae3-4e89-aacc-42d5a628aa61",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b93705e5-39b0-45f3-9e70-a76e48ff99d3"
        },
        "item": {
          "id": "d41acb6b-d449-47ad-92a2-a0a88bbc4d61",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8c67e0bd-5c26-4b36-a4ce-59d9f41ce336",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d41acb6b-d449-47ad-92a2-a0a88bbc4d61",
        "cursor": {
          "ref": "3324d107-6ae3-4e89-aacc-42d5a628aa61",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b93705e5-39b0-45f3-9e70-a76e48ff99d3"
        },
        "item": {
          "id": "d41acb6b-d449-47ad-92a2-a0a88bbc4d61",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8c67e0bd-5c26-4b36-a4ce-59d9f41ce336",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3e1e1372-2a3d-4fde-b5dd-0b3185cd2b89",
        "cursor": {
          "ref": "4d686a88-b0a4-4e4e-b080-1e7fb7071c38",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c5bd58e7-55e0-4ece-9d77-2786edc23418"
        },
        "item": {
          "id": "3e1e1372-2a3d-4fde-b5dd-0b3185cd2b89",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6da8272b-99b8-44c9-9647-a10df33edba3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3e1e1372-2a3d-4fde-b5dd-0b3185cd2b89",
        "cursor": {
          "ref": "4d686a88-b0a4-4e4e-b080-1e7fb7071c38",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c5bd58e7-55e0-4ece-9d77-2786edc23418"
        },
        "item": {
          "id": "3e1e1372-2a3d-4fde-b5dd-0b3185cd2b89",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6da8272b-99b8-44c9-9647-a10df33edba3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6a9322f9-d102-47a2-8a28-848c27b4b3be",
        "cursor": {
          "ref": "fb7b55ac-1b74-48e7-9469-9c222bf3bf2f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "15d7cd89-0fd2-4466-844d-d93d89f0b902"
        },
        "item": {
          "id": "6a9322f9-d102-47a2-8a28-848c27b4b3be",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd1bb6e7-c586-4c8d-9c63-87f04bc5646d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6a9322f9-d102-47a2-8a28-848c27b4b3be",
        "cursor": {
          "ref": "fb7b55ac-1b74-48e7-9469-9c222bf3bf2f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "15d7cd89-0fd2-4466-844d-d93d89f0b902"
        },
        "item": {
          "id": "6a9322f9-d102-47a2-8a28-848c27b4b3be",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd1bb6e7-c586-4c8d-9c63-87f04bc5646d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1e94ee52-0d91-4d25-a755-b93471cf974f",
        "cursor": {
          "ref": "c73c3d55-ffe3-49fb-b68d-29da422f3eef",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "807b6af3-9d09-4756-a430-318cf36f91af"
        },
        "item": {
          "id": "1e94ee52-0d91-4d25-a755-b93471cf974f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "baae7d1c-f918-456c-b185-a38451aba358",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1e94ee52-0d91-4d25-a755-b93471cf974f",
        "cursor": {
          "ref": "c73c3d55-ffe3-49fb-b68d-29da422f3eef",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "807b6af3-9d09-4756-a430-318cf36f91af"
        },
        "item": {
          "id": "1e94ee52-0d91-4d25-a755-b93471cf974f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "baae7d1c-f918-456c-b185-a38451aba358",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "531be6eb-e6b5-4853-8260-6b9785274a40",
        "cursor": {
          "ref": "ca248d04-d13d-45f1-82ca-606a13fd8c39",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "68f51b1b-a1cc-4930-be1a-656bf965c130"
        },
        "item": {
          "id": "531be6eb-e6b5-4853-8260-6b9785274a40",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ef6d5e8f-2052-49ad-9bc7-b92726e8001b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "531be6eb-e6b5-4853-8260-6b9785274a40",
        "cursor": {
          "ref": "ca248d04-d13d-45f1-82ca-606a13fd8c39",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "68f51b1b-a1cc-4930-be1a-656bf965c130"
        },
        "item": {
          "id": "531be6eb-e6b5-4853-8260-6b9785274a40",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ef6d5e8f-2052-49ad-9bc7-b92726e8001b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b4ba1acc-737e-4de5-bf34-cd5e23f98519",
        "cursor": {
          "ref": "fc21e9df-9ed5-44bd-8d4b-ed3912cc7545",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e7bee9db-537d-4c37-8060-e14adfa2c526"
        },
        "item": {
          "id": "b4ba1acc-737e-4de5-bf34-cd5e23f98519",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "60ac25b2-e853-4e41-82d8-f08790afd3a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b4ba1acc-737e-4de5-bf34-cd5e23f98519",
        "cursor": {
          "ref": "fc21e9df-9ed5-44bd-8d4b-ed3912cc7545",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e7bee9db-537d-4c37-8060-e14adfa2c526"
        },
        "item": {
          "id": "b4ba1acc-737e-4de5-bf34-cd5e23f98519",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "60ac25b2-e853-4e41-82d8-f08790afd3a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "8d6b1d4d-6ca1-4944-ba83-e37acf283f6c",
        "cursor": {
          "ref": "fa4532be-d609-4302-8aa7-52d0b1606e33",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "894a1b86-057f-4c3e-8eab-b1c06786c17b"
        },
        "item": {
          "id": "8d6b1d4d-6ca1-4944-ba83-e37acf283f6c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "160995d8-8569-48eb-8ef0-931eb1063a3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "8d6b1d4d-6ca1-4944-ba83-e37acf283f6c",
        "cursor": {
          "ref": "fa4532be-d609-4302-8aa7-52d0b1606e33",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "894a1b86-057f-4c3e-8eab-b1c06786c17b"
        },
        "item": {
          "id": "8d6b1d4d-6ca1-4944-ba83-e37acf283f6c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "160995d8-8569-48eb-8ef0-931eb1063a3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b0dd086d-7d44-463d-80d6-8cca4ea69203",
        "cursor": {
          "ref": "dc193cd4-bd97-4923-a055-2b2dc5b3610e",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e2727adc-0de8-419f-8c3e-ba3a75605f17"
        },
        "item": {
          "id": "b0dd086d-7d44-463d-80d6-8cca4ea69203",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b186f79-0110-45aa-8840-ecedebd6d965",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b0dd086d-7d44-463d-80d6-8cca4ea69203",
        "cursor": {
          "ref": "dc193cd4-bd97-4923-a055-2b2dc5b3610e",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e2727adc-0de8-419f-8c3e-ba3a75605f17"
        },
        "item": {
          "id": "b0dd086d-7d44-463d-80d6-8cca4ea69203",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b186f79-0110-45aa-8840-ecedebd6d965",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "572aebc7-ff7f-479c-8ec2-0209e537c56f",
        "cursor": {
          "ref": "fdc5e84b-aa62-4904-acb6-3c114a9eac30",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff1e703a-aff2-4090-910d-1e9cee542d18"
        },
        "item": {
          "id": "572aebc7-ff7f-479c-8ec2-0209e537c56f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "89ea8d7a-f53b-4c2a-9a6b-7beca8adc39b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "572aebc7-ff7f-479c-8ec2-0209e537c56f",
        "cursor": {
          "ref": "fdc5e84b-aa62-4904-acb6-3c114a9eac30",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff1e703a-aff2-4090-910d-1e9cee542d18"
        },
        "item": {
          "id": "572aebc7-ff7f-479c-8ec2-0209e537c56f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "89ea8d7a-f53b-4c2a-9a6b-7beca8adc39b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "95e55eca-933a-42a3-b4e2-0787b44fe6af",
        "cursor": {
          "ref": "ff65a8ca-24cd-46b8-936e-d00d659d47b9",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "22841a1b-09ab-4d45-a08e-f2cbc0b4dd65"
        },
        "item": {
          "id": "95e55eca-933a-42a3-b4e2-0787b44fe6af",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c61535fa-fb8c-47e2-a27c-fdcf9c6a067d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "95e55eca-933a-42a3-b4e2-0787b44fe6af",
        "cursor": {
          "ref": "ff65a8ca-24cd-46b8-936e-d00d659d47b9",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "22841a1b-09ab-4d45-a08e-f2cbc0b4dd65"
        },
        "item": {
          "id": "95e55eca-933a-42a3-b4e2-0787b44fe6af",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c61535fa-fb8c-47e2-a27c-fdcf9c6a067d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "8b69592e-1624-40ee-8aaf-aaf8369c0684",
        "cursor": {
          "ref": "fbf52cab-9eea-42af-bea5-9000f5aaf6e3",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f7f189c6-8666-4752-af1a-1b87ad6ab557"
        },
        "item": {
          "id": "8b69592e-1624-40ee-8aaf-aaf8369c0684",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d17f844f-8c2b-49ce-93dd-5c1218d4b532",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "8b69592e-1624-40ee-8aaf-aaf8369c0684",
        "cursor": {
          "ref": "fbf52cab-9eea-42af-bea5-9000f5aaf6e3",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f7f189c6-8666-4752-af1a-1b87ad6ab557"
        },
        "item": {
          "id": "8b69592e-1624-40ee-8aaf-aaf8369c0684",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d17f844f-8c2b-49ce-93dd-5c1218d4b532",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "69e929af-c6a5-4b22-80e3-77aa4f430b82",
        "cursor": {
          "ref": "b889a33c-49c1-4395-8c80-3af1e779e337",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7948e43b-9d6b-43a3-b100-2a9efee93819"
        },
        "item": {
          "id": "69e929af-c6a5-4b22-80e3-77aa4f430b82",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "036a7e6b-85a6-45ab-8ea7-b11ae8f7a9b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "69e929af-c6a5-4b22-80e3-77aa4f430b82",
        "cursor": {
          "ref": "b889a33c-49c1-4395-8c80-3af1e779e337",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7948e43b-9d6b-43a3-b100-2a9efee93819"
        },
        "item": {
          "id": "69e929af-c6a5-4b22-80e3-77aa4f430b82",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "036a7e6b-85a6-45ab-8ea7-b11ae8f7a9b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6b4b0ac0-7cfd-4054-a1da-6ad4368419a2",
        "cursor": {
          "ref": "c0079b6c-2284-415a-9d6a-0bdaef82e556",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "617fcfef-fb01-4ed6-ba19-418ede716f15"
        },
        "item": {
          "id": "6b4b0ac0-7cfd-4054-a1da-6ad4368419a2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d2287924-b6e4-486f-9fab-18826a161219",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6b4b0ac0-7cfd-4054-a1da-6ad4368419a2",
        "cursor": {
          "ref": "c0079b6c-2284-415a-9d6a-0bdaef82e556",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "617fcfef-fb01-4ed6-ba19-418ede716f15"
        },
        "item": {
          "id": "6b4b0ac0-7cfd-4054-a1da-6ad4368419a2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d2287924-b6e4-486f-9fab-18826a161219",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "303bdd08-bdec-4d97-ae9e-b92038cc50bc",
        "cursor": {
          "ref": "bd97283f-f6e2-4310-a50f-ecc8b58d4d66",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f90f4913-e045-46d4-9aef-83c27a6c7b91"
        },
        "item": {
          "id": "303bdd08-bdec-4d97-ae9e-b92038cc50bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "62304c17-053c-4b73-912c-7f8f13960d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "303bdd08-bdec-4d97-ae9e-b92038cc50bc",
        "cursor": {
          "ref": "bd97283f-f6e2-4310-a50f-ecc8b58d4d66",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f90f4913-e045-46d4-9aef-83c27a6c7b91"
        },
        "item": {
          "id": "303bdd08-bdec-4d97-ae9e-b92038cc50bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "62304c17-053c-4b73-912c-7f8f13960d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "baf2fbab-056f-4e48-a8d4-a93ac0cf4096",
        "cursor": {
          "ref": "d9744e21-76ff-4f9d-878b-82dcfc3e95fb",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "adefe272-219a-4797-b57f-47eca58a280c"
        },
        "item": {
          "id": "baf2fbab-056f-4e48-a8d4-a93ac0cf4096",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d0a5787e-4642-4f62-97ee-3cbe5a2d3c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "baf2fbab-056f-4e48-a8d4-a93ac0cf4096",
        "cursor": {
          "ref": "d9744e21-76ff-4f9d-878b-82dcfc3e95fb",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "adefe272-219a-4797-b57f-47eca58a280c"
        },
        "item": {
          "id": "baf2fbab-056f-4e48-a8d4-a93ac0cf4096",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d0a5787e-4642-4f62-97ee-3cbe5a2d3c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4940aa9e-3c0c-4d80-9227-d9b67362eef9",
        "cursor": {
          "ref": "17705b04-deed-4b38-bbc4-4ddf1a0eda40",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "54456c08-f66c-417f-b9b3-03f8f4e1ff9e"
        },
        "item": {
          "id": "4940aa9e-3c0c-4d80-9227-d9b67362eef9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5a9a4a8c-518a-4e15-bd2d-3c9e1ef50431",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "4940aa9e-3c0c-4d80-9227-d9b67362eef9",
        "cursor": {
          "ref": "17705b04-deed-4b38-bbc4-4ddf1a0eda40",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "54456c08-f66c-417f-b9b3-03f8f4e1ff9e"
        },
        "item": {
          "id": "4940aa9e-3c0c-4d80-9227-d9b67362eef9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5a9a4a8c-518a-4e15-bd2d-3c9e1ef50431",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "a86dbe7b-ba72-48e2-be33-df9d5af8b3bf",
        "cursor": {
          "ref": "8c475c14-f8a7-42d7-8c40-7ad5df53279a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0533f95c-f614-4fbc-bdda-7505dd830771"
        },
        "item": {
          "id": "a86dbe7b-ba72-48e2-be33-df9d5af8b3bf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4eb25ac9-a115-4064-bdc1-cdf1291d40d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a86dbe7b-ba72-48e2-be33-df9d5af8b3bf",
        "cursor": {
          "ref": "8c475c14-f8a7-42d7-8c40-7ad5df53279a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0533f95c-f614-4fbc-bdda-7505dd830771"
        },
        "item": {
          "id": "a86dbe7b-ba72-48e2-be33-df9d5af8b3bf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4eb25ac9-a115-4064-bdc1-cdf1291d40d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "cf6a071c-d930-49f2-a791-51ccc772cb15",
        "cursor": {
          "ref": "2b5e81eb-588d-4f53-ba94-9482fc034bf6",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9c1a5490-a2db-4867-ae23-c1d7457c93fb"
        },
        "item": {
          "id": "cf6a071c-d930-49f2-a791-51ccc772cb15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "81bc63c7-0ee5-467b-a43a-f6ec1724e095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "cf6a071c-d930-49f2-a791-51ccc772cb15",
        "cursor": {
          "ref": "2b5e81eb-588d-4f53-ba94-9482fc034bf6",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9c1a5490-a2db-4867-ae23-c1d7457c93fb"
        },
        "item": {
          "id": "cf6a071c-d930-49f2-a791-51ccc772cb15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "81bc63c7-0ee5-467b-a43a-f6ec1724e095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "373e85e7-72a2-4060-b62f-daf0a4e3e148",
        "cursor": {
          "ref": "08e49167-2e07-43bf-81b5-7ab1b679df95",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1372715a-7d8a-48e7-bbcb-aaa884776252"
        },
        "item": {
          "id": "373e85e7-72a2-4060-b62f-daf0a4e3e148",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dd94919c-bf47-4a71-af2a-38199a5f9002",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "373e85e7-72a2-4060-b62f-daf0a4e3e148",
        "cursor": {
          "ref": "08e49167-2e07-43bf-81b5-7ab1b679df95",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1372715a-7d8a-48e7-bbcb-aaa884776252"
        },
        "item": {
          "id": "373e85e7-72a2-4060-b62f-daf0a4e3e148",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dd94919c-bf47-4a71-af2a-38199a5f9002",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0d4ced83-be16-42c7-b817-e315ed1c5479",
        "cursor": {
          "ref": "6dbc76d9-9e46-478e-bb72-b7a1743125ff",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "860ef432-a841-4eea-9611-f3fb34a29977"
        },
        "item": {
          "id": "0d4ced83-be16-42c7-b817-e315ed1c5479",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "95725e91-1d71-4162-a4d5-049d51a91ee5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0d4ced83-be16-42c7-b817-e315ed1c5479",
        "cursor": {
          "ref": "6dbc76d9-9e46-478e-bb72-b7a1743125ff",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "860ef432-a841-4eea-9611-f3fb34a29977"
        },
        "item": {
          "id": "0d4ced83-be16-42c7-b817-e315ed1c5479",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "95725e91-1d71-4162-a4d5-049d51a91ee5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bf31a7d6-2ad9-4edb-b9b7-43a0b46bd6cd",
        "cursor": {
          "ref": "3d0ed49b-a97c-4988-925c-29bc60766bcc",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "60ef29a8-c359-4ad6-bbe4-3a862568f4b5"
        },
        "item": {
          "id": "bf31a7d6-2ad9-4edb-b9b7-43a0b46bd6cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fb8adb59-a7f3-4bbf-b728-2e46cda62527",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bf31a7d6-2ad9-4edb-b9b7-43a0b46bd6cd",
        "cursor": {
          "ref": "3d0ed49b-a97c-4988-925c-29bc60766bcc",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "60ef29a8-c359-4ad6-bbe4-3a862568f4b5"
        },
        "item": {
          "id": "bf31a7d6-2ad9-4edb-b9b7-43a0b46bd6cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fb8adb59-a7f3-4bbf-b728-2e46cda62527",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "44f77b2d-88a3-4335-8f3f-1af86ba8e2c1",
        "cursor": {
          "ref": "b2dfdf9e-53b9-4356-85dc-2b9f94bb2eb8",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c2f511db-a308-4831-86b5-a23a8ce3ffc5"
        },
        "item": {
          "id": "44f77b2d-88a3-4335-8f3f-1af86ba8e2c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0dedf81d-0bc9-48bc-aa7c-7613059c79a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "44f77b2d-88a3-4335-8f3f-1af86ba8e2c1",
        "cursor": {
          "ref": "b2dfdf9e-53b9-4356-85dc-2b9f94bb2eb8",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c2f511db-a308-4831-86b5-a23a8ce3ffc5"
        },
        "item": {
          "id": "44f77b2d-88a3-4335-8f3f-1af86ba8e2c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0dedf81d-0bc9-48bc-aa7c-7613059c79a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "35092628-c8b6-4cc9-8817-9369baff23c0",
        "cursor": {
          "ref": "037b3bc8-fcd9-474d-a626-18f14a98e2ee",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98466b24-bec3-476b-ab9e-c0b33a9fcec9"
        },
        "item": {
          "id": "35092628-c8b6-4cc9-8817-9369baff23c0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "680cc27c-7cdb-49d5-aac8-47182d18eb6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "35092628-c8b6-4cc9-8817-9369baff23c0",
        "cursor": {
          "ref": "037b3bc8-fcd9-474d-a626-18f14a98e2ee",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98466b24-bec3-476b-ab9e-c0b33a9fcec9"
        },
        "item": {
          "id": "35092628-c8b6-4cc9-8817-9369baff23c0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "680cc27c-7cdb-49d5-aac8-47182d18eb6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c9503b8d-0575-4303-9684-73a007c66010",
        "cursor": {
          "ref": "6059acf7-2be1-4e87-a835-8a5b34e14056",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9fef5c20-9c23-4642-a61d-89e1712ea871"
        },
        "item": {
          "id": "c9503b8d-0575-4303-9684-73a007c66010",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "57a96e4e-e145-45a3-9a37-e9cba532079b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c9503b8d-0575-4303-9684-73a007c66010",
        "cursor": {
          "ref": "6059acf7-2be1-4e87-a835-8a5b34e14056",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9fef5c20-9c23-4642-a61d-89e1712ea871"
        },
        "item": {
          "id": "c9503b8d-0575-4303-9684-73a007c66010",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "57a96e4e-e145-45a3-9a37-e9cba532079b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7110669c-4c5a-4684-aeed-9087c11f626b",
        "cursor": {
          "ref": "e93de9f0-a812-4cff-90c8-04a8dffb813c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "376d63f4-cbbb-4ad9-bb46-c7682bbd3ba9"
        },
        "item": {
          "id": "7110669c-4c5a-4684-aeed-9087c11f626b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d69d0e54-7221-42a5-b807-a12267cd1d7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "7110669c-4c5a-4684-aeed-9087c11f626b",
        "cursor": {
          "ref": "e93de9f0-a812-4cff-90c8-04a8dffb813c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "376d63f4-cbbb-4ad9-bb46-c7682bbd3ba9"
        },
        "item": {
          "id": "7110669c-4c5a-4684-aeed-9087c11f626b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d69d0e54-7221-42a5-b807-a12267cd1d7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5b9e237c-9a1e-4fc7-9129-a8653c7d64c1",
        "cursor": {
          "ref": "d60ec1b5-e759-4732-81a1-07e3d4a499c8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b787a7bb-9559-4009-97ad-74596bb9144b"
        },
        "item": {
          "id": "5b9e237c-9a1e-4fc7-9129-a8653c7d64c1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e6dff8a1-b72f-47a1-afbe-10ae88b80459",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5b9e237c-9a1e-4fc7-9129-a8653c7d64c1",
        "cursor": {
          "ref": "d60ec1b5-e759-4732-81a1-07e3d4a499c8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b787a7bb-9559-4009-97ad-74596bb9144b"
        },
        "item": {
          "id": "5b9e237c-9a1e-4fc7-9129-a8653c7d64c1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e6dff8a1-b72f-47a1-afbe-10ae88b80459",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f44b3054-ffa7-45bb-831f-c3ab8580cb45",
        "cursor": {
          "ref": "14a3c1c5-f9f6-4e51-b0ff-95417cee0b2d",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7e26581b-c54f-4fcd-bcde-c2f07fb386bc"
        },
        "item": {
          "id": "f44b3054-ffa7-45bb-831f-c3ab8580cb45",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "477ef549-70c1-46b5-81da-2f2abb66e108",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f44b3054-ffa7-45bb-831f-c3ab8580cb45",
        "cursor": {
          "ref": "14a3c1c5-f9f6-4e51-b0ff-95417cee0b2d",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7e26581b-c54f-4fcd-bcde-c2f07fb386bc"
        },
        "item": {
          "id": "f44b3054-ffa7-45bb-831f-c3ab8580cb45",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "477ef549-70c1-46b5-81da-2f2abb66e108",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "84314e68-a6fd-4051-81d9-18f5864869a0",
        "cursor": {
          "ref": "6a947f88-b845-4971-b701-4c04ff691313",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5c250551-81d0-4871-9e18-ce334261f06b"
        },
        "item": {
          "id": "84314e68-a6fd-4051-81d9-18f5864869a0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf197646-9195-419f-98d0-7f1f8b147e1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "84314e68-a6fd-4051-81d9-18f5864869a0",
        "cursor": {
          "ref": "6a947f88-b845-4971-b701-4c04ff691313",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5c250551-81d0-4871-9e18-ce334261f06b"
        },
        "item": {
          "id": "84314e68-a6fd-4051-81d9-18f5864869a0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf197646-9195-419f-98d0-7f1f8b147e1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "c4f10d5f-34a0-4062-bd52-2515a53d9843",
        "cursor": {
          "ref": "f145163c-c2d3-4647-80f3-4e76a4b6d2c9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "031918b5-a2a1-4419-8a70-07b96e4e90c9"
        },
        "item": {
          "id": "c4f10d5f-34a0-4062-bd52-2515a53d9843",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "11d94a25-9921-4f4f-9832-a0f081c97d97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "c4f10d5f-34a0-4062-bd52-2515a53d9843",
        "cursor": {
          "ref": "f145163c-c2d3-4647-80f3-4e76a4b6d2c9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "031918b5-a2a1-4419-8a70-07b96e4e90c9"
        },
        "item": {
          "id": "c4f10d5f-34a0-4062-bd52-2515a53d9843",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "11d94a25-9921-4f4f-9832-a0f081c97d97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d31b38de-9544-4206-9714-4c377f9d99f9",
        "cursor": {
          "ref": "41258a73-e3ee-4922-80f1-82b553b473f4",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "54ced540-d1d1-41d4-8866-edd9ded15d39"
        },
        "item": {
          "id": "d31b38de-9544-4206-9714-4c377f9d99f9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "49b690aa-2940-4baf-a657-740aaaeef6e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d31b38de-9544-4206-9714-4c377f9d99f9",
        "cursor": {
          "ref": "41258a73-e3ee-4922-80f1-82b553b473f4",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "54ced540-d1d1-41d4-8866-edd9ded15d39"
        },
        "item": {
          "id": "d31b38de-9544-4206-9714-4c377f9d99f9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "49b690aa-2940-4baf-a657-740aaaeef6e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f26e28f9-c5a3-426d-b760-d5553eedaf54",
        "cursor": {
          "ref": "914b6e44-d4ae-42b6-920f-9cb571514835",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "80a9b515-f352-4974-93f8-2e6f663bd39d"
        },
        "item": {
          "id": "f26e28f9-c5a3-426d-b760-d5553eedaf54",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "99114ce9-44de-4f80-8354-e282fa1e39a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "f26e28f9-c5a3-426d-b760-d5553eedaf54",
        "cursor": {
          "ref": "914b6e44-d4ae-42b6-920f-9cb571514835",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "80a9b515-f352-4974-93f8-2e6f663bd39d"
        },
        "item": {
          "id": "f26e28f9-c5a3-426d-b760-d5553eedaf54",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "99114ce9-44de-4f80-8354-e282fa1e39a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8c0be6d8-0256-4a49-9029-4323e1e5cd71",
        "cursor": {
          "ref": "91a516c4-1687-4516-b314-77b6230ad61d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dcad036d-9953-425f-bf6c-d1885ec4ba0e"
        },
        "item": {
          "id": "8c0be6d8-0256-4a49-9029-4323e1e5cd71",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "55ad75db-fd50-49a4-aaed-bb6759a30976",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "8c0be6d8-0256-4a49-9029-4323e1e5cd71",
        "cursor": {
          "ref": "91a516c4-1687-4516-b314-77b6230ad61d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dcad036d-9953-425f-bf6c-d1885ec4ba0e"
        },
        "item": {
          "id": "8c0be6d8-0256-4a49-9029-4323e1e5cd71",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "55ad75db-fd50-49a4-aaed-bb6759a30976",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "905ef174-70fd-49c7-8f3c-35fd611c0bf1",
        "cursor": {
          "ref": "6f9e2e24-989b-4242-9c9e-43e2a03631aa",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f53190a7-c51a-4ff8-b404-d4ad686de6a7"
        },
        "item": {
          "id": "905ef174-70fd-49c7-8f3c-35fd611c0bf1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ff2f6fa4-9ba5-457d-a58c-46e7a8beb19e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "905ef174-70fd-49c7-8f3c-35fd611c0bf1",
        "cursor": {
          "ref": "6f9e2e24-989b-4242-9c9e-43e2a03631aa",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f53190a7-c51a-4ff8-b404-d4ad686de6a7"
        },
        "item": {
          "id": "905ef174-70fd-49c7-8f3c-35fd611c0bf1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ff2f6fa4-9ba5-457d-a58c-46e7a8beb19e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "08d3fc40-4374-49e1-a161-5c72dd1ab05b",
        "cursor": {
          "ref": "5d0b1125-33ba-4e37-8bb7-0277005e68e4",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1870f76c-ef14-4748-904c-87873ff46c04"
        },
        "item": {
          "id": "08d3fc40-4374-49e1-a161-5c72dd1ab05b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "14c0a665-c996-4b62-a6b5-f0b8af32fc5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "08d3fc40-4374-49e1-a161-5c72dd1ab05b",
        "cursor": {
          "ref": "5d0b1125-33ba-4e37-8bb7-0277005e68e4",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1870f76c-ef14-4748-904c-87873ff46c04"
        },
        "item": {
          "id": "08d3fc40-4374-49e1-a161-5c72dd1ab05b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "14c0a665-c996-4b62-a6b5-f0b8af32fc5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "446848fa-d33f-4e15-b119-c1e19b3ad1f2",
        "cursor": {
          "ref": "8717dc96-9e28-4747-a78c-241550ac86cb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7225fb52-a887-4988-b620-3d3c0c059721"
        },
        "item": {
          "id": "446848fa-d33f-4e15-b119-c1e19b3ad1f2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "93d0bf21-2838-431d-a323-88329f3fe295",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "446848fa-d33f-4e15-b119-c1e19b3ad1f2",
        "cursor": {
          "ref": "8717dc96-9e28-4747-a78c-241550ac86cb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7225fb52-a887-4988-b620-3d3c0c059721"
        },
        "item": {
          "id": "446848fa-d33f-4e15-b119-c1e19b3ad1f2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "93d0bf21-2838-431d-a323-88329f3fe295",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "5684a8a5-f389-457e-a40c-361973bc4430",
        "cursor": {
          "ref": "ec074694-28db-440d-ab97-36299ce41d5c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "71950cd1-a360-44aa-9697-f8c92257af1e"
        },
        "item": {
          "id": "5684a8a5-f389-457e-a40c-361973bc4430",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2be24f5f-65d0-4597-9aa8-7a827854d40b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "5684a8a5-f389-457e-a40c-361973bc4430",
        "cursor": {
          "ref": "ec074694-28db-440d-ab97-36299ce41d5c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "71950cd1-a360-44aa-9697-f8c92257af1e"
        },
        "item": {
          "id": "5684a8a5-f389-457e-a40c-361973bc4430",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2be24f5f-65d0-4597-9aa8-7a827854d40b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "b0173d5c-d12d-49f5-95c0-9fcddd5d1009",
        "cursor": {
          "ref": "67fd476a-69f7-4964-a36a-42c9df21df47",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "585e4efe-96d4-4e2e-a649-928bc0a4a3b2"
        },
        "item": {
          "id": "b0173d5c-d12d-49f5-95c0-9fcddd5d1009",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "56854c07-2fb6-468a-b2e4-585689678711",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "b0173d5c-d12d-49f5-95c0-9fcddd5d1009",
        "cursor": {
          "ref": "67fd476a-69f7-4964-a36a-42c9df21df47",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "585e4efe-96d4-4e2e-a649-928bc0a4a3b2"
        },
        "item": {
          "id": "b0173d5c-d12d-49f5-95c0-9fcddd5d1009",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "56854c07-2fb6-468a-b2e4-585689678711",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "355a3814-1fa9-475e-89fe-33be54633fa3",
        "cursor": {
          "ref": "ae81542d-a180-4115-a605-3ece21477a0a",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be030a50-5665-4ba6-abdb-035762427293"
        },
        "item": {
          "id": "355a3814-1fa9-475e-89fe-33be54633fa3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "53bd86bb-48ad-479c-aab9-95a081ae04e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "355a3814-1fa9-475e-89fe-33be54633fa3",
        "cursor": {
          "ref": "ae81542d-a180-4115-a605-3ece21477a0a",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be030a50-5665-4ba6-abdb-035762427293"
        },
        "item": {
          "id": "355a3814-1fa9-475e-89fe-33be54633fa3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "53bd86bb-48ad-479c-aab9-95a081ae04e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "333d4121-148b-41d5-a091-0c44ba1a971f",
        "cursor": {
          "ref": "73c92c18-8626-4978-b010-19ba9f7dac04",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d7349a08-13d9-479a-864f-f6ef7a4e082c"
        },
        "item": {
          "id": "333d4121-148b-41d5-a091-0c44ba1a971f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "053276d0-aa49-4160-8879-82f8730c4d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "333d4121-148b-41d5-a091-0c44ba1a971f",
        "cursor": {
          "ref": "73c92c18-8626-4978-b010-19ba9f7dac04",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d7349a08-13d9-479a-864f-f6ef7a4e082c"
        },
        "item": {
          "id": "333d4121-148b-41d5-a091-0c44ba1a971f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "053276d0-aa49-4160-8879-82f8730c4d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4cfe9073-55fd-416d-8b00-2d25c67782d9",
        "cursor": {
          "ref": "d76dd615-fbf7-4400-9877-e0a4fbc8c9c3",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "97bab0c8-8b43-47cf-89d7-d86c458ca3e1"
        },
        "item": {
          "id": "4cfe9073-55fd-416d-8b00-2d25c67782d9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28fc2d19-5c03-4f06-b84c-112e97f4ada3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 289,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4cfe9073-55fd-416d-8b00-2d25c67782d9",
        "cursor": {
          "ref": "d76dd615-fbf7-4400-9877-e0a4fbc8c9c3",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "97bab0c8-8b43-47cf-89d7-d86c458ca3e1"
        },
        "item": {
          "id": "4cfe9073-55fd-416d-8b00-2d25c67782d9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28fc2d19-5c03-4f06-b84c-112e97f4ada3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 289,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "0013e0bb-40ed-4431-acf0-0732143e0528",
        "cursor": {
          "ref": "3deae728-c9f0-46e8-a95d-039277049598",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fdfd3473-da5d-46d2-b559-9cdd1fe3b477"
        },
        "item": {
          "id": "0013e0bb-40ed-4431-acf0-0732143e0528",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c2c492e-f8fd-4687-a709-a018780f4a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "0013e0bb-40ed-4431-acf0-0732143e0528",
        "cursor": {
          "ref": "3deae728-c9f0-46e8-a95d-039277049598",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fdfd3473-da5d-46d2-b559-9cdd1fe3b477"
        },
        "item": {
          "id": "0013e0bb-40ed-4431-acf0-0732143e0528",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c2c492e-f8fd-4687-a709-a018780f4a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a8338f7b-be86-455b-8dac-2a935786a2fd",
        "cursor": {
          "ref": "0619905e-3692-43f8-b0e2-703279c0f6a1",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "61e16dbf-2283-4f60-8d73-d8a85b59352b"
        },
        "item": {
          "id": "a8338f7b-be86-455b-8dac-2a935786a2fd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5c95a739-a67a-484f-8aa3-fb8eb21e3cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a8338f7b-be86-455b-8dac-2a935786a2fd",
        "cursor": {
          "ref": "0619905e-3692-43f8-b0e2-703279c0f6a1",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "61e16dbf-2283-4f60-8d73-d8a85b59352b"
        },
        "item": {
          "id": "a8338f7b-be86-455b-8dac-2a935786a2fd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5c95a739-a67a-484f-8aa3-fb8eb21e3cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "008b4fcd-65ce-4cdb-9020-327c2c56e8f6",
        "cursor": {
          "ref": "7841cc9d-fe6f-402c-a083-ecacb8d02587",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "38da6e2c-b86a-42ff-81fc-1ae2e9d2622a"
        },
        "item": {
          "id": "008b4fcd-65ce-4cdb-9020-327c2c56e8f6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d20e3db6-0a69-4ed7-8cd9-46f309d6228d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "008b4fcd-65ce-4cdb-9020-327c2c56e8f6",
        "cursor": {
          "ref": "7841cc9d-fe6f-402c-a083-ecacb8d02587",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "38da6e2c-b86a-42ff-81fc-1ae2e9d2622a"
        },
        "item": {
          "id": "008b4fcd-65ce-4cdb-9020-327c2c56e8f6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d20e3db6-0a69-4ed7-8cd9-46f309d6228d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "26b9d394-6963-4408-b968-63c70d07ee45",
        "cursor": {
          "ref": "ed0df070-445d-44d0-be13-c8e7c1c03a5d",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f984dcda-1f75-4638-8dfe-842bcae4447e"
        },
        "item": {
          "id": "26b9d394-6963-4408-b968-63c70d07ee45",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b1d3009b-6dcf-4a01-8f29-74f785f6d3a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "26b9d394-6963-4408-b968-63c70d07ee45",
        "cursor": {
          "ref": "ed0df070-445d-44d0-be13-c8e7c1c03a5d",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f984dcda-1f75-4638-8dfe-842bcae4447e"
        },
        "item": {
          "id": "26b9d394-6963-4408-b968-63c70d07ee45",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b1d3009b-6dcf-4a01-8f29-74f785f6d3a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "24b6ece2-c229-4735-a1f3-ebda45f9fc40",
        "cursor": {
          "ref": "40af4ac1-5d08-445f-8332-e5c9de596f2e",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "34c5d3cf-542d-4cea-b1d3-21abf735957c"
        },
        "item": {
          "id": "24b6ece2-c229-4735-a1f3-ebda45f9fc40",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ad59e8c-89b0-4521-97aa-223205bdb263",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2072,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "24b6ece2-c229-4735-a1f3-ebda45f9fc40",
        "cursor": {
          "ref": "40af4ac1-5d08-445f-8332-e5c9de596f2e",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "34c5d3cf-542d-4cea-b1d3-21abf735957c"
        },
        "item": {
          "id": "24b6ece2-c229-4735-a1f3-ebda45f9fc40",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ad59e8c-89b0-4521-97aa-223205bdb263",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2072,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b61fdd82-0191-4128-a4c0-7cced6a04155",
        "cursor": {
          "ref": "4531543a-321e-4631-a919-9f323aab6f29",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1eba3911-61a1-4112-946f-dd027a53eb79"
        },
        "item": {
          "id": "b61fdd82-0191-4128-a4c0-7cced6a04155",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "aa84fa00-9c54-4c91-9bb5-395cf73576d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b61fdd82-0191-4128-a4c0-7cced6a04155",
        "cursor": {
          "ref": "4531543a-321e-4631-a919-9f323aab6f29",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1eba3911-61a1-4112-946f-dd027a53eb79"
        },
        "item": {
          "id": "b61fdd82-0191-4128-a4c0-7cced6a04155",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "aa84fa00-9c54-4c91-9bb5-395cf73576d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b04156b6-a247-41f4-927b-158db77822d7",
        "cursor": {
          "ref": "6228b3cb-6a60-4a0e-a914-875ca0343c01",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eaf93886-3b9f-411f-86c0-f2eb0971ba5a"
        },
        "item": {
          "id": "b04156b6-a247-41f4-927b-158db77822d7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2085ee35-e073-4d0a-8931-03b498d7abc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "b04156b6-a247-41f4-927b-158db77822d7",
        "cursor": {
          "ref": "6228b3cb-6a60-4a0e-a914-875ca0343c01",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eaf93886-3b9f-411f-86c0-f2eb0971ba5a"
        },
        "item": {
          "id": "b04156b6-a247-41f4-927b-158db77822d7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2085ee35-e073-4d0a-8931-03b498d7abc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "9248692b-04d1-43b9-8628-00dc413d8fc9",
        "cursor": {
          "ref": "1b823af3-e89b-4c4d-a366-6c7ea5e55ca6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d320c2a-a778-42a3-a339-cfc42b883309"
        },
        "item": {
          "id": "9248692b-04d1-43b9-8628-00dc413d8fc9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "33557006-17c0-4018-92fc-b2090f57f186",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "9248692b-04d1-43b9-8628-00dc413d8fc9",
        "cursor": {
          "ref": "1b823af3-e89b-4c4d-a366-6c7ea5e55ca6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d320c2a-a778-42a3-a339-cfc42b883309"
        },
        "item": {
          "id": "9248692b-04d1-43b9-8628-00dc413d8fc9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "33557006-17c0-4018-92fc-b2090f57f186",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "34b2ec58-1844-4dd2-9acb-faaa933a53b3",
        "cursor": {
          "ref": "0832924c-02b2-46e5-b058-2ce23f8dcca0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a03a4e26-5e85-4d29-b061-df434c98a756"
        },
        "item": {
          "id": "34b2ec58-1844-4dd2-9acb-faaa933a53b3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e596748-e95a-42e1-9318-146a29d97cb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "34b2ec58-1844-4dd2-9acb-faaa933a53b3",
        "cursor": {
          "ref": "0832924c-02b2-46e5-b058-2ce23f8dcca0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a03a4e26-5e85-4d29-b061-df434c98a756"
        },
        "item": {
          "id": "34b2ec58-1844-4dd2-9acb-faaa933a53b3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e596748-e95a-42e1-9318-146a29d97cb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "ac3eabbf-c428-40e1-a349-8e121cab2447",
        "cursor": {
          "ref": "d7e74a24-0868-4861-aebf-112881a2c008",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e15bf8e7-f2bb-480e-b149-c691d9366eb4"
        },
        "item": {
          "id": "ac3eabbf-c428-40e1-a349-8e121cab2447",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cf05443d-5f5c-4c22-b5b6-2b425288ff54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "ac3eabbf-c428-40e1-a349-8e121cab2447",
        "cursor": {
          "ref": "d7e74a24-0868-4861-aebf-112881a2c008",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e15bf8e7-f2bb-480e-b149-c691d9366eb4"
        },
        "item": {
          "id": "ac3eabbf-c428-40e1-a349-8e121cab2447",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cf05443d-5f5c-4c22-b5b6-2b425288ff54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "566b2a42-1cff-480f-acb3-504ba5b5f118",
        "cursor": {
          "ref": "8a431c1c-762b-4cc9-904e-109542410555",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0dec2374-2d44-4514-a055-0d3ad55acf01"
        },
        "item": {
          "id": "566b2a42-1cff-480f-acb3-504ba5b5f118",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e7d0d3a3-26f4-4a04-b079-898e67b375c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "566b2a42-1cff-480f-acb3-504ba5b5f118",
        "cursor": {
          "ref": "8a431c1c-762b-4cc9-904e-109542410555",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0dec2374-2d44-4514-a055-0d3ad55acf01"
        },
        "item": {
          "id": "566b2a42-1cff-480f-acb3-504ba5b5f118",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e7d0d3a3-26f4-4a04-b079-898e67b375c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "6e5579dc-876b-49c6-bb39-01aeb2062785",
        "cursor": {
          "ref": "b69eccd2-bb9f-4cc6-9e09-35432f066a18",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5c0c7ed3-c687-4887-a6cd-e3f819fc1c99"
        },
        "item": {
          "id": "6e5579dc-876b-49c6-bb39-01aeb2062785",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "62810ba2-4464-4339-816a-aa10847d77a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "6e5579dc-876b-49c6-bb39-01aeb2062785",
        "cursor": {
          "ref": "b69eccd2-bb9f-4cc6-9e09-35432f066a18",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5c0c7ed3-c687-4887-a6cd-e3f819fc1c99"
        },
        "item": {
          "id": "6e5579dc-876b-49c6-bb39-01aeb2062785",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "62810ba2-4464-4339-816a-aa10847d77a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "42cda4f0-ade5-483e-81e7-a28a0e35a282",
        "cursor": {
          "ref": "bd34b31f-2859-442b-b24a-11f0b5ddf3c9",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9dc8f9b0-717f-472b-b8a0-2055c4cba562"
        },
        "item": {
          "id": "42cda4f0-ade5-483e-81e7-a28a0e35a282",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cfb6713b-6e2f-4490-af18-fb85f5de556e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "42cda4f0-ade5-483e-81e7-a28a0e35a282",
        "cursor": {
          "ref": "bd34b31f-2859-442b-b24a-11f0b5ddf3c9",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9dc8f9b0-717f-472b-b8a0-2055c4cba562"
        },
        "item": {
          "id": "42cda4f0-ade5-483e-81e7-a28a0e35a282",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cfb6713b-6e2f-4490-af18-fb85f5de556e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "5123bcf3-6ef9-4977-9edd-18d34569857e",
        "cursor": {
          "ref": "74a16de5-4083-440b-b6f1-44eca084106e",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "766e6517-7b32-496e-b620-a05c1b9d5d6a"
        },
        "item": {
          "id": "5123bcf3-6ef9-4977-9edd-18d34569857e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "29e1466a-7058-469a-bea8-45134af9074b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "5123bcf3-6ef9-4977-9edd-18d34569857e",
        "cursor": {
          "ref": "74a16de5-4083-440b-b6f1-44eca084106e",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "766e6517-7b32-496e-b620-a05c1b9d5d6a"
        },
        "item": {
          "id": "5123bcf3-6ef9-4977-9edd-18d34569857e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "29e1466a-7058-469a-bea8-45134af9074b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "6b3bf157-1e6b-4c45-aff2-a52d02a51ba0",
        "cursor": {
          "ref": "c6124f0f-682e-49fb-bbe7-b2ab5e08384e",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "25bb9859-a732-401e-96ff-788d60286c67"
        },
        "item": {
          "id": "6b3bf157-1e6b-4c45-aff2-a52d02a51ba0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a0e794b5-43ed-4d84-bcc8-ef01285bc15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "6b3bf157-1e6b-4c45-aff2-a52d02a51ba0",
        "cursor": {
          "ref": "c6124f0f-682e-49fb-bbe7-b2ab5e08384e",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "25bb9859-a732-401e-96ff-788d60286c67"
        },
        "item": {
          "id": "6b3bf157-1e6b-4c45-aff2-a52d02a51ba0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a0e794b5-43ed-4d84-bcc8-ef01285bc15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "92b2e090-9379-4237-b9e1-9069dd74b690",
        "cursor": {
          "ref": "860170bb-2e1a-4698-85cf-381e5c2e62ab",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "739669e3-2d87-44f9-8ad0-2f0deb60b2e7"
        },
        "item": {
          "id": "92b2e090-9379-4237-b9e1-9069dd74b690",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39d582b2-1e46-4c8e-805b-d0dc85199edc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "92b2e090-9379-4237-b9e1-9069dd74b690",
        "cursor": {
          "ref": "860170bb-2e1a-4698-85cf-381e5c2e62ab",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "739669e3-2d87-44f9-8ad0-2f0deb60b2e7"
        },
        "item": {
          "id": "92b2e090-9379-4237-b9e1-9069dd74b690",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39d582b2-1e46-4c8e-805b-d0dc85199edc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e1896723-c5bd-4ed4-9cc7-866271ba447b",
        "cursor": {
          "ref": "9e359f93-dfc8-44fb-8ee2-2a75c74f5f52",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5e7b19d2-8207-4dfe-8071-ab66ec7b6a60"
        },
        "item": {
          "id": "e1896723-c5bd-4ed4-9cc7-866271ba447b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dcde2785-2a4d-4e00-956a-037901b4933e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "e1896723-c5bd-4ed4-9cc7-866271ba447b",
        "cursor": {
          "ref": "9e359f93-dfc8-44fb-8ee2-2a75c74f5f52",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5e7b19d2-8207-4dfe-8071-ab66ec7b6a60"
        },
        "item": {
          "id": "e1896723-c5bd-4ed4-9cc7-866271ba447b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dcde2785-2a4d-4e00-956a-037901b4933e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "c7a3b9dd-c19c-4770-8ff9-62c7b084e32a",
        "cursor": {
          "ref": "e7263d6a-0eb5-4f76-9d0c-8050f68915b1",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "30933fe9-20d6-4f12-9121-33109b432e1e"
        },
        "item": {
          "id": "c7a3b9dd-c19c-4770-8ff9-62c7b084e32a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2e1d1004-b1ae-4df4-96f1-7e712ff789e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c7a3b9dd-c19c-4770-8ff9-62c7b084e32a",
        "cursor": {
          "ref": "e7263d6a-0eb5-4f76-9d0c-8050f68915b1",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "30933fe9-20d6-4f12-9121-33109b432e1e"
        },
        "item": {
          "id": "c7a3b9dd-c19c-4770-8ff9-62c7b084e32a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2e1d1004-b1ae-4df4-96f1-7e712ff789e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d4eaab70-356b-4126-8885-84585bd7c815",
        "cursor": {
          "ref": "77c309e2-a3be-4b89-9fff-43ca44f42e09",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1c0d6bec-34b0-4dbc-9102-740618ee910f"
        },
        "item": {
          "id": "d4eaab70-356b-4126-8885-84585bd7c815",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2e3ae586-0617-43a7-bc79-ec620d502845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "d4eaab70-356b-4126-8885-84585bd7c815",
        "cursor": {
          "ref": "77c309e2-a3be-4b89-9fff-43ca44f42e09",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1c0d6bec-34b0-4dbc-9102-740618ee910f"
        },
        "item": {
          "id": "d4eaab70-356b-4126-8885-84585bd7c815",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2e3ae586-0617-43a7-bc79-ec620d502845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "21ff2170-d257-44b4-802d-56fcc7b9180d",
        "cursor": {
          "ref": "5cb631cb-b72a-425e-ad62-7a53263b2afb",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86f0329f-6f30-4014-bc74-d0b9b49d6a24"
        },
        "item": {
          "id": "21ff2170-d257-44b4-802d-56fcc7b9180d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db1707b9-2e64-41f2-a58d-8ba14207eb46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "21ff2170-d257-44b4-802d-56fcc7b9180d",
        "cursor": {
          "ref": "5cb631cb-b72a-425e-ad62-7a53263b2afb",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86f0329f-6f30-4014-bc74-d0b9b49d6a24"
        },
        "item": {
          "id": "21ff2170-d257-44b4-802d-56fcc7b9180d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db1707b9-2e64-41f2-a58d-8ba14207eb46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "a42b555f-7f62-439f-bdcb-8da69a2646c4",
        "cursor": {
          "ref": "fadf7927-1d6d-49a3-b772-985e29a924b0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3d821832-9761-4f39-af8a-68367ef47d71"
        },
        "item": {
          "id": "a42b555f-7f62-439f-bdcb-8da69a2646c4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "40cfe1c6-1d82-40bc-b62a-e57b67e936d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "a42b555f-7f62-439f-bdcb-8da69a2646c4",
        "cursor": {
          "ref": "fadf7927-1d6d-49a3-b772-985e29a924b0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3d821832-9761-4f39-af8a-68367ef47d71"
        },
        "item": {
          "id": "a42b555f-7f62-439f-bdcb-8da69a2646c4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "40cfe1c6-1d82-40bc-b62a-e57b67e936d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "05ccf336-591e-44d0-a39d-8191169f0e30",
        "cursor": {
          "ref": "bc5881ff-9888-4caa-bb3e-ede2e530cee2",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "53e54c63-ba64-4758-a6a9-20dd0052e872"
        },
        "item": {
          "id": "05ccf336-591e-44d0-a39d-8191169f0e30",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7dcb102a-cf88-44be-82ec-4c1481f20ad1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "05ccf336-591e-44d0-a39d-8191169f0e30",
        "cursor": {
          "ref": "bc5881ff-9888-4caa-bb3e-ede2e530cee2",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "53e54c63-ba64-4758-a6a9-20dd0052e872"
        },
        "item": {
          "id": "05ccf336-591e-44d0-a39d-8191169f0e30",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7dcb102a-cf88-44be-82ec-4c1481f20ad1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c6473a1a-3fe1-4b37-a7c1-45383eed8767",
        "cursor": {
          "ref": "472e0ab8-97e3-4d86-86e2-d28bb2460e78",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ebb7fbe5-a403-44b0-9b69-c2235b802091"
        },
        "item": {
          "id": "c6473a1a-3fe1-4b37-a7c1-45383eed8767",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5b6e4125-4eae-4ea5-96ae-061423f80c55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c6473a1a-3fe1-4b37-a7c1-45383eed8767",
        "cursor": {
          "ref": "472e0ab8-97e3-4d86-86e2-d28bb2460e78",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ebb7fbe5-a403-44b0-9b69-c2235b802091"
        },
        "item": {
          "id": "c6473a1a-3fe1-4b37-a7c1-45383eed8767",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5b6e4125-4eae-4ea5-96ae-061423f80c55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "38b0dc8e-97ab-4ac0-bdc8-7df0e2542b2e",
        "cursor": {
          "ref": "cd4ea0f4-a9d3-4bfe-b580-4ff68e34f971",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "41617bd5-77bd-4d19-be50-fc93bd843451"
        },
        "item": {
          "id": "38b0dc8e-97ab-4ac0-bdc8-7df0e2542b2e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1501ac22-8b79-4fb2-a355-52af7579d17b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "38b0dc8e-97ab-4ac0-bdc8-7df0e2542b2e",
        "cursor": {
          "ref": "cd4ea0f4-a9d3-4bfe-b580-4ff68e34f971",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "41617bd5-77bd-4d19-be50-fc93bd843451"
        },
        "item": {
          "id": "38b0dc8e-97ab-4ac0-bdc8-7df0e2542b2e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1501ac22-8b79-4fb2-a355-52af7579d17b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e5712714-9008-49b1-9d29-6f02e34e7664",
        "cursor": {
          "ref": "d9f01965-70e6-4eab-98b0-ad4d72798c59",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ddb78960-45f0-46bc-8767-ddad07f8227d"
        },
        "item": {
          "id": "e5712714-9008-49b1-9d29-6f02e34e7664",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b5801e6-2004-4dc0-ae26-a07829860d0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e5712714-9008-49b1-9d29-6f02e34e7664",
        "cursor": {
          "ref": "d9f01965-70e6-4eab-98b0-ad4d72798c59",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ddb78960-45f0-46bc-8767-ddad07f8227d"
        },
        "item": {
          "id": "e5712714-9008-49b1-9d29-6f02e34e7664",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b5801e6-2004-4dc0-ae26-a07829860d0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d8a758cc-1ac5-4446-94fc-c37853f4667d",
        "cursor": {
          "ref": "49e86c77-880d-4da5-854d-b2c55524f586",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "195665a3-80b0-4d23-8eb6-78f183e07955"
        },
        "item": {
          "id": "d8a758cc-1ac5-4446-94fc-c37853f4667d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8e99a424-512b-49f5-967d-09b0cc45e5ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d8a758cc-1ac5-4446-94fc-c37853f4667d",
        "cursor": {
          "ref": "49e86c77-880d-4da5-854d-b2c55524f586",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "195665a3-80b0-4d23-8eb6-78f183e07955"
        },
        "item": {
          "id": "d8a758cc-1ac5-4446-94fc-c37853f4667d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8e99a424-512b-49f5-967d-09b0cc45e5ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d5282ce8-7491-47f5-9dac-0d2fb50f20aa",
        "cursor": {
          "ref": "64ac962c-7df4-4671-b871-ca1b7239b11d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3790e21a-51a3-44df-970e-7f46acac0215"
        },
        "item": {
          "id": "d5282ce8-7491-47f5-9dac-0d2fb50f20aa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d6006ef-3b52-42d3-99cd-fc83cdbdb650",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d5282ce8-7491-47f5-9dac-0d2fb50f20aa",
        "cursor": {
          "ref": "64ac962c-7df4-4671-b871-ca1b7239b11d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3790e21a-51a3-44df-970e-7f46acac0215"
        },
        "item": {
          "id": "d5282ce8-7491-47f5-9dac-0d2fb50f20aa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d6006ef-3b52-42d3-99cd-fc83cdbdb650",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "423ef545-04e6-4609-bb5e-9e6092339007",
        "cursor": {
          "ref": "350893f0-60ef-4bdd-a9f2-6ba8799f4e81",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "627c4a0a-d58f-4c27-a7c3-b04b850b311f"
        },
        "item": {
          "id": "423ef545-04e6-4609-bb5e-9e6092339007",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99518da6-e6ba-4547-b1fa-810b2155806b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "423ef545-04e6-4609-bb5e-9e6092339007",
        "cursor": {
          "ref": "350893f0-60ef-4bdd-a9f2-6ba8799f4e81",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "627c4a0a-d58f-4c27-a7c3-b04b850b311f"
        },
        "item": {
          "id": "423ef545-04e6-4609-bb5e-9e6092339007",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99518da6-e6ba-4547-b1fa-810b2155806b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "90bec6f1-3f64-4414-b448-2dc45953622d",
        "cursor": {
          "ref": "fc0f956d-d5a8-4e9a-81bc-c39e55373766",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5b75a7f7-1d97-466b-9c89-d155f5072626"
        },
        "item": {
          "id": "90bec6f1-3f64-4414-b448-2dc45953622d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93a2dc93-22b2-43eb-89d6-3588be8788f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "90bec6f1-3f64-4414-b448-2dc45953622d",
        "cursor": {
          "ref": "fc0f956d-d5a8-4e9a-81bc-c39e55373766",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5b75a7f7-1d97-466b-9c89-d155f5072626"
        },
        "item": {
          "id": "90bec6f1-3f64-4414-b448-2dc45953622d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93a2dc93-22b2-43eb-89d6-3588be8788f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "edc36a50-19e2-4862-9399-19bc68932326",
        "cursor": {
          "ref": "2ae62684-90c0-4ae6-9a7c-e2822cf0c20a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4d7c0f6c-24bd-40d0-8d35-43818c108496"
        },
        "item": {
          "id": "edc36a50-19e2-4862-9399-19bc68932326",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c52fc99-4900-485d-a199-f5b8a6bd4e30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "edc36a50-19e2-4862-9399-19bc68932326",
        "cursor": {
          "ref": "2ae62684-90c0-4ae6-9a7c-e2822cf0c20a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4d7c0f6c-24bd-40d0-8d35-43818c108496"
        },
        "item": {
          "id": "edc36a50-19e2-4862-9399-19bc68932326",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c52fc99-4900-485d-a199-f5b8a6bd4e30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d2fe0bac-e1e4-4d77-86ef-85c54a4afa0e",
        "cursor": {
          "ref": "d16aa8d0-2455-4583-b358-dd26fb2f63c5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0681e714-7444-41e7-a353-6fef837f59ab"
        },
        "item": {
          "id": "d2fe0bac-e1e4-4d77-86ef-85c54a4afa0e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6abdcab6-3c91-46e5-89b2-b32a7957af3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d2fe0bac-e1e4-4d77-86ef-85c54a4afa0e",
        "cursor": {
          "ref": "d16aa8d0-2455-4583-b358-dd26fb2f63c5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0681e714-7444-41e7-a353-6fef837f59ab"
        },
        "item": {
          "id": "d2fe0bac-e1e4-4d77-86ef-85c54a4afa0e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6abdcab6-3c91-46e5-89b2-b32a7957af3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "661cfe69-f8a6-4737-a414-cb6f9b189d0a",
        "cursor": {
          "ref": "d0121364-1e21-4b29-9882-605c97bbed3e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "19bd3dbb-dbcc-4ce1-8aa2-6f651c207cbe"
        },
        "item": {
          "id": "661cfe69-f8a6-4737-a414-cb6f9b189d0a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a43a50a1-aafd-4665-bba6-3786f2c07241",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 39336,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "661cfe69-f8a6-4737-a414-cb6f9b189d0a",
        "cursor": {
          "ref": "d0121364-1e21-4b29-9882-605c97bbed3e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "19bd3dbb-dbcc-4ce1-8aa2-6f651c207cbe"
        },
        "item": {
          "id": "661cfe69-f8a6-4737-a414-cb6f9b189d0a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a43a50a1-aafd-4665-bba6-3786f2c07241",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 39336,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6bcf8335-4fd3-43a3-9a46-f07ba8eb06b2",
        "cursor": {
          "ref": "1ac7d067-5817-4f39-a3bb-46490beaf53a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b66ff439-beba-4c3e-bec6-882f1f068b98"
        },
        "item": {
          "id": "6bcf8335-4fd3-43a3-9a46-f07ba8eb06b2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f94fc87e-35b7-440e-9e8c-4ecbc1c84533",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6bcf8335-4fd3-43a3-9a46-f07ba8eb06b2",
        "cursor": {
          "ref": "1ac7d067-5817-4f39-a3bb-46490beaf53a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b66ff439-beba-4c3e-bec6-882f1f068b98"
        },
        "item": {
          "id": "6bcf8335-4fd3-43a3-9a46-f07ba8eb06b2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f94fc87e-35b7-440e-9e8c-4ecbc1c84533",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "687d13d1-8eee-4eac-9805-847ec8c32384",
        "cursor": {
          "ref": "4770fa06-03e5-492b-8148-d1e0bde69fe2",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7e9abef0-d6e6-4740-81aa-683b39c2846c"
        },
        "item": {
          "id": "687d13d1-8eee-4eac-9805-847ec8c32384",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0eb6441b-33d2-41c9-aa9f-43e4e455c159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "687d13d1-8eee-4eac-9805-847ec8c32384",
        "cursor": {
          "ref": "4770fa06-03e5-492b-8148-d1e0bde69fe2",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7e9abef0-d6e6-4740-81aa-683b39c2846c"
        },
        "item": {
          "id": "687d13d1-8eee-4eac-9805-847ec8c32384",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0eb6441b-33d2-41c9-aa9f-43e4e455c159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "36a97e86-6bd9-4cef-bf4b-92fa50583326",
        "cursor": {
          "ref": "c247df74-556d-465f-802c-56c6646f6b11",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b7ba0842-e6c1-4694-a59c-7b41894ca452"
        },
        "item": {
          "id": "36a97e86-6bd9-4cef-bf4b-92fa50583326",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a0c7fb54-1536-432a-b15f-ad8ad486e70e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "36a97e86-6bd9-4cef-bf4b-92fa50583326",
        "cursor": {
          "ref": "c247df74-556d-465f-802c-56c6646f6b11",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b7ba0842-e6c1-4694-a59c-7b41894ca452"
        },
        "item": {
          "id": "36a97e86-6bd9-4cef-bf4b-92fa50583326",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a0c7fb54-1536-432a-b15f-ad8ad486e70e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b31cd0db-af4b-43b0-b509-ca89de2f4043",
        "cursor": {
          "ref": "85be4d2b-b69e-4202-a7f7-44ea734582ff",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d541a5d0-39b9-4319-aef6-c78e592578d7"
        },
        "item": {
          "id": "b31cd0db-af4b-43b0-b509-ca89de2f4043",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "35161788-81df-48f3-aa66-dc5e6abadfd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b31cd0db-af4b-43b0-b509-ca89de2f4043",
        "cursor": {
          "ref": "85be4d2b-b69e-4202-a7f7-44ea734582ff",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d541a5d0-39b9-4319-aef6-c78e592578d7"
        },
        "item": {
          "id": "b31cd0db-af4b-43b0-b509-ca89de2f4043",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "35161788-81df-48f3-aa66-dc5e6abadfd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7fe40dcd-f3e0-4ded-94e8-6986a501767b",
        "cursor": {
          "ref": "c88e2d5d-ef49-4c83-be96-35ba00f5a601",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3b970a0-0f5e-4b5a-857a-e96341901f2c"
        },
        "item": {
          "id": "7fe40dcd-f3e0-4ded-94e8-6986a501767b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1301e468-7bc2-496c-803c-5aa50f598166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "7fe40dcd-f3e0-4ded-94e8-6986a501767b",
        "cursor": {
          "ref": "c88e2d5d-ef49-4c83-be96-35ba00f5a601",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3b970a0-0f5e-4b5a-857a-e96341901f2c"
        },
        "item": {
          "id": "7fe40dcd-f3e0-4ded-94e8-6986a501767b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1301e468-7bc2-496c-803c-5aa50f598166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6a2c8a35-1b1d-435a-ba7c-5fe04a7f0dbd",
        "cursor": {
          "ref": "a5bb0f9f-66fb-4cb2-8f72-5f3601f6d6d6",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "82b5b850-dcc5-40bc-ae7a-debd02a9a19b"
        },
        "item": {
          "id": "6a2c8a35-1b1d-435a-ba7c-5fe04a7f0dbd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3d7696b5-bd2c-4f68-bf18-f9145c9f4e0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "6a2c8a35-1b1d-435a-ba7c-5fe04a7f0dbd",
        "cursor": {
          "ref": "a5bb0f9f-66fb-4cb2-8f72-5f3601f6d6d6",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "82b5b850-dcc5-40bc-ae7a-debd02a9a19b"
        },
        "item": {
          "id": "6a2c8a35-1b1d-435a-ba7c-5fe04a7f0dbd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3d7696b5-bd2c-4f68-bf18-f9145c9f4e0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "45b9346c-21f0-4edd-86ce-fd66e024cb38",
        "cursor": {
          "ref": "a3d907e6-3f71-4ce3-939c-0a475a795d47",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "43927346-fb66-45b1-8c7b-9e2d0d280b90"
        },
        "item": {
          "id": "45b9346c-21f0-4edd-86ce-fd66e024cb38",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3325470-62e7-44ba-b424-db2ebf554377",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "45b9346c-21f0-4edd-86ce-fd66e024cb38",
        "cursor": {
          "ref": "a3d907e6-3f71-4ce3-939c-0a475a795d47",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "43927346-fb66-45b1-8c7b-9e2d0d280b90"
        },
        "item": {
          "id": "45b9346c-21f0-4edd-86ce-fd66e024cb38",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3325470-62e7-44ba-b424-db2ebf554377",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8434a89c-2ae2-48f2-b043-dcfb3abe4a32",
        "cursor": {
          "ref": "46a090e6-3a66-4b0b-aebe-b495393987dc",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d5594bce-e2fe-4ddc-be10-4ec94f57aac0"
        },
        "item": {
          "id": "8434a89c-2ae2-48f2-b043-dcfb3abe4a32",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a193481c-ab5f-4619-925c-7440e3982ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8434a89c-2ae2-48f2-b043-dcfb3abe4a32",
        "cursor": {
          "ref": "46a090e6-3a66-4b0b-aebe-b495393987dc",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d5594bce-e2fe-4ddc-be10-4ec94f57aac0"
        },
        "item": {
          "id": "8434a89c-2ae2-48f2-b043-dcfb3abe4a32",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a193481c-ab5f-4619-925c-7440e3982ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c2d0a1e3-27a4-40fa-90c3-a04f32be24fb",
        "cursor": {
          "ref": "79b73645-5268-4d75-8851-679bf8cf8da9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d3d71fac-6f4a-4622-a41a-43ce635a0329"
        },
        "item": {
          "id": "c2d0a1e3-27a4-40fa-90c3-a04f32be24fb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80e4eea3-4bf0-4393-a658-17309a77e630",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c2d0a1e3-27a4-40fa-90c3-a04f32be24fb",
        "cursor": {
          "ref": "79b73645-5268-4d75-8851-679bf8cf8da9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d3d71fac-6f4a-4622-a41a-43ce635a0329"
        },
        "item": {
          "id": "c2d0a1e3-27a4-40fa-90c3-a04f32be24fb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80e4eea3-4bf0-4393-a658-17309a77e630",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9d948349-fbcb-4f3f-b766-922d960a8dd0",
        "cursor": {
          "ref": "efd81865-a143-4a9e-86f7-c43f65365ee3",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ae03c83-4937-48e2-8c39-8002de2b558c"
        },
        "item": {
          "id": "9d948349-fbcb-4f3f-b766-922d960a8dd0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcff17c5-eb01-4c86-8720-36105dcd0b78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "9d948349-fbcb-4f3f-b766-922d960a8dd0",
        "cursor": {
          "ref": "efd81865-a143-4a9e-86f7-c43f65365ee3",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ae03c83-4937-48e2-8c39-8002de2b558c"
        },
        "item": {
          "id": "9d948349-fbcb-4f3f-b766-922d960a8dd0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcff17c5-eb01-4c86-8720-36105dcd0b78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c85ecc68-0541-4200-9560-c0453aa83118",
        "cursor": {
          "ref": "da10f53b-c541-4494-bba5-762b376e2942",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce5bf48c-4cfb-4b9e-933f-6fb810125560"
        },
        "item": {
          "id": "c85ecc68-0541-4200-9560-c0453aa83118",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "03005aad-67f5-40a1-82a0-3292c9ad3df5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c85ecc68-0541-4200-9560-c0453aa83118",
        "cursor": {
          "ref": "da10f53b-c541-4494-bba5-762b376e2942",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce5bf48c-4cfb-4b9e-933f-6fb810125560"
        },
        "item": {
          "id": "c85ecc68-0541-4200-9560-c0453aa83118",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "03005aad-67f5-40a1-82a0-3292c9ad3df5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3b25bd87-51b5-4035-b117-693af7f32cb2",
        "cursor": {
          "ref": "922a4a03-a812-4d92-8381-e7be51bdf0b8",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "de9c6378-b992-419a-9c72-cf57693e128a"
        },
        "item": {
          "id": "3b25bd87-51b5-4035-b117-693af7f32cb2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad790aab-bb57-4192-b848-1769a683068b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "3b25bd87-51b5-4035-b117-693af7f32cb2",
        "cursor": {
          "ref": "922a4a03-a812-4d92-8381-e7be51bdf0b8",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "de9c6378-b992-419a-9c72-cf57693e128a"
        },
        "item": {
          "id": "3b25bd87-51b5-4035-b117-693af7f32cb2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad790aab-bb57-4192-b848-1769a683068b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c4b43511-c1c0-4e5e-9889-b8bc357fd903",
        "cursor": {
          "ref": "2302cc3c-7230-4b6d-96d8-e3f4fd13d01d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "caf21d5b-78d9-4a68-9dcd-cd5f36690627"
        },
        "item": {
          "id": "c4b43511-c1c0-4e5e-9889-b8bc357fd903",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c590a4c4-0647-47b7-bd43-37fd419c9991",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c4b43511-c1c0-4e5e-9889-b8bc357fd903",
        "cursor": {
          "ref": "2302cc3c-7230-4b6d-96d8-e3f4fd13d01d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "caf21d5b-78d9-4a68-9dcd-cd5f36690627"
        },
        "item": {
          "id": "c4b43511-c1c0-4e5e-9889-b8bc357fd903",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c590a4c4-0647-47b7-bd43-37fd419c9991",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d86a4c0b-3b10-412c-8af4-71d985a5f4a7",
        "cursor": {
          "ref": "0db0c53a-edb7-47fd-ad7d-c235cebb851c",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d694332b-a746-47fb-bf5a-19d604f19d10"
        },
        "item": {
          "id": "d86a4c0b-3b10-412c-8af4-71d985a5f4a7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8ec5d6d6-aadb-4424-bd40-2c3dfe04ed4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d86a4c0b-3b10-412c-8af4-71d985a5f4a7",
        "cursor": {
          "ref": "0db0c53a-edb7-47fd-ad7d-c235cebb851c",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d694332b-a746-47fb-bf5a-19d604f19d10"
        },
        "item": {
          "id": "d86a4c0b-3b10-412c-8af4-71d985a5f4a7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8ec5d6d6-aadb-4424-bd40-2c3dfe04ed4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fe2f38af-f842-46b0-99da-2ac222cdc49a",
        "cursor": {
          "ref": "a46c3e98-258a-4002-b3b0-a27ceb083919",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0533d067-b20b-4caa-80a2-b8301e96ea69"
        },
        "item": {
          "id": "fe2f38af-f842-46b0-99da-2ac222cdc49a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8db3c2ac-b560-49c6-a410-9a8a07e54619",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fe2f38af-f842-46b0-99da-2ac222cdc49a",
        "cursor": {
          "ref": "a46c3e98-258a-4002-b3b0-a27ceb083919",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0533d067-b20b-4caa-80a2-b8301e96ea69"
        },
        "item": {
          "id": "fe2f38af-f842-46b0-99da-2ac222cdc49a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8db3c2ac-b560-49c6-a410-9a8a07e54619",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9080db58-8353-4550-a853-6f73ad44bbf1",
        "cursor": {
          "ref": "d589d2a2-ae41-461b-bec2-aab1701e7b37",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "688378de-64a5-4785-a628-9b421aa8a0ae"
        },
        "item": {
          "id": "9080db58-8353-4550-a853-6f73ad44bbf1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1292657b-3a22-43ef-ab70-9f8a98f62562",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9080db58-8353-4550-a853-6f73ad44bbf1",
        "cursor": {
          "ref": "d589d2a2-ae41-461b-bec2-aab1701e7b37",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "688378de-64a5-4785-a628-9b421aa8a0ae"
        },
        "item": {
          "id": "9080db58-8353-4550-a853-6f73ad44bbf1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1292657b-3a22-43ef-ab70-9f8a98f62562",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "eadadd14-9182-447a-803b-740d2e282fe8",
        "cursor": {
          "ref": "7036b9c3-ff0f-4c75-8768-ebb55e025697",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "88f2bb0b-1c1b-4c42-9f86-0e7951c6200f"
        },
        "item": {
          "id": "eadadd14-9182-447a-803b-740d2e282fe8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0466c2b2-d851-4f42-ad25-072fd7e6c812",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "eadadd14-9182-447a-803b-740d2e282fe8",
        "cursor": {
          "ref": "7036b9c3-ff0f-4c75-8768-ebb55e025697",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "88f2bb0b-1c1b-4c42-9f86-0e7951c6200f"
        },
        "item": {
          "id": "eadadd14-9182-447a-803b-740d2e282fe8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0466c2b2-d851-4f42-ad25-072fd7e6c812",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "73cae36e-7265-424c-ae21-31e3eb624644",
        "cursor": {
          "ref": "8a174e1a-29bc-4a18-9d9e-28c7b8f84830",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1795889d-9ba7-4ca0-9c19-39acd7c00a7b"
        },
        "item": {
          "id": "73cae36e-7265-424c-ae21-31e3eb624644",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "48e755c2-be0d-4f3f-808e-91972528632a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "73cae36e-7265-424c-ae21-31e3eb624644",
        "cursor": {
          "ref": "8a174e1a-29bc-4a18-9d9e-28c7b8f84830",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1795889d-9ba7-4ca0-9c19-39acd7c00a7b"
        },
        "item": {
          "id": "73cae36e-7265-424c-ae21-31e3eb624644",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "48e755c2-be0d-4f3f-808e-91972528632a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "fe510fce-de99-4430-9218-6aa33f72cf8e",
        "cursor": {
          "ref": "28fe923b-7eca-4f20-a585-874e420db4ca",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e7047393-168b-4392-afd0-df5be1c4ea79"
        },
        "item": {
          "id": "fe510fce-de99-4430-9218-6aa33f72cf8e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "94c935a2-5f5d-45a5-a3f6-ff98e3553042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fe510fce-de99-4430-9218-6aa33f72cf8e",
        "cursor": {
          "ref": "28fe923b-7eca-4f20-a585-874e420db4ca",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e7047393-168b-4392-afd0-df5be1c4ea79"
        },
        "item": {
          "id": "fe510fce-de99-4430-9218-6aa33f72cf8e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "94c935a2-5f5d-45a5-a3f6-ff98e3553042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "94ce74d4-38bb-40ec-9c5a-178611378749",
        "cursor": {
          "ref": "2437677d-9f4a-441a-8528-ed6698cb4c92",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e4c4710-901d-4648-abc6-f1b6fbf85f6a"
        },
        "item": {
          "id": "94ce74d4-38bb-40ec-9c5a-178611378749",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a94c68b-0845-47fb-b1c0-7f81959e7466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "94ce74d4-38bb-40ec-9c5a-178611378749",
        "cursor": {
          "ref": "2437677d-9f4a-441a-8528-ed6698cb4c92",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e4c4710-901d-4648-abc6-f1b6fbf85f6a"
        },
        "item": {
          "id": "94ce74d4-38bb-40ec-9c5a-178611378749",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a94c68b-0845-47fb-b1c0-7f81959e7466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5dcbd033-81fb-4035-9547-abc1114808f1",
        "cursor": {
          "ref": "1113452e-c89f-49c2-8871-166839902ff2",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1d5df9a5-be57-4ef8-a875-20e7a75b93f1"
        },
        "item": {
          "id": "5dcbd033-81fb-4035-9547-abc1114808f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cca9b1fb-94eb-4fad-b472-b44efa3afbb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5dcbd033-81fb-4035-9547-abc1114808f1",
        "cursor": {
          "ref": "1113452e-c89f-49c2-8871-166839902ff2",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1d5df9a5-be57-4ef8-a875-20e7a75b93f1"
        },
        "item": {
          "id": "5dcbd033-81fb-4035-9547-abc1114808f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cca9b1fb-94eb-4fad-b472-b44efa3afbb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c8c8c4ae-52bc-4671-aebe-6eb160704e94",
        "cursor": {
          "ref": "08a9083a-6837-4c35-98e6-22212b76e38f",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a700f77e-bb41-4e34-bebd-cf0eaf4b3ce2"
        },
        "item": {
          "id": "c8c8c4ae-52bc-4671-aebe-6eb160704e94",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "370f54fb-e25a-4a1e-b3a6-48920e2f158a",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38327,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c8c8c4ae-52bc-4671-aebe-6eb160704e94",
        "cursor": {
          "ref": "08a9083a-6837-4c35-98e6-22212b76e38f",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a700f77e-bb41-4e34-bebd-cf0eaf4b3ce2"
        },
        "item": {
          "id": "c8c8c4ae-52bc-4671-aebe-6eb160704e94",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "370f54fb-e25a-4a1e-b3a6-48920e2f158a",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38327,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2a8712cc-7454-48f8-99e1-0c646a4dbd26",
        "cursor": {
          "ref": "37c88cdb-5d09-492f-9485-c933e0eb4b64",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7716eda2-f54b-48b4-b0ae-7b495b3ed451"
        },
        "item": {
          "id": "2a8712cc-7454-48f8-99e1-0c646a4dbd26",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "206407e8-7817-4c46-97dd-e697d074c508",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2a8712cc-7454-48f8-99e1-0c646a4dbd26",
        "cursor": {
          "ref": "37c88cdb-5d09-492f-9485-c933e0eb4b64",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7716eda2-f54b-48b4-b0ae-7b495b3ed451"
        },
        "item": {
          "id": "2a8712cc-7454-48f8-99e1-0c646a4dbd26",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "206407e8-7817-4c46-97dd-e697d074c508",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "491577da-2697-41c9-a253-78ab215bd101",
        "cursor": {
          "ref": "07961a8a-c793-4d45-b51d-3f06e1b975c3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f40616aa-2dfb-4ed4-ba1d-2eab1265517f"
        },
        "item": {
          "id": "491577da-2697-41c9-a253-78ab215bd101",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e76d3df6-845a-4a34-8661-a726a8c80c80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "491577da-2697-41c9-a253-78ab215bd101",
        "cursor": {
          "ref": "07961a8a-c793-4d45-b51d-3f06e1b975c3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f40616aa-2dfb-4ed4-ba1d-2eab1265517f"
        },
        "item": {
          "id": "491577da-2697-41c9-a253-78ab215bd101",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e76d3df6-845a-4a34-8661-a726a8c80c80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "b33f96c1-1825-4ca7-bfb7-50e3cd89d4c9",
        "cursor": {
          "ref": "ab964b53-5a84-4f61-9a9b-1d3147d8ce3f",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a0ef99a4-f1d3-42d8-b82c-43584569ba38"
        },
        "item": {
          "id": "b33f96c1-1825-4ca7-bfb7-50e3cd89d4c9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bfe5c0e8-64d2-4bb9-b17a-4237c8082c1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "b33f96c1-1825-4ca7-bfb7-50e3cd89d4c9",
        "cursor": {
          "ref": "ab964b53-5a84-4f61-9a9b-1d3147d8ce3f",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a0ef99a4-f1d3-42d8-b82c-43584569ba38"
        },
        "item": {
          "id": "b33f96c1-1825-4ca7-bfb7-50e3cd89d4c9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bfe5c0e8-64d2-4bb9-b17a-4237c8082c1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "2e6576a3-4c81-4646-86fa-6ef2ac27adf4",
        "cursor": {
          "ref": "3c3adc13-35f8-47b6-8604-89cea4bb2c22",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b70fcee9-ef4e-45d0-a804-ccd5a19d17e5"
        },
        "item": {
          "id": "2e6576a3-4c81-4646-86fa-6ef2ac27adf4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "10397cfc-7699-470d-b3ab-b4123f211225",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30948,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "2e6576a3-4c81-4646-86fa-6ef2ac27adf4",
        "cursor": {
          "ref": "3c3adc13-35f8-47b6-8604-89cea4bb2c22",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b70fcee9-ef4e-45d0-a804-ccd5a19d17e5"
        },
        "item": {
          "id": "2e6576a3-4c81-4646-86fa-6ef2ac27adf4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "10397cfc-7699-470d-b3ab-b4123f211225",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30948,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "17d90b23-c7d5-48db-8f71-6c2a02319549",
        "cursor": {
          "ref": "575f78fd-7610-401c-beb2-a0958c735089",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "35b0b479-1e64-4d95-8a84-fe781470f62d"
        },
        "item": {
          "id": "17d90b23-c7d5-48db-8f71-6c2a02319549",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "52a03e23-4bfa-425d-9712-85dc840fcb5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "17d90b23-c7d5-48db-8f71-6c2a02319549",
        "cursor": {
          "ref": "575f78fd-7610-401c-beb2-a0958c735089",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "35b0b479-1e64-4d95-8a84-fe781470f62d"
        },
        "item": {
          "id": "17d90b23-c7d5-48db-8f71-6c2a02319549",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "52a03e23-4bfa-425d-9712-85dc840fcb5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "05448546-e375-4702-bd34-019be102e5bb",
        "cursor": {
          "ref": "b3a42f35-b6cf-481f-ba38-d92b01db7b6e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0cf18c6d-55e9-457c-acb5-ba7b78c38335"
        },
        "item": {
          "id": "05448546-e375-4702-bd34-019be102e5bb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1977e93-1046-411f-915f-2746dca3cc73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "05448546-e375-4702-bd34-019be102e5bb",
        "cursor": {
          "ref": "b3a42f35-b6cf-481f-ba38-d92b01db7b6e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0cf18c6d-55e9-457c-acb5-ba7b78c38335"
        },
        "item": {
          "id": "05448546-e375-4702-bd34-019be102e5bb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1977e93-1046-411f-915f-2746dca3cc73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "c6be6b4a-ba78-4ec2-98f6-d0bd8e6d4838",
        "cursor": {
          "ref": "8f5f1d9f-c17e-44fd-bb34-7c0a0144df77",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aa3b69e6-efbd-4990-93bf-63f44a5f3e67"
        },
        "item": {
          "id": "c6be6b4a-ba78-4ec2-98f6-d0bd8e6d4838",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "011732e2-c808-42bb-8aac-5066500747df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "c6be6b4a-ba78-4ec2-98f6-d0bd8e6d4838",
        "cursor": {
          "ref": "8f5f1d9f-c17e-44fd-bb34-7c0a0144df77",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aa3b69e6-efbd-4990-93bf-63f44a5f3e67"
        },
        "item": {
          "id": "c6be6b4a-ba78-4ec2-98f6-d0bd8e6d4838",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "011732e2-c808-42bb-8aac-5066500747df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "cd44a2c0-bafa-480a-ab73-e323d5a5c8d9",
        "cursor": {
          "ref": "4d2c0ae1-5b02-40a4-a322-44234ca52503",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d5f23cc2-5332-4055-8852-8bdcab90812c"
        },
        "item": {
          "id": "cd44a2c0-bafa-480a-ab73-e323d5a5c8d9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21d54ed8-4edc-4e3e-8443-3293add9058d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "cd44a2c0-bafa-480a-ab73-e323d5a5c8d9",
        "cursor": {
          "ref": "4d2c0ae1-5b02-40a4-a322-44234ca52503",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d5f23cc2-5332-4055-8852-8bdcab90812c"
        },
        "item": {
          "id": "cd44a2c0-bafa-480a-ab73-e323d5a5c8d9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21d54ed8-4edc-4e3e-8443-3293add9058d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "f6e8640e-7ded-444f-90ea-e76457d0f8dc",
        "cursor": {
          "ref": "c70df7a2-bf50-462d-a23d-7d019a4a5e4f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc288de6-5a63-491c-8bbe-860bf58ec754"
        },
        "item": {
          "id": "f6e8640e-7ded-444f-90ea-e76457d0f8dc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c297acaf-a338-495a-8660-4e04bc6bc269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f6e8640e-7ded-444f-90ea-e76457d0f8dc",
        "cursor": {
          "ref": "c70df7a2-bf50-462d-a23d-7d019a4a5e4f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc288de6-5a63-491c-8bbe-860bf58ec754"
        },
        "item": {
          "id": "f6e8640e-7ded-444f-90ea-e76457d0f8dc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c297acaf-a338-495a-8660-4e04bc6bc269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "5b9fd7b3-9b9b-46dc-a02c-5a30519d3077",
        "cursor": {
          "ref": "87093f2b-d4e6-4f35-a530-512cd9831c6b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "09697004-298b-4ad4-8dc1-1e07b571f53b"
        },
        "item": {
          "id": "5b9fd7b3-9b9b-46dc-a02c-5a30519d3077",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25267150-6ec4-4c94-b81e-6b7459e3aa98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5b9fd7b3-9b9b-46dc-a02c-5a30519d3077",
        "cursor": {
          "ref": "87093f2b-d4e6-4f35-a530-512cd9831c6b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "09697004-298b-4ad4-8dc1-1e07b571f53b"
        },
        "item": {
          "id": "5b9fd7b3-9b9b-46dc-a02c-5a30519d3077",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25267150-6ec4-4c94-b81e-6b7459e3aa98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6946b424-3be7-4940-abf7-ddc06ef8a72f",
        "cursor": {
          "ref": "6af600b8-952b-488e-a688-8ebba0dd3b04",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "efb28c1c-7f7e-4983-b2fc-e177b5774197"
        },
        "item": {
          "id": "6946b424-3be7-4940-abf7-ddc06ef8a72f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "97d57dd7-57cf-45c3-b2b6-e636485689bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "6946b424-3be7-4940-abf7-ddc06ef8a72f",
        "cursor": {
          "ref": "6af600b8-952b-488e-a688-8ebba0dd3b04",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "efb28c1c-7f7e-4983-b2fc-e177b5774197"
        },
        "item": {
          "id": "6946b424-3be7-4940-abf7-ddc06ef8a72f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "97d57dd7-57cf-45c3-b2b6-e636485689bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "4e3771f4-26c5-4165-878a-e7fc40ba6069",
        "cursor": {
          "ref": "ab7dd0da-6ef2-4357-af45-dc4c094a9396",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "39f36d88-02ef-454e-93d5-034c080b6275"
        },
        "item": {
          "id": "4e3771f4-26c5-4165-878a-e7fc40ba6069",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "870ae592-96de-44cb-861d-a0cbb38b188f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "4e3771f4-26c5-4165-878a-e7fc40ba6069",
        "cursor": {
          "ref": "ab7dd0da-6ef2-4357-af45-dc4c094a9396",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "39f36d88-02ef-454e-93d5-034c080b6275"
        },
        "item": {
          "id": "4e3771f4-26c5-4165-878a-e7fc40ba6069",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "870ae592-96de-44cb-861d-a0cbb38b188f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "64d6e3e1-74fa-44ac-bb30-c10006e7ae61",
        "cursor": {
          "ref": "0e0c15eb-84e5-4dc8-be14-4d24b659cda3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7f3d602e-f3de-4fc7-b79e-2bc5e82c4d09"
        },
        "item": {
          "id": "64d6e3e1-74fa-44ac-bb30-c10006e7ae61",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5a66dea-deb4-4980-9e25-9bc98ae6c697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "64d6e3e1-74fa-44ac-bb30-c10006e7ae61",
        "cursor": {
          "ref": "0e0c15eb-84e5-4dc8-be14-4d24b659cda3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7f3d602e-f3de-4fc7-b79e-2bc5e82c4d09"
        },
        "item": {
          "id": "64d6e3e1-74fa-44ac-bb30-c10006e7ae61",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5a66dea-deb4-4980-9e25-9bc98ae6c697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1cf1d59f-3d45-4d5e-841f-8025e9eadb19",
        "cursor": {
          "ref": "e05a3527-9c76-473f-afa2-5eeb5b182784",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9a7ca8c6-c028-40bb-b9e3-76353374f43f"
        },
        "item": {
          "id": "1cf1d59f-3d45-4d5e-841f-8025e9eadb19",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f6e85f2-5f63-4172-ad51-e20cb57e938a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1cf1d59f-3d45-4d5e-841f-8025e9eadb19",
        "cursor": {
          "ref": "e05a3527-9c76-473f-afa2-5eeb5b182784",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9a7ca8c6-c028-40bb-b9e3-76353374f43f"
        },
        "item": {
          "id": "1cf1d59f-3d45-4d5e-841f-8025e9eadb19",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f6e85f2-5f63-4172-ad51-e20cb57e938a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "6063dbfb-4a62-4643-871f-2d76cd23d99f",
        "cursor": {
          "ref": "aa4dced8-9adc-4742-9a57-b6a5a774080e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5bbe48ce-d93c-4e3d-8bef-1b2a27adeabd"
        },
        "item": {
          "id": "6063dbfb-4a62-4643-871f-2d76cd23d99f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3f6f6e35-b93f-4167-9544-8416b7fc054a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6063dbfb-4a62-4643-871f-2d76cd23d99f",
        "cursor": {
          "ref": "aa4dced8-9adc-4742-9a57-b6a5a774080e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5bbe48ce-d93c-4e3d-8bef-1b2a27adeabd"
        },
        "item": {
          "id": "6063dbfb-4a62-4643-871f-2d76cd23d99f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3f6f6e35-b93f-4167-9544-8416b7fc054a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "121a5fe8-54c1-4e0b-92ea-3480db2d4de8",
        "cursor": {
          "ref": "42edf113-d32a-4f18-a86d-a18621d313c7",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8bf5289f-2d22-4b13-8686-daa3c95e27cc"
        },
        "item": {
          "id": "121a5fe8-54c1-4e0b-92ea-3480db2d4de8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "01d2feb4-71cc-4485-85cb-49f5f74be579",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "121a5fe8-54c1-4e0b-92ea-3480db2d4de8",
        "cursor": {
          "ref": "42edf113-d32a-4f18-a86d-a18621d313c7",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8bf5289f-2d22-4b13-8686-daa3c95e27cc"
        },
        "item": {
          "id": "121a5fe8-54c1-4e0b-92ea-3480db2d4de8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "01d2feb4-71cc-4485-85cb-49f5f74be579",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "fc67e94f-2ce3-4f4d-a9cf-e23654b6340d",
        "cursor": {
          "ref": "78e09918-c0a0-4a49-95fc-7ccc4b7dc830",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "faa29821-606d-47f7-9601-6edd0f0778b8"
        },
        "item": {
          "id": "fc67e94f-2ce3-4f4d-a9cf-e23654b6340d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "567eaee7-7dca-4cd4-9ee0-491f50112124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "fc67e94f-2ce3-4f4d-a9cf-e23654b6340d",
        "cursor": {
          "ref": "78e09918-c0a0-4a49-95fc-7ccc4b7dc830",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "faa29821-606d-47f7-9601-6edd0f0778b8"
        },
        "item": {
          "id": "fc67e94f-2ce3-4f4d-a9cf-e23654b6340d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "567eaee7-7dca-4cd4-9ee0-491f50112124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "4b29029a-f7d1-480f-991a-ad44a05d68dc",
        "cursor": {
          "ref": "a409290c-4e0d-4a40-a136-866a09fcbeea",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c9c99708-d89b-473d-9aba-a8c226684ae1"
        },
        "item": {
          "id": "4b29029a-f7d1-480f-991a-ad44a05d68dc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "81aed358-6ad1-4361-b19b-0627bf541726",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4b29029a-f7d1-480f-991a-ad44a05d68dc",
        "cursor": {
          "ref": "a409290c-4e0d-4a40-a136-866a09fcbeea",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c9c99708-d89b-473d-9aba-a8c226684ae1"
        },
        "item": {
          "id": "4b29029a-f7d1-480f-991a-ad44a05d68dc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "81aed358-6ad1-4361-b19b-0627bf541726",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "87fab541-a117-4ce6-9179-20fb6655d844",
        "cursor": {
          "ref": "2ada22de-b093-4927-8a49-3f3e3c99c608",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d7869d67-cdc0-47b6-8bfa-bcc997eb9a04"
        },
        "item": {
          "id": "87fab541-a117-4ce6-9179-20fb6655d844",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9613d80f-58dc-4b8b-94da-ee48011af68a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "87fab541-a117-4ce6-9179-20fb6655d844",
        "cursor": {
          "ref": "2ada22de-b093-4927-8a49-3f3e3c99c608",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d7869d67-cdc0-47b6-8bfa-bcc997eb9a04"
        },
        "item": {
          "id": "87fab541-a117-4ce6-9179-20fb6655d844",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9613d80f-58dc-4b8b-94da-ee48011af68a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "2af61fd3-a083-44d7-8b75-31c59f22f464",
        "cursor": {
          "ref": "18ed4a49-4e49-4c76-ad20-35cfffb8b5ed",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b40f4243-2572-4e63-9a5b-18d4c8338a5e"
        },
        "item": {
          "id": "2af61fd3-a083-44d7-8b75-31c59f22f464",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ce13194b-a8ff-4a26-90b2-c4be091aef90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "2af61fd3-a083-44d7-8b75-31c59f22f464",
        "cursor": {
          "ref": "18ed4a49-4e49-4c76-ad20-35cfffb8b5ed",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b40f4243-2572-4e63-9a5b-18d4c8338a5e"
        },
        "item": {
          "id": "2af61fd3-a083-44d7-8b75-31c59f22f464",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ce13194b-a8ff-4a26-90b2-c4be091aef90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f3f09312-b1cf-4624-95b6-bbe6df3ffffb",
        "cursor": {
          "ref": "c32aee9f-2d25-4f87-b40d-82e9c8241eae",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "74e7a7ff-3611-4c3e-8a66-83b6e79e995d"
        },
        "item": {
          "id": "f3f09312-b1cf-4624-95b6-bbe6df3ffffb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "955858e1-48cf-4685-80a9-f128abe1d2c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "f3f09312-b1cf-4624-95b6-bbe6df3ffffb",
        "cursor": {
          "ref": "c32aee9f-2d25-4f87-b40d-82e9c8241eae",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "74e7a7ff-3611-4c3e-8a66-83b6e79e995d"
        },
        "item": {
          "id": "f3f09312-b1cf-4624-95b6-bbe6df3ffffb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "955858e1-48cf-4685-80a9-f128abe1d2c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "9b2216e1-4e7f-4600-aabb-f7ba0122349c",
        "cursor": {
          "ref": "a5729ae0-0e41-4373-8721-f7d73d18871a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6b6199ed-7aa9-4add-ab7d-f7be4645863c"
        },
        "item": {
          "id": "9b2216e1-4e7f-4600-aabb-f7ba0122349c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "df754444-7ed3-4124-a530-2f68b220d6dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "9b2216e1-4e7f-4600-aabb-f7ba0122349c",
        "cursor": {
          "ref": "a5729ae0-0e41-4373-8721-f7d73d18871a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6b6199ed-7aa9-4add-ab7d-f7be4645863c"
        },
        "item": {
          "id": "9b2216e1-4e7f-4600-aabb-f7ba0122349c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "df754444-7ed3-4124-a530-2f68b220d6dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d5b50c6f-8bff-461b-b314-80b96c5fd62c",
        "cursor": {
          "ref": "2c480a62-c43d-4ce6-a806-d3a0e21552ad",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ad21693c-5c9f-49ba-91f7-c6a4f0f84a67"
        },
        "item": {
          "id": "d5b50c6f-8bff-461b-b314-80b96c5fd62c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "73cdd42c-6ce6-4428-af79-65f27fcc16f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "d5b50c6f-8bff-461b-b314-80b96c5fd62c",
        "cursor": {
          "ref": "2c480a62-c43d-4ce6-a806-d3a0e21552ad",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ad21693c-5c9f-49ba-91f7-c6a4f0f84a67"
        },
        "item": {
          "id": "d5b50c6f-8bff-461b-b314-80b96c5fd62c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "73cdd42c-6ce6-4428-af79-65f27fcc16f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "058c3cc0-4996-485a-a069-5d62576458e0",
        "cursor": {
          "ref": "9dd8e479-d2ff-4edc-b603-4b127f469026",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2965b63d-3d0d-4898-b372-23560e8b8538"
        },
        "item": {
          "id": "058c3cc0-4996-485a-a069-5d62576458e0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "27d68042-2b80-40c6-9a4a-e9dc4562981d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "058c3cc0-4996-485a-a069-5d62576458e0",
        "cursor": {
          "ref": "9dd8e479-d2ff-4edc-b603-4b127f469026",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2965b63d-3d0d-4898-b372-23560e8b8538"
        },
        "item": {
          "id": "058c3cc0-4996-485a-a069-5d62576458e0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "27d68042-2b80-40c6-9a4a-e9dc4562981d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f342cb3b-100e-4c5c-a832-c301db751f03",
        "cursor": {
          "ref": "4c3eb9c7-bb28-412e-8d8f-b36187dda15e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2c217ee7-189f-42eb-acc1-7e071f2a33e2"
        },
        "item": {
          "id": "f342cb3b-100e-4c5c-a832-c301db751f03",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c26223fa-d941-4ce7-a1d5-0a63514ee70f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f342cb3b-100e-4c5c-a832-c301db751f03",
        "cursor": {
          "ref": "4c3eb9c7-bb28-412e-8d8f-b36187dda15e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2c217ee7-189f-42eb-acc1-7e071f2a33e2"
        },
        "item": {
          "id": "f342cb3b-100e-4c5c-a832-c301db751f03",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c26223fa-d941-4ce7-a1d5-0a63514ee70f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "95371a02-70cf-402b-95d5-596e0427ec96",
        "cursor": {
          "ref": "2c2b54e4-8ccf-4c38-9f7d-8c729e48f039",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d589357e-0aaa-4be1-b76a-514243595f91"
        },
        "item": {
          "id": "95371a02-70cf-402b-95d5-596e0427ec96",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "80b59d63-cd43-487b-959f-768450bdf50b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "95371a02-70cf-402b-95d5-596e0427ec96",
        "cursor": {
          "ref": "2c2b54e4-8ccf-4c38-9f7d-8c729e48f039",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d589357e-0aaa-4be1-b76a-514243595f91"
        },
        "item": {
          "id": "95371a02-70cf-402b-95d5-596e0427ec96",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "80b59d63-cd43-487b-959f-768450bdf50b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "e508542f-35f6-43d0-baf7-9244a755760a",
        "cursor": {
          "ref": "6bd01ebc-507c-4f39-9f72-de131563cf03",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "97f7e886-9818-4ecc-9364-60fb0c109949"
        },
        "item": {
          "id": "e508542f-35f6-43d0-baf7-9244a755760a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7aca52bb-bf9c-4f05-b800-6e6f0a046102",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "e508542f-35f6-43d0-baf7-9244a755760a",
        "cursor": {
          "ref": "6bd01ebc-507c-4f39-9f72-de131563cf03",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "97f7e886-9818-4ecc-9364-60fb0c109949"
        },
        "item": {
          "id": "e508542f-35f6-43d0-baf7-9244a755760a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7aca52bb-bf9c-4f05-b800-6e6f0a046102",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "6d2daa60-c568-4931-be0e-e8bd2b815989",
        "cursor": {
          "ref": "a167a169-9537-4f6f-8ab5-e7f29fdb98b7",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5fa4d8c2-d94d-4b1d-97f8-deba69d9b61d"
        },
        "item": {
          "id": "6d2daa60-c568-4931-be0e-e8bd2b815989",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "998f2e83-db35-4396-81d1-ceb129d70836",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "6d2daa60-c568-4931-be0e-e8bd2b815989",
        "cursor": {
          "ref": "a167a169-9537-4f6f-8ab5-e7f29fdb98b7",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5fa4d8c2-d94d-4b1d-97f8-deba69d9b61d"
        },
        "item": {
          "id": "6d2daa60-c568-4931-be0e-e8bd2b815989",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "998f2e83-db35-4396-81d1-ceb129d70836",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a9df03a9-c77e-4127-8af4-e03e9a61f7a2",
        "cursor": {
          "ref": "cf97663d-4259-45d3-ab77-28a35257b203",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b238653a-e78f-4db6-a354-831252158e37"
        },
        "item": {
          "id": "a9df03a9-c77e-4127-8af4-e03e9a61f7a2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8b697900-d858-4ba3-be8e-4a5989039a4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a9df03a9-c77e-4127-8af4-e03e9a61f7a2",
        "cursor": {
          "ref": "cf97663d-4259-45d3-ab77-28a35257b203",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b238653a-e78f-4db6-a354-831252158e37"
        },
        "item": {
          "id": "a9df03a9-c77e-4127-8af4-e03e9a61f7a2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8b697900-d858-4ba3-be8e-4a5989039a4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "5e98cae6-3ccd-4f9d-bf5c-c558a5d099e6",
        "cursor": {
          "ref": "399cf4b2-7778-465d-bf4b-cb9dd6bbeeef",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0190dd19-8130-4b9a-83c7-04b30886a832"
        },
        "item": {
          "id": "5e98cae6-3ccd-4f9d-bf5c-c558a5d099e6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a62f7a4d-f54d-43ce-be01-485f4582edec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "5e98cae6-3ccd-4f9d-bf5c-c558a5d099e6",
        "cursor": {
          "ref": "399cf4b2-7778-465d-bf4b-cb9dd6bbeeef",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0190dd19-8130-4b9a-83c7-04b30886a832"
        },
        "item": {
          "id": "5e98cae6-3ccd-4f9d-bf5c-c558a5d099e6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a62f7a4d-f54d-43ce-be01-485f4582edec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "05ad4bc6-07c0-4089-959d-88bc6fdd16b4",
        "cursor": {
          "ref": "915a430b-40fd-4e7f-86dc-9eace1487736",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "94107906-f761-440d-9ed5-d183134c89be"
        },
        "item": {
          "id": "05ad4bc6-07c0-4089-959d-88bc6fdd16b4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d5a5bf20-fe6d-4463-bac5-5823f7054d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "05ad4bc6-07c0-4089-959d-88bc6fdd16b4",
        "cursor": {
          "ref": "915a430b-40fd-4e7f-86dc-9eace1487736",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "94107906-f761-440d-9ed5-d183134c89be"
        },
        "item": {
          "id": "05ad4bc6-07c0-4089-959d-88bc6fdd16b4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d5a5bf20-fe6d-4463-bac5-5823f7054d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "7b47faa9-5eea-4502-a898-8cf076308cd7",
        "cursor": {
          "ref": "ddb61429-b47f-4f2d-925b-3a5f963f9bc3",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6598fe84-84b2-4c2a-a990-0481d87ebcc3"
        },
        "item": {
          "id": "7b47faa9-5eea-4502-a898-8cf076308cd7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5d273841-1203-4a5c-abcf-435291677fc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "7b47faa9-5eea-4502-a898-8cf076308cd7",
        "cursor": {
          "ref": "ddb61429-b47f-4f2d-925b-3a5f963f9bc3",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6598fe84-84b2-4c2a-a990-0481d87ebcc3"
        },
        "item": {
          "id": "7b47faa9-5eea-4502-a898-8cf076308cd7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5d273841-1203-4a5c-abcf-435291677fc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "251177ac-7a56-477b-aaf1-4f35cf6dcd26",
        "cursor": {
          "ref": "de9c7007-f2fb-411a-a003-26625b01fdc6",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9bb0857a-337e-4046-bee0-3615872b1db3"
        },
        "item": {
          "id": "251177ac-7a56-477b-aaf1-4f35cf6dcd26",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5dffc2b4-ba78-43b5-a768-0e6cd3afbcca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "251177ac-7a56-477b-aaf1-4f35cf6dcd26",
        "cursor": {
          "ref": "de9c7007-f2fb-411a-a003-26625b01fdc6",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9bb0857a-337e-4046-bee0-3615872b1db3"
        },
        "item": {
          "id": "251177ac-7a56-477b-aaf1-4f35cf6dcd26",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5dffc2b4-ba78-43b5-a768-0e6cd3afbcca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "309483e1-d48c-48aa-92e8-420c1b448f9e",
        "cursor": {
          "ref": "7b06aa42-a014-4975-8a23-f7b48367be06",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "258bcf44-19aa-44a5-ab07-5cf4631cd297"
        },
        "item": {
          "id": "309483e1-d48c-48aa-92e8-420c1b448f9e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4ab35d95-8a3c-449a-a07f-fe7ee1705a5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "309483e1-d48c-48aa-92e8-420c1b448f9e",
        "cursor": {
          "ref": "7b06aa42-a014-4975-8a23-f7b48367be06",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "258bcf44-19aa-44a5-ab07-5cf4631cd297"
        },
        "item": {
          "id": "309483e1-d48c-48aa-92e8-420c1b448f9e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4ab35d95-8a3c-449a-a07f-fe7ee1705a5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c8cea1bd-c766-4cdd-9c69-b377d825be21",
        "cursor": {
          "ref": "656e2169-0df3-4fea-9d93-c0408edf006a",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ce9016f-a5b4-4ac1-be74-91bb56deb80d"
        },
        "item": {
          "id": "c8cea1bd-c766-4cdd-9c69-b377d825be21",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2757c8a0-0ff4-4c02-b9d4-67861b745392",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "c8cea1bd-c766-4cdd-9c69-b377d825be21",
        "cursor": {
          "ref": "656e2169-0df3-4fea-9d93-c0408edf006a",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ce9016f-a5b4-4ac1-be74-91bb56deb80d"
        },
        "item": {
          "id": "c8cea1bd-c766-4cdd-9c69-b377d825be21",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2757c8a0-0ff4-4c02-b9d4-67861b745392",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "06a77f78-2fdc-4c86-9fba-4b791d08e67c",
        "cursor": {
          "ref": "1f8423ed-878e-4428-8247-86379086fe17",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "080134c9-e267-4dfb-88b6-2985cd63cd4d"
        },
        "item": {
          "id": "06a77f78-2fdc-4c86-9fba-4b791d08e67c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4c19918-cdfc-4868-8c5e-4a665271700d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "06a77f78-2fdc-4c86-9fba-4b791d08e67c",
        "cursor": {
          "ref": "1f8423ed-878e-4428-8247-86379086fe17",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "080134c9-e267-4dfb-88b6-2985cd63cd4d"
        },
        "item": {
          "id": "06a77f78-2fdc-4c86-9fba-4b791d08e67c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4c19918-cdfc-4868-8c5e-4a665271700d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bb3d5968-ede1-4c13-a83c-9316d0790f72",
        "cursor": {
          "ref": "f618894a-8b5d-42e4-9ec4-b6b656885904",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "59d9e00a-2df7-492f-ae09-e4cf5bdb61a2"
        },
        "item": {
          "id": "bb3d5968-ede1-4c13-a83c-9316d0790f72",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "79245209-3a2a-46eb-b384-9e546627487d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "bb3d5968-ede1-4c13-a83c-9316d0790f72",
        "cursor": {
          "ref": "f618894a-8b5d-42e4-9ec4-b6b656885904",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "59d9e00a-2df7-492f-ae09-e4cf5bdb61a2"
        },
        "item": {
          "id": "bb3d5968-ede1-4c13-a83c-9316d0790f72",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "79245209-3a2a-46eb-b384-9e546627487d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3bde9db3-4dd7-46dc-a814-4fc6eda0aab6",
        "cursor": {
          "ref": "932c79c4-dc62-484d-84b4-55e2433f6682",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "491d3fb7-3350-4023-9241-e3783b248aab"
        },
        "item": {
          "id": "3bde9db3-4dd7-46dc-a814-4fc6eda0aab6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b3c77108-eb90-48be-8ea6-83a27b2e715d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "3bde9db3-4dd7-46dc-a814-4fc6eda0aab6",
        "cursor": {
          "ref": "932c79c4-dc62-484d-84b4-55e2433f6682",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "491d3fb7-3350-4023-9241-e3783b248aab"
        },
        "item": {
          "id": "3bde9db3-4dd7-46dc-a814-4fc6eda0aab6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b3c77108-eb90-48be-8ea6-83a27b2e715d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8f6b9931-b363-42b0-b9ab-203243a61858",
        "cursor": {
          "ref": "e49c0779-2dff-4fad-8d1d-64dcac1ebbd8",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a45bd148-ad16-49dd-8f22-bbf0223f52bd"
        },
        "item": {
          "id": "8f6b9931-b363-42b0-b9ab-203243a61858",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a043e879-b2b3-44ae-ba1a-996d1a49d01e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "8f6b9931-b363-42b0-b9ab-203243a61858",
        "cursor": {
          "ref": "e49c0779-2dff-4fad-8d1d-64dcac1ebbd8",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a45bd148-ad16-49dd-8f22-bbf0223f52bd"
        },
        "item": {
          "id": "8f6b9931-b363-42b0-b9ab-203243a61858",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a043e879-b2b3-44ae-ba1a-996d1a49d01e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "79b3c81f-a67b-4893-8e40-e4c6e9cb354c",
        "cursor": {
          "ref": "e7f77463-ece7-4cfb-ad1d-e7eeeba31085",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a1551a84-ec70-4c0e-94bf-daf23f0b0144"
        },
        "item": {
          "id": "79b3c81f-a67b-4893-8e40-e4c6e9cb354c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bff85b6c-1017-4e8f-9e11-bdae4289dbbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "79b3c81f-a67b-4893-8e40-e4c6e9cb354c",
        "cursor": {
          "ref": "e7f77463-ece7-4cfb-ad1d-e7eeeba31085",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a1551a84-ec70-4c0e-94bf-daf23f0b0144"
        },
        "item": {
          "id": "79b3c81f-a67b-4893-8e40-e4c6e9cb354c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bff85b6c-1017-4e8f-9e11-bdae4289dbbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "72bcfa38-9612-4410-a353-2c8710de2507",
        "cursor": {
          "ref": "850c1b0d-8dd3-4d6e-affd-55607f314ce2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d88129f5-9329-4b8b-95e5-05d5c4d2401d"
        },
        "item": {
          "id": "72bcfa38-9612-4410-a353-2c8710de2507",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "292c211d-3f1c-4411-8591-7f88354ea409",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "72bcfa38-9612-4410-a353-2c8710de2507",
        "cursor": {
          "ref": "850c1b0d-8dd3-4d6e-affd-55607f314ce2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d88129f5-9329-4b8b-95e5-05d5c4d2401d"
        },
        "item": {
          "id": "72bcfa38-9612-4410-a353-2c8710de2507",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "292c211d-3f1c-4411-8591-7f88354ea409",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "809d1d6d-c565-4058-88dc-e30e1701c341",
        "cursor": {
          "ref": "aa1ad9e5-4de8-49e6-8b6c-bd110427ccde",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c6d5bf1e-1c2f-46f2-b9c1-019381d178a1"
        },
        "item": {
          "id": "809d1d6d-c565-4058-88dc-e30e1701c341",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "84719988-9c05-429a-9dec-61c9bccb225f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "809d1d6d-c565-4058-88dc-e30e1701c341",
        "cursor": {
          "ref": "aa1ad9e5-4de8-49e6-8b6c-bd110427ccde",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c6d5bf1e-1c2f-46f2-b9c1-019381d178a1"
        },
        "item": {
          "id": "809d1d6d-c565-4058-88dc-e30e1701c341",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "84719988-9c05-429a-9dec-61c9bccb225f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "2f485936-4a0d-45ea-a900-8d4687f90647",
        "cursor": {
          "ref": "ef7f0f7e-4196-458a-90d2-d5f379ed9a2d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4b0eb72e-8e4b-481e-a319-934833064dc9"
        },
        "item": {
          "id": "2f485936-4a0d-45ea-a900-8d4687f90647",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a68f9c66-d99e-4e44-961f-48c3d110e6d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2f485936-4a0d-45ea-a900-8d4687f90647",
        "cursor": {
          "ref": "ef7f0f7e-4196-458a-90d2-d5f379ed9a2d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4b0eb72e-8e4b-481e-a319-934833064dc9"
        },
        "item": {
          "id": "2f485936-4a0d-45ea-a900-8d4687f90647",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a68f9c66-d99e-4e44-961f-48c3d110e6d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a4fb521d-b4e9-4202-90b9-c1e91638be75",
        "cursor": {
          "ref": "9a22bd5f-f9e1-4f0d-9d7f-83e8e69c2629",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "62cad9cd-61bf-4b7e-b05a-4fd8c8c4bb40"
        },
        "item": {
          "id": "a4fb521d-b4e9-4202-90b9-c1e91638be75",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ad81ad81-2bbb-4c86-af97-ea021eee5bd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a4fb521d-b4e9-4202-90b9-c1e91638be75",
        "cursor": {
          "ref": "9a22bd5f-f9e1-4f0d-9d7f-83e8e69c2629",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "62cad9cd-61bf-4b7e-b05a-4fd8c8c4bb40"
        },
        "item": {
          "id": "a4fb521d-b4e9-4202-90b9-c1e91638be75",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ad81ad81-2bbb-4c86-af97-ea021eee5bd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "32bc4158-a8e4-4caf-98d4-f5cfd8a99f0e",
        "cursor": {
          "ref": "b75eab09-5fad-4c6e-9f65-e0fe3d2fd53b",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "634ede4b-5e14-446d-b2bb-886ec00fdb48"
        },
        "item": {
          "id": "32bc4158-a8e4-4caf-98d4-f5cfd8a99f0e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "524ba257-04ce-459e-96fa-0f5db5bd251d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "32bc4158-a8e4-4caf-98d4-f5cfd8a99f0e",
        "cursor": {
          "ref": "b75eab09-5fad-4c6e-9f65-e0fe3d2fd53b",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "634ede4b-5e14-446d-b2bb-886ec00fdb48"
        },
        "item": {
          "id": "32bc4158-a8e4-4caf-98d4-f5cfd8a99f0e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "524ba257-04ce-459e-96fa-0f5db5bd251d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "79a5a355-b773-4758-8398-e4fecf11f533",
        "cursor": {
          "ref": "83c03943-1d9e-4aea-9d91-f4f1673dd9ec",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "014e6e08-da7f-49b4-a5da-32387894e785"
        },
        "item": {
          "id": "79a5a355-b773-4758-8398-e4fecf11f533",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1a4ce402-7e7b-42a1-b281-743b17b6620a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "79a5a355-b773-4758-8398-e4fecf11f533",
        "cursor": {
          "ref": "83c03943-1d9e-4aea-9d91-f4f1673dd9ec",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "014e6e08-da7f-49b4-a5da-32387894e785"
        },
        "item": {
          "id": "79a5a355-b773-4758-8398-e4fecf11f533",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1a4ce402-7e7b-42a1-b281-743b17b6620a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cd5514ea-8ee5-4164-901c-9a77fb906690",
        "cursor": {
          "ref": "c728d7dd-2248-4ace-b2eb-0192d65c6c6e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6a354ac3-2404-4409-ae62-f6ea77e2a4d3"
        },
        "item": {
          "id": "cd5514ea-8ee5-4164-901c-9a77fb906690",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0de402ca-153b-4c44-856b-5127dc8c7279",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cd5514ea-8ee5-4164-901c-9a77fb906690",
        "cursor": {
          "ref": "c728d7dd-2248-4ace-b2eb-0192d65c6c6e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6a354ac3-2404-4409-ae62-f6ea77e2a4d3"
        },
        "item": {
          "id": "cd5514ea-8ee5-4164-901c-9a77fb906690",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0de402ca-153b-4c44-856b-5127dc8c7279",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b9b72e51-881c-451b-9588-8799ba1024d9",
        "cursor": {
          "ref": "df8976cc-2b5f-4127-9f55-8f226e8940cb",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "06bf1e0e-a631-4ba8-9593-f72a4d2ac5ee"
        },
        "item": {
          "id": "b9b72e51-881c-451b-9588-8799ba1024d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ec92abb6-f8d7-425d-80da-c43738a95c27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b9b72e51-881c-451b-9588-8799ba1024d9",
        "cursor": {
          "ref": "df8976cc-2b5f-4127-9f55-8f226e8940cb",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "06bf1e0e-a631-4ba8-9593-f72a4d2ac5ee"
        },
        "item": {
          "id": "b9b72e51-881c-451b-9588-8799ba1024d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ec92abb6-f8d7-425d-80da-c43738a95c27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "03065bf0-54e4-4546-8e3d-7548c8c77775",
        "cursor": {
          "ref": "9f38fd86-5a31-4682-907f-a9950539d3dc",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "12268e61-271a-4b8a-9677-e568ac89b711"
        },
        "item": {
          "id": "03065bf0-54e4-4546-8e3d-7548c8c77775",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "93cdecfd-c750-4c24-bbc0-d48a97cc37a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "03065bf0-54e4-4546-8e3d-7548c8c77775",
        "cursor": {
          "ref": "9f38fd86-5a31-4682-907f-a9950539d3dc",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "12268e61-271a-4b8a-9677-e568ac89b711"
        },
        "item": {
          "id": "03065bf0-54e4-4546-8e3d-7548c8c77775",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "93cdecfd-c750-4c24-bbc0-d48a97cc37a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "74eb7f1a-9013-4262-a849-16dc596c6531",
        "cursor": {
          "ref": "74a31c21-832c-4a36-9794-a096860f4191",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a8d0062c-e19c-4b93-95cb-2a2d9f66cd26"
        },
        "item": {
          "id": "74eb7f1a-9013-4262-a849-16dc596c6531",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bbc47f3a-d55e-4aa6-9232-fee98dfc2a29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "74eb7f1a-9013-4262-a849-16dc596c6531",
        "cursor": {
          "ref": "74a31c21-832c-4a36-9794-a096860f4191",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a8d0062c-e19c-4b93-95cb-2a2d9f66cd26"
        },
        "item": {
          "id": "74eb7f1a-9013-4262-a849-16dc596c6531",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bbc47f3a-d55e-4aa6-9232-fee98dfc2a29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3f5f7816-67bc-4ac1-a4c8-0d086ab93833",
        "cursor": {
          "ref": "de9540d5-43ff-4718-89ec-508b81e9d134",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fb371d94-499b-4a7e-9ea1-71dc39a4f458"
        },
        "item": {
          "id": "3f5f7816-67bc-4ac1-a4c8-0d086ab93833",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "69200175-dd12-4ddf-8937-4e43c564def1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "3f5f7816-67bc-4ac1-a4c8-0d086ab93833",
        "cursor": {
          "ref": "de9540d5-43ff-4718-89ec-508b81e9d134",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fb371d94-499b-4a7e-9ea1-71dc39a4f458"
        },
        "item": {
          "id": "3f5f7816-67bc-4ac1-a4c8-0d086ab93833",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "69200175-dd12-4ddf-8937-4e43c564def1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a5af2f22-8e15-4696-9560-74696da84262",
        "cursor": {
          "ref": "8b47a513-4414-4261-b350-246cf9b41e77",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e3b7d74a-7698-4677-acef-97ddec51336a"
        },
        "item": {
          "id": "a5af2f22-8e15-4696-9560-74696da84262",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ccf4c59d-e3e9-4348-95f8-5fcce56b18b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a5af2f22-8e15-4696-9560-74696da84262",
        "cursor": {
          "ref": "8b47a513-4414-4261-b350-246cf9b41e77",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e3b7d74a-7698-4677-acef-97ddec51336a"
        },
        "item": {
          "id": "a5af2f22-8e15-4696-9560-74696da84262",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ccf4c59d-e3e9-4348-95f8-5fcce56b18b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "48dea2a1-7bc1-44cb-b4fb-96a994522ff9",
        "cursor": {
          "ref": "815f09e9-ecea-495d-869f-a7e4c886b0ee",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "efdc88d6-369f-4c88-bacb-12463c38e606"
        },
        "item": {
          "id": "48dea2a1-7bc1-44cb-b4fb-96a994522ff9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "598ff333-bbc2-46e2-ab06-729d981a0bef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "48dea2a1-7bc1-44cb-b4fb-96a994522ff9",
        "cursor": {
          "ref": "815f09e9-ecea-495d-869f-a7e4c886b0ee",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "efdc88d6-369f-4c88-bacb-12463c38e606"
        },
        "item": {
          "id": "48dea2a1-7bc1-44cb-b4fb-96a994522ff9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "598ff333-bbc2-46e2-ab06-729d981a0bef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "d0f1f1bb-75ee-4200-8776-1206a5a6d897",
        "cursor": {
          "ref": "9b0326cc-b54d-4700-9409-8db0e795dac2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "11f37841-c1df-4531-9874-4ed7530deacd"
        },
        "item": {
          "id": "d0f1f1bb-75ee-4200-8776-1206a5a6d897",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b296e3f3-625a-4181-af1b-e650db71e66b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "d0f1f1bb-75ee-4200-8776-1206a5a6d897",
        "cursor": {
          "ref": "9b0326cc-b54d-4700-9409-8db0e795dac2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "11f37841-c1df-4531-9874-4ed7530deacd"
        },
        "item": {
          "id": "d0f1f1bb-75ee-4200-8776-1206a5a6d897",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b296e3f3-625a-4181-af1b-e650db71e66b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1ef75157-c4cf-4fa9-937c-7a5fb4f60ebd",
        "cursor": {
          "ref": "15f81503-eb06-4f6b-bce9-8e6cfa25853c",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "62d6b8a8-3a7c-43a2-a098-f4bdf5d3fabe"
        },
        "item": {
          "id": "1ef75157-c4cf-4fa9-937c-7a5fb4f60ebd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1bd352da-d3d9-4588-8869-81750c2f64fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "1ef75157-c4cf-4fa9-937c-7a5fb4f60ebd",
        "cursor": {
          "ref": "15f81503-eb06-4f6b-bce9-8e6cfa25853c",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "62d6b8a8-3a7c-43a2-a098-f4bdf5d3fabe"
        },
        "item": {
          "id": "1ef75157-c4cf-4fa9-937c-7a5fb4f60ebd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1bd352da-d3d9-4588-8869-81750c2f64fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b9326412-aa06-4bc7-ae65-50422a116517",
        "cursor": {
          "ref": "c48900a7-9e67-48e3-967b-3f63e9e9cc1d",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0443e171-1e56-45ec-b714-f4788a81c866"
        },
        "item": {
          "id": "b9326412-aa06-4bc7-ae65-50422a116517",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a4a1aa97-b6fe-45df-a51a-40bc91bacbe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b9326412-aa06-4bc7-ae65-50422a116517",
        "cursor": {
          "ref": "c48900a7-9e67-48e3-967b-3f63e9e9cc1d",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0443e171-1e56-45ec-b714-f4788a81c866"
        },
        "item": {
          "id": "b9326412-aa06-4bc7-ae65-50422a116517",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a4a1aa97-b6fe-45df-a51a-40bc91bacbe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "bdc58cac-913e-4fa8-83cf-ab3fd715c801",
        "cursor": {
          "ref": "e71cf226-7e4c-4156-aea6-d80a31144cbf",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "905dc6e8-b4f6-47f6-b7ef-a107a75d9831"
        },
        "item": {
          "id": "bdc58cac-913e-4fa8-83cf-ab3fd715c801",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b06fa9be-a9cb-4ce8-aa3b-b01a1eef3535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "bdc58cac-913e-4fa8-83cf-ab3fd715c801",
        "cursor": {
          "ref": "e71cf226-7e4c-4156-aea6-d80a31144cbf",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "905dc6e8-b4f6-47f6-b7ef-a107a75d9831"
        },
        "item": {
          "id": "bdc58cac-913e-4fa8-83cf-ab3fd715c801",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b06fa9be-a9cb-4ce8-aa3b-b01a1eef3535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "59ca9bdb-03f8-4277-ab5a-6681c13148ea",
        "cursor": {
          "ref": "dddbc04b-2d3d-4168-a80a-a84177b2343c",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ae915309-2b71-40a8-91bf-31685e4294f6"
        },
        "item": {
          "id": "59ca9bdb-03f8-4277-ab5a-6681c13148ea",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4ba766b4-4338-420c-8a9e-846f0f2a992a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "59ca9bdb-03f8-4277-ab5a-6681c13148ea",
        "cursor": {
          "ref": "dddbc04b-2d3d-4168-a80a-a84177b2343c",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ae915309-2b71-40a8-91bf-31685e4294f6"
        },
        "item": {
          "id": "59ca9bdb-03f8-4277-ab5a-6681c13148ea",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4ba766b4-4338-420c-8a9e-846f0f2a992a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "f4333eb8-77a7-4eda-ae5a-e989b7d64e32",
        "cursor": {
          "ref": "2166d9d8-9e39-41e8-bbc0-c8c0852da3b3",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "20038897-f800-4af4-805f-32c9dd67375c"
        },
        "item": {
          "id": "f4333eb8-77a7-4eda-ae5a-e989b7d64e32",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "285b665a-0c93-40a0-bd1e-bc1f511207dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "f4333eb8-77a7-4eda-ae5a-e989b7d64e32",
        "cursor": {
          "ref": "2166d9d8-9e39-41e8-bbc0-c8c0852da3b3",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "20038897-f800-4af4-805f-32c9dd67375c"
        },
        "item": {
          "id": "f4333eb8-77a7-4eda-ae5a-e989b7d64e32",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "285b665a-0c93-40a0-bd1e-bc1f511207dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "ff5db518-d04e-4049-ac3f-6c7b1c31ec38",
        "cursor": {
          "ref": "3805eea9-89ff-4d1b-8f96-0e2ef9681949",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "122a7fd9-d079-4c0a-b999-1f68283f9fcc"
        },
        "item": {
          "id": "ff5db518-d04e-4049-ac3f-6c7b1c31ec38",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ddf89143-34db-45e5-8974-6f5e59751e19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ff5db518-d04e-4049-ac3f-6c7b1c31ec38",
        "cursor": {
          "ref": "3805eea9-89ff-4d1b-8f96-0e2ef9681949",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "122a7fd9-d079-4c0a-b999-1f68283f9fcc"
        },
        "item": {
          "id": "ff5db518-d04e-4049-ac3f-6c7b1c31ec38",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ddf89143-34db-45e5-8974-6f5e59751e19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "39d2b69c-eeaa-457f-b209-d30d50399ffb",
        "cursor": {
          "ref": "2c87bc61-ac4c-43bb-b78a-05c0989aebdf",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e62cc277-03fc-477a-8452-2633755d381e"
        },
        "item": {
          "id": "39d2b69c-eeaa-457f-b209-d30d50399ffb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "30794948-aed7-4312-8c00-1cc4ea5af68c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "39d2b69c-eeaa-457f-b209-d30d50399ffb",
        "cursor": {
          "ref": "2c87bc61-ac4c-43bb-b78a-05c0989aebdf",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e62cc277-03fc-477a-8452-2633755d381e"
        },
        "item": {
          "id": "39d2b69c-eeaa-457f-b209-d30d50399ffb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "30794948-aed7-4312-8c00-1cc4ea5af68c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a92cec33-55f9-4868-a3b1-fda2e5f63e3f",
        "cursor": {
          "ref": "3dba9ed3-84de-49c3-b8f3-27d3d0983c77",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "708b555e-ddd5-47e5-94f9-7bdb3f1d64c9"
        },
        "item": {
          "id": "a92cec33-55f9-4868-a3b1-fda2e5f63e3f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6fd28a70-c828-4c3b-9f15-9dccbbd4d9a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "a92cec33-55f9-4868-a3b1-fda2e5f63e3f",
        "cursor": {
          "ref": "3dba9ed3-84de-49c3-b8f3-27d3d0983c77",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "708b555e-ddd5-47e5-94f9-7bdb3f1d64c9"
        },
        "item": {
          "id": "a92cec33-55f9-4868-a3b1-fda2e5f63e3f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6fd28a70-c828-4c3b-9f15-9dccbbd4d9a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "cfa0516a-c78f-462c-a0ad-9c89da35fc1d",
        "cursor": {
          "ref": "1b8b2678-244c-4f07-81b2-cf89add3dbe1",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "05a09044-98a6-4ee3-aa13-9ce86e32bce0"
        },
        "item": {
          "id": "cfa0516a-c78f-462c-a0ad-9c89da35fc1d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "613cf6a4-a0ae-4e17-9ebd-661e1bada2ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "cfa0516a-c78f-462c-a0ad-9c89da35fc1d",
        "cursor": {
          "ref": "1b8b2678-244c-4f07-81b2-cf89add3dbe1",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "05a09044-98a6-4ee3-aa13-9ce86e32bce0"
        },
        "item": {
          "id": "cfa0516a-c78f-462c-a0ad-9c89da35fc1d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "613cf6a4-a0ae-4e17-9ebd-661e1bada2ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a99e2f39-56df-4d51-8bde-793ade6ede21",
        "cursor": {
          "ref": "355be8b8-c494-445b-b24e-a7f9b8ef9471",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fd099ae-efbd-4d99-9843-027f4e6fc2b2"
        },
        "item": {
          "id": "a99e2f39-56df-4d51-8bde-793ade6ede21",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "59aec320-55eb-4b97-81d8-e0530d133d44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a99e2f39-56df-4d51-8bde-793ade6ede21",
        "cursor": {
          "ref": "355be8b8-c494-445b-b24e-a7f9b8ef9471",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fd099ae-efbd-4d99-9843-027f4e6fc2b2"
        },
        "item": {
          "id": "a99e2f39-56df-4d51-8bde-793ade6ede21",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "59aec320-55eb-4b97-81d8-e0530d133d44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c070fb46-74e6-4de8-ac55-9f5116f66335",
        "cursor": {
          "ref": "2ace9b46-0074-45a7-a279-3437013a216f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8503ccdf-52a9-42cf-b79c-248765639207"
        },
        "item": {
          "id": "c070fb46-74e6-4de8-ac55-9f5116f66335",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "061b1557-04cf-493f-acbe-94346bca9f31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c070fb46-74e6-4de8-ac55-9f5116f66335",
        "cursor": {
          "ref": "2ace9b46-0074-45a7-a279-3437013a216f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8503ccdf-52a9-42cf-b79c-248765639207"
        },
        "item": {
          "id": "c070fb46-74e6-4de8-ac55-9f5116f66335",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "061b1557-04cf-493f-acbe-94346bca9f31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "41a9936b-6c56-4746-a5c8-75d965d53fd2",
        "cursor": {
          "ref": "48196f70-1998-4762-92ab-0b269742bded",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "413a0a17-a89a-4118-b73e-32605c9daf8a"
        },
        "item": {
          "id": "41a9936b-6c56-4746-a5c8-75d965d53fd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3ee349dc-ba93-41aa-aecc-439d888582ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "41a9936b-6c56-4746-a5c8-75d965d53fd2",
        "cursor": {
          "ref": "48196f70-1998-4762-92ab-0b269742bded",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "413a0a17-a89a-4118-b73e-32605c9daf8a"
        },
        "item": {
          "id": "41a9936b-6c56-4746-a5c8-75d965d53fd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3ee349dc-ba93-41aa-aecc-439d888582ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "013e87bd-6f31-4bfb-a49b-3cf86a4fd494",
        "cursor": {
          "ref": "759246c2-d8b4-496a-8cbc-04b5145a886f",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f694ae77-3a22-42a6-8aaf-6ec195c6fef9"
        },
        "item": {
          "id": "013e87bd-6f31-4bfb-a49b-3cf86a4fd494",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "57d0c9fc-c852-49e2-8ce9-583f63da3353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "013e87bd-6f31-4bfb-a49b-3cf86a4fd494",
        "cursor": {
          "ref": "759246c2-d8b4-496a-8cbc-04b5145a886f",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f694ae77-3a22-42a6-8aaf-6ec195c6fef9"
        },
        "item": {
          "id": "013e87bd-6f31-4bfb-a49b-3cf86a4fd494",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "57d0c9fc-c852-49e2-8ce9-583f63da3353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1e016d01-e10d-4c3e-93fc-b8014bafc513",
        "cursor": {
          "ref": "e11c5a26-12a0-4873-bfd2-91ff72da2bd1",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "56e88579-6ad4-42c0-b2b2-76e613c22d8c"
        },
        "item": {
          "id": "1e016d01-e10d-4c3e-93fc-b8014bafc513",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "95cf549a-aa14-4874-b3dd-fd2a6c61f779",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "1e016d01-e10d-4c3e-93fc-b8014bafc513",
        "cursor": {
          "ref": "e11c5a26-12a0-4873-bfd2-91ff72da2bd1",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "56e88579-6ad4-42c0-b2b2-76e613c22d8c"
        },
        "item": {
          "id": "1e016d01-e10d-4c3e-93fc-b8014bafc513",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "95cf549a-aa14-4874-b3dd-fd2a6c61f779",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "cc99b861-523b-4a0d-a58f-52dce3b7ad41",
        "cursor": {
          "ref": "24260c83-97fb-4837-903e-344176326759",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c727b97c-2abb-40ad-aad2-27fc58344190"
        },
        "item": {
          "id": "cc99b861-523b-4a0d-a58f-52dce3b7ad41",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9cd7e63e-5a4d-4d4f-86bd-d5ebe5cb58f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "cc99b861-523b-4a0d-a58f-52dce3b7ad41",
        "cursor": {
          "ref": "24260c83-97fb-4837-903e-344176326759",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c727b97c-2abb-40ad-aad2-27fc58344190"
        },
        "item": {
          "id": "cc99b861-523b-4a0d-a58f-52dce3b7ad41",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9cd7e63e-5a4d-4d4f-86bd-d5ebe5cb58f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "c919c291-11ed-4c53-92ff-fbc94f201f3b",
        "cursor": {
          "ref": "90efb7db-90b2-4b10-9add-4b786f378045",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7a4f94b2-ae17-4ab5-8b54-0b46cf421b55"
        },
        "item": {
          "id": "c919c291-11ed-4c53-92ff-fbc94f201f3b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e2afe7ac-38c5-41b8-a308-25d65ebb5540",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "c919c291-11ed-4c53-92ff-fbc94f201f3b",
        "cursor": {
          "ref": "90efb7db-90b2-4b10-9add-4b786f378045",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7a4f94b2-ae17-4ab5-8b54-0b46cf421b55"
        },
        "item": {
          "id": "c919c291-11ed-4c53-92ff-fbc94f201f3b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e2afe7ac-38c5-41b8-a308-25d65ebb5540",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "07a14ec3-925e-4987-a0f5-8a98fb62349d",
        "cursor": {
          "ref": "87e47699-5438-4796-9f77-9cf97659e83b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7f231ca8-92ef-4372-9294-37cd5432db97"
        },
        "item": {
          "id": "07a14ec3-925e-4987-a0f5-8a98fb62349d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9206a3b1-b975-4af8-b461-e5ee0ddd635c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "07a14ec3-925e-4987-a0f5-8a98fb62349d",
        "cursor": {
          "ref": "87e47699-5438-4796-9f77-9cf97659e83b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7f231ca8-92ef-4372-9294-37cd5432db97"
        },
        "item": {
          "id": "07a14ec3-925e-4987-a0f5-8a98fb62349d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9206a3b1-b975-4af8-b461-e5ee0ddd635c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "8d75e47c-e74d-4af1-91a4-9bdc2bacd02f",
        "cursor": {
          "ref": "1902421a-3b47-45f6-97c9-1f5364502b11",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "395a1fcf-a3d1-4385-b863-f5a9195c139d"
        },
        "item": {
          "id": "8d75e47c-e74d-4af1-91a4-9bdc2bacd02f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "eed2a7ab-3a1d-41d2-bcbb-d21f8a2de0be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8d75e47c-e74d-4af1-91a4-9bdc2bacd02f",
        "cursor": {
          "ref": "1902421a-3b47-45f6-97c9-1f5364502b11",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "395a1fcf-a3d1-4385-b863-f5a9195c139d"
        },
        "item": {
          "id": "8d75e47c-e74d-4af1-91a4-9bdc2bacd02f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "eed2a7ab-3a1d-41d2-bcbb-d21f8a2de0be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "c3c8c667-92e9-492b-9336-576680557432",
        "cursor": {
          "ref": "62cb418f-c5d8-459c-a2e2-2f9e7a6ebb35",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "532473a1-ef51-40c2-842d-eb783a1240b9"
        },
        "item": {
          "id": "c3c8c667-92e9-492b-9336-576680557432",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d4fb87d9-eeac-4eac-923d-0bee6103e9a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c3c8c667-92e9-492b-9336-576680557432",
        "cursor": {
          "ref": "62cb418f-c5d8-459c-a2e2-2f9e7a6ebb35",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "532473a1-ef51-40c2-842d-eb783a1240b9"
        },
        "item": {
          "id": "c3c8c667-92e9-492b-9336-576680557432",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d4fb87d9-eeac-4eac-923d-0bee6103e9a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c933ec2c-0088-4dd5-a0f7-a9cbb8ca1823",
        "cursor": {
          "ref": "a1eff940-d355-4fa1-83fc-6ad23404adb4",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4d5a7f41-b97e-4169-88fc-0af45aa6db67"
        },
        "item": {
          "id": "c933ec2c-0088-4dd5-a0f7-a9cbb8ca1823",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79d4b739-4f34-4f1d-999a-02f95cfe3c05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c933ec2c-0088-4dd5-a0f7-a9cbb8ca1823",
        "cursor": {
          "ref": "a1eff940-d355-4fa1-83fc-6ad23404adb4",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4d5a7f41-b97e-4169-88fc-0af45aa6db67"
        },
        "item": {
          "id": "c933ec2c-0088-4dd5-a0f7-a9cbb8ca1823",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79d4b739-4f34-4f1d-999a-02f95cfe3c05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "88ee8921-5703-492d-9d90-5458ccd1389f",
        "cursor": {
          "ref": "0495a3ba-267f-450c-9921-2fc4de2040a4",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5bbfcdb4-733a-41a3-bd70-afa072b9f990"
        },
        "item": {
          "id": "88ee8921-5703-492d-9d90-5458ccd1389f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d00422bd-4d25-4c71-a92b-2f2e2bde873e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "88ee8921-5703-492d-9d90-5458ccd1389f",
        "cursor": {
          "ref": "0495a3ba-267f-450c-9921-2fc4de2040a4",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5bbfcdb4-733a-41a3-bd70-afa072b9f990"
        },
        "item": {
          "id": "88ee8921-5703-492d-9d90-5458ccd1389f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d00422bd-4d25-4c71-a92b-2f2e2bde873e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "28e9fc72-7abb-4cee-9cce-10aa9d4bde98",
        "cursor": {
          "ref": "253225a1-479e-4698-b0e7-adfeb7081537",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0c1be5c2-1c12-4419-8ee1-dda02e9cd2f9"
        },
        "item": {
          "id": "28e9fc72-7abb-4cee-9cce-10aa9d4bde98",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "af5f90e4-ef4e-4398-b68f-2211c93ab7b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "28e9fc72-7abb-4cee-9cce-10aa9d4bde98",
        "cursor": {
          "ref": "253225a1-479e-4698-b0e7-adfeb7081537",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0c1be5c2-1c12-4419-8ee1-dda02e9cd2f9"
        },
        "item": {
          "id": "28e9fc72-7abb-4cee-9cce-10aa9d4bde98",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "af5f90e4-ef4e-4398-b68f-2211c93ab7b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d3fb30c0-2022-4534-9315-6de4e9289c59",
        "cursor": {
          "ref": "5e93e965-5d82-4a0e-b521-6c842c14f26e",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6c51c829-4cb0-4d98-b46e-8db470f28152"
        },
        "item": {
          "id": "d3fb30c0-2022-4534-9315-6de4e9289c59",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4ba0eeab-bc28-403b-8ac9-465fae2763c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d3fb30c0-2022-4534-9315-6de4e9289c59",
        "cursor": {
          "ref": "5e93e965-5d82-4a0e-b521-6c842c14f26e",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6c51c829-4cb0-4d98-b46e-8db470f28152"
        },
        "item": {
          "id": "d3fb30c0-2022-4534-9315-6de4e9289c59",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4ba0eeab-bc28-403b-8ac9-465fae2763c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "714e936a-a1c6-4b07-812e-b49ac1ada875",
        "cursor": {
          "ref": "f68033e9-b2aa-413f-be2d-5a0cfad0171f",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "34aa2953-89f0-47b2-a0e3-0df7ef94f1a6"
        },
        "item": {
          "id": "714e936a-a1c6-4b07-812e-b49ac1ada875",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9d19c42a-da1d-4036-abea-af4844e41fa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "714e936a-a1c6-4b07-812e-b49ac1ada875",
        "cursor": {
          "ref": "f68033e9-b2aa-413f-be2d-5a0cfad0171f",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "34aa2953-89f0-47b2-a0e3-0df7ef94f1a6"
        },
        "item": {
          "id": "714e936a-a1c6-4b07-812e-b49ac1ada875",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9d19c42a-da1d-4036-abea-af4844e41fa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "06efb57d-0eb9-410a-90b8-c70090aa2828",
        "cursor": {
          "ref": "456e88d6-2c35-4224-a8a4-9e0a764ea244",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4c0cd7a9-7915-4528-8e6e-9f0ee5bf5c20"
        },
        "item": {
          "id": "06efb57d-0eb9-410a-90b8-c70090aa2828",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccb46b56-b286-4e7d-981d-d421a139dfeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "06efb57d-0eb9-410a-90b8-c70090aa2828",
        "cursor": {
          "ref": "456e88d6-2c35-4224-a8a4-9e0a764ea244",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4c0cd7a9-7915-4528-8e6e-9f0ee5bf5c20"
        },
        "item": {
          "id": "06efb57d-0eb9-410a-90b8-c70090aa2828",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccb46b56-b286-4e7d-981d-d421a139dfeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8f56d166-1eae-4a98-93ae-1f86e0a18a48",
        "cursor": {
          "ref": "137d0b4c-b72f-4a9e-85b5-0a419283aa58",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "22d87f23-8bd1-459f-9d28-bf977e6c450e"
        },
        "item": {
          "id": "8f56d166-1eae-4a98-93ae-1f86e0a18a48",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5c7ce529-63c6-47df-a318-b747fef12570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8f56d166-1eae-4a98-93ae-1f86e0a18a48",
        "cursor": {
          "ref": "137d0b4c-b72f-4a9e-85b5-0a419283aa58",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "22d87f23-8bd1-459f-9d28-bf977e6c450e"
        },
        "item": {
          "id": "8f56d166-1eae-4a98-93ae-1f86e0a18a48",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5c7ce529-63c6-47df-a318-b747fef12570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4a942ce6-8cc5-4224-a987-767612820700",
        "cursor": {
          "ref": "3f51963b-43e9-46ae-824a-c548f1fdd4cc",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cfe74a6a-8c9e-4766-8387-52e79ce5d059"
        },
        "item": {
          "id": "4a942ce6-8cc5-4224-a987-767612820700",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1d14ae77-38ce-455b-b96e-0ce2a028ff5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4a942ce6-8cc5-4224-a987-767612820700",
        "cursor": {
          "ref": "3f51963b-43e9-46ae-824a-c548f1fdd4cc",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cfe74a6a-8c9e-4766-8387-52e79ce5d059"
        },
        "item": {
          "id": "4a942ce6-8cc5-4224-a987-767612820700",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1d14ae77-38ce-455b-b96e-0ce2a028ff5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "db603e41-7dea-47cf-a150-28d536daafc5",
        "cursor": {
          "ref": "c9805fe9-dfa3-4e0e-b910-4325e42a5003",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e95f6772-9b03-416c-b409-62b6b6ba7a23"
        },
        "item": {
          "id": "db603e41-7dea-47cf-a150-28d536daafc5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9dfcbc6-3338-4491-8853-06adeb9b699a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "db603e41-7dea-47cf-a150-28d536daafc5",
        "cursor": {
          "ref": "c9805fe9-dfa3-4e0e-b910-4325e42a5003",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e95f6772-9b03-416c-b409-62b6b6ba7a23"
        },
        "item": {
          "id": "db603e41-7dea-47cf-a150-28d536daafc5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9dfcbc6-3338-4491-8853-06adeb9b699a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ac5c50fe-c5fa-435d-9d1e-719815e04d1f",
        "cursor": {
          "ref": "863dfeb5-5f49-467c-9148-61a9a860c3ef",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "38eb16fe-da60-4f48-91b1-5f7e3b3c1c99"
        },
        "item": {
          "id": "ac5c50fe-c5fa-435d-9d1e-719815e04d1f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "82fc0c04-567c-46ef-8829-ec5eebd3ae07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ac5c50fe-c5fa-435d-9d1e-719815e04d1f",
        "cursor": {
          "ref": "863dfeb5-5f49-467c-9148-61a9a860c3ef",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "38eb16fe-da60-4f48-91b1-5f7e3b3c1c99"
        },
        "item": {
          "id": "ac5c50fe-c5fa-435d-9d1e-719815e04d1f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "82fc0c04-567c-46ef-8829-ec5eebd3ae07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "edbd0701-0a80-4f16-8717-dfbf1ab64805",
        "cursor": {
          "ref": "0ab85840-bebf-427d-9b36-a49cc7855844",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "68d3a56a-8989-4dbc-9815-2fbc75cf2507"
        },
        "item": {
          "id": "edbd0701-0a80-4f16-8717-dfbf1ab64805",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e639cb14-865f-434e-977d-65cc1e75553d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "edbd0701-0a80-4f16-8717-dfbf1ab64805",
        "cursor": {
          "ref": "0ab85840-bebf-427d-9b36-a49cc7855844",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "68d3a56a-8989-4dbc-9815-2fbc75cf2507"
        },
        "item": {
          "id": "edbd0701-0a80-4f16-8717-dfbf1ab64805",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e639cb14-865f-434e-977d-65cc1e75553d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "bfc5a344-0915-4ff0-9b96-f2e3507fc442",
        "cursor": {
          "ref": "db8b588a-4410-4990-8122-4c95b6b129e0",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e6120b43-1090-48e7-8b88-6c12c3ccc4b8"
        },
        "item": {
          "id": "bfc5a344-0915-4ff0-9b96-f2e3507fc442",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cfd29749-37c5-41dd-91e0-2b358e07113b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "bfc5a344-0915-4ff0-9b96-f2e3507fc442",
        "cursor": {
          "ref": "db8b588a-4410-4990-8122-4c95b6b129e0",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e6120b43-1090-48e7-8b88-6c12c3ccc4b8"
        },
        "item": {
          "id": "bfc5a344-0915-4ff0-9b96-f2e3507fc442",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cfd29749-37c5-41dd-91e0-2b358e07113b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "ce9f4f00-8bdd-46da-93d8-7e4cb906480b",
        "cursor": {
          "ref": "58a8d135-2524-4cbf-9647-b98914376cdc",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23e756a3-3df3-4b54-bb83-941929bdb113"
        },
        "item": {
          "id": "ce9f4f00-8bdd-46da-93d8-7e4cb906480b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d123a37e-5f00-4d9a-bf31-832ad224fc6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ce9f4f00-8bdd-46da-93d8-7e4cb906480b",
        "cursor": {
          "ref": "58a8d135-2524-4cbf-9647-b98914376cdc",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23e756a3-3df3-4b54-bb83-941929bdb113"
        },
        "item": {
          "id": "ce9f4f00-8bdd-46da-93d8-7e4cb906480b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d123a37e-5f00-4d9a-bf31-832ad224fc6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "a4b70f8a-7c8c-4350-ad97-83bef7e2c43e",
        "cursor": {
          "ref": "4c1e83c2-5571-47d9-b905-db06e0ccc4be",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b963ebdb-cd7a-4c7f-8a0a-512708814e62"
        },
        "item": {
          "id": "a4b70f8a-7c8c-4350-ad97-83bef7e2c43e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bc3469d4-6e90-4b20-8055-0b44f8aaef0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a4b70f8a-7c8c-4350-ad97-83bef7e2c43e",
        "cursor": {
          "ref": "4c1e83c2-5571-47d9-b905-db06e0ccc4be",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b963ebdb-cd7a-4c7f-8a0a-512708814e62"
        },
        "item": {
          "id": "a4b70f8a-7c8c-4350-ad97-83bef7e2c43e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bc3469d4-6e90-4b20-8055-0b44f8aaef0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "18ca75f8-58a5-4c94-8467-8519432994b1",
        "cursor": {
          "ref": "5fdc08b8-448e-4ed2-962c-61b509f372f2",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "41988d77-1684-4223-96be-5fef8f0d4041"
        },
        "item": {
          "id": "18ca75f8-58a5-4c94-8467-8519432994b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c95256bd-681d-41e4-8508-181ff61e9fbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "18ca75f8-58a5-4c94-8467-8519432994b1",
        "cursor": {
          "ref": "5fdc08b8-448e-4ed2-962c-61b509f372f2",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "41988d77-1684-4223-96be-5fef8f0d4041"
        },
        "item": {
          "id": "18ca75f8-58a5-4c94-8467-8519432994b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c95256bd-681d-41e4-8508-181ff61e9fbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "4d3fe74d-cde4-431a-ae29-34d23128720d",
        "cursor": {
          "ref": "baf2dfe2-0a1b-40c9-8fc4-ace7ac1e2738",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "99dde8a1-0c88-4a43-917a-ee82306b5273"
        },
        "item": {
          "id": "4d3fe74d-cde4-431a-ae29-34d23128720d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f0d80e91-1fe1-434b-aa8d-27a625ced6cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "4d3fe74d-cde4-431a-ae29-34d23128720d",
        "cursor": {
          "ref": "baf2dfe2-0a1b-40c9-8fc4-ace7ac1e2738",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "99dde8a1-0c88-4a43-917a-ee82306b5273"
        },
        "item": {
          "id": "4d3fe74d-cde4-431a-ae29-34d23128720d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f0d80e91-1fe1-434b-aa8d-27a625ced6cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "de838227-aab4-41cf-af64-ce7c9477a571",
        "cursor": {
          "ref": "87553348-c17a-4173-8c98-945492018e96",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f115e077-140e-4aad-a115-dfd4c821b274"
        },
        "item": {
          "id": "de838227-aab4-41cf-af64-ce7c9477a571",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9829ccf5-2a6c-4f62-ae0a-b2ef80eab033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "de838227-aab4-41cf-af64-ce7c9477a571",
        "cursor": {
          "ref": "87553348-c17a-4173-8c98-945492018e96",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f115e077-140e-4aad-a115-dfd4c821b274"
        },
        "item": {
          "id": "de838227-aab4-41cf-af64-ce7c9477a571",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9829ccf5-2a6c-4f62-ae0a-b2ef80eab033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "c330ab24-2386-4a37-9b1a-57c6bc633b0c",
        "cursor": {
          "ref": "46ed633b-1a32-4427-8577-6584d4c6bb77",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea290005-8068-410d-990f-ad8b5b3efabe"
        },
        "item": {
          "id": "c330ab24-2386-4a37-9b1a-57c6bc633b0c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "370c1d67-aa0c-407b-9334-4c28496ef3ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "c330ab24-2386-4a37-9b1a-57c6bc633b0c",
        "cursor": {
          "ref": "46ed633b-1a32-4427-8577-6584d4c6bb77",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea290005-8068-410d-990f-ad8b5b3efabe"
        },
        "item": {
          "id": "c330ab24-2386-4a37-9b1a-57c6bc633b0c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "370c1d67-aa0c-407b-9334-4c28496ef3ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "a4bdee4e-f8e4-44de-85cd-d510e2efde0d",
        "cursor": {
          "ref": "4e4aebe0-fe48-43a0-ba13-3991ddda2ad1",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "20d3683e-32b6-4447-b11f-69304e597571"
        },
        "item": {
          "id": "a4bdee4e-f8e4-44de-85cd-d510e2efde0d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9989e7ba-e6a8-4f9d-be35-e7496a2b7418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "a4bdee4e-f8e4-44de-85cd-d510e2efde0d",
        "cursor": {
          "ref": "4e4aebe0-fe48-43a0-ba13-3991ddda2ad1",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "20d3683e-32b6-4447-b11f-69304e597571"
        },
        "item": {
          "id": "a4bdee4e-f8e4-44de-85cd-d510e2efde0d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9989e7ba-e6a8-4f9d-be35-e7496a2b7418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "80f89f91-f186-4ea2-82fb-fa577edce6c1",
        "cursor": {
          "ref": "2350a886-816a-4c30-904a-db6daf278f80",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aa6461f8-87eb-4e6c-beaa-7bbc88877930"
        },
        "item": {
          "id": "80f89f91-f186-4ea2-82fb-fa577edce6c1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "73dea03f-5a06-463b-b5b4-bf67943f07db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "80f89f91-f186-4ea2-82fb-fa577edce6c1",
        "cursor": {
          "ref": "2350a886-816a-4c30-904a-db6daf278f80",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aa6461f8-87eb-4e6c-beaa-7bbc88877930"
        },
        "item": {
          "id": "80f89f91-f186-4ea2-82fb-fa577edce6c1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "73dea03f-5a06-463b-b5b4-bf67943f07db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "954b003d-787a-4f34-b6f7-68704e1345d6",
        "cursor": {
          "ref": "30627064-79a3-4697-b79d-77f7326bc752",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d88e6740-e5dd-4278-90dd-44560769273f"
        },
        "item": {
          "id": "954b003d-787a-4f34-b6f7-68704e1345d6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cfc09a1a-f1ef-47e0-a983-4845b09ccaa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "954b003d-787a-4f34-b6f7-68704e1345d6",
        "cursor": {
          "ref": "30627064-79a3-4697-b79d-77f7326bc752",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d88e6740-e5dd-4278-90dd-44560769273f"
        },
        "item": {
          "id": "954b003d-787a-4f34-b6f7-68704e1345d6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cfc09a1a-f1ef-47e0-a983-4845b09ccaa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "8b741664-3619-4e7d-99d2-2c5fc9dae3ac",
        "cursor": {
          "ref": "c2250900-baa5-41e3-87c9-6aee77124a4e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb1c765e-70b7-43ef-bc11-15d87b0d706d"
        },
        "item": {
          "id": "8b741664-3619-4e7d-99d2-2c5fc9dae3ac",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dd9e530e-57bb-45c3-b00f-0613d4648f4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8b741664-3619-4e7d-99d2-2c5fc9dae3ac",
        "cursor": {
          "ref": "c2250900-baa5-41e3-87c9-6aee77124a4e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb1c765e-70b7-43ef-bc11-15d87b0d706d"
        },
        "item": {
          "id": "8b741664-3619-4e7d-99d2-2c5fc9dae3ac",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dd9e530e-57bb-45c3-b00f-0613d4648f4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "ebe012e1-b0d8-4921-acff-7e40921427c1",
        "cursor": {
          "ref": "bd4bdf44-071b-4b53-9e8e-b8d9f4c95719",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1cbde72e-25d8-4a6c-8e60-c4dd236edd2b"
        },
        "item": {
          "id": "ebe012e1-b0d8-4921-acff-7e40921427c1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "74adadb7-dee1-4593-a8b3-dde589d00996",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ebe012e1-b0d8-4921-acff-7e40921427c1",
        "cursor": {
          "ref": "bd4bdf44-071b-4b53-9e8e-b8d9f4c95719",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1cbde72e-25d8-4a6c-8e60-c4dd236edd2b"
        },
        "item": {
          "id": "ebe012e1-b0d8-4921-acff-7e40921427c1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "74adadb7-dee1-4593-a8b3-dde589d00996",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9597e5fe-bc00-4794-8e58-865a1083f03c",
        "cursor": {
          "ref": "870c17a6-5f10-4ef8-9417-2e1474ea37cc",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c0dbd97f-1812-4c04-87fe-5c37d75f8546"
        },
        "item": {
          "id": "9597e5fe-bc00-4794-8e58-865a1083f03c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "acd3b91f-0d19-483f-aa40-d4abc352cb53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9597e5fe-bc00-4794-8e58-865a1083f03c",
        "cursor": {
          "ref": "870c17a6-5f10-4ef8-9417-2e1474ea37cc",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c0dbd97f-1812-4c04-87fe-5c37d75f8546"
        },
        "item": {
          "id": "9597e5fe-bc00-4794-8e58-865a1083f03c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "acd3b91f-0d19-483f-aa40-d4abc352cb53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fea50490-d9ca-4081-abff-6ad96dca8f49",
        "cursor": {
          "ref": "6c9e73f2-bec6-4382-9dd6-ff26bfbf7623",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aa2f7575-c426-48fa-b246-0470807cacce"
        },
        "item": {
          "id": "fea50490-d9ca-4081-abff-6ad96dca8f49",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e1b09ab2-62ce-4076-9a11-b504846d7714",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fea50490-d9ca-4081-abff-6ad96dca8f49",
        "cursor": {
          "ref": "6c9e73f2-bec6-4382-9dd6-ff26bfbf7623",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aa2f7575-c426-48fa-b246-0470807cacce"
        },
        "item": {
          "id": "fea50490-d9ca-4081-abff-6ad96dca8f49",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e1b09ab2-62ce-4076-9a11-b504846d7714",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "24b8db99-b755-4a49-b79b-97acb945ddbb",
        "cursor": {
          "ref": "27fbb49d-bf00-445b-b718-9459276eba90",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ffcf8434-9de7-425d-9bd6-d3e19ed70c9e"
        },
        "item": {
          "id": "24b8db99-b755-4a49-b79b-97acb945ddbb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "042595af-a51c-4b0f-8e66-a901e5134924",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "24b8db99-b755-4a49-b79b-97acb945ddbb",
        "cursor": {
          "ref": "27fbb49d-bf00-445b-b718-9459276eba90",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ffcf8434-9de7-425d-9bd6-d3e19ed70c9e"
        },
        "item": {
          "id": "24b8db99-b755-4a49-b79b-97acb945ddbb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "042595af-a51c-4b0f-8e66-a901e5134924",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "35eae333-6953-4593-9d0b-d95b67e24a2f",
        "cursor": {
          "ref": "bd48c9e0-6df4-4539-a80b-f2d7015adc16",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e4a48291-41a6-4633-8de6-34e95f56d769"
        },
        "item": {
          "id": "35eae333-6953-4593-9d0b-d95b67e24a2f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ad0b818-adf0-4719-8067-02d39f2efc24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "35eae333-6953-4593-9d0b-d95b67e24a2f",
        "cursor": {
          "ref": "bd48c9e0-6df4-4539-a80b-f2d7015adc16",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e4a48291-41a6-4633-8de6-34e95f56d769"
        },
        "item": {
          "id": "35eae333-6953-4593-9d0b-d95b67e24a2f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ad0b818-adf0-4719-8067-02d39f2efc24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a6d20b6b-9951-4c7c-b83d-07f0f4d42889",
        "cursor": {
          "ref": "6af44048-1bd5-46f4-959e-3f559a0fdf61",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "db67decf-512a-4ab8-9f3e-8a0af55bd656"
        },
        "item": {
          "id": "a6d20b6b-9951-4c7c-b83d-07f0f4d42889",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "96adfba1-12a8-4756-93b8-726f780fe7c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "a6d20b6b-9951-4c7c-b83d-07f0f4d42889",
        "cursor": {
          "ref": "6af44048-1bd5-46f4-959e-3f559a0fdf61",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "db67decf-512a-4ab8-9f3e-8a0af55bd656"
        },
        "item": {
          "id": "a6d20b6b-9951-4c7c-b83d-07f0f4d42889",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "96adfba1-12a8-4756-93b8-726f780fe7c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "c7afe60d-0589-42c8-9e8c-8bf70837e4e7",
        "cursor": {
          "ref": "4ea3a479-abad-49e0-8429-67151a2361fc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a069e814-315e-4cc3-baac-78bb13f88fe9"
        },
        "item": {
          "id": "c7afe60d-0589-42c8-9e8c-8bf70837e4e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6f298e65-616f-408d-afed-09836a05c061",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "c7afe60d-0589-42c8-9e8c-8bf70837e4e7",
        "cursor": {
          "ref": "4ea3a479-abad-49e0-8429-67151a2361fc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a069e814-315e-4cc3-baac-78bb13f88fe9"
        },
        "item": {
          "id": "c7afe60d-0589-42c8-9e8c-8bf70837e4e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6f298e65-616f-408d-afed-09836a05c061",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "57c4fa5b-72d3-4f51-a747-e2de49fd87b0",
        "cursor": {
          "ref": "1d59c925-a7b8-40bf-b2de-d921b5c1f8d9",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "44656c0f-42f6-4119-a5da-1b9cf11e7f04"
        },
        "item": {
          "id": "57c4fa5b-72d3-4f51-a747-e2de49fd87b0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "782adcf9-c102-445d-86eb-b2c2afb50d98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "57c4fa5b-72d3-4f51-a747-e2de49fd87b0",
        "cursor": {
          "ref": "1d59c925-a7b8-40bf-b2de-d921b5c1f8d9",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "44656c0f-42f6-4119-a5da-1b9cf11e7f04"
        },
        "item": {
          "id": "57c4fa5b-72d3-4f51-a747-e2de49fd87b0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "782adcf9-c102-445d-86eb-b2c2afb50d98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "13497045-a8f3-4acb-9384-b50aa1c73ced",
        "cursor": {
          "ref": "f36d23c3-0021-4570-b14f-4b0064f44194",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "037f036d-0b4b-4eeb-be82-08a2d05533ff"
        },
        "item": {
          "id": "13497045-a8f3-4acb-9384-b50aa1c73ced",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7b46e347-74ed-4d02-8118-935f0730870d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "13497045-a8f3-4acb-9384-b50aa1c73ced",
        "cursor": {
          "ref": "f36d23c3-0021-4570-b14f-4b0064f44194",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "037f036d-0b4b-4eeb-be82-08a2d05533ff"
        },
        "item": {
          "id": "13497045-a8f3-4acb-9384-b50aa1c73ced",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7b46e347-74ed-4d02-8118-935f0730870d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7c48b15e-9d83-455a-a8d5-0050130d0e9c",
        "cursor": {
          "ref": "6c34ce4d-e375-46c2-b382-d879361ba1ce",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "66c41c29-4ade-4204-8417-8e3ecd3b4fcd"
        },
        "item": {
          "id": "7c48b15e-9d83-455a-a8d5-0050130d0e9c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0ccdfc0b-e1eb-42d8-9abe-4e609407f85e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7c48b15e-9d83-455a-a8d5-0050130d0e9c",
        "cursor": {
          "ref": "6c34ce4d-e375-46c2-b382-d879361ba1ce",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "66c41c29-4ade-4204-8417-8e3ecd3b4fcd"
        },
        "item": {
          "id": "7c48b15e-9d83-455a-a8d5-0050130d0e9c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0ccdfc0b-e1eb-42d8-9abe-4e609407f85e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d63126f6-f8b1-4fa3-88d2-42b957899c59",
        "cursor": {
          "ref": "2947c7d3-419e-44c0-a55f-a16d66a7ae84",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36bac6ad-ea71-4358-9067-95383fb66235"
        },
        "item": {
          "id": "d63126f6-f8b1-4fa3-88d2-42b957899c59",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2bc46f03-f8e3-4c9f-8141-ba8c70a37172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d63126f6-f8b1-4fa3-88d2-42b957899c59",
        "cursor": {
          "ref": "2947c7d3-419e-44c0-a55f-a16d66a7ae84",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36bac6ad-ea71-4358-9067-95383fb66235"
        },
        "item": {
          "id": "d63126f6-f8b1-4fa3-88d2-42b957899c59",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2bc46f03-f8e3-4c9f-8141-ba8c70a37172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "31d0be42-b3a2-4658-9d9e-5068edeb677f",
        "cursor": {
          "ref": "0b210d3e-b1d2-4da4-b83e-055f88cd8125",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc46c087-5c56-4f74-950b-a3c6b052de39"
        },
        "item": {
          "id": "31d0be42-b3a2-4658-9d9e-5068edeb677f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0f7ba971-c8ab-483e-9a6e-a4ecd1f03272",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "31d0be42-b3a2-4658-9d9e-5068edeb677f",
        "cursor": {
          "ref": "0b210d3e-b1d2-4da4-b83e-055f88cd8125",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc46c087-5c56-4f74-950b-a3c6b052de39"
        },
        "item": {
          "id": "31d0be42-b3a2-4658-9d9e-5068edeb677f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0f7ba971-c8ab-483e-9a6e-a4ecd1f03272",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "34c20f1b-2330-4d03-a385-5aaf505eee44",
        "cursor": {
          "ref": "6c2bf94b-a7e6-4c21-aa5f-4c7fb4700c93",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "81a14d70-3ddf-41f1-8f2a-e38f5e7aa648"
        },
        "item": {
          "id": "34c20f1b-2330-4d03-a385-5aaf505eee44",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "023d01dc-eee4-43c0-a95b-325e9f829e6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "34c20f1b-2330-4d03-a385-5aaf505eee44",
        "cursor": {
          "ref": "6c2bf94b-a7e6-4c21-aa5f-4c7fb4700c93",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "81a14d70-3ddf-41f1-8f2a-e38f5e7aa648"
        },
        "item": {
          "id": "34c20f1b-2330-4d03-a385-5aaf505eee44",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "023d01dc-eee4-43c0-a95b-325e9f829e6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "05d9de8d-7e3f-43c2-81f2-16989a59c01d",
        "cursor": {
          "ref": "951b7fa3-8d78-4cca-a3d1-797ae2f1ddb6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "685cd0b3-fff4-496d-91b0-505c06ccbc26"
        },
        "item": {
          "id": "05d9de8d-7e3f-43c2-81f2-16989a59c01d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "89ee673f-ea09-4247-85f6-52cb51b1498f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "05d9de8d-7e3f-43c2-81f2-16989a59c01d",
        "cursor": {
          "ref": "951b7fa3-8d78-4cca-a3d1-797ae2f1ddb6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "685cd0b3-fff4-496d-91b0-505c06ccbc26"
        },
        "item": {
          "id": "05d9de8d-7e3f-43c2-81f2-16989a59c01d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "89ee673f-ea09-4247-85f6-52cb51b1498f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2448160a-964a-4790-a3a0-115b5b74d848",
        "cursor": {
          "ref": "8deeec2a-973c-4261-a9b7-09cbdf753654",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c4a72d04-5983-4a2b-853e-836f59d74e35"
        },
        "item": {
          "id": "2448160a-964a-4790-a3a0-115b5b74d848",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2d67f855-e23a-4580-acef-5e06bcfd2a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "2448160a-964a-4790-a3a0-115b5b74d848",
        "cursor": {
          "ref": "8deeec2a-973c-4261-a9b7-09cbdf753654",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c4a72d04-5983-4a2b-853e-836f59d74e35"
        },
        "item": {
          "id": "2448160a-964a-4790-a3a0-115b5b74d848",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2d67f855-e23a-4580-acef-5e06bcfd2a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "35c6bce7-12bf-423e-abc9-95007df8a6c4",
        "cursor": {
          "ref": "f93478d9-b8f3-408f-b462-8f4f74c4f74f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "75f81a56-87f6-4ac0-9783-75894ddd1e66"
        },
        "item": {
          "id": "35c6bce7-12bf-423e-abc9-95007df8a6c4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8ce6fb39-70b9-43de-9ca4-c19adffc9538",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "35c6bce7-12bf-423e-abc9-95007df8a6c4",
        "cursor": {
          "ref": "f93478d9-b8f3-408f-b462-8f4f74c4f74f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "75f81a56-87f6-4ac0-9783-75894ddd1e66"
        },
        "item": {
          "id": "35c6bce7-12bf-423e-abc9-95007df8a6c4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8ce6fb39-70b9-43de-9ca4-c19adffc9538",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "f4625a11-d3e9-4223-b2d3-fb2150310f2e",
        "cursor": {
          "ref": "4c6ac967-8649-4633-ba53-e4c410033575",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0813467c-43d0-4fa6-9005-385eabd87325"
        },
        "item": {
          "id": "f4625a11-d3e9-4223-b2d3-fb2150310f2e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6f8c1efd-1077-45fb-bd11-9ac5a4820c5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "f4625a11-d3e9-4223-b2d3-fb2150310f2e",
        "cursor": {
          "ref": "4c6ac967-8649-4633-ba53-e4c410033575",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0813467c-43d0-4fa6-9005-385eabd87325"
        },
        "item": {
          "id": "f4625a11-d3e9-4223-b2d3-fb2150310f2e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6f8c1efd-1077-45fb-bd11-9ac5a4820c5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "3d2d3731-4a9f-49a4-b256-7aa6792d0c56",
        "cursor": {
          "ref": "ec98eac3-e725-482f-8830-adf13f3c0cdd",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0e12f580-bf85-45ca-9380-5467f8f2fc7d"
        },
        "item": {
          "id": "3d2d3731-4a9f-49a4-b256-7aa6792d0c56",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf4dc011-8508-4387-a565-01369537b149",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "3d2d3731-4a9f-49a4-b256-7aa6792d0c56",
        "cursor": {
          "ref": "ec98eac3-e725-482f-8830-adf13f3c0cdd",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0e12f580-bf85-45ca-9380-5467f8f2fc7d"
        },
        "item": {
          "id": "3d2d3731-4a9f-49a4-b256-7aa6792d0c56",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf4dc011-8508-4387-a565-01369537b149",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "2abb90df-86c4-4e43-b01d-b1885935c908",
        "cursor": {
          "ref": "a3ea0f52-8634-424c-905e-b6d1503e64a6",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3fa0f018-bea4-447f-b53c-9022ddc63b8e"
        },
        "item": {
          "id": "2abb90df-86c4-4e43-b01d-b1885935c908",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "40b85c07-322b-4cd9-b809-b01beb56b9c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "2abb90df-86c4-4e43-b01d-b1885935c908",
        "cursor": {
          "ref": "a3ea0f52-8634-424c-905e-b6d1503e64a6",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3fa0f018-bea4-447f-b53c-9022ddc63b8e"
        },
        "item": {
          "id": "2abb90df-86c4-4e43-b01d-b1885935c908",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "40b85c07-322b-4cd9-b809-b01beb56b9c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "5736f4b3-7385-498d-8882-74a90fcd8be1",
        "cursor": {
          "ref": "600503d9-8844-4d4d-944b-ed1445277a69",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5b47291e-1c9b-4a7a-b19e-370057d46b6c"
        },
        "item": {
          "id": "5736f4b3-7385-498d-8882-74a90fcd8be1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7fcdb97e-fb43-4412-8c96-5d517c398d8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "5736f4b3-7385-498d-8882-74a90fcd8be1",
        "cursor": {
          "ref": "600503d9-8844-4d4d-944b-ed1445277a69",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5b47291e-1c9b-4a7a-b19e-370057d46b6c"
        },
        "item": {
          "id": "5736f4b3-7385-498d-8882-74a90fcd8be1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7fcdb97e-fb43-4412-8c96-5d517c398d8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "0215f81a-7204-4773-a261-b54b3a23ef8f",
        "cursor": {
          "ref": "8a07bc0a-5476-45b1-a391-13c999a8f6bd",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1cfdb970-697e-4c07-86ac-a2b970306e73"
        },
        "item": {
          "id": "0215f81a-7204-4773-a261-b54b3a23ef8f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7c2de0f3-bdd2-4658-9092-58c379587b20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "0215f81a-7204-4773-a261-b54b3a23ef8f",
        "cursor": {
          "ref": "8a07bc0a-5476-45b1-a391-13c999a8f6bd",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1cfdb970-697e-4c07-86ac-a2b970306e73"
        },
        "item": {
          "id": "0215f81a-7204-4773-a261-b54b3a23ef8f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7c2de0f3-bdd2-4658-9092-58c379587b20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "97817139-5ac3-45a0-873c-9f810139aa4b",
        "cursor": {
          "ref": "de03db82-5884-4026-9920-d7a85cbc7671",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4745cea9-1703-4a86-a021-2cc9f7e1e69b"
        },
        "item": {
          "id": "97817139-5ac3-45a0-873c-9f810139aa4b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "85431d1b-43ee-4618-8cc4-9ae0a5b8432a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "97817139-5ac3-45a0-873c-9f810139aa4b",
        "cursor": {
          "ref": "de03db82-5884-4026-9920-d7a85cbc7671",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4745cea9-1703-4a86-a021-2cc9f7e1e69b"
        },
        "item": {
          "id": "97817139-5ac3-45a0-873c-9f810139aa4b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "85431d1b-43ee-4618-8cc4-9ae0a5b8432a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "a42cdacc-ea5f-45d3-86b4-514f15f856a3",
        "cursor": {
          "ref": "47b12fea-61d4-4970-a93f-ed9db5243727",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "40e7bbf1-78d3-4761-b64d-cf27f8ee029a"
        },
        "item": {
          "id": "a42cdacc-ea5f-45d3-86b4-514f15f856a3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d8a84a3d-89ee-4af9-8e21-55c80c5c35a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "a42cdacc-ea5f-45d3-86b4-514f15f856a3",
        "cursor": {
          "ref": "47b12fea-61d4-4970-a93f-ed9db5243727",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "40e7bbf1-78d3-4761-b64d-cf27f8ee029a"
        },
        "item": {
          "id": "a42cdacc-ea5f-45d3-86b4-514f15f856a3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d8a84a3d-89ee-4af9-8e21-55c80c5c35a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "834cb45d-88f5-4edc-8d17-79ec25a2a1c8",
        "cursor": {
          "ref": "d50f9d39-38c8-48c1-86d7-627743660867",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ff690955-5198-40c5-99a6-1d3c744c22fc"
        },
        "item": {
          "id": "834cb45d-88f5-4edc-8d17-79ec25a2a1c8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8fc05407-2dd6-475d-bb51-d8be872767f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "834cb45d-88f5-4edc-8d17-79ec25a2a1c8",
        "cursor": {
          "ref": "d50f9d39-38c8-48c1-86d7-627743660867",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ff690955-5198-40c5-99a6-1d3c744c22fc"
        },
        "item": {
          "id": "834cb45d-88f5-4edc-8d17-79ec25a2a1c8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8fc05407-2dd6-475d-bb51-d8be872767f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "736e99eb-5560-4852-aacf-7dbde438a30f",
        "cursor": {
          "ref": "9ac7fb09-43c4-4d6a-9387-78386b154957",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "24ca668c-29f2-4cae-9442-f3950c3402cf"
        },
        "item": {
          "id": "736e99eb-5560-4852-aacf-7dbde438a30f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aa8dc9ae-1c64-4e9a-a8b5-9bd3513cee99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "736e99eb-5560-4852-aacf-7dbde438a30f",
        "cursor": {
          "ref": "9ac7fb09-43c4-4d6a-9387-78386b154957",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "24ca668c-29f2-4cae-9442-f3950c3402cf"
        },
        "item": {
          "id": "736e99eb-5560-4852-aacf-7dbde438a30f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aa8dc9ae-1c64-4e9a-a8b5-9bd3513cee99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "ea0ba96c-9241-4d59-8625-7895839eba5f",
        "cursor": {
          "ref": "52ddd558-95c9-4b43-8143-97fe416297cb",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9194e408-fe17-440c-9c6f-8c5d6d617296"
        },
        "item": {
          "id": "ea0ba96c-9241-4d59-8625-7895839eba5f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0ae6206d-92da-416e-8ab8-1f1854aec950",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "ea0ba96c-9241-4d59-8625-7895839eba5f",
        "cursor": {
          "ref": "52ddd558-95c9-4b43-8143-97fe416297cb",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9194e408-fe17-440c-9c6f-8c5d6d617296"
        },
        "item": {
          "id": "ea0ba96c-9241-4d59-8625-7895839eba5f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0ae6206d-92da-416e-8ab8-1f1854aec950",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "69feda83-dca0-4f33-bbe8-1977af34982b",
        "cursor": {
          "ref": "2d3e192b-92f7-4f53-afce-8f680706c7c1",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4e14a6af-2a60-4900-9ea7-9436f149052c"
        },
        "item": {
          "id": "69feda83-dca0-4f33-bbe8-1977af34982b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "842d37ee-c079-4166-aa1f-530a13e901e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "69feda83-dca0-4f33-bbe8-1977af34982b",
        "cursor": {
          "ref": "2d3e192b-92f7-4f53-afce-8f680706c7c1",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4e14a6af-2a60-4900-9ea7-9436f149052c"
        },
        "item": {
          "id": "69feda83-dca0-4f33-bbe8-1977af34982b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "842d37ee-c079-4166-aa1f-530a13e901e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "50c7752a-99ed-4ba0-8f3b-6f4dc7ed3fd4",
        "cursor": {
          "ref": "df436306-d799-41fc-8461-d28e2354a19e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7e5fe949-e561-4cce-b61a-0f9aac63a5fd"
        },
        "item": {
          "id": "50c7752a-99ed-4ba0-8f3b-6f4dc7ed3fd4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1be9973a-b9be-4b22-aeb2-dc46d96ff0e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "50c7752a-99ed-4ba0-8f3b-6f4dc7ed3fd4",
        "cursor": {
          "ref": "df436306-d799-41fc-8461-d28e2354a19e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7e5fe949-e561-4cce-b61a-0f9aac63a5fd"
        },
        "item": {
          "id": "50c7752a-99ed-4ba0-8f3b-6f4dc7ed3fd4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1be9973a-b9be-4b22-aeb2-dc46d96ff0e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "18b1d372-476f-440f-997a-34c6fc2b9338",
        "cursor": {
          "ref": "7de53a7e-b942-4b84-be1d-46ad09b9901f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "66705c4b-fd87-4838-ba08-ba4d1370e44a"
        },
        "item": {
          "id": "18b1d372-476f-440f-997a-34c6fc2b9338",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2a070f6c-cea2-4518-a448-0cc74230d4cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "18b1d372-476f-440f-997a-34c6fc2b9338",
        "cursor": {
          "ref": "7de53a7e-b942-4b84-be1d-46ad09b9901f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "66705c4b-fd87-4838-ba08-ba4d1370e44a"
        },
        "item": {
          "id": "18b1d372-476f-440f-997a-34c6fc2b9338",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2a070f6c-cea2-4518-a448-0cc74230d4cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "87908452-176c-4902-9c79-a6081ee71290",
        "cursor": {
          "ref": "b825285e-1b76-4369-bae9-973896959118",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e0af8229-a6bf-430e-accc-fdb15b3728d4"
        },
        "item": {
          "id": "87908452-176c-4902-9c79-a6081ee71290",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f8a1fc37-3258-40d4-ab04-ca44b958e66f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "87908452-176c-4902-9c79-a6081ee71290",
        "cursor": {
          "ref": "b825285e-1b76-4369-bae9-973896959118",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e0af8229-a6bf-430e-accc-fdb15b3728d4"
        },
        "item": {
          "id": "87908452-176c-4902-9c79-a6081ee71290",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f8a1fc37-3258-40d4-ab04-ca44b958e66f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "e15c7adc-3a6a-42e0-b05a-7cb4a8857623",
        "cursor": {
          "ref": "25fd19ad-4fba-4543-8c5c-8dd99174bf92",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5af16cfc-f72d-4b3f-a1d7-e097cb4208a9"
        },
        "item": {
          "id": "e15c7adc-3a6a-42e0-b05a-7cb4a8857623",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "48e26844-2b43-4ccb-bb72-c7ccc3d3e853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "e15c7adc-3a6a-42e0-b05a-7cb4a8857623",
        "cursor": {
          "ref": "25fd19ad-4fba-4543-8c5c-8dd99174bf92",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5af16cfc-f72d-4b3f-a1d7-e097cb4208a9"
        },
        "item": {
          "id": "e15c7adc-3a6a-42e0-b05a-7cb4a8857623",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "48e26844-2b43-4ccb-bb72-c7ccc3d3e853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "8636fb93-2f84-486b-80b4-6a5d86eedc16",
        "cursor": {
          "ref": "2f019df2-4218-4ca9-ab15-a5dacc6d0b29",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6a252a8e-0fdc-415a-9ae4-5eab93c2a18d"
        },
        "item": {
          "id": "8636fb93-2f84-486b-80b4-6a5d86eedc16",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1646dadb-b373-4764-a03d-e4b722a1eab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "8636fb93-2f84-486b-80b4-6a5d86eedc16",
        "cursor": {
          "ref": "2f019df2-4218-4ca9-ab15-a5dacc6d0b29",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6a252a8e-0fdc-415a-9ae4-5eab93c2a18d"
        },
        "item": {
          "id": "8636fb93-2f84-486b-80b4-6a5d86eedc16",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1646dadb-b373-4764-a03d-e4b722a1eab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "16c2bbbe-a1aa-4ab9-8c98-9fd812dbd23d",
        "cursor": {
          "ref": "7c983a7b-37e9-44bd-890c-bf8e33666244",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6b6d9ac1-0d30-4e0f-8826-fa0b69f6f04f"
        },
        "item": {
          "id": "16c2bbbe-a1aa-4ab9-8c98-9fd812dbd23d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0832ca58-d257-43e1-a76a-36e2d7f151c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "16c2bbbe-a1aa-4ab9-8c98-9fd812dbd23d",
        "cursor": {
          "ref": "7c983a7b-37e9-44bd-890c-bf8e33666244",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6b6d9ac1-0d30-4e0f-8826-fa0b69f6f04f"
        },
        "item": {
          "id": "16c2bbbe-a1aa-4ab9-8c98-9fd812dbd23d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0832ca58-d257-43e1-a76a-36e2d7f151c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "33de9c84-3551-4339-8e3d-628024d64ae9",
        "cursor": {
          "ref": "02951140-4a52-443d-a9be-18127191508e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6d40d35d-0536-4fe3-84d0-e20181f45d58"
        },
        "item": {
          "id": "33de9c84-3551-4339-8e3d-628024d64ae9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e32eb854-14c2-40c8-b8e4-0a16ae305f4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "33de9c84-3551-4339-8e3d-628024d64ae9",
        "cursor": {
          "ref": "02951140-4a52-443d-a9be-18127191508e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6d40d35d-0536-4fe3-84d0-e20181f45d58"
        },
        "item": {
          "id": "33de9c84-3551-4339-8e3d-628024d64ae9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e32eb854-14c2-40c8-b8e4-0a16ae305f4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "8fffa569-b0b4-4591-b7fc-b073d4eb25ad",
        "cursor": {
          "ref": "00741823-8c11-4c0e-832c-c60cc48c3761",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "3ed91e0c-98f8-4a65-b3f0-9466317f5fc1"
        },
        "item": {
          "id": "8fffa569-b0b4-4591-b7fc-b073d4eb25ad",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "83ec30dc-5c3d-4ba6-9045-09e0228e3a37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "8fffa569-b0b4-4591-b7fc-b073d4eb25ad",
        "cursor": {
          "ref": "00741823-8c11-4c0e-832c-c60cc48c3761",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "3ed91e0c-98f8-4a65-b3f0-9466317f5fc1"
        },
        "item": {
          "id": "8fffa569-b0b4-4591-b7fc-b073d4eb25ad",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "83ec30dc-5c3d-4ba6-9045-09e0228e3a37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "79644cde-a2bd-4862-9313-e7a524dc451d",
        "cursor": {
          "ref": "6fbd1a03-598e-4067-9278-557a11447684",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bf6cf653-4d1f-4364-98fd-0da4e640a826"
        },
        "item": {
          "id": "79644cde-a2bd-4862-9313-e7a524dc451d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c5c87c3c-30a7-4be2-8df1-36b539c70617",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "79644cde-a2bd-4862-9313-e7a524dc451d",
        "cursor": {
          "ref": "6fbd1a03-598e-4067-9278-557a11447684",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bf6cf653-4d1f-4364-98fd-0da4e640a826"
        },
        "item": {
          "id": "79644cde-a2bd-4862-9313-e7a524dc451d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c5c87c3c-30a7-4be2-8df1-36b539c70617",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "9bcc74e7-f61f-4d5b-86e5-446a04c9c21c",
        "cursor": {
          "ref": "b7d7601f-e377-46b8-b63d-07d0abe64e9c",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d1168b52-418b-43a7-b9eb-89e2ece0d8da"
        },
        "item": {
          "id": "9bcc74e7-f61f-4d5b-86e5-446a04c9c21c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "35943fd5-c4e0-467a-9867-c4e60cad0079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "9bcc74e7-f61f-4d5b-86e5-446a04c9c21c",
        "cursor": {
          "ref": "b7d7601f-e377-46b8-b63d-07d0abe64e9c",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d1168b52-418b-43a7-b9eb-89e2ece0d8da"
        },
        "item": {
          "id": "9bcc74e7-f61f-4d5b-86e5-446a04c9c21c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "35943fd5-c4e0-467a-9867-c4e60cad0079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "465f046d-f7b7-4ee9-9e3a-a7e0acc96493",
        "cursor": {
          "ref": "6f917870-a4ff-467f-8bed-e97d44f03051",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a57be01f-8f30-41e1-8ca9-e3794007c333"
        },
        "item": {
          "id": "465f046d-f7b7-4ee9-9e3a-a7e0acc96493",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "93e33fa0-d695-4532-ba8f-fe0cca4b86be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "465f046d-f7b7-4ee9-9e3a-a7e0acc96493",
        "cursor": {
          "ref": "6f917870-a4ff-467f-8bed-e97d44f03051",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a57be01f-8f30-41e1-8ca9-e3794007c333"
        },
        "item": {
          "id": "465f046d-f7b7-4ee9-9e3a-a7e0acc96493",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "93e33fa0-d695-4532-ba8f-fe0cca4b86be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "624f3c84-1b14-4be5-9df9-c8c2fa35cf40",
        "cursor": {
          "ref": "3259148f-ce17-4e5b-a518-094fe3af73a7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d9c6d372-9266-4d94-90b6-3c976da6d78c"
        },
        "item": {
          "id": "624f3c84-1b14-4be5-9df9-c8c2fa35cf40",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2e1ced42-eb5a-4f45-b744-33003d379e9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "624f3c84-1b14-4be5-9df9-c8c2fa35cf40",
        "cursor": {
          "ref": "3259148f-ce17-4e5b-a518-094fe3af73a7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d9c6d372-9266-4d94-90b6-3c976da6d78c"
        },
        "item": {
          "id": "624f3c84-1b14-4be5-9df9-c8c2fa35cf40",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2e1ced42-eb5a-4f45-b744-33003d379e9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "69a3caba-6716-4084-9f9e-2a8b2fc719b5",
        "cursor": {
          "ref": "58040889-0ba5-4bbe-9e2f-9874cba5f9c7",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0c481edb-8fb9-4867-9d27-f18507f9b8c2"
        },
        "item": {
          "id": "69a3caba-6716-4084-9f9e-2a8b2fc719b5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a4dec73c-715d-4cec-b35d-c4109becc27a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "69a3caba-6716-4084-9f9e-2a8b2fc719b5",
        "cursor": {
          "ref": "58040889-0ba5-4bbe-9e2f-9874cba5f9c7",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0c481edb-8fb9-4867-9d27-f18507f9b8c2"
        },
        "item": {
          "id": "69a3caba-6716-4084-9f9e-2a8b2fc719b5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a4dec73c-715d-4cec-b35d-c4109becc27a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "5b4c64f9-4938-4224-916a-9c3285f08a33",
        "cursor": {
          "ref": "ce90d0ef-0251-4eaa-aa2d-a06ad2d08614",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5b4ee0c6-3250-4c52-9b8a-08c76584e11c"
        },
        "item": {
          "id": "5b4c64f9-4938-4224-916a-9c3285f08a33",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8f1f9b7e-1266-429a-af06-4210133a2f2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "5b4c64f9-4938-4224-916a-9c3285f08a33",
        "cursor": {
          "ref": "ce90d0ef-0251-4eaa-aa2d-a06ad2d08614",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5b4ee0c6-3250-4c52-9b8a-08c76584e11c"
        },
        "item": {
          "id": "5b4c64f9-4938-4224-916a-9c3285f08a33",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8f1f9b7e-1266-429a-af06-4210133a2f2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4b6577a5-dfb9-4dd3-9b8e-9ec22ba5b8c6",
        "cursor": {
          "ref": "b46e0eda-f7d0-462d-9101-413f2fe0443f",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9f0559b1-6862-464c-a9fa-2b67aa4e1a9a"
        },
        "item": {
          "id": "4b6577a5-dfb9-4dd3-9b8e-9ec22ba5b8c6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eea68038-9656-43fc-9cde-68f721976d53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "4b6577a5-dfb9-4dd3-9b8e-9ec22ba5b8c6",
        "cursor": {
          "ref": "b46e0eda-f7d0-462d-9101-413f2fe0443f",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9f0559b1-6862-464c-a9fa-2b67aa4e1a9a"
        },
        "item": {
          "id": "4b6577a5-dfb9-4dd3-9b8e-9ec22ba5b8c6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eea68038-9656-43fc-9cde-68f721976d53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
        "cursor": {
          "ref": "cf9f8fa1-ee72-40da-b7ce-f869ec1f5a73",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9fb67447-ced4-4789-a6ce-93a5d163c754"
        },
        "item": {
          "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
        "cursor": {
          "ref": "cf9f8fa1-ee72-40da-b7ce-f869ec1f5a73",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9fb67447-ced4-4789-a6ce-93a5d163c754"
        },
        "item": {
          "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
        "cursor": {
          "ref": "cf9f8fa1-ee72-40da-b7ce-f869ec1f5a73",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9fb67447-ced4-4789-a6ce-93a5d163c754"
        },
        "item": {
          "id": "b50aa03a-ca0b-4eab-9caf-a0e56688af2a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
        "cursor": {
          "ref": "a90ee89e-d3ee-4b3e-8c71-dd076fd32ccc",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "56e34246-4f4d-4e73-8615-dcf97488121c"
        },
        "item": {
          "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
        "cursor": {
          "ref": "a90ee89e-d3ee-4b3e-8c71-dd076fd32ccc",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "56e34246-4f4d-4e73-8615-dcf97488121c"
        },
        "item": {
          "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
        "cursor": {
          "ref": "a90ee89e-d3ee-4b3e-8c71-dd076fd32ccc",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "56e34246-4f4d-4e73-8615-dcf97488121c"
        },
        "item": {
          "id": "071a1b64-3d42-484d-84df-98c3ed97b82e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
        "cursor": {
          "ref": "aac0c529-5c9c-4674-9f62-4a8fc25ecb3a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "523e15bd-1914-470c-973d-6cbc0fd1dc54"
        },
        "item": {
          "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
        "cursor": {
          "ref": "aac0c529-5c9c-4674-9f62-4a8fc25ecb3a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "523e15bd-1914-470c-973d-6cbc0fd1dc54"
        },
        "item": {
          "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
        "cursor": {
          "ref": "aac0c529-5c9c-4674-9f62-4a8fc25ecb3a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "523e15bd-1914-470c-973d-6cbc0fd1dc54"
        },
        "item": {
          "id": "4e584e90-fb1c-46b7-9d8e-d8993fcc4dc7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}