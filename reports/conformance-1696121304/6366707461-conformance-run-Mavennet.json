{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "69f86498-c20a-4fba-81b8-6aca43908a84",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e1b9fd3b-3e43-4386-890c-7e3462060051",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7f2601b-18ca-4f99-9864-101477c857ee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a44a722c-8ac8-42ba-98a7-c6a0091fc19c"
                }
              }
            ]
          },
          {
            "id": "5c5c4914-98e8-4558-9447-69d1c4e94214",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3dbd3d66-8137-4522-bce8-2b4ab9e3cd56",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a6bc7b12-2e4d-4f40-818e-02ef8e33ea60"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "07c777c8-ab23-4cf5-9fa3-ccbcdcc791d2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e1a373e7-7066-4272-b468-96e5e3f187f0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d77ed53d-9d28-4a27-8eb8-0a2dbb7351d5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc816611-e17f-4ca1-b52b-43db01abb5f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d862c7b-989a-4027-973a-e11e52157647"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "591f10ec-f65b-4182-890c-06b2c1ae04fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dad0967-7b48-4479-ab43-a8ad149275fb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f848a164-f853-45f2-9322-aec7d3d17e4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e75466d3-9021-4044-b77c-f9427da018ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "834d06df-34ec-45d7-8595-eb75d582044b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "12ba6f34-a128-4864-aad3-32fda04f72ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00d0d90b-c5bf-4469-bc88-205056f1a668",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ede38878-ae04-4034-bf32-ee706e7f4d9d"
            }
          }
        ]
      },
      {
        "id": "91ff5c4f-034a-43f6-94a6-feb62f0be0b7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "edd53bee-43c5-432d-a9d8-67ec5ce80ed4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "957edf9c-df6e-4004-b33a-e51d515161c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f596bd53-5c92-4e12-882a-dc0cb1942c11",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0768f0cb-1034-4a91-a35e-b30e4911e07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b853c1e3-201a-4f97-b2ec-c963c3c0f70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e4a93d-9f7b-4565-99e6-9543d158f2cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd9b6ac-e5b1-4715-843b-d9b117f30498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd43f342-7419-4528-a8bf-a7fd4b2b3f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9077a65-1c50-4133-a3fa-212f31af384d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935fe49a-0b02-47f7-81b9-8ccbf42a5b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aec52871-14fd-409d-bec4-a5405db1b1de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8074a55-effd-4aa7-b67b-c927935178e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad57dc4a-f60d-40e1-bf74-020c576886ed",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bc2d7c-d760-444d-a33f-ea54fb6b3e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a70fd368-fe60-45ff-91f5-33cdfa96dd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2597b5-9884-4e45-9d0b-e4386a509d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3858dc2-504e-46b1-a092-8cf89e0afb13"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2d2b3105-4b17-439d-99b5-15ced2bd5e03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c89e0c4a-a0eb-438c-8012-6bbb1b3982c1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8503830-6771-4004-be97-9e1500be79c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e9f42561-491f-43cd-8252-2a77e247e171"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0db89258-f8ae-4ec5-8321-1ab79408ecc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c9a7c563-746d-42ad-8774-f8012f5fe05e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c9e472f-9d1a-451c-9458-3eac45725f4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b11ac240-a6bc-4170-bad9-095fe2bdf86f"
            }
          }
        ]
      },
      {
        "id": "62e39f70-2e91-4d6f-a0b4-539cff9f9471",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "da49e630-b7a6-41d7-8273-77001043aa09",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af2c7541-cbcb-48bf-a2ce-07f1fa64af70",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "668d5f75-97a4-4e6d-8b66-964ec82550bf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab443ed-295d-41f2-9b93-32f90909fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e83a38-627f-45fa-ac75-3435696be3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83daed1-a6a4-4aad-8e37-321d118e5f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9628987c-6ffc-45b3-bd29-dc4319c32433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94210f23-cee1-4f82-bd15-d5a7d568e61c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3f855a-2bef-4f3b-9ede-c6e60a873683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44515097-a1bd-4914-b30c-5f6e5f8410e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f240b4-f595-4e16-bf9c-cad3973612e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9491f767-8551-4a5f-8af8-4cecf81ad54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a962fa5b-6729-48cc-9e79-c1f220f82302",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37216f03-18ea-4dd8-9569-c8bfc604ba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e702cc9c-9aaf-47b2-b7b5-4cadfe6788c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff01288-1c0b-46fd-989d-654eb21d122a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "022c13af-35fd-4929-8b36-85ba1e340399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b85a46-ce5b-46ff-97ac-065cb47187ce",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d99713-6ed1-4b2a-86ec-451d9ff89683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e0a84a-1d1b-4637-8fc9-bcbe0e304303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a26f42b-f84f-4378-831f-eed6654dc093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d61e1b0-a59a-4f9b-bbb8-4a5056873cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a34efce-0a66-4f6f-bd78-faee22589c05",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9657e208-e788-4392-b162-cf9081abdd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae14cb2-b375-4045-9eed-c3d80bbb9bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c22cfe-1e2b-4426-bf17-e8cd67fbbd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e17e075-a781-45ac-ac43-92bdea87ba4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e2320a-2b4a-4645-802e-f41bde70d10b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c78d62-12bb-481e-9240-2a61100b6a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f67d120-e115-4f5c-b396-67888437cd8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb130f57-ddab-41fe-81d3-acf6f5e7b35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e174a7ed-2a6f-4786-b64d-025214f1d561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4306d9-91f6-4920-a311-94abfb816174",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fd2144-11c0-4068-b033-59c447e3372b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5e775e-56ad-49dc-9a33-82980d79a64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00beaa07-0ca5-4105-a3ec-51fb2adfde78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f18e7f71-44f4-4370-ab0b-20cc1fe9be88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92009b5-45da-44e9-9252-d1df486a75c0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1c09b9-0729-4f84-b9cb-b21501547ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d346fee-ca63-407b-b24d-c30f502faef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824c5485-633d-46fb-b369-b016597dc07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f302eed3-c61e-49dc-8893-2c3c97d0fdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27230b39-a760-4921-8837-7aa04da8ad26",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa68717-5f99-43a2-a2db-2374e82fb0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d544d4-ddbc-42bd-82d4-f26f2d6b74af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c5e884-1ab6-447c-9346-aeeda470bf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4e8c0ba-8f19-4c71-835f-ce3816fca038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a0354f-cc64-49ed-bbae-e3a190b482ba",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993cc5b1-a451-4a7d-8f6c-1c467f92c0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbcaedd-83b8-4d31-b7d9-dddc8c741e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3c0b42-5c2d-40be-a986-08de5082443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "951fb8a3-d694-48ac-bad5-68b8f9f30ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365e3bb9-2396-4218-8266-081175fef599",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8494c8-5b27-4e6a-a275-a2f7438576f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d62635-af86-49a2-8261-f5be4b5624a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3101a9-d0c2-4899-befa-597530287941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c22dc690-4b0a-4fc5-9570-a7a3a99fd91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7064c0-6967-430d-a1b3-e6eacfb8cacc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aaba666-376b-4aac-9a92-0c32205577fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae457d7-b1d2-47bf-b0f1-f404d2a37754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0769e8-c5a3-48d6-830e-1e1561d02cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56a39fad-6f2e-4631-9623-5830180529b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d672d2-c1b7-4eb5-aa57-06a8d23d2ff6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81904284-4f7d-4a81-98eb-90257d58489b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba9f261-b0b9-4b80-9fbb-38f3cff1d6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bb5078-674d-4d8d-841d-2bdc1373137d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1d61689-3793-4f99-a545-246558f401a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17196673-8ead-42b8-bd83-98e6bd20eea6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c7f3c3-39bf-4214-bc45-d2e89d52df90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc7ba3d-34d5-4969-851e-4f3b41851541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057c2b7f-92c6-4a69-901c-070fbd0cdb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b11824-bf78-43b5-a2ee-63984a0ebe59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5163199c-2c5c-4da3-bcbf-62e3b258cb99",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76265666-440e-4616-bbfb-59887528abd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca44c9f-3e24-423e-98df-dbdee1602ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea3d691-b6a8-4294-b27b-81bf1a9a7bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74920815-8843-4ad8-a1b5-bf4992b0fb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa3d54e-231a-4622-9ea0-9098644f6172",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e8bbb0-bde0-4506-8c2c-f30801572983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28237a7a-2e1e-4b46-acfd-0a0fdf3dc707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710af640-79f2-4472-bc90-e7dbf34d82d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49b6ba20-5e7b-4019-b85d-f91feea0d9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073f3ce7-91ed-45fa-b277-db638d7280c0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787fc8e2-4e3a-43b7-b923-20ae3fd33bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03a2ad5-1ad7-48dd-affe-b758ff407285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bf2bae-6a66-494b-b522-ccb372deb6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a49f6f6d-b2c9-4891-a95b-5925d89ac533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b9ebf4-0653-445c-b619-cf0c023247e1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609eed46-937b-450c-b145-3af35cfbd7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365e46ae-ec63-49c0-9d32-c6dda8e92f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0452d07c-3f13-4333-9991-659a7ef34e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce21261-749b-4217-ae75-c54344e45a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995ccb80-f46a-4a71-b8b3-066222eef91e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db075d07-2820-40a1-8396-8ac22b81ee54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24299dd8-7010-4991-9f44-675c2e5f93f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9369e0d0-7b97-486e-a635-5851bad65551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c74ce85f-735b-4fea-bf1e-714e4c45e566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fecfd7-3221-4f08-9154-76e78f8349e8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472184b5-b877-4f9d-9ee8-b2cf1ee8f150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dfdf49-4f78-4ffb-abb9-36c9cfc090ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a06089e-0db2-44b8-b8a8-e19bf3779819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df38439-59fc-478a-9215-0fe64bd593ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92c2be8-51d5-4c57-9553-b5a1e712773a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7480b123-578f-498f-aa44-97a0d3daee8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a5af7f-9aa5-4f7a-8d44-c3a0032568b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241316fc-4c80-46e5-8c02-2c5018d80147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb8d6cc-cddd-4670-b52f-5f43d02fbac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ee7d48-90b8-42b7-83ca-bb12384868f3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a507fc-5c95-4c4f-b6d9-f5da5e406f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5243f41-edc6-4dab-b00c-e9414ac1d593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c582a25-2eb8-4e3c-a2a6-d8d2688e1596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00db0964-693b-4244-bfed-ea9598023bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab2864b-acb1-4422-9349-65f9244febe6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c1b442-562f-4e69-8102-f3a0f6aae372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c2d96d-bd9b-4394-9f49-32abafd5f8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9011860c-57d2-4f75-ae20-a7a6133cef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aea245a1-2b58-4212-bc4e-5a11e6e1bb8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532341b0-7b58-440d-ab8d-f258d9ec742d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa4aa4b-9bf8-40c8-86ee-b30450a184ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fda22b-1fb9-4945-8cef-cc03444f7c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c2442b-b8d2-4563-966e-282b2289be8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c5476e-15bd-4d51-a4de-02332e22f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ced7d9-d6e9-4e97-a7db-f7c66d722569",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edab357d-ffb5-436f-b229-d025164af16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5461115-7fdb-45bc-9385-883ebd0a4e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa0cdd6-96b3-4fc6-875b-c693c388fab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b26db5-cb0a-4eab-a9b8-1df50d167aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5787316c-6b28-404c-b0a8-9a1e5b4b37c2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ba7c7e-8f05-46dd-b23f-3fa19984cc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b964f87c-317a-4fb3-8198-1a82c0a4a53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bc9871-5159-4104-8cd7-655faf7c4c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69f205b7-0fac-4ad5-86e0-4e805e10e4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95deb1e-6189-47f5-8a40-8bf832b73b54",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce928ad6-ed07-427b-a4aa-12c38f55a895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a0502c-e2db-4c94-bfa5-0406881dec7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc229aa-c4b5-4f2d-b3d1-ea060047af06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a12afe-3b5d-4be3-bb6a-fc877f6d4e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137a5471-2ad2-4ee7-b7fa-a42eb3ca42f0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd5f246-e6c4-4681-b70a-ee10d0246487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc79f63-0d8c-4e47-9d27-acda9e65ae33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f53bd99-5777-4fe2-9890-670dd959492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9f0cbe-6fa0-4c02-8640-1cd3962c1c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d123487e-6043-4db2-8887-bd3bc9456ac6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f10a52-ae22-4cd8-a290-1a1c287051ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a20e56-7076-4400-924a-125c3c5d24ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a97d03f-f62b-4f26-9e55-d7578fb6eef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7054b1c9-5f5e-4666-808b-c4d96e1c554c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0516b58f-9d16-4410-acaf-d00a79388188",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4575a8-e41c-458b-b28c-1dd2e7d91d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62607cc2-f3f4-4d1c-bdfb-c459ce180d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a968df73-d6a8-4a60-a954-7fa65bf2f423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e22204ed-636c-410d-8512-dcf339dcb426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104ae752-155d-4138-b8be-86c44066bdd4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5861ce77-63f3-4d80-93a2-555d04b5d89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f5799b-ad65-4844-aa47-f21eb8a4ec26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e2ef76-7b8b-41d1-b535-ad6788f6de84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad0f33e-fe6c-4d0c-ad1f-cc05de74f790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ce0f00-e4cd-4d16-baf8-f69048e08dc5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f7bc53-5a94-4046-92dd-bda6b34eaa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ad0ade-05b0-450b-85d0-6e48a71defd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea557e2c-2845-44eb-8d24-67cf7baf76c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6456c494-fbfd-43c4-900b-45aed2e4c9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54082dcd-8c40-4781-afb5-9ad2429386f0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ba3a8d-6c12-418b-bb17-c911cc692efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c41f290-9538-40ec-9e15-8c7210787fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0a1868-6910-42ff-91ad-84feb40179a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ac68ef-d2b3-4713-9e5b-57b8c5794c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a1fbe1-fc33-4a61-9d5c-3b5f8747cb99",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34059241-946b-4919-b02d-114a5d301947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b082d6-9688-489e-8aa9-bd35aa94ddfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b74a53d-1eeb-4fab-9936-49749bce9b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03ebb0e-53ba-49bc-9f9f-cd3efb7a7b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a69488-6115-4921-b9a8-e695bde165f4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfda7085-0501-490e-bf55-9f53733abad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269bd3fa-2081-4415-97e0-0d54476f61f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716596c4-e4cb-4c54-b1d1-967be0c9f257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3ddf4d-bfeb-4112-82be-82728c504eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826924f6-6c99-4aa6-891e-0c0277af4126",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70bc882-09db-46d4-a1d6-16402be4adf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad50ea9d-eeec-4116-b17d-26c103e52276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4770fa0f-53f1-4209-b614-281dffc361d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c36d930-2386-4b86-bcd3-677dbb5b7f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a21238a-2c05-4c18-9f40-c9c02cdf3a13",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b6e7f7-ce83-46d0-9b6b-75dc7b5932c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7867030-14a5-4fd4-8503-5d15941a23f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a187d050-465e-4f6f-b0f9-3b5877ed324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9eead1-aa66-4338-af1b-85a807425c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28b065b-ba1c-47e0-8901-99b3606b19bc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e1812a-9c0f-40d4-a5a2-8b2a4f17c95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0f168d-c2d4-4f0f-aadd-ccc5af02b098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b00feb1-0a27-479f-b35d-5a28711969d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ceab7b4-9ebc-4d8a-bc98-6fc7bcd47294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d429d6-a1b3-4c00-b7b4-9fc689e1dc7f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469789c6-bd9a-43fb-8c0f-918961ec22d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7454c4-8285-4a1d-a5dd-27a87f467ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7589311d-eb4a-4f83-bc04-427596aa5f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d716db3-348b-460f-96d2-7ce547b0895f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f838d7-1c2d-4ddf-9c0c-6e29896a86b4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3ba234-d423-4f53-ae99-fdf2b4c24bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04df6051-f822-4d7a-a5d8-a8cdc09693d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77b79c7-34a5-4cbc-a630-2a31652583c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1046f64-a1a7-42af-8853-1b6d176b1773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1ca6ae-e839-428c-b941-e2a8dad09cd5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad329b0-a5fa-47dd-8c44-534986a7495f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10e2930-2c7a-44ab-a036-82f38a2daf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf4ea17-e5cb-4444-892e-4e9d6e66fc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f08ad605-b272-4449-94de-c339002097b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b3a7ef-56d7-4704-80cc-315b2e722b0f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c931766-a51a-4672-b679-3434d2c0ac01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c612b3-c763-480e-bbfa-45e3ef66023d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b4895-fe04-43fd-9a88-717498f73ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b03c9fa-bb77-4ac2-bf11-3ea74de0342a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616ff23a-69e1-4cf3-b4e4-1b5c4181bda2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee47a024-1166-47fb-b869-46568d6d0e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99691eb-3915-41e4-a152-4984baa7f510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda1ad64-19ac-4145-80a0-d019b58f0655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ea8e20-1a87-413a-a16f-65a55e9c99ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5fcd4a-d71c-447b-bdb0-d233931ea222",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b350680b-cc2e-44b0-ada8-5884b5451e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b79f863-a494-423e-b1c2-53aff867c8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62387a28-6681-484c-9dbb-444c3388811e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "310a90bb-ce4f-4d7f-babb-1ed5c628ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c0312a-6848-4af2-ba61-9935de05550b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf542094-7067-49c2-8dd7-aed42590318b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f7a3f3-8fc2-4311-8cd5-b79621b0023a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7c3927-5906-4503-942a-c21a882b9111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3f0b57-296c-4e16-8f6c-bfa0ed3f89a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9cd8c1-d206-49ce-aad2-bbca526dfff5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b84439d-89af-4c84-ab59-263571ad7ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a26cb68-c776-4473-a97c-64c808aded62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b0e9cd-c5d3-40fe-b2fb-25272165e4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d37ced2-f875-4e26-aef8-48b775f4e6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa5fd48-fb78-4e99-9598-761ddcc69c57",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d984ea-540f-4e19-b55b-c6d681525742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b62afab-8faf-4d1a-99e7-71ee229e8388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15087ce4-e388-414d-96ff-bb44323f3e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c176ce28-af0d-4ef4-a427-ed43406d9acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5145ad2f-a6dc-459f-82fd-8f74a0ac1fcf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361c064c-6065-44d1-8c33-1d0336b85b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c8f188-293c-454e-a82d-20de5e7669ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03149431-0751-4986-8867-92f31fc2ba5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b084403-0c77-4225-9f50-2a67ea7c2687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7b8bc0-c171-45a9-9c8c-5fa4793bde9b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372b045b-e91f-4002-9ec3-01af69582b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a9db36-0bc9-4c84-9427-9dd57ea9b8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9e93ae-7a23-4d0b-8a36-524bb5d44d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b551d806-d6fb-41d0-98ec-7a5580689dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade3c515-0784-4db7-bb6c-c91dd4a86da6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ebb172-5f32-481b-8a00-4ef1b087e677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69cf3f1-beae-41b1-bcd3-97a45580d153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe8faf4-f030-4570-8da5-4013f8e007c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02b02456-a41c-4d7a-83d8-96273cb94cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b11524-22cc-409c-bcf8-046bd82b5fbf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9423d1dd-0fd8-4424-9d77-f9fb93c8b475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6464eed5-7323-47e5-9fa5-4e059b56919b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c86fb2-e9f6-413b-8444-a83c9b61ddc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "83276a99-bd93-4b80-b497-36f1fbe1d8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb8dad-d1e0-47e3-a225-e649e774f62a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde91f0-fc37-42f5-becb-d98673e09b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b397e9-c866-4606-b802-7bdcfb4d933d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b68f8da-73fa-4ce7-aeee-1cca766058a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08da3073-2235-4cf9-9c5d-3dec84fdff4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a69f0fe-361f-437f-8ffc-bdb4b40e657e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ebe5c4-bffd-4578-81ce-aa83e86033c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a381b-330e-4324-957a-9f31a458ece4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e444ae7-1090-4483-a563-fea59c84d5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc41e7e5-3e7d-42d4-b8f5-b0705876d187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d980df2-d4ce-4f59-96fc-c4fc340f9e55",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af476ab3-8d69-4b25-818b-66b3548c5f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a7c12a-174c-4545-a2f6-9f524386a95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730588a9-fc12-4e04-92db-e9c1246d16b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc45094c-761c-48d7-a297-7d3548427f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2f6e6c-1298-4b94-8b3a-e736d59a5e41",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5530ad-4510-4f35-bb8b-68e9d18cf4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eda420f-92cd-4faa-bdef-a7a2406099d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0fdb43-dace-49ca-ac75-41b8dcdd1fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "220b7c14-5694-49b5-8b84-20b39055de50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7994c7-3bd8-4a03-b48f-f5742c68c57b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41284dfd-9c03-41dc-8d34-bdc467397c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccebad8-14b8-4d5e-93e9-0c019c558196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb8c77d-e375-4db6-9a39-120e31242d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6d362956-faab-428e-ac8c-f9670e330692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84d55e2-a94a-4b39-9197-5c3fbdc9c4df",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe47959-f993-499d-9f9c-7d745929b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a669f1a7-ebde-4fda-ab3a-7b0a8e0b738f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1a3c53-0879-4276-8392-77bfb7067bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53b72b60-0bb5-4a9d-ad21-52cac883575e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf7d28c-0f06-4606-8a00-314f2bbae255",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32c567f-f651-4d8f-8424-252c02c96a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e1d82f-1630-43f7-89b1-e1cd315218b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0ccac9-bff4-4d2c-b36e-cfbdd97c3292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "124991f7-280b-4d98-8d37-257d9c80b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a577d9-3703-4ba3-adec-51c67af6ff57",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ac3d8c-1a0f-408c-a131-77904e9ec879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1076d12-0a13-40f1-a7ce-bbc4a94ccb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdca46b-6e05-4fb1-8eb0-d8ffa3855fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b42608b4-2a64-49c8-bc6d-9fad8239b173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f12484-5389-456b-be86-43eee54f86f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15cf7f9-546b-408b-8d9f-541eea77fc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a1cce9-3112-4ff8-823a-0a1cd6ee995d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048dad29-8810-4a3c-b42f-3506c4217b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19754181-85df-4b5e-b838-f82192fee963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb3d4d8-771b-4e26-b5e0-a53a17594938",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508466e5-af93-41c7-abf0-1016057fa9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94afb01e-a793-487d-9dcc-3b6ba34d4948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b649f1-65e7-43a7-a61a-8d1992df6973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "488d626c-58eb-467c-a145-6007da6594e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01ed24a-3aa0-4a3a-8fc1-e08c0d3ca6b0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a4177e-6687-4e94-8fd7-98c309e3760e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f164880-15f7-4dc1-b140-b4a3242a81d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813bd889-1da7-4871-8c80-5ad2c07ec6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "62d8fd10-7bcb-430c-8cea-cd4a77d93a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfb8635-206d-4985-9efe-c5e89f9f5ed1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19564a7-5a54-4635-8ded-ac6cd6239d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff758ae-4575-45d1-938a-3114d9ce3d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1954b22e-85a2-483b-9e52-19edc727ae1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8507e0e5-f9e4-460f-8f6a-8aa36f696389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e0ea68-3f7c-417e-92eb-c664fc6419d9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfda94b-5b9a-4006-9e6e-3741cd84aa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f955ac-5a67-465d-b036-6364536bbb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8de2f5-f12a-4c3b-8583-3d601f24b289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c364426e-9fe9-41dc-9575-40851be63b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cdb8f3-89e4-4ab9-a381-419bf4b94cba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d154800-8726-4440-a76f-212c2733d3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784afbb4-8900-4170-ab61-bb8f980e7327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25416d1-4d50-4229-b3b1-1cac4a7f8d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "855044b6-4ade-4d1d-b36a-a1ed608d7d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7617a757-de7c-431c-a8c4-92d1c25c3d1f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3b5a69-3841-41a5-a3e8-df4e55e33283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb21db4-fbdb-4539-92fc-811617034c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc06641e-8b10-4f3c-a3f9-74c1b2d9986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "498c1d5b-f2dd-4330-844b-75c6060e46ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86df229e-6574-47b6-8c8a-132fcafeb7cb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7c1cf4-ec6d-4374-b601-49fec5621748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc415a03-bef1-4434-a4fe-3bcc460bb3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a54406a-d8fe-45a8-a8d7-e6b9b3998e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2bc4f9-77ba-40ec-a321-5c91bef465f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed63245-7259-4e48-afa7-19e3fdc2f4ec",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f941ac2e-cc8d-44a2-828b-6dfe53d9f9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034b26db-42dc-429d-bbdd-9a63162e2d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ce5730-6882-499f-8ba0-b0de2a180df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b87a6d-cfaa-4158-b5e3-948f31f0856c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568bab3c-eff8-4095-bba5-a6e439eb3c8b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a4cd7f-3ff9-46b9-87a1-dd83b1b7f815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b012fc-d083-4c0d-946c-a50f29e0a7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1575b1ea-704f-45b3-94e4-d1d9aa38893b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86b1bf82-c89e-467e-a7a9-518d5bb82d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9e645e-c1a3-4c98-ba19-4e799e7842b7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b15319-447f-417c-96da-8396d53cf379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439b749f-46b6-4337-a2a1-77c562af4cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe0ff38-68d3-4e9b-99a5-0106922fc89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6494a329-6abc-4a19-a996-fdea2a5c9c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5261e9-45cf-44f6-b2e3-a563db95d61b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adcc25e-6e47-47c8-a2f8-59fcc2ec536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f48410-745c-4287-b880-2187bc26bd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c083d1-0817-48fc-81fd-bd9e18a32648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5c4d0e-2336-4a5d-9175-b3ab0dd62889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b943899f-f53f-4ae8-a094-cd824b77dc30",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406db1f4-236f-4852-96ec-297db985ba31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad357de-f18a-4726-a5ac-1b9ca7d1180f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a045a8-041d-4a02-808e-c2d8a8fd52ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b81cdb-4694-40af-8520-75103e692015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c2edfb-e98f-49e5-a7fe-736f56021166",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c25b87-5c16-4045-a19a-b862c45fb0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a76e6ed-625c-47af-bfc4-95b5eb9f7a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce1ad1c-9c06-4867-95b3-8fd297aa70f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e70329aa-1f50-4d46-88ba-2f3827a1c501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53241a4-ecc0-43e2-8a4c-265021171d2c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f11d0f-5b2b-4bd2-a19b-4d1266c2fae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a05758c-957a-4fe9-9bb0-24b4b71fc08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034d9cff-c415-495e-91df-644f20d9e0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25037a84-cc41-4509-8eed-b2eaccc5e9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7572fd92-aad9-4e9e-8dd1-fec1acd2eafa",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c1ee25-f192-43c5-84d5-aa4fda3853ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b026f120-1382-4b4e-8eec-ff920703fa74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb74727-0449-4c82-a87f-845c608f5b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2d2b83-706f-41f2-bf3a-07b7f6da83ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3448f66a-9074-4caf-84ed-761181698a8f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a372237-64cb-45f5-9938-158985af2c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3dbb767-2ad2-4561-9846-bebd6516bc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d427cdad-2ab1-4cc8-b5b2-56151ff64cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0458ccc4-b1a0-4e10-a565-32959e1c2644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f866d876-91eb-442e-a336-9b9fdb77534e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccbcad0-0d8c-4a85-abc4-dc3aad7d8df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744c8b2f-54cf-4583-88bf-a17e39df771c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609e3189-f9e2-4723-937d-17abee1bb451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63beb8d6-abe9-4d32-b9cc-66040a07721e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53974de7-a6cc-4488-a29e-bf04df9432d8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c399f1-a088-4dca-9014-a2de3df29f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a40ac2-2e3f-48cb-ae4d-cb1f84abf51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9660176-1b96-4642-b02d-5a0c23ec1ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14958a01-8346-4bfb-b876-98ef0b80705c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eac721c-cc19-443f-8666-c10a3f47177c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90569e3-7da6-4447-937d-b04a5d0a5672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7189a9f4-a16b-4a3c-a922-5aae941b38e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab9ceaa-820f-417e-8953-558aecfe533a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c462a94e-78eb-4e4b-8a72-1356a1f68654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b59929-32dc-432a-a685-7919b0e7ff7f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3968a523-d6e5-4ebe-9458-9dddef99eb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5539335-09aa-4666-a5f0-df949e99a397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c3a303-88f6-4d93-a02a-edac5d43fe8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa200dc-1365-4e96-8fda-f85ebc855e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d48cab-f89f-42ac-b77c-f38056426c7c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a578d4-203d-4df8-b631-d1c937afbd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc49bc1-6b74-48bb-92dc-4636c6f18be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8669679-60bf-4c43-9673-9f780846b9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb53f47-4850-4a44-b9ec-04aeec4e39a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87ca7de-da56-4685-a0cc-9a2ab4f4af09",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33869b7-1755-4c4a-86fd-95df316c6f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314982de-cd94-44e9-ba08-69318b3a8de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4103323e-3c62-4358-a2b4-902194d8b6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d015ce-89d0-4940-a01a-d2940da359dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5ca169-069c-45c7-b226-4a84302e1eab",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad81ebc5-cced-44c1-b895-9913fc4bfacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f350a4b6-c4a5-41ec-bd35-7fc48dbd5c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca74b2d9-5dcc-49d2-b812-980b2e7fb38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a863bde9-dbef-4d4c-986b-7f34463ea60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af0a037-1750-40ee-b205-483a73f30eaa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af6a5da-9dd3-4523-a786-fcacfd5056b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a801dc-c750-46bc-a5b1-66e6fd8c0737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c037f0a-3785-4ca8-ab6a-26e18a3d72b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14ab1f4d-0b71-4acc-9bcf-23a4aa27994e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d70b2b5-8978-4b2b-8323-62abf1c09c13",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed09ca3d-af51-44dd-a30d-a98b5be97c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509079dc-00c2-4a6a-9f03-c68ec6a3426c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eadfab7-8140-4331-a53d-13c64e97be80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e997b5b5-33a4-45a6-ac29-2c0b83e22511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63f7500-fab3-455f-b838-52b2722e7988",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345d3ee8-9488-41a4-824e-e9c1bb423aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe96a75-9150-4a40-a788-4a51bf497fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08da0cee-0cb6-470c-811f-5bbb528fecf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13427a37-4024-4ea7-96e8-dd0c1f99546b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743176d9-68ef-48e9-aa90-9819fb9f13e6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9c8f67-bf58-4287-ba8a-246c2a131604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec21442c-d190-43d0-be7e-72f126b0a693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8bbea2-a409-44cf-a96a-8ed5b4cf499b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "20ca459f-70dd-4271-848c-e4ecc4e68ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1cc86f-9033-4118-82c1-9bd5ffe6d4ba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e8fad-4544-44e4-b535-37b3aa935033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97d758a-fa7f-480d-9ebc-1921c5949324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c0adb3-1a99-4c3e-8780-0a2e41fd85a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d5fda1-7723-4992-9117-dcc4f046fe06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d61504-4f33-4302-9cd8-f87892417c32",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2ac7d5-9736-4885-91c6-52f11da6b8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeabc43-b4f6-40f0-902c-b6ecb2b8590a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5c9d48-5ad7-441e-af4c-b031dccc5053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66ad136e-5f03-4391-80c9-f642480c5e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bbefa6-5308-44c1-8b40-e5d165b382f8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06959743-a650-45c0-80bc-bb8e01cb0404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f1f0c0-5a1e-4102-b6a9-6007491d01f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83af0ba9-7ecb-4f8e-8f6c-d2e64b77ac27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0fbb3d-b944-465a-9a70-6929a4ae4c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23d6dc0-9973-4021-bcb0-ec5749d51d2f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0984a919-b7f6-4524-aaa6-a6fe530d3f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbe32a1-b3a7-4aef-80e9-2a42593b9da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0891bb-97d8-4cdd-8090-743f2ea9e9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "27bdc729-9444-4e7d-b12a-7136bdce6103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c72e55b-b547-4b3a-ae84-62165e1fd8bc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bb8311-d605-40c1-8b6d-de1c5c2578be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ee7356f-2897-4056-8965-6bedfb36970b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ae3da1-31d5-4a41-b0c5-ea3a9d8747a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd502b22-c11d-4e9e-8ea1-2dd33efbe2a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d739ee2d-ab13-4210-bef0-62a7dc3fd230",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2df81580-9555-4743-a986-9d8c31ad19be",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62176814-0339-43db-b623-eeb60be27cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a55c0879-187d-4d0a-8b05-914a0e6c5def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c570855d-10ef-4844-a8b8-825ba14ee540",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bccf7050-870b-4292-be14-97aadf5365da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b897480-d509-4b88-b65c-386522a0071e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4a15bb2-d8c9-49a3-8e51-d3c94082d157"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aa1509b-1b34-4902-9122-f14cc20c6f25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba099098-5110-4b28-ba1f-25864e95edf2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6ad0091-7f2c-4993-b5bf-8827b0005d4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1481997-0e6d-44b4-b3c3-4026f19ff8bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7af420a5-a5ca-4ac8-854b-7c679b58f146",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efe802ea-53f6-4c82-8056-b38f455e80ea"
                }
              }
            ]
          },
          {
            "id": "e2edf2e6-1ae9-47e6-a022-5e18d1591b91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6ad029b7-87a8-443a-a495-a016b12aa524",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd022672-a375-47b6-a2c0-81980d1111fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e0defd1-6e77-44a4-b73b-b04f7993a28f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1c72126-f133-43a6-a047-c07a1e772aab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40c5d0a9-a53d-464a-adef-eb87cef3fb1d"
                    }
                  }
                ]
              },
              {
                "id": "0cbedb58-d013-4c85-896c-264a284b2d3f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eb5c436-187b-424d-bc80-b3225169e638",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "146c5939-caca-4378-96ae-a848f80cdebf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66b3bb0d-fe95-4329-af33-23ef2dbe4773",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cc470fc-f93e-4fb6-ab2a-af83ca72e028"
                    }
                  }
                ]
              },
              {
                "id": "1ea39c26-bcec-4674-8e31-c855992de3f4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9a61304-85a3-4429-b3ef-2939d5270174",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bb5c75e-1945-45a7-b12e-b341c7922360"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06e7d2eb-c122-4bc5-9ef9-b70b1ba0658c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10f5adde-f804-4275-829a-d1bf7a550a1c"
                    }
                  }
                ]
              },
              {
                "id": "3f7612bd-b25b-4c96-9ec8-08fe6dcba1e7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0add3783-3b6b-42dd-aa7d-69d04c52f05a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "064323c5-8dd9-455e-b1dd-534ce8ca0e6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e444528-85c6-488e-a4cf-c816fb3e9cc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a34f5c09-454d-46d6-b6bc-e962e53c7516"
                    }
                  }
                ]
              },
              {
                "id": "88432521-faed-43ad-8388-b7d81ceec912",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6a6165d-9b85-43ae-9449-625c0e2a3fa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43ffc96c-5f37-44dd-a403-3619644defca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b35875ab-a8da-478e-8639-23c5738a5bd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8f3885b0-eca9-4310-b6e2-d6ec19c04279"
                    }
                  }
                ]
              },
              {
                "id": "5cb8d19a-c378-47ff-b5f3-d4dbeed68317",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "444ca096-e330-4550-b7d4-620a61f3e3b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cb0231a-f2af-4ee7-bebd-5a9fa7b80041"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5d3c8f5-ba2f-4794-966a-ee166befdc52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4185c33a-17f2-49ac-b1a8-1100de79fb07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c90598a4-607a-4bdd-8305-60fd742fce7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dbb297a-0462-460e-97e8-1005cb8a3c23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "55b19c68-c502-475c-9c1b-240ee6ed0a03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a9b33db-f5d7-406c-b5e6-156c0b69354d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b465aaa7-e562-4081-af54-edb089daaba7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "efb8e996-efe6-4936-adbc-9f959a18a5e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d9eb6d1-7c7a-4f6e-a01a-429184a86cdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "139a0b1c-35b8-4540-95a3-29cfdb791f21"
            }
          }
        ]
      },
      {
        "id": "08005542-2b5b-4397-871a-985203b40edb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5dc45978-5060-4fbe-9a2e-62bc8acf1efa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa36fa10-9635-4c88-b813-79ddf18ff63b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b16c67cb-4db5-426b-9161-fdd31f10cbc4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5249cb15-8bd7-4520-a2ff-2c33490b13a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61902e67-402a-4b4c-b3bd-58eb54e8c832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2ae429-bf73-456b-a649-8bea95e511cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9629d6-d354-417f-94fe-530845c3e38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96a5e96-29b6-4f8a-9db3-01108bbfe47b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc40178-0e0b-4937-8355-be7d3cabc5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f748852b-1120-437a-8505-884d2a4b205b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856755ba-fa6a-4fc2-9deb-f8d847549e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf78b1e7-5960-4a7a-8db8-6f9e790d9c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6fc6b5-c0b5-4143-99a4-fd9eff22080b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2aff8a-f67c-4bab-a793-15e0ee4c8210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175d73ac-8baf-43c0-b24a-e73229af108b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630da5cf-0442-401e-827c-ab5eb3670e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7f0713-026d-4afe-897d-c3e3a97f020c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d765db-d4b5-4cdd-8567-22f5a6c50418",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb230e6-a593-4ca0-a159-0268f519a60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7945a1f8-b40e-4992-a5db-c58a5377de21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538d9bb5-0d7f-4e35-8337-d69bb32e4dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbca44a-e95f-4029-af13-f338cd3aec4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719ab94c-036f-4e57-9e93-69d6bdd3dadf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be03fd6b-3b67-4041-b8e9-de7d402ef854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4841144b-6b97-4afd-aaad-ea33bd7b04b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28449180-ea5c-4a44-9a38-8596b2e67ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4201730d-c73b-4401-9ca0-988ea302f86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e343984-699b-4dad-8287-25f7cc252d9c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201ae465-b8db-4e15-ac79-0d059cf2522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acde5403-b50b-4094-9d83-378f17d91352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df7584e-db32-464f-bbbd-26ffa8ec3b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b79f90c-cbae-452b-b4b3-dc2d312c98c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c261779-fd07-41b7-a7f6-353c20d53e9a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb0e60b-60b9-4c6b-a245-93bb0a61ec50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869151e9-0743-479f-b021-e79b771336d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed56576-077a-45cb-b717-06f1d944842b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e00107e-3ea6-4b82-9c9e-f27101c5a77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e04f579-f1f9-4f3f-9489-1cf9c3edcb25",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd678f1d-5955-43a2-9987-a82af655cac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b7464f-0933-4498-8b13-332303458d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715ee639-b0fe-47ae-bd28-7be34bb3943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62035128-f39a-4e5f-9aa4-ef8085b8bd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec55f50-a5ea-4fe0-be14-19668178c5ee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc021b7a-1494-463e-ab98-14f24a68de5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ee0bfe-0df7-4a95-8968-711b840d67fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fb63ad-09ba-4eb8-ab61-b2433dd08184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a55cc434-b547-4e89-81ae-deb834a68b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226cb926-1fec-4f9d-9005-69df1a26a108",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b0938-b22a-40f0-93da-164eb94de618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bc7ff6-fd07-48f7-b431-99fbe1a33b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09fd3fc-1cd9-42fb-aca4-24c5b2a2c1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f06d21c-59e3-41b3-ad2b-647133e4b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2707ad44-33bd-4121-b93c-aedd6267902e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5aae824-b0b7-4320-ad09-f4bd95614840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d66153-2387-4c6c-a6c7-98092d64bc19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea3627e-f9a7-495c-b8ac-5fa7b44719dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d28fc1-b678-483f-aaa1-56d9963c2f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f7cc4b-6206-40fe-9ae3-f07fbb96c7b5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6d49ac-358f-4920-8904-387d17746ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa853cb-d2ac-44b6-812d-d0769f1a59f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14a0acd-3f65-4a33-9a9e-0faee2463c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6eabc3bd-ca22-4150-8852-e469affbb3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff5fdf9-435e-421f-b1ed-3c08d91d5af6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35b1750-e00e-462f-8b32-97a00e5fbb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8ecba5-8be9-484b-93e5-d854052f0f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af9ba20-718a-40e5-8ccf-0c16e40af5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf0faea-6eba-4ae2-9dcc-4718714934f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f1d9ed-5be4-44ec-b817-67e39c283e51",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6265c9ca-7d93-48fa-b9eb-1ddc2e6e60aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f48a34-4acc-4d73-951e-5444d55b132d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe7d866-d5c3-43d9-a9c6-0fc2c427ff4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8e0de4-11fd-43ad-b524-7cdcbb157bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62411679-22d3-4ea5-a2dd-f1f77d84c46c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a80d02c-145f-4384-8f06-eba636212415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1839ce6d-d8e1-42fe-b04f-835797018444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c6d204-f361-4294-b3f8-01251ef270e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0f082b-caef-4dab-819b-57f908a5abca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7597e418-3db9-47f4-8213-064519dc8816",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3236ed97-624b-42ac-960f-d65eb77b4d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28990261-3a93-4404-9c73-0474a7382d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a9a441-87ba-4bf9-ab63-15c10407d7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e66ff7-fbee-4eea-a24e-d0e2b8b443d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4271dfee-59a4-41b2-a4ef-e0917cf6c9b7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2047c1-f9fc-424a-832d-8f98b1c21f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30f0957-13d3-4722-9634-f7e30636cbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae57b9a7-6de1-4579-b8be-da8cc18657f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f54eee8-50fd-4638-89e1-8f4ee642291a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9537b47-9305-42ff-a26c-3de25b8e6276",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0173879-afb3-40de-9ca2-d8ca03e60113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528df8be-c676-4582-9a1f-a9f948ed9f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0aab64-c2b4-4a2a-bf3b-aff99d76cd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0b8468-1498-4f39-803e-f58b249cc0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba40249f-7ad0-4290-9b62-7d271ed61c8f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97354b3-8ad9-43ad-bf94-c1b40ccd8a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891f24f1-2a2b-4b29-88bb-11a643973841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a038b9-ab96-4adc-b34a-947168919e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf07ddc8-2f5a-49d0-8164-6ae48b8de7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeed656e-b79e-41a4-831f-217333f69250",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a86b409-f5b1-47e1-825b-1de5b49df3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88a9520-a5a2-4234-a981-67da91ae5413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ee76ee-68b1-4ee8-bae7-5449d0ce7f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b53e1bef-67a0-409e-b69e-97d1dae8498a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9673f7a-bba3-4d03-9776-81b443e40788",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c6d132-e473-4c6e-afbf-776a6a4c4bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b66460-4e2a-470d-87a6-53b21adfd863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6090c98e-9cd5-4273-8807-f245a5fdb537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd411400-42b8-4072-ad4f-bd5e3dbe2aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f1b20a-9d0f-4a7d-be77-5c88c7d63fe9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43086e90-cdf3-40d9-a076-4d27d435196c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e6bfcf-4ae8-4207-ba08-1b49a04eda8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe13254-9802-493f-acc9-ad740bb9b094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9afc1aea-2e3d-4621-80fe-0f1768a57011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9584303d-5207-401b-87c6-8447c6870e82",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af068016-132b-48ec-aa28-7e035f09817e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4a9c1f-3f73-4f83-8e3b-86aeb15a3373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a9ef2a-fda6-4b7b-846b-f7538ab7eb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2e25f4-76c8-41a3-9ae6-5d98dfe86cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bef41b2-edec-4c99-8758-8aa616c9a3c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a6ba5e-c96d-4d3e-91b8-444c8ff7da62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31508a69-4dd6-4a02-8194-553673656471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098b0049-09a1-489a-9b42-b57180c985d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6c05b7-8353-4cc8-b9ee-85234964d9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b399a31-b334-43ed-ae42-41f04134fc62",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e634398b-1fbc-4093-a79d-3bf68e7d10c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9660de-6d12-450b-9d0a-1fac8f02c5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5278689-befb-4d01-a7a5-cebbb71bdee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e7a399-6bbb-4c12-af80-8030e2090d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dc7b9c-1c7d-4b16-ba60-76c37e411c8f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeccf3b-e0af-454b-8cf8-50e0e083cb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e71c975-46b8-4d7d-93c6-d37bc3f80e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a6c384-12a3-4db6-90b4-99bd3b5863a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a931b061-290b-4fc9-b522-63990a91c598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725ec13a-52a9-4cd1-be50-e2d2a305f8f2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8727941-fa20-40ef-92b0-b85451a55edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da2a249-f570-4953-a420-92a68a27d8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83202e3a-f2fe-4ab5-ba54-10a830102c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc280cf-10b5-485c-9717-81fc43001333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25178eb4-7ceb-43dd-81af-59c87f5d0d1b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48e1919-3575-48c5-ac54-178a6a76efeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50fa272-4e14-4800-bde4-82a8d0eae409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f469d4-9eeb-4140-b81d-a234f597dafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8620f07-f9d2-4c33-8259-0cb495cd4284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477a53ea-e029-4990-96f3-21e7f9ab02cc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d53d81-1af0-478e-a024-451231fdaa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa45199a-a78a-4dc6-857f-f761622fd71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b61817-e44e-46ff-bd2f-acbba9e76046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "161a96b6-b8b6-43a4-bad3-daa1df235a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa4a1f9-cbac-42b4-99ad-c50da1ae64cb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c61101-f992-436f-9ff5-53005d5c8d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fa9d62-ecf3-4863-822e-482ebfffcac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b6126d-a2ff-4eaa-9b72-587873811f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbbef06-6e80-4d16-9484-ef499c6380dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de05286-3d27-4228-9738-b4ba6e0559df",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14940fb-f107-48e8-9eba-eb317deb63ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04862253-e2c8-4894-94cd-d1a42032bae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8ec219-1f19-4add-8f47-59235e9b4d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d4ca06-9e76-42ee-b3d7-a759db5e1f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6d1ee5-4005-4bdb-99b6-d74735a9fb01",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62608fa-3e76-40c0-9266-8cd9937b240f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7640a11e-83b0-4ac7-8e43-ad67fcd4c1f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da80e9e-e394-4987-b0f4-fb3955e4c344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "352362f0-d254-447b-8777-866cffc6b8f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4045b413-c4c4-4023-9644-e22f79a97d55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5605d794-c4de-4fdc-a014-7f0ceb6f8191",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f56cfd-b260-4cac-8b0c-a8856a93a97b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb21ad4-5b21-4c4a-ba2a-b2428a290115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee72845a-b574-4558-8fbe-5bed5a3e7c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b819a2b-e2a4-49d5-8663-24fd6bf70d7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dd4e051-2b18-4f4b-8cd2-e1cbcf310518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aa5d79d-78e4-49cc-a615-3594dc008b96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "967cb0e7-5935-4a99-b01b-0f0f556a2675",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee7595b9-1c8b-48d8-bcd1-59037626d35d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "090f1896-8798-4717-b7ed-783d2c2197b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "abf85090-fd1d-4f20-8012-4d7726dce2a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce442ef7-8033-44fa-bff8-2cac8e0ef942",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbe2460d-4f45-4c13-839a-4adc6313e985"
            }
          }
        ]
      },
      {
        "id": "233fa90c-7843-4a64-aaf6-0dc1d68780c5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "af81ef03-28cb-44b3-b54e-74ad9226a0fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36953c24-fe8b-4054-a784-97d6af9330c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62081730-d5d0-4b90-8f73-9ac65a9cac78",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a92705-e765-4227-a834-a31c7f7c8e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a48ebe3-5913-47b7-b3cb-6d52ac90029d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef9a908-1119-4cd8-80a7-df5891d19ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaca17c7-4e0b-4511-b082-a884d80eae24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149a97e0-79d9-45aa-a925-b36e1b925a9f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80296c91-48a2-4b59-b7de-6ab2aa5067b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ddee0b-6ddb-424f-8fae-9f89b6a68f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f74a00-f5d4-412a-b21e-68e516a8c130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3ee6f6-7b66-4809-9c5c-9712cf63df89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fc2b1a-eb10-45a9-9b11-a93efa6be497",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1924daf-5c8b-48a3-a610-15778b74e886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7e044f-1a6d-4f5b-89ce-76fa837ebc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1b5be8-786e-44fb-b7a9-3d46cf9b19f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e50e8ab-f660-4414-aa6a-5441f9921283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26812f06-43a4-43ed-8e8a-27119c883f7a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3f12f4-a3e6-44c9-99f9-5c2cec5e9afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60095e6-745d-4811-bd39-baeff124c2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852b194c-173d-4aa8-9ac7-4f2654487c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01fda6c6-cddb-478d-8735-e730e118e4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea608ed-c319-4dad-8d71-997fd0454b06",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668dee59-5110-4d36-b35a-84a278ebc0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c867879e-3aa7-4476-b73b-6fd96e521a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bf3cb7-06e9-4a5e-a359-d6a857e56b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aafb6e09-9816-4a34-8662-d167c08b0293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c1dff9-71b7-4972-9b3c-897e555f8a60",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd18355-f26a-470b-abdd-5e0dcf0a9bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cc97f3-4761-45cd-9dae-c6cf47997906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f78dea9-9bb8-470d-8149-c7b10c77d98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d19c7863-4a8f-4b12-b8f7-594a6693b401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91974a0e-aa65-450b-b80d-ad6684dba8d4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc289e1-b76d-4a19-add9-e9d00ee2e692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ecf8b3-38b6-43b7-b0e9-cc377b8b23d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a18ff1b-fa06-4376-9941-9b026f3d9524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "16808f30-94c7-41bc-908c-e426d7e5e58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b995cfa-dd33-41a1-aed8-66d680e94a10",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a790e530-fdbf-4e8d-a7f9-16ac6927a92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbde5da-98fd-4f35-933a-857260416d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3441d4-cd91-401c-83fe-5863676d6bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c272d3-8f78-482f-a21c-5c2722cf617d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d44cbe-ee78-48a2-bd23-2c5af339d6ff",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696f7303-885b-4ed6-95c8-9eeddfceb36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070e1895-6e5b-4af6-8d43-9a1273bf2301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a6052d-fee1-44d8-a61b-5e4a2eb97e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5479bd0-f868-4976-8de8-ad25a217d4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62825a42-29a6-42a5-8343-f9219605e90d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19b37f4-3d93-4382-91fe-39a5cb5f8071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598fff5e-5331-4297-9719-26de7b33552a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7978303b-91f3-4ab1-b97b-4a6093dd27e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ba8c6d-d724-4293-8de8-d1c7117db810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ec4cd1-2cee-4fa3-956e-69166afee5d8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298f8e97-76ee-4ffb-8778-1c17ac2b1d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02685bad-73d2-413d-b3a0-605d02d348b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc52172-d056-4232-a19f-9d6fee1e8b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c6858341-85f6-4c69-843e-ed13959254f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e187c4b-ea85-4db8-bc70-26a5fbfb46cc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8d58fc-3d77-43eb-bbbe-96a0f83576af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916936ef-71ce-40f2-8893-eba331193835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf15a6f-45d9-4469-a9f9-60dcd803923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22890c49-badf-473e-9445-2d10ff6a1b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8d35d8-a21f-4d27-a435-d1c986d54204",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8e0e80-21dc-4ded-8a59-7c0e45e11dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c53394-83a7-49c8-be0a-91d4cb23317c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab4b285-79e0-43dd-a463-4a19d1423534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "996b3221-b43f-4089-9154-a0b37fa5487f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f9645f-252a-4368-80a5-988a305e9414",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020b1574-04f0-43de-8741-f0d348623958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a494c368-b0d2-42ce-a59b-eb4cc9a677be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29434dc1-e492-486f-b0c7-f48762c85e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c349bf9a-59fa-4220-bb2e-bd7aaed66f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb65c3f-db89-4917-82fc-d3c1d5a914f2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ad108f-f972-455a-9732-fa9d320ec890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827d0978-cfd0-4289-93c4-2edcf49f1c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcc41cd-7f54-42fb-a0be-cf30a2219016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3a928b-01f6-4b04-951b-24a3f78efcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc79ebb2-f02c-40c6-955b-3988f9734ef0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de331b22-7dd2-45e8-bfa0-d40d900f8cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa52e3b-e28e-4622-a343-2738fc896b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb1bdda-4a66-4bdc-9c8a-012fe4cc8ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "63077a72-bff3-4201-a8e7-33144806101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d445c18a-bd1b-43a5-8cfa-b8df98a4e1e3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0589d183-7d83-4ea3-ba23-0a44c201db3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6960a18-b3a5-4129-b913-b11f12d10c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87078f91-2bba-4334-bd38-18c0e37c16e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6352dba6-a3d9-4481-a7f6-eb263d8f3c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e64af2-b4e2-4368-a27c-5999cef6f72f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07b95cb-1425-4f5b-8b9a-f285a52a9396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7e0431-739e-4459-aa72-3d9f703317d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f544e159-499d-4364-ab4f-63e8c604411b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "53920e1d-2c80-4d49-96a7-2f9ec87fb96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae818d4-bf5e-4b0f-83cb-f69147985856",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04309cb-fa77-41de-a176-265c737d4a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8127ad-fc57-4db2-a792-e1d61abea314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2ffa4c-da05-4877-af12-f5e4a66aab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "525ac570-485c-4d48-9435-b3646fbd6283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809e99a1-bf93-4f82-85a1-3bdfdd247dfc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949a62d4-0952-43fb-921a-64aef7efbe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc24f46-86d7-4574-a97c-9aa05fd0ac1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a7a670-01f8-4d9d-b244-b4316bed6000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "794f7f3b-b33c-4f95-80f6-9f963b0cddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4145b197-bea4-4214-9f47-9181ebadc38e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5289c62d-1579-481d-928f-cba24aef31d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e79d8cb-3545-4270-89ff-53115fcb9c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc085508-a7b0-449a-83f2-14fe24e32995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dab4eb4-d27e-4c21-a3e5-512f1301bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2109120c-1ce1-48cd-bd5a-4ad90fc43d1b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3a2d5a-f3a4-49c7-9b28-e93d36db101b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8bbc1f-721e-4b5d-9f6d-89598e312b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67d095a-e662-4eda-a3c4-d95386597eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df6ece04-7345-44e4-8ef5-d5c4429ca52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f473e05-2d39-4f61-bc4a-239ddcbf3dcf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0bf1d2-3a7f-4a2f-bf69-23ca1325e1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a705402-e5b0-4217-8155-eaa28ef205b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e187c6-7657-4319-9832-f64a09a84a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3530938f-8f9c-4e44-9bc1-3f8f99b9ae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab06a9ca-8159-489e-98c9-8433aa97a86d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6a2d2e-fee3-4bfa-8bc8-a69cc086eece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067b8c25-54fb-4814-aa30-3513f6074ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bf8acd-60ca-4b48-ab1c-0f5a38844e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b75a5b-4685-4dc4-9889-9116aa85c466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85154173-67f7-4fd9-ad0f-02182219813b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8792c1-f7f7-4c7c-b475-4741bd413f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3750e641-6b44-46a8-a840-a9dc22a25983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155c4306-0038-4625-adb5-f40704f8276c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6473a2-44db-434a-a403-b347fdc8b60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426c5527-f4f8-4674-a4e0-91146358e685",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70822a40-39e5-4f1a-a3e3-966bc1c687f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b39e1c-e356-4cc6-9b5c-13ef8ec5ff25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344cb41d-0a47-45ff-a8fe-1617ac5b445b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a9bdca-2a38-4a28-ab5d-0549a7a2a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f0268c-1451-4548-8fbd-f51b9aaa8d22",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dceac52-cc40-4e19-81d4-021b74050ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb6aa03-25fe-47cf-a8ae-5c60d935cd9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac6e665-4b5f-470f-ad46-b28e58cd31c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff35024c-32f1-47f9-8dcc-cb8e75aa088a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3c7304-46ca-4778-99e5-7480bfe89955",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa83f9-5465-4d4c-badd-e8d074f0badc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4aa7be1-b542-47ad-862d-e114384c54ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391132f7-1030-40fd-a730-3cd159addd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "539f348a-bf42-4824-beb5-44e894a749a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da74c9b6-72a2-4ebd-b622-b2d1555043b4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2816185-edb1-4c3b-8109-5ed2098a63be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf4de35-607a-48b4-9f9e-f710a67015bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2d44f4-73f5-4d7d-9604-7cdd401fae8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b8501a-b98b-48cc-9d89-3ab6a4cbaad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2af75d-098c-43db-baf5-04e9c4ef3d8e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c67669b-76b3-49f9-ae71-cd3a373cf21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612200fd-9742-42ea-a9f5-e619daedaf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec8852d-7161-4e20-bb72-0aa111806160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f67c7348-25f3-4d22-ad27-41a1a7133aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d80f917-8f15-44d7-8f7d-5395d559d6bb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7bafaa-806a-4e35-8b87-10fb9670ba54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bbb274-49ab-43a2-97bc-8eb294059cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78a5d27-55f5-49c0-839d-40c6849aedca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edf91d8f-b1a8-4741-a4a3-9bf5595169a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36705ed2-78d1-490c-a60d-9b47e5de3be1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc93a1c-0f22-4203-afa0-d84c54d36062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c12b93-0b6c-4481-8e67-bdb45dcd8b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719701e5-72ae-4f21-9c9f-94f7c656bb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22aed7b2-1366-4805-b9f0-8c738d18fd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1e4c42-5ce9-4e85-9f0e-91f622b1aea7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d30f3d-3c77-4d94-9f01-50056f6935db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09d74a6-a40e-4ff0-b960-6826c6258359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e07093f-27bf-476e-bec3-8253c5ee72e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5699c538-b8ec-4a0c-aa84-7840d3d3f6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad44d38-5e44-4c46-a140-cd1fcb992f3c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10ba384-3366-4e03-a28a-efbb2ec553fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8c3201-fdc1-45b5-86e8-80a7cd0f72a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ba3b4b-d520-4f72-8a1b-7098eeb10174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7601867-8bbb-4d97-b8ea-51a836df1610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d0fa53-bd28-4a7d-bee6-f09c8b0d6967",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace46412-729a-45e8-bed4-78bdc7880468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0756ce2c-b508-4dda-8a5d-d61f6083e5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3948b4-1d3d-4ae0-9332-0fd08d8f119e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4737418a-70fd-4559-9726-f4fb659c1e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285c5ead-9792-497d-8a19-8e06b5654773",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63550065-24a8-4daf-a8a0-8fdb15faa05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c7cceb-5055-4429-aae0-1ca62fdf0c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796749de-fee9-44ce-a362-f8feca5f8f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8e5d08-0f43-4104-86d9-bf7c806e4281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfdb91c-d398-4ff9-90da-72f7466cc4dc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac3397b-f100-4dab-bf84-a1e71654ab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c7d0dc-e45c-4251-8e97-78679fa87b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6a90d0-105d-4935-89d2-d7f052646d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "242c3618-ce80-4e58-a108-c810d68e6b66"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76e843e2-181e-4e1d-b14c-12f5c3f51990",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2a15b92-4e9b-470c-80ec-f4abb07314bd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910af5b8-eaec-402d-84ea-49ac9811f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "155dc28e-6531-4317-b776-bfa36d48f4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a78c0f2-f572-4d6d-9e1b-03c6939319a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acd48a0c-57df-4c90-8107-038feb3600bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddbbf32b-1835-4ad0-ab18-d2bbd51cb9d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c98eff63-4c53-40de-83cf-6d68240ca3b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d45a4fe-3734-4f77-8544-a86a0816882b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2084b27-ce8c-46cf-96fd-bedc26fa747a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7530f0a5-3b49-4dcd-8618-91e0aecbedde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b9c1e5c-b551-40b3-86a7-77acb387df29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "668db5ce-cfe7-41d9-968a-bb68ab43d9c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a81360c4-5655-4733-a187-6dd684484e7f"
            }
          }
        ]
      },
      {
        "id": "817dec0b-84a2-4d44-b474-642704d5f95f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "21322437-39d6-452c-a743-f0742c287eb2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "739aeb48-1cba-40c7-9cee-9cae2646dd2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c97e9615-2097-4929-915c-313e1be2791f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154a02fd-014d-4b60-ace9-d3464257329c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5626c3-cb18-43db-9857-a8f3c54acd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8220ca-b5da-4cdb-bd43-58d2215413ac",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77c4100-d4fa-46a1-8e3a-d3a79dba65d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdc4ae8-51b5-4c40-9682-b8797eb7be5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f235faec-d2de-4355-9880-07384c9d91c9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bf71f8-7d96-4333-827c-73bfdbaa8a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1470bca9-a633-481e-8b0b-cdcfd5b5fdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b2cad6-d189-4342-bff2-be0c12bc2fda",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc09ca35-69bd-4c9b-849e-1b90ef2711e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3680934a-b086-4033-bad6-445131dafa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c72e81e-2af4-4b19-8f04-7ff0fa330f18",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a938d11-cae9-469d-9b35-f989fc1a3944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45d789f-0e91-4cd7-8417-fb653204147a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec07ff82-fc13-4da0-b5b4-1e7401c1e7c2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8120325-aef8-4a24-9fa4-30e6f01ddcc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3070b24-c97c-43ea-88f7-672d4fb5fe30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18125ff-1ddb-48a6-b832-c1ae8d947490",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a924ad75-d8a1-4b8a-98d2-c08ec4262b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b84a96-be28-4aa3-aacb-d97c50641cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f5c6fb-475a-4ca1-adfa-3b32d328540b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfd7ec9-f6a0-4bac-b91c-f5f5fec812e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9774be61-6a13-4fa3-aeff-ce0edcf8e4ad",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ca6a8-3837-42a9-844b-a987a87d1895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5657c10e-6626-4a08-8a59-596b1af14d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774dc1cd-7f4b-46db-bb34-9239c868046a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0676ba32-1e84-42fd-83cf-ce31c4d74f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989dbd79-a45d-48c0-90cb-52377aad16f6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3aeef8-7513-47c2-9a75-8f992080f43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e6a9579-c21b-4ae3-8a36-c410c0dfb2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84356f97-0b05-4af2-9104-7512c0269ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704b5ef0-fd8d-4666-9d76-523319feadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e59849-51dd-4731-aed1-89037bef44ce",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6adda5-6ebc-4f58-94b8-1506222eca4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e135ae85-c56b-4c72-ae38-8d80ee272d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5ceca3-d3d7-49a4-8084-e7c4d8be6ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9da9771-6c66-43d6-90f7-0fe5f8fbaa10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd4d2b-54c4-4f40-a0b2-39bed5d011dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524741df-3ea3-4a8a-ac96-5f1192b4e2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb3a818-ab44-4210-8d13-971ae06c6495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59056fe-622b-4474-80bb-cc3c0391008f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6287722-1413-4113-b1d3-9b7b4eb044bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e5c33c-b9b9-4a8f-b71f-1d9bdad55d76",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb4461b-343f-467b-b0c1-4a79ae059703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6e94f4-1f66-4022-871c-b7a01a0fd457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8565163d-039a-4552-8804-d38aa52d9238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0f775c-9fc7-4e00-b873-ca7f1405d45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1329bf34-e99a-484f-977f-e4b0f9e6a7f9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9688ded-8feb-4690-abb5-41fd7e11ed10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfbf134b-216d-4340-b6e7-bff5f73aa386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd414746-7bc6-45d0-92bf-0e73bff0ee35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f196af33-396e-4d15-bd2d-c40d3cc2c246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fb937e-c643-41a9-bf2d-20f8ff9071da",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c62ae3-4c43-4f06-9294-7acf37acff88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f247eb-7701-4da8-a998-762ba5d37a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7019b7-db58-41b5-86f3-bed544de8d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9acb458-15d9-482f-a5af-ef74b7db0ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b049d378-469c-4924-a60c-65496ddf6bca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5ce63a-9d9d-4630-b369-83766bfe2cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a36de7-0eb8-40d2-8f0f-0487072a40ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b13dc8-5fbe-48ec-b5b1-94a303a09893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba87d51-534d-4ba0-bb9a-c5a0bf3fa2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14082e9-f860-48c5-b873-75989cf4bab3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f15a7b-8c8c-407b-8135-6fd7ae15eec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98119941-d3f7-4684-a24c-da1117592935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688c21fc-1691-4518-80cf-1539eb1a4933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86202d7-8c95-43cc-af33-4a96418894c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e76616-9e8d-40c2-8dd7-cc66e35eb266",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2ee43c-2e08-4b9b-afdb-b2ac3168f44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a257c04-f5c4-41e5-896a-5f8430954f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3227c1-2211-442f-b38f-108383f538a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5bd469-eb7b-491c-bad5-4ba4e03e4e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36f6e8c-b931-4137-b687-c87f196e1a82",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0533a1a0-abe3-4365-81b1-638a09f90e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3659aa4-34f2-4da1-87bb-2a06005f3c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98687d47-7285-4d18-bfd0-b31e88e7db8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3f9d6b-43f6-4242-860e-cb02da9daf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b10b221-f5db-49f1-8410-329dd566192b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e03e6a-a758-4b5b-a9e7-c7601dea068b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1cffef-d41a-41a9-884e-d7dcecd6ed3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fc0902-7973-43c5-a05a-031ffc1d3692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b0bfb0-01da-4fb0-917d-a21a7360cc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0793ac-a4dd-4f02-a087-4c94bc4ed293",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705390a0-b99a-4f94-bc36-bb8512a7bbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9af3be6-d18c-40b1-8ea8-1ca42da23cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7faef47f-560c-4c6f-950f-f798a15a297e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7faff8-5060-4d0d-a239-908f23d84246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3930408-12d8-485b-bc33-60562699117f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34720b74-194e-4015-9c19-49092dff3aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7636a44-859f-4072-86d7-e4eaaab5764c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c30370d-b6c6-48ea-b636-16b4e949fbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc0b714-6b01-4ac7-979e-2239bac55194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd28f394-8a39-401c-a7f9-ad160660d378",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071bc04c-eb3a-4e96-82d5-df83a05a51b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b79be3a-6f1f-43f4-8bac-31822ceb4c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee514c07-6b3f-45d2-be73-3fd1909d1eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80104093-6314-453a-bb13-36bc1058f3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865fa19c-c894-446b-b05f-9407ba1931fc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f7b3e6-92dc-4e90-afac-4602c2e2983a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662189de-04a0-443b-b98c-da2d18d33da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f15a66e-6f7d-484d-b813-6bf7000469ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04313445-e165-4d73-a13b-321d84101bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adadac7-1181-4190-a80e-939f8cae42f8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930cfcbd-8b16-4bf3-8fc9-40522f404d60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a69071-80a8-40ae-bed5-b06f526157a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752c5db5-c76f-4a1c-90dd-41db06d3de40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf9c2d5-c169-43c6-a487-e82f08f5aae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59fc5ab-dc14-4fe5-bd3b-0bd58c139d40",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c61f73-ef1e-4d20-97c2-5cdf95f6385a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f82924b-61f8-4588-bf4a-0972f55d6e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fbef5e-1c1b-4ed0-904d-2b876e4e12d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2dbf6d-7a3c-45f1-8559-af79f532d203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f012ec43-70a9-4f58-95cf-f9e8a3aeffd5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5a966f-bdea-49cf-b7d9-2a5295552f48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89215145-eb85-4bc0-a9ed-51567e387af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6980db5-1de6-4661-afeb-0ef20284f776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517376c0-fe9a-464d-a70c-92ac40438101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2d67b9-4c50-4994-85f4-b4e091739e21",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526dad8d-63f7-4aeb-9620-0421cc16217e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db0db47b-7de9-43dc-ace8-adc93fba124d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3944b3c-830f-4729-aba1-ba129ad46649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d1cf70-9150-4700-b2e3-90e9b4514dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaaf4ce-6879-47e2-b996-6fec949b4d7e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d68b5a-e973-4220-89d2-45606bff4376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750fb7eb-b589-4ee4-96f9-561b5cb1a295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e539d280-a02c-4a5c-b373-8ff3a43298f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6695a4c2-3b6e-4232-bcf4-5d9079a0a73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a204de-8b74-4b86-be8b-9d9d7ae746d0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930a55f2-314c-4b4c-ab53-2c3425b996ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eac2468-5124-437d-8568-71589744be0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b007a664-051e-405a-9805-e58b9ebd4f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d242d109-612f-4fe9-a52f-a69fb46938b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e1ec53-103a-4a6a-af5f-fc9579360acf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72afe52-dac3-4d37-a2c2-e3f008848033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b692a0d-acde-40de-bdf2-f02ae05c7208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7060bf1d-5067-420c-b4e6-f2329b541e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4a23c0-18b3-4314-ad7c-0ada3843dbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f47a0-b0fa-4517-9f93-a60acb0f1728",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e53b2ff-4121-4a87-aff5-4ec6ab4d3be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d65db406-f499-4aaf-993a-7b3f143b8423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4359c9-e843-4f15-9f9a-29181f6dd5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b1db35-5af1-41c0-95b2-865226479692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ddb9fb-f3bb-4d7b-9f23-171973e2a22b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438b0768-5334-4448-9b02-a732f0808f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e098095b-6fed-45f9-98e5-ec07a7d6fd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bb6d6d-d837-46a6-90f2-fec5347cc787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3477cc39-2c9c-4f70-8b5a-e4915903f592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4b4836-b205-4f25-aae3-398b3f435926",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98e7a6f-1fe9-451d-b692-e8897aa08678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a92326f7-32d1-4df8-a9ec-9e333b2da8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54bdffb-7fcb-434d-8ec2-8f7d52efbe35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee18f532-de55-4f56-a0c8-425184b41bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ecae43-9c0d-46f9-b901-a856608ca46e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e99dd74-3ec1-454e-942d-fc8687a6ed90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9648777e-6b99-4ef1-b06c-6af7c02af09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e193b790-b44f-42f2-88fd-d6a5d76c47d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83b9e4c-4c09-4f7e-8fdf-1f77ed94d587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc45d063-a8f4-4c5b-92a6-4e851d978354",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e82ec5e-5a2e-451b-b89d-d6095d3fd995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6db62d-d8ce-4e45-a55f-62c2187f2b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d848ea2-86d0-4b57-9909-c924db48f619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a42ba8e-9674-4990-880a-8a3d94b378d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455aa289-7e7f-4b20-9ee7-503515cb04ea",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e5a02c-3e3f-4767-b644-782e65f84a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9852245-79ac-41cb-a64d-057336275334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440075b0-4ca1-4943-a9c3-2e9e0141dd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd4f4c8-fae4-4219-9e91-cb2914f94921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58087c55-0b8b-41f7-9e07-553547e4bcc8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202805b7-a6d2-4fd1-95d6-5f59bd38b5b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdba385-74c0-48e4-a1b6-04bd32f4ba00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea94a23-356a-4cd3-92d7-ae5f0d11a167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3526d495-0541-4a47-a2d1-bafe072f2686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3e7f48-d116-4819-90ab-30e5ea0bc8a6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c682c2cb-b144-4f59-916e-ee8f23d43329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf23a87-4fc5-48f1-8f57-3592cbefbf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646e68fb-125c-4399-ac46-4b55456d0547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b1f431-2858-4206-8213-bab548954dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14da3548-208c-4342-9867-7bf0bd56f11f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b31d56-6f93-4979-8559-d407a92f55a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342fcdbc-80d3-4109-8250-cb1b8de8c003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7d8981-49c6-4910-873c-6604d052ebd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5799f00-859f-4084-912d-85b994355782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf2a7db-1489-4bf6-8cce-b11a780a819b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896ff2e6-9be9-47cd-9f6b-2e1dd629af8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232df3af-bbce-4358-a30e-4622d8e85cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c76067-6321-4151-b8cb-0650a97c857d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28488d2a-e3fd-4a70-96a3-0dadd2354fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd834bc8-ae86-4f14-905b-dd1f59de1bb7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe72914-e864-4ff7-a305-71184760077b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5040f9e2-e8a3-4a6a-88f5-0788846e956e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade9f345-4ea9-46e1-a035-efad6cac318f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8b8d13-05c4-4546-a670-e37dfa864557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e407337-ce67-4b35-974b-7f965ee12b96",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235fcbf1-499b-4a32-bc06-7d3cc637e208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf02bc3-796d-46b7-bcbb-f8c0071549d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a143014-20fb-4556-8131-e3c93dabf423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e396a80f-605a-40c7-981f-c2e233307722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74df3555-7b93-4486-b318-f47c7ebb6072",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a120f306-ad8c-4b7e-91cf-8fe399b1bbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11733ee-7ca4-49d5-9b54-f2dd02aa1e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a54795-6535-4f87-ac05-b5f1adb9d7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0900201-5e51-473b-aeed-cbc6ee135ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c330a478-2386-42a0-af5e-4b1aef99716c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66811d1-83d9-4a0b-bc09-be254067a581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a82408a-6261-4d90-8a89-7a5df40940c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a254954a-73ca-46e3-9638-816ee98f4b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683195e6-e7e2-4866-85a2-73b44d0b452a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02095f71-c6e3-4075-ae6e-a4831d778d5f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3d9f2a-026a-44c1-8c18-8dc24346ebb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a5f33f-5850-4913-b75c-bb8090554b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d9651-8d73-4127-8051-b117a230c69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6546f79e-6ed1-4bd2-a1c1-644f9a89b9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6e837c-0d20-4bb0-8cf6-9145e13c9ca2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032e9a65-77f8-46cc-9995-4b569df08fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24242fb0-0fb4-4177-aefe-54983d64fbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f64580-913e-41f7-93ee-a13e45239c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212fad95-8022-4fe7-a0f7-dc68de6c84cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f54b376-d394-488c-a982-df8fe244c683",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c2a01a-5d20-4750-a433-c77ae8d8eedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ca2367-9a9a-4c5b-aa04-8596e8d9525b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67414d1-a3c7-4079-9981-18ff633dd1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da23ec0e-75b1-4532-af4e-5ca8c5a03275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2536aa-e8d1-4a5e-8bad-add3772dbb0a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2f8b99-6f0a-47cb-a292-03cb1f1d32b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdb5d4d-5077-4588-b579-4534f1d2bf20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35f9f3d-e878-4a21-985e-e556bb699847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b186e00-ff7b-439f-9773-d0b6ff1ae4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f667d3-2ccf-437d-8db1-ebdedab506e2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14b1da4-f1ba-4782-afa9-d3c8690d51f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45f1e8d-376d-4d20-a228-c5a958c3f2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7411bedb-107e-4ead-a497-da22037b9e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfb692b-7408-4d56-bf23-f53f2cf221ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14eee6cb-6c01-4af8-994b-7dca13322d81",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdb642a-1535-4ac3-bb60-97b14bc6332a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d71516-a891-431e-b446-5f0fd4aa6d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc76d21-4d95-403e-92f8-05df749e5466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17e6ad8-86c9-490a-96dd-5b6d8f3cd11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b70d5ea-8a7c-425d-97e9-5a67e8e3ba8d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4733e62a-9642-43e7-8fb1-3d6c6a59858a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b60f9f6-9a5d-4712-b07c-6a8d808e7bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b9b602-387f-457d-a53e-f41320a48406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22942309-caa5-4df2-bc02-e9e1e0c85f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcb2f4e-9000-4f08-953d-ffdfd2d7d6bc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2a9f8e-c7fa-4942-b19f-e167b0c77197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2271c4b7-1c3d-4ff9-b1f2-c5d5dca3c624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47272eb-881b-4eab-95c1-049abdf1f7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a193239e-0595-4de4-bb68-fb8080a041ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6f2702-117a-4bce-886e-f23d0201f635",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777158e1-5d78-446e-83dc-bd762958ad8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad8662b-e59e-4861-b047-811f7086952b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d7879c-982b-44c1-979c-71f793877668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56979e52-a50d-46a6-a32d-1d957b587e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf25fe64-56f8-4175-89fc-62beb7450e11",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd4d4e6-df46-4c1a-8463-297ffffec6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94c6197-5eb8-4140-bee9-53dda3688349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e4e5e4-143c-45a5-96af-4e60922db117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4356fe36-30a4-481d-bda2-fe4682144cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c9cabe-b719-4b32-bd9f-4154b5d3e627",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6fbf43-c0ea-4f24-8433-18f2c1df960b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6bc54ac-da55-46f9-a840-143ce7712191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13452f9a-ce81-4029-94bc-caeab59c4f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2690ddeb-e78f-43b3-b410-c08025c8e1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19916992-c949-48f5-88ed-234a57cbc5b2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5e9af9-8ada-48fd-9300-c0073d228d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b324ed7-7b46-4055-a1fb-71d471159647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d265b1a-988f-4146-b6e4-3ffd553a783a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49b7c99-9078-4fc8-91f3-7cb24572c3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7be800-699a-491a-9fd4-45138551e4fe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317cbb13-ffd8-4e6f-869f-c948212ff1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5008f7-d739-485d-ad97-ac2cdae23832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b15f25-c32c-49fa-a0b0-a1fc330e6ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0538db4-9a13-404f-be38-8dd61fa0a14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb624c8-139b-43e5-9a03-796eb34bf83e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5a0c7b-7dec-4652-89a5-7a58fe538603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e823cc8-227e-41a7-b77a-b7fa7f2180fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dc7e99-04a2-444c-b9fe-3563ddad0bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff85c138-d66d-4eb5-9e14-d03a9f7673b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2c9652-3c00-4f66-92f1-f18af8adf25c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd558c-2a19-44eb-99f0-848dce9cf729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae171209-514c-4f56-aed6-86c3d40b5d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baf6354-d126-4eac-821e-57634acc47c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcaa555-a10e-483f-9a64-b0049506a37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b691631-b044-4f84-b370-0106a35660e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8b1988-178e-4f31-953b-9cfb94303755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4efc62f-53fb-4840-b8e2-6a94a558a5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9ed741-32c2-429e-bf3e-0a9918891729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc42d797-29b1-42bd-a077-a34992ff3d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd55037-c85d-4eaa-a5c1-ae217d470d9e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5196816-a421-4eef-a376-14f3aaa014a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8f9a06-5b34-4425-a805-64e9e7a227f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f02133-2c3c-4b5d-a183-aba0d801d258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ecfeb9-92a5-4ed6-8313-a23d68d2ea8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e675c3a1-77be-46df-8919-b669d6920693",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3208565-fe48-415d-b852-8c1daa2296cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92f6e87-68c6-48b4-b70e-83cab5ec11d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bda09d-d922-4e39-93bd-f31f32bb7503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcf5b9c-2f1b-4b3f-9089-09467ba825b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f0047a-7199-4ffd-8fa5-d4837360f077",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb59399a-129f-4ae9-94df-bb426502c5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a58c6ec-fd3f-4beb-85ab-5cf18d498b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434da87e-e65a-48ce-a140-c53430a54267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced6e19c-4d6f-4ebc-b25e-11b80e80cf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3483b08d-f22a-4359-a9df-7a2296d9403b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbcd138-0524-4fe2-8f12-60b47f55f21d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8921acd5-6bab-4e76-8d06-766ca306ea6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0e9f57-7b72-487d-90e9-4ba641e65cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be9a533-2935-4279-97b3-c14bf53118dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3917b78-023b-4dc8-8015-c59145194a60",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841ab9a9-d8e3-4260-b43c-8d59c6a7be96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64bd1f9c-5501-4a4c-a82f-1992527b5722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ece6057-ebd9-48ae-a859-b291262d5fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf23345-55e5-4166-96a9-c66154acb462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fd2a37-0d2d-4955-927c-ec95e9469774",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8729f13b-00c4-4d76-9d0c-7df46035ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c61191-f5cc-493f-b2b1-9eac6e7221a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff9369d-04ac-4a89-b636-d9a3b82af84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed88d88-5e2f-4dd2-9b56-f33060f6572b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7811f8b3-5105-431e-a333-1b12916b420a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57187b67-0b76-4500-ac6c-cda3775053c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e3bd2c-9c03-46fc-9f36-ee1811a4b8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4eb516-ff0d-4c92-9252-88ce011d709a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bede343-3aae-44ce-8807-55e60bc02879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6f4922-3b29-4b72-aa9e-03947e2fd093",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0c38e3-8332-4b9c-9cb4-88a5b74bf7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1670ff9b-99bc-4471-a703-7abaae2d5a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e4bd52-22c6-4ab7-9740-6e2ac4ea44ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f127873b-09ed-4839-bf33-1084110db8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fca6e7-ac57-474f-bb42-629044ca1b71",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026b5e8d-2c96-44c5-8bb0-badae3337d67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "988f5ade-3247-489c-a4b7-aea192093e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6880e8-1bf9-436f-8931-0186638cceb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302f5f2d-5141-4b14-9ba1-41a20f8f49d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b948adef-6c47-47f2-972c-ce036a74d23b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382a1ffe-8ca0-4587-9b54-9e9eaf88a703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbda433b-c1c2-40a3-a052-1610b1145556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15611a8-460c-4cda-ad41-b9eb2a0b5c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856096a0-8512-49a3-989a-6169a8f2bee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa9ecd1-3a15-4dd8-8fe5-82410ca48b6c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f826fb96-82f2-4891-a527-98a6ddaef9ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb14e34e-d5c0-437d-992a-47ce151435e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab16b9da-9b15-49e1-a2be-793f2f426e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce390f20-4c32-414e-951e-943f51ab5127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3421d2d4-3c2b-46be-877d-781a0222b4f0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd39f18f-83e3-4929-b620-59291c16a238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708c2fe5-53e8-4500-ad81-694c6f21c073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17b137a-681d-44b7-a246-c925065ff4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a31ff2-c72c-49f8-a1d6-b8c033e870fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d494869b-98a0-461d-a9c1-aeda1af60994",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3725fa07-6c7a-4312-9a1c-623b63d48945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09f79da4-9a43-4812-8fa8-85358122a59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f801ebeb-2e55-4d31-adfd-f303d77c2173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15df6aa-6846-463b-89a2-a9432293ce6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e76cbaa-ce47-4a3c-b496-3b8066608ef5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430f6cbd-86ce-48cd-af01-83aab642d46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f4cb085-b376-4905-8aea-9e4307366f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a4cf58-b3ae-4f63-9203-db085596dd6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e729a5-363d-4e89-9e39-257862221ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6228c8e8-1202-47f0-9fa8-54956a0c967a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d41819-57ec-439a-b381-8fefec292d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd10cd5-f012-407b-b475-afbf91db9e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77e9771-64e9-4ebb-8795-e4f2eadbd0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8ed72d-da49-4d00-861d-d1efcd964f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd4809e-3eb2-4969-9adb-28712a2087ae",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29690df3-2eb9-4a68-a9aa-fe02cd1aaeef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f6d108-13ee-4ee3-b811-f25db99c81f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbb0dbf-ad72-4f0f-82b2-3089d67d516f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0593db12-0d87-41c9-b041-72be1f0d0276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5803f644-ea1d-4e08-9410-1d4bfd6990eb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19814220-7926-4adc-a6f3-a938dff7996f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31914338-f3c1-4375-922e-6b7b0835c156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f17189-ce9e-43f4-8966-1bc210cbafb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25da25eb-c57f-4371-8899-5740723ab186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bcf3eb-e092-4744-b291-fda1b528dfe2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bc108d-2526-46eb-b634-a0ce79b14b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9582c2e4-e87e-4155-bcbf-9068f7e3f2df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d687df-53eb-4046-aa22-8e7c9a4fb2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66a7620-861d-4bb5-a79e-4f2bafc6f22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cda52ff-696f-441e-8cee-a9489805ba14",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383f7cff-77e3-46bc-85bc-abfdd080caf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20f8498-8e85-4680-9c8f-464c895b1e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60b1780-67fc-4001-84cf-7d3e7d1d8916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f743b537-52e7-4de4-90af-57592261fedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defa26e7-790d-4bc1-8dca-08ef63be84b5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fef3abc-2a9e-4539-a4d1-4c67203a4dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0985ad5a-0a28-4b02-a5fe-865547ed67dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793000dd-28d5-414a-8e51-768ad94febfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94062cc-a47b-489d-87e3-a089a7d49179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90f6a6b-9512-40b0-90c2-d5b92bbaac6a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b04278-1dd3-477f-8be0-9acfa12d3aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d501f3fc-d51e-44e9-b4cb-1ecd290405ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b714d285-e564-4530-9cec-102b6e9f6c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff70731c-c4de-4dd2-b2ea-ba6d17bf9529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d30155-f8d6-4a78-84d4-622d04b01fb4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c586118c-a4f3-4b33-867e-d33f977fa65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e686acd3-1482-4d95-ad1c-93971b9c802a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09d1025-4393-49af-b44f-75ae928a5e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474cb552-ac4b-414d-83a7-0bee4bc97c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96191ae3-e32f-4a54-94bc-f0d54d02971b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19568626-568e-4573-b565-c95469446338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc16723a-e409-4f4a-a509-a6afb0ea1c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb666a2-92ce-437e-93ae-c39c4481c8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a8126e-f03f-4f21-9cfa-3f10d862e72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062608aa-141f-4bc1-a51b-f4ade055d4ca",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a97601d-6cc4-4867-a2c0-9634f3d57127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5bdd90c-9e95-4717-a1a8-f9f1678df45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4525b8c6-466c-47fa-8a76-d379a14058c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed027c7-02a7-478d-8358-2016a5e8abac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd10e06-d339-45e7-8ab7-009d57c26620",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3ae1a9-c193-4191-bdbb-8e4def3207c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d647eb9f-21f5-4ffe-82e2-a9ebd667ff6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad179740-b29c-4a9d-baea-ee171e14e794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b75370b-2749-49ff-a263-d1d0ec12c70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34747162-c47a-4ebb-aad1-19016eaca3f9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad3e379-e02b-477a-adbf-d33594cc5484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c72542d-cac3-4de4-b43c-68e1b86684fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ffd180-4195-4290-a95e-9cc1a36fad1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ef0b38-5054-456c-9fc2-cd1e93406680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790c8534-56a0-49cd-8b96-a761d759c8a4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7010da25-2b2e-493c-bf3b-9857a3066c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "521793ab-bd51-498d-85d1-e468cf4ad1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b6ee67-aa7b-40c0-ad4e-c8639079c8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da33562-5ac7-4034-98cd-5add1aee3bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297a69b2-2a7c-43cd-89c6-ada26205e6b1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812e5090-ade0-4c3a-abe6-3247be202512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c6f42f-1d49-4d06-952f-74f8c573f33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d7d5a3-9e32-4673-82aa-cbce24947c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1be1cb-b40a-417f-9372-2a2d5ce08bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966324a9-e9c1-43f9-ba48-819b1a79cfdd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5331860-36fc-4b0d-bf20-0b32f4b95d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b80450-7983-4823-a750-dbf441662826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4be8fb-6b46-4cfc-b464-047d286e1486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91df864-7803-4b54-af92-c5f973f9b5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4ab795-d087-4c4e-9fae-c14a196f2b5c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fe1db7-fe4b-49dc-994b-b3b2a98e6082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0af65e15-2acb-4c6b-95a2-f258d3b0b4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e0f172-dc92-4248-b7ba-d8c539e4e45f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1ac2fe-5e7c-49b6-9a90-e37278f93942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed48510-57a4-4073-ae21-6dfb68ff7c3c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0f1aba-ad92-4855-bcfa-319641cffd5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "150c1ff5-7fa8-4ff3-b4aa-9159e00a48fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebf4bf7-4f6a-4741-8656-837d9db0c7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58d7661-e513-49ae-a550-c07c4c4f6d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f569cfa5-e0f6-44d1-bef0-44b8d1ed566e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e0ad41-71d1-4afa-bccd-aebf67aca64f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9abe453-dd86-44df-8d88-32e192aedd13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cda4cc-ec07-42ee-9d68-9c8ccbfa63ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc65c4a9-2f35-45d3-81e7-0e28142f16b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d8e55b-fd59-49ea-9f1c-d1fab6a6a9b7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2307d188-3905-48cb-a4d6-883efd2e3f0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c53a26-4a18-4fbb-b22d-31d0d8743bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f4b32f-83e8-40bc-91d1-9e4251860d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4eca2d-8a7d-4c43-9eea-f9eaaef7b156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa0d21e-a011-43e7-8357-f0c7577e9f59",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd865f5-0d01-4d65-9b2b-f9ac03d0f8aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa9dac8-4973-49d3-b233-9d97803f5607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831ad133-2538-48c1-898c-130e75a22042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553f3b40-90c5-42d7-9224-6f351d803d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb9d361-b200-4bd4-be36-9d47fb64dbb9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb306755-5a3c-46b5-b4da-b45c383f4a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ecb8b33-c75d-4a20-9f69-d9b2b9afdc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8234e25-2a87-45e2-953d-c20ba0e7967e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5d0ec6-c412-4ad1-afc0-ec06a56214bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc9c5aa-f4f5-485e-9eed-e4712788b1a6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1403051-e492-463a-a28a-a5c53c273626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7aa914-0ff3-49d7-be08-fce263b7c385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca5dcdb-45bc-49e0-b139-7716cad09e07",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48be9e2b-9bfb-4cff-a401-8bbe5c7f6cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d629ae01-2ec1-41e7-915f-52123f052d3f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c4d931-080b-445c-ada4-61309cae2a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d7917c-aeb4-4948-aea2-668e6184b52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03045882-cc8f-4f9e-a19f-683d6910d9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583ce87d-97d0-490a-a51c-1a172eb54898"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e91426fa-071f-4b0d-b8f7-66a42fe7c71e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89993392-c521-49ec-996b-ed4d6776d2cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0978c433-36aa-46d8-bb87-f8be0836ba36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f5894ee-47b3-469d-a1e1-138ee52493b7"
                    }
                  }
                ]
              },
              {
                "id": "0bc226db-a917-449b-a1c1-a7c8731ec65c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2e2ad1c-c103-4712-8dce-4369b825ca26",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d9c87f-c758-4c0b-ae07-722aeec97422",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b0fbcbf2-b9a7-4fe1-a59f-b07ba63a10fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9606db06-22d1-43cd-842a-f6ddab00e728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45e12e2b-153c-40fa-b9f4-8efc509e2fdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d63f4898-7dc8-419d-9299-8a6f927fbadc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f2adb88-c9ff-4d6e-a016-e71758ec54af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39179d35-cf5d-4f0f-abbc-b552cba3b0da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acd6f594-b0ac-4c20-8eb6-4b5b59e2c7ee"
                    }
                  }
                ]
              },
              {
                "id": "94a60ce5-9c60-4f6b-8be9-474d17e7ef68",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b167c6c7-89c0-47ed-a4d8-8ed25a71df60",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa897de4-f743-4707-8796-4daeb99d56f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "79058854-0589-4ca6-88fb-a08ac149033b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67387f02-e11c-4027-8b06-2cf0c78f9684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46706a6-9b5a-4666-8d23-bda096cb800a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46524ffc-b963-4a37-b62b-dcab21c8ef0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f20ab72-aee0-4f35-abec-242d27de9a78",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd774f9a-c59e-4082-b16e-7658e3870dcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "45463a4e-fef3-40c6-8fae-e7237ac7f1af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92d223f3-3bbf-4ff2-a012-b2e2a1d77a05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21a0b3e3-d008-46bc-9cf7-0901aa3d9730"
                    }
                  }
                ]
              },
              {
                "id": "b16548dc-0f38-48e3-962d-8d270a0af194",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2950aa8-10c9-4da9-9869-f0d024125718",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4f306127-83b1-4f9f-bb8f-0961ff180ab0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9778e2cd-b96a-46dd-8276-925e6a80083f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a141d9d-bdd1-478c-a876-db80868815de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62d4ff07-9b2b-4f29-aa8c-8dc3ec2ed501",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e5b1c256-c8a6-4476-97a9-6365ae2393d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b92dd50c-2178-4dbf-a6d6-9903d2448a90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d033b7d6-15c0-4e3a-8888-0a4bbc85729b"
            }
          }
        ]
      },
      {
        "id": "56a49a04-054d-4ecb-a93f-03b34502b681",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9c514b1a-9d90-4f2b-bc38-fadb5687993d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22b09d2e-514d-4ebe-926e-a5ee06e7855b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77e7c44f-5832-401f-870c-c8784f714d5d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032807f2-470c-4138-8e45-848f2586a996",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1a84ae7-bb21-48cb-9ebc-6b63f1905b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b770bf08-0639-4f4f-9da1-a4c2732087b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fac8dae5-c11c-407d-affb-de6bf42b8b36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d9f9aec-385f-4d9e-a7df-88194adea215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "deabeed4-625d-42f2-956b-b59e4c4fb57f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c847f8c2-570c-49d2-9852-2d2f84edc663",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "988dd448-4785-41f6-be72-f3bc1807136d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d8c5646-d6a4-42c0-954d-36ad09dd3316",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "08e6ac27-8651-4954-9628-ef8d914b68b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "863fb0dc-e6be-4bf2-922b-8cace325eb9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0a4e249-7d83-4c16-88cb-3899157906c3"
            }
          }
        ]
      },
      {
        "id": "e14f70b8-6e8b-4b0c-9750-dfc79cedf456",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "895980fb-ee0b-44a6-ac9d-0f19b86cbfd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f990b391-0e69-4409-9730-6b769ae2e9ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d844ed0b-6b63-4dfb-a8ff-0babc5b3d38d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f6b426-ec7d-4232-8884-9f524443f77b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6e73d7c-9c5e-47b3-9cdb-c5de43642e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5359bc22-8dd0-4599-b64b-4489ae1d764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c42f8076-a0d6-446c-99c5-0d11a30182b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aff3b7e-3fcf-4b27-b4fd-5dc1bd77b7ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d117fb3-4391-49e4-8ca7-8d4fa3108b49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "472ebba6-e6f4-4d27-96d1-10b2c7f04010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba1ceb94-42eb-497c-914b-e0c70357de08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daad33d5-ea2c-48d2-b990-a575cb37a9d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67fae892-37de-400a-af2f-560dacc0048c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "476b9bf7-307a-4095-bc90-cea51eaeeb39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dbd8bae-f3fc-4602-bae8-9561406bdb5f"
            }
          }
        ]
      },
      {
        "id": "73c9b7b4-4dcd-4ffc-9747-5a2e3c0aa01a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9bb10b7a-0910-440e-a1ff-a88f35c462bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "711d61e2-be10-4716-b0d4-ace3e956101e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26bd573e-6670-437a-933f-bf199307f54b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa754b4-5cd7-42c8-bd55-4e9b19102f10",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02048d43-5867-4db2-aa4f-dbd62f78ecea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49185b0-c60a-4a4e-b31b-521f09e12ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a6dad5f-c8a8-448e-9854-1d9ce6440a04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1080c38-5391-459e-82f5-0939defdda6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "940bdd87-5e3e-43f7-bb58-f77ebe17c3e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30d682ac-31fb-4ef3-8ee1-dfee0f4f1a18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83affd3d-6019-4d50-83fa-b6e520ce4eae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1f9da6f-2a83-45ed-8f56-c3af3d5c4790",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63c7e8a1-5f0f-44b2-96ef-cb3673535237"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0285f052-0a06-47ff-83cc-9e07e9f28efa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "354d096e-6dc7-4a5d-9929-fa7a611421b8"
            }
          }
        ]
      },
      {
        "id": "51a47769-8b4c-4344-b230-2166841fdc2e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e18b74a5-8871-4a34-940f-33e31ebf1e52",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8130299e-a544-4ff1-8efd-f2e6be4e53d2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c6eb2d7f-4281-42b1-9680-7b95c2e6f57a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d9e4824-fd60-423a-94dc-ab5329b7885f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbe3ff80-61d5-4259-9d38-2af873f6e112",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 60.96085409252668,
      "responseMin": 10,
      "responseMax": 1354,
      "responseSd": 149.6923840931738,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696120704587,
      "completed": 1696120734025
    },
    "executions": [
      {
        "id": "e1b9fd3b-3e43-4386-890c-7e3462060051",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a7c5a154-bc43-44b4-ac21-5d6ad46ab1a8",
          "httpRequestId": "298f6915-4ab1-49d2-bfde-e5fcf9882b47"
        },
        "item": {
          "id": "e1b9fd3b-3e43-4386-890c-7e3462060051",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "37bb72cc-4589-4977-bec4-7b02994481d0",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "5c5c4914-98e8-4558-9447-69d1c4e94214",
        "cursor": {
          "ref": "82527f1e-f4df-4eeb-b6dc-8e42772281b4",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f9fd6a1-04f7-4586-ac82-bf18f72f8d63"
        },
        "item": {
          "id": "5c5c4914-98e8-4558-9447-69d1c4e94214",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e71a70ba-e88e-482b-acf4-12adb172a01e",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "d77ed53d-9d28-4a27-8eb8-0a2dbb7351d5",
        "cursor": {
          "ref": "a7fcd0dc-cf64-463a-ad90-b18d3095542f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "12269efd-cd52-42f0-8385-65a753ed78f1"
        },
        "item": {
          "id": "d77ed53d-9d28-4a27-8eb8-0a2dbb7351d5",
          "name": "did_json"
        },
        "response": {
          "id": "afb2e22b-8e29-450a-817f-e7fc5ff87fbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 362,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f596bd53-5c92-4e12-882a-dc0cb1942c11",
        "cursor": {
          "ref": "c9ca0465-17bb-47ab-85f3-e0bdf2ca8ee4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8d6dacd3-4d85-483b-83b7-61e3c2defdf2"
        },
        "item": {
          "id": "f596bd53-5c92-4e12-882a-dc0cb1942c11",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb67194b-be56-427a-8058-085b542a58de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f596bd53-5c92-4e12-882a-dc0cb1942c11",
        "cursor": {
          "ref": "c9ca0465-17bb-47ab-85f3-e0bdf2ca8ee4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8d6dacd3-4d85-483b-83b7-61e3c2defdf2"
        },
        "item": {
          "id": "f596bd53-5c92-4e12-882a-dc0cb1942c11",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb67194b-be56-427a-8058-085b542a58de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e4a93d-9f7b-4565-99e6-9543d158f2cc",
        "cursor": {
          "ref": "9987cdf6-983e-428f-9dff-6ff6c4a9a941",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3261da05-7512-418c-9eda-650af6876b6f"
        },
        "item": {
          "id": "66e4a93d-9f7b-4565-99e6-9543d158f2cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "08e70707-8ea7-49b2-9386-eeb9ee7423db",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9077a65-1c50-4133-a3fa-212f31af384d",
        "cursor": {
          "ref": "9c858402-30b5-4829-a9af-1df3457be4b6",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4c63d494-9876-4840-82ce-b83e4a19838e"
        },
        "item": {
          "id": "a9077a65-1c50-4133-a3fa-212f31af384d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0d0b4f47-0f52-4300-9cdb-d4c30ee158f4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad57dc4a-f60d-40e1-bf74-020c576886ed",
        "cursor": {
          "ref": "6614098e-104a-4460-9781-c72f501b36f0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "badb9ac1-d1fe-4bbb-9f81-f0795564446b"
        },
        "item": {
          "id": "ad57dc4a-f60d-40e1-bf74-020c576886ed",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0cbe4f9c-7ccc-4eee-963c-41904a6b3ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89e0c4a-a0eb-438c-8012-6bbb1b3982c1",
        "cursor": {
          "ref": "0bdace5b-4ac3-4743-8d85-2e4a925c47cf",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dfda1dfa-7a3c-4e0c-8f0d-54c118083a93"
        },
        "item": {
          "id": "c89e0c4a-a0eb-438c-8012-6bbb1b3982c1",
          "name": "identifiers"
        },
        "response": {
          "id": "66c51f28-74ae-4940-a414-6912e0d286c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "668d5f75-97a4-4e6d-8b66-964ec82550bf",
        "cursor": {
          "ref": "f3abbbe0-5527-4639-84cf-681d82735f1a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "276a897d-605d-41e6-9a9d-5747a82220ff"
        },
        "item": {
          "id": "668d5f75-97a4-4e6d-8b66-964ec82550bf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5302a6d3-419c-46ee-bb65-cfec2725f3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94210f23-cee1-4f82-bd15-d5a7d568e61c",
        "cursor": {
          "ref": "c11084e8-5bca-48a3-8088-cac5e8de51d2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2c316ee9-b112-476f-88e8-4fb44175a191"
        },
        "item": {
          "id": "94210f23-cee1-4f82-bd15-d5a7d568e61c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f6b57d40-f2b5-4e69-b8d6-031bdabf9404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a962fa5b-6729-48cc-9e79-c1f220f82302",
        "cursor": {
          "ref": "3174be05-82de-4784-9009-63650f578cac",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bb771231-59d4-4b3a-b89c-26803cf74eb6"
        },
        "item": {
          "id": "a962fa5b-6729-48cc-9e79-c1f220f82302",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "84849314-df23-453f-a6c4-60842968ab47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b85a46-ce5b-46ff-97ac-065cb47187ce",
        "cursor": {
          "ref": "2e33c816-0235-464e-a67f-e668cf70898a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6f992afc-6adc-4949-8f20-2435a23a35c4"
        },
        "item": {
          "id": "69b85a46-ce5b-46ff-97ac-065cb47187ce",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a8b80c4d-53f5-4071-9119-f9ff04364259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a34efce-0a66-4f6f-bd78-faee22589c05",
        "cursor": {
          "ref": "38baf2ac-7ae6-42ba-bead-d7a8b7ac91ec",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5981bd07-23f5-4f5e-9a85-8c2f4e1a8ebe"
        },
        "item": {
          "id": "5a34efce-0a66-4f6f-bd78-faee22589c05",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "99a1db08-7df1-405c-91d3-0caa8d11e6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e2320a-2b4a-4645-802e-f41bde70d10b",
        "cursor": {
          "ref": "969b6228-083b-4f83-a8fe-db7c04faad07",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd30754e-a6d7-475c-8ef8-896bfc6ffdbf"
        },
        "item": {
          "id": "c5e2320a-2b4a-4645-802e-f41bde70d10b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9514c17c-7666-4854-80ed-047e2a8c8026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4306d9-91f6-4920-a311-94abfb816174",
        "cursor": {
          "ref": "510b0d72-2d51-468b-bdf5-633f022f2701",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1bd8a64b-5b6b-493f-b19c-7f52c80b358a"
        },
        "item": {
          "id": "1a4306d9-91f6-4920-a311-94abfb816174",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f0132027-245a-4ba0-9e74-7ca9b791637c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92009b5-45da-44e9-9252-d1df486a75c0",
        "cursor": {
          "ref": "8acd914d-b298-4396-9346-463a3a30239a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "89e8f57f-7a5f-4aee-8879-902aa454b988"
        },
        "item": {
          "id": "f92009b5-45da-44e9-9252-d1df486a75c0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e6111374-63e2-4b5c-bfbe-6625b1fb9dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27230b39-a760-4921-8837-7aa04da8ad26",
        "cursor": {
          "ref": "96330a7b-2744-409a-a512-4407e4625b31",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f515435f-6e23-42c3-8606-bc5e8770aeed"
        },
        "item": {
          "id": "27230b39-a760-4921-8837-7aa04da8ad26",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ae2bc10d-148f-4c21-9ae0-cec1ada98dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a0354f-cc64-49ed-bbae-e3a190b482ba",
        "cursor": {
          "ref": "77867df0-4791-4c58-bd76-35dc48db731e",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "64500baa-ed42-4510-8bc2-6b560c5db891"
        },
        "item": {
          "id": "69a0354f-cc64-49ed-bbae-e3a190b482ba",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d07c2fda-5940-4c6a-9cbc-9b62d6da78c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365e3bb9-2396-4218-8266-081175fef599",
        "cursor": {
          "ref": "2c184957-04bc-4e2d-933b-05c42d98a6cf",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "945abc52-6f6a-4c3f-b37d-1271be8eabef"
        },
        "item": {
          "id": "365e3bb9-2396-4218-8266-081175fef599",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0cb97ede-0650-4639-994f-2ff4dade79ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7064c0-6967-430d-a1b3-e6eacfb8cacc",
        "cursor": {
          "ref": "22dc1462-4008-49a2-b49d-6fe278cd2e95",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "73c7672d-8c9e-401e-b73a-2dff2f6ba264"
        },
        "item": {
          "id": "7d7064c0-6967-430d-a1b3-e6eacfb8cacc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "47093d10-6102-48ff-82eb-8cce7a07122b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d672d2-c1b7-4eb5-aa57-06a8d23d2ff6",
        "cursor": {
          "ref": "25de0832-ce1a-4aa1-a912-2318747c8157",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6daaabdf-cdee-4932-ad14-3b7479bb9a3e"
        },
        "item": {
          "id": "79d672d2-c1b7-4eb5-aa57-06a8d23d2ff6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4f35a2e7-a528-4c75-968e-ac091d36265d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17196673-8ead-42b8-bd83-98e6bd20eea6",
        "cursor": {
          "ref": "819b3381-99e8-48de-b819-749a93081624",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "88f2373c-73de-46a2-9752-bf9a163cb479"
        },
        "item": {
          "id": "17196673-8ead-42b8-bd83-98e6bd20eea6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "546c15e2-079f-4a29-afaa-f1c8ea062f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5163199c-2c5c-4da3-bcbf-62e3b258cb99",
        "cursor": {
          "ref": "b79fa35e-fc07-4b73-be12-b2b84cd18e89",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "45b91ee4-143e-40c6-8329-0929a4df9e5f"
        },
        "item": {
          "id": "5163199c-2c5c-4da3-bcbf-62e3b258cb99",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a65de75f-bdc2-499c-93c0-19742a9f9b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa3d54e-231a-4622-9ea0-9098644f6172",
        "cursor": {
          "ref": "1f309715-4566-45c3-b675-62a3ea3af4bb",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "84da0403-eac3-4330-a752-6ae29c20b974"
        },
        "item": {
          "id": "caa3d54e-231a-4622-9ea0-9098644f6172",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d76859a8-ed4a-4b6e-831a-9b45bbbf9ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073f3ce7-91ed-45fa-b277-db638d7280c0",
        "cursor": {
          "ref": "73c2db64-c198-417e-8478-f4e62a4f0271",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "671fc471-f4ee-4f0c-ab69-f79d96c948bc"
        },
        "item": {
          "id": "073f3ce7-91ed-45fa-b277-db638d7280c0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "83076fc4-74c7-41eb-96c7-c2fd646a3ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b9ebf4-0653-445c-b619-cf0c023247e1",
        "cursor": {
          "ref": "00f120d1-9380-49cf-a975-cfd03ab54885",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cc37452c-5dfc-4331-8f15-723d6ed0e74b"
        },
        "item": {
          "id": "27b9ebf4-0653-445c-b619-cf0c023247e1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b468a164-258f-4382-a4ea-1c4b1be22864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995ccb80-f46a-4a71-b8b3-066222eef91e",
        "cursor": {
          "ref": "5f40468f-dddc-4eca-98b7-4d43ffb75fe3",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6e5599c2-b6a4-444b-abba-a2fea97a358d"
        },
        "item": {
          "id": "995ccb80-f46a-4a71-b8b3-066222eef91e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "adca8932-0f22-4a76-b168-7561a3a30851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fecfd7-3221-4f08-9154-76e78f8349e8",
        "cursor": {
          "ref": "fac0dbef-d1e4-4a15-975c-7ff581c61b1d",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b072567a-ac44-40b9-bdbe-2250dd739f36"
        },
        "item": {
          "id": "c6fecfd7-3221-4f08-9154-76e78f8349e8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "84df0722-316a-47cb-92b9-d033eff99f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92c2be8-51d5-4c57-9553-b5a1e712773a",
        "cursor": {
          "ref": "9f8f369b-9816-4349-a59a-f6abf1befe22",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a6328a03-82a9-429d-9ae7-a194ed798c5c"
        },
        "item": {
          "id": "c92c2be8-51d5-4c57-9553-b5a1e712773a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ecac19f4-fb4e-4d41-9711-065ca99767f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ee7d48-90b8-42b7-83ca-bb12384868f3",
        "cursor": {
          "ref": "65c234d9-c9cf-4073-a4d8-009a5fbf1d20",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "006e77e4-c4a7-43ae-af40-6fb8f463efb8"
        },
        "item": {
          "id": "a6ee7d48-90b8-42b7-83ca-bb12384868f3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "49d170de-5454-4a86-9f30-6a90c639a5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab2864b-acb1-4422-9349-65f9244febe6",
        "cursor": {
          "ref": "4c81cb2c-caa1-411b-b2e0-08bfb234a41a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b05437ab-6526-4272-a4ba-3c55a53a8185"
        },
        "item": {
          "id": "7ab2864b-acb1-4422-9349-65f9244febe6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c4ef7eea-3ed1-4715-90ce-51b27534f553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532341b0-7b58-440d-ab8d-f258d9ec742d",
        "cursor": {
          "ref": "834af642-fa91-4579-a5dd-bd7b8b98ac7f",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a49799f1-eba8-4dc3-80f9-c86a56508cb4"
        },
        "item": {
          "id": "532341b0-7b58-440d-ab8d-f258d9ec742d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c576632f-d84f-4224-9e59-ef2ef665f46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ced7d9-d6e9-4e97-a7db-f7c66d722569",
        "cursor": {
          "ref": "ecbdd145-25bf-4b88-89ce-a14ac51aabbf",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57e662ec-c149-4ac4-9dad-ad0fc8f2e8e3"
        },
        "item": {
          "id": "46ced7d9-d6e9-4e97-a7db-f7c66d722569",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "54dda035-f0ad-49dc-ad4c-479ad22d08e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5787316c-6b28-404c-b0a8-9a1e5b4b37c2",
        "cursor": {
          "ref": "765fa805-0ee0-46e8-a756-aa1f151c5c8b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4543c2d8-1d8a-4a0f-aa5e-fe9fc2d28ede"
        },
        "item": {
          "id": "5787316c-6b28-404c-b0a8-9a1e5b4b37c2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "da4f0959-30ae-44c3-a0cc-9b979aa9e4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95deb1e-6189-47f5-8a40-8bf832b73b54",
        "cursor": {
          "ref": "9b78a7c3-fbd8-4041-a62b-6263b84b436d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cdb24de0-e042-41fc-a42d-afc4a40b3aed"
        },
        "item": {
          "id": "c95deb1e-6189-47f5-8a40-8bf832b73b54",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7dd29b7e-7145-4fc4-a508-670e489f1b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137a5471-2ad2-4ee7-b7fa-a42eb3ca42f0",
        "cursor": {
          "ref": "192c29c1-3baf-4773-81a8-046b08605047",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "af887a61-379c-46b3-9f95-1209a8c9684e"
        },
        "item": {
          "id": "137a5471-2ad2-4ee7-b7fa-a42eb3ca42f0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "04534ad8-a9dc-4f77-ba45-b26914dca6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d123487e-6043-4db2-8887-bd3bc9456ac6",
        "cursor": {
          "ref": "00bb2b89-bbe2-4e77-b989-bf77e39e12ff",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c0193a5d-487b-4b46-963d-270109ff2b13"
        },
        "item": {
          "id": "d123487e-6043-4db2-8887-bd3bc9456ac6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "26f29f25-fcb1-47cb-9c3c-fc7a47b432f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0516b58f-9d16-4410-acaf-d00a79388188",
        "cursor": {
          "ref": "c5cbf3ce-11a4-4ccc-b688-2ce392467531",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c9c14bb6-c2bf-4be1-8877-7855f3c6e923"
        },
        "item": {
          "id": "0516b58f-9d16-4410-acaf-d00a79388188",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e253004e-e3fb-43c3-a8a7-05a81f1c8b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104ae752-155d-4138-b8be-86c44066bdd4",
        "cursor": {
          "ref": "e5a6fe9e-9350-4232-a5f4-24869e936a65",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "61a4d1e7-db57-4cc2-a65a-90516390ed77"
        },
        "item": {
          "id": "104ae752-155d-4138-b8be-86c44066bdd4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4ac0b9af-a48f-4132-8a9a-c91b611ef7a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "54ce0f00-e4cd-4d16-baf8-f69048e08dc5",
        "cursor": {
          "ref": "b58a813c-1e5c-488f-b56e-52870d34f201",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6dd8aa81-a13f-4c1d-a1ca-03ec3b0ceb1d"
        },
        "item": {
          "id": "54ce0f00-e4cd-4d16-baf8-f69048e08dc5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1af17416-798f-44bc-b2e9-db213c27981b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "54082dcd-8c40-4781-afb5-9ad2429386f0",
        "cursor": {
          "ref": "82ba07ad-d4d2-4703-8ce9-926784b79618",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "478758de-29d5-4e7f-b997-3f451d730b3b"
        },
        "item": {
          "id": "54082dcd-8c40-4781-afb5-9ad2429386f0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "38255048-2186-4eea-bc35-7d6131439637",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "49a1fbe1-fc33-4a61-9d5c-3b5f8747cb99",
        "cursor": {
          "ref": "f8b57baf-5126-4838-b0da-22bcdf8bf1a2",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "962875c8-ab4f-477f-a201-160411e7e2c8"
        },
        "item": {
          "id": "49a1fbe1-fc33-4a61-9d5c-3b5f8747cb99",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4067354a-702a-4c3b-bf12-7586e2a8a588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a69488-6115-4921-b9a8-e695bde165f4",
        "cursor": {
          "ref": "38b52432-26f7-41b6-aa54-0ee18a34d720",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c80e9d0f-52c6-4243-8f82-718cb87dc1f9"
        },
        "item": {
          "id": "70a69488-6115-4921-b9a8-e695bde165f4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1dc059a5-6a99-489b-9193-971f090f3ada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "826924f6-6c99-4aa6-891e-0c0277af4126",
        "cursor": {
          "ref": "cb720f24-7291-404c-9d43-3110d1f2dd19",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "056b8ba1-cb6b-460e-b2dc-548eb39d972a"
        },
        "item": {
          "id": "826924f6-6c99-4aa6-891e-0c0277af4126",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cf27cbec-d0d0-43a6-8101-f72000f0b079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5a21238a-2c05-4c18-9f40-c9c02cdf3a13",
        "cursor": {
          "ref": "b9478b59-753c-4590-b656-2332efbf2eea",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8940658-d5e6-482a-b586-3e042c45fa25"
        },
        "item": {
          "id": "5a21238a-2c05-4c18-9f40-c9c02cdf3a13",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "196089be-593f-4b83-a14e-848ab54e4cc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e28b065b-ba1c-47e0-8901-99b3606b19bc",
        "cursor": {
          "ref": "d60bf031-d8c3-408d-90d8-412a177e5565",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5d4e140c-4e19-4e3b-8896-d147a0f5a43d"
        },
        "item": {
          "id": "e28b065b-ba1c-47e0-8901-99b3606b19bc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "640d68a7-03cc-4c3c-aa22-bf7a2ef22696",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "16d429d6-a1b3-4c00-b7b4-9fc689e1dc7f",
        "cursor": {
          "ref": "2f7de1b5-77e9-49a4-af14-84380d9c1ecd",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6f1d9bef-7b33-4bab-ae10-a9e2048e7c25"
        },
        "item": {
          "id": "16d429d6-a1b3-4c00-b7b4-9fc689e1dc7f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "04b81081-4f68-4a79-80a9-53513c1e3db9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "87f838d7-1c2d-4ddf-9c0c-6e29896a86b4",
        "cursor": {
          "ref": "0093a10b-d5fd-45e9-b30b-592eedd60f33",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "de591f89-0883-4d44-9a20-57f189f149d7"
        },
        "item": {
          "id": "87f838d7-1c2d-4ddf-9c0c-6e29896a86b4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9b38c11b-12f5-481a-9f74-df077ee69a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fc1ca6ae-e839-428c-b941-e2a8dad09cd5",
        "cursor": {
          "ref": "848a5c43-6100-463e-aa84-0e78e928d869",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9fe4cf1f-fec5-43c1-811a-077cfff67a27"
        },
        "item": {
          "id": "fc1ca6ae-e839-428c-b941-e2a8dad09cd5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a386572e-3f2f-4018-ba7b-a88e70322320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "07b3a7ef-56d7-4704-80cc-315b2e722b0f",
        "cursor": {
          "ref": "815d68e0-7036-48d6-aca6-5f62c7518755",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bf562679-5f8e-47cb-ab94-0b31dedde67f"
        },
        "item": {
          "id": "07b3a7ef-56d7-4704-80cc-315b2e722b0f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ede7fa67-92c1-4272-adba-b6fedf3dfd66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "616ff23a-69e1-4cf3-b4e4-1b5c4181bda2",
        "cursor": {
          "ref": "a1545f4a-583b-4797-88d4-fff5c1d858b8",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5c0f6102-a1ee-457d-bfa2-10562710b922"
        },
        "item": {
          "id": "616ff23a-69e1-4cf3-b4e4-1b5c4181bda2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b4dd3020-ffa1-432e-849a-f2d8a386345e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ee5fcd4a-d71c-447b-bdb0-d233931ea222",
        "cursor": {
          "ref": "9f1b0179-16eb-481a-9384-8d60397ee4d7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5a22e4fb-e241-46e1-8686-111fa4535fef"
        },
        "item": {
          "id": "ee5fcd4a-d71c-447b-bdb0-d233931ea222",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a4fa5296-36ce-458e-9b2b-732c2299d42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c0312a-6848-4af2-ba61-9935de05550b",
        "cursor": {
          "ref": "79bce8a0-14d6-4d81-8268-b9de6561cb94",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "68a02da3-d395-4326-afca-098aab40a5b3"
        },
        "item": {
          "id": "a1c0312a-6848-4af2-ba61-9935de05550b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d22e8605-db04-4ce6-a095-e1d446622b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9cd8c1-d206-49ce-aad2-bbca526dfff5",
        "cursor": {
          "ref": "ae984a0c-b09f-4f12-877e-da6ba252f5ac",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c6ff081e-e649-428e-b56d-4da3875525b3"
        },
        "item": {
          "id": "3d9cd8c1-d206-49ce-aad2-bbca526dfff5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fbd2ab05-fe8c-44ca-a16a-82915ab16395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa5fd48-fb78-4e99-9598-761ddcc69c57",
        "cursor": {
          "ref": "1be764e9-7d32-449d-b9ac-1cd888cadc20",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "09bbc563-46ec-4356-979c-af13c1f689bb"
        },
        "item": {
          "id": "cfa5fd48-fb78-4e99-9598-761ddcc69c57",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c2f4bcbb-2664-4a6c-88dd-1196176c0e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5145ad2f-a6dc-459f-82fd-8f74a0ac1fcf",
        "cursor": {
          "ref": "26647c78-76f3-4cce-9c9c-ad3383d4ba08",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "62c13765-4cf0-446d-8a27-18f628515139"
        },
        "item": {
          "id": "5145ad2f-a6dc-459f-82fd-8f74a0ac1fcf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b7edbc4c-5261-47a2-956f-916290532814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7b8bc0-c171-45a9-9c8c-5fa4793bde9b",
        "cursor": {
          "ref": "2bd8cf1d-21c2-4def-9aeb-a25b0770b69d",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "817da255-29f5-4c83-90f5-93786761662b"
        },
        "item": {
          "id": "9a7b8bc0-c171-45a9-9c8c-5fa4793bde9b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ba2e6ac8-d082-444d-acda-e1208a1ab603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade3c515-0784-4db7-bb6c-c91dd4a86da6",
        "cursor": {
          "ref": "7c5b2e21-ee64-4e4e-b4fb-1fc04fbfa035",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "62bba752-935f-4ca3-b9dd-90efdee28f94"
        },
        "item": {
          "id": "ade3c515-0784-4db7-bb6c-c91dd4a86da6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f58f358b-fd21-4fb8-b776-a48a8ddc2c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b11524-22cc-409c-bcf8-046bd82b5fbf",
        "cursor": {
          "ref": "45874408-a18d-4a92-9bcf-998af036523f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1b21e73c-6672-4132-b46b-9311db60435d"
        },
        "item": {
          "id": "e0b11524-22cc-409c-bcf8-046bd82b5fbf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ea8e7983-0a76-4dd1-a4c3-5ac02c7a7508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb8dad-d1e0-47e3-a225-e649e774f62a",
        "cursor": {
          "ref": "539bd119-5ca0-428a-808a-67e5acce52f4",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c3f3cb6e-714f-4244-8b8a-1e3f92f8caef"
        },
        "item": {
          "id": "c1eb8dad-d1e0-47e3-a225-e649e774f62a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "24abb3cc-fd03-427e-87d0-0fe3e6baa9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a69f0fe-361f-437f-8ffc-bdb4b40e657e",
        "cursor": {
          "ref": "aeec16d4-01e3-4529-ac6c-4812ffce9f94",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "25660cc4-773c-4917-a3f5-6d354d6247fc"
        },
        "item": {
          "id": "5a69f0fe-361f-437f-8ffc-bdb4b40e657e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e80cb161-74a4-4afc-bbd4-c694f4d24c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d980df2-d4ce-4f59-96fc-c4fc340f9e55",
        "cursor": {
          "ref": "8186cfff-ef26-4ab9-afb9-6f3c06309210",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "665a3e4d-934a-4c1b-81fb-7b0727d4e95f"
        },
        "item": {
          "id": "4d980df2-d4ce-4f59-96fc-c4fc340f9e55",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "adfe2226-a10e-47e5-9006-a634af63e0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2f6e6c-1298-4b94-8b3a-e736d59a5e41",
        "cursor": {
          "ref": "c785da33-379d-495b-806a-16e38bdc0e16",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d538b5f-e833-4f65-aeb3-09a5495aaab0"
        },
        "item": {
          "id": "8e2f6e6c-1298-4b94-8b3a-e736d59a5e41",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cbb53cf3-a862-46b5-bd5c-d2e8b92992ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7994c7-3bd8-4a03-b48f-f5742c68c57b",
        "cursor": {
          "ref": "13252ba3-137d-4f01-851d-cc6b94442678",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "43934338-8179-45d3-b07a-dc0120779207"
        },
        "item": {
          "id": "5a7994c7-3bd8-4a03-b48f-f5742c68c57b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "483d143d-8d5f-49c3-b8ea-fee9b861d5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84d55e2-a94a-4b39-9197-5c3fbdc9c4df",
        "cursor": {
          "ref": "f71d5959-f30c-4784-be64-b30df4b784d3",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "79da03de-4176-429e-a12e-6acdea2ff632"
        },
        "item": {
          "id": "b84d55e2-a94a-4b39-9197-5c3fbdc9c4df",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aee01e87-049d-4590-914f-dcec8285c3c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ebf7d28c-0f06-4606-8a00-314f2bbae255",
        "cursor": {
          "ref": "da0b7a8c-84b8-47c8-9eea-7c87bc2bfa10",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "98fbc141-4811-4cf5-9a96-97235faf07b7"
        },
        "item": {
          "id": "ebf7d28c-0f06-4606-8a00-314f2bbae255",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "88082b32-7434-4bf2-ac59-1db8d0448a73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "58a577d9-3703-4ba3-adec-51c67af6ff57",
        "cursor": {
          "ref": "85a32fda-962c-4270-a6ee-5bb72fca43ba",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2f20bcc1-3699-4b56-a5eb-85af0faeaadc"
        },
        "item": {
          "id": "58a577d9-3703-4ba3-adec-51c67af6ff57",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4ec4bff1-a413-4763-8081-f90192ffc39e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "03f12484-5389-456b-be86-43eee54f86f7",
        "cursor": {
          "ref": "d6bf0354-87d1-415f-b6ae-925056cd8bcf",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2b1475d2-0835-4d79-a4ea-d23871609ca9"
        },
        "item": {
          "id": "03f12484-5389-456b-be86-43eee54f86f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5aaee26b-917a-4d83-83a6-eda8b6e1cb12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ddb3d4d8-771b-4e26-b5e0-a53a17594938",
        "cursor": {
          "ref": "e5f4b71f-a8d2-4bfc-9e1d-a4a9844b3700",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7074e212-7beb-4f39-baa0-11ec47b8da60"
        },
        "item": {
          "id": "ddb3d4d8-771b-4e26-b5e0-a53a17594938",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b1ae67f7-cc9e-4264-990d-a17817159d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b01ed24a-3aa0-4a3a-8fc1-e08c0d3ca6b0",
        "cursor": {
          "ref": "e8b7f069-4c23-4bf5-a8e5-3c9f6653b851",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6a7d293a-f951-4c44-af92-e2014b47a63c"
        },
        "item": {
          "id": "b01ed24a-3aa0-4a3a-8fc1-e08c0d3ca6b0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2993250c-2213-4eb6-b808-c1a48197e17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfb8635-206d-4985-9efe-c5e89f9f5ed1",
        "cursor": {
          "ref": "4914b9e5-403e-4ba0-958c-e91f90204bb2",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eb045e1e-94ee-4f50-868f-ff3cd0ffb332"
        },
        "item": {
          "id": "dbfb8635-206d-4985-9efe-c5e89f9f5ed1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5169b547-c793-4306-9a33-2b8fc3a53990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e0ea68-3f7c-417e-92eb-c664fc6419d9",
        "cursor": {
          "ref": "aafa88e1-5634-4088-aef1-78aef833bd0b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "781aac86-edee-4293-bb0a-d8eebb7b627e"
        },
        "item": {
          "id": "89e0ea68-3f7c-417e-92eb-c664fc6419d9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f66b6003-d10d-4c45-80f7-93aa88bed691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cdb8f3-89e4-4ab9-a381-419bf4b94cba",
        "cursor": {
          "ref": "d46be9e8-dafc-4200-971d-a559bca463f7",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5404371c-ed5e-4cf9-8cf8-67ed6a0618a1"
        },
        "item": {
          "id": "a3cdb8f3-89e4-4ab9-a381-419bf4b94cba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e852737b-536d-4cfd-be93-89b752c7d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7617a757-de7c-431c-a8c4-92d1c25c3d1f",
        "cursor": {
          "ref": "2c114865-0292-4943-9ce6-4e87353efcc0",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "76781628-0265-4502-845f-f02fc5ba31d9"
        },
        "item": {
          "id": "7617a757-de7c-431c-a8c4-92d1c25c3d1f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "543b2757-d74f-4238-8715-97aa5776f336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86df229e-6574-47b6-8c8a-132fcafeb7cb",
        "cursor": {
          "ref": "ab8eaee7-05b5-44ba-91fb-b1370ff70e04",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6b7c370a-d8cc-4b64-b76f-ad001609fdf3"
        },
        "item": {
          "id": "86df229e-6574-47b6-8c8a-132fcafeb7cb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d924aa8d-d602-4432-be7a-f6fe3bfcadce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed63245-7259-4e48-afa7-19e3fdc2f4ec",
        "cursor": {
          "ref": "2fc02279-e91d-4a68-9465-f67af3226cc7",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9bf68663-503f-4096-995f-7198d160a229"
        },
        "item": {
          "id": "5ed63245-7259-4e48-afa7-19e3fdc2f4ec",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6ffe0fd9-7fdf-44f2-b8c0-327f3d894f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568bab3c-eff8-4095-bba5-a6e439eb3c8b",
        "cursor": {
          "ref": "deeb8d50-4432-423e-a7d0-7f3c2d2c8356",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "158bd201-0613-4afc-b7c5-e9d70ed6abb7"
        },
        "item": {
          "id": "568bab3c-eff8-4095-bba5-a6e439eb3c8b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b955eff6-dfff-4187-a802-532c0c3a45af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9e645e-c1a3-4c98-ba19-4e799e7842b7",
        "cursor": {
          "ref": "fab49cb3-a287-46db-8844-cfc9ae93abb9",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "36c7e5cb-d4f8-437e-bf45-321ef59d70bf"
        },
        "item": {
          "id": "6f9e645e-c1a3-4c98-ba19-4e799e7842b7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c728398a-be2e-4a23-bcef-71f5c40e8294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5261e9-45cf-44f6-b2e3-a563db95d61b",
        "cursor": {
          "ref": "1d16886a-0d02-4559-89cd-e2cfbae6a78c",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f1204115-88be-4848-b5a2-ae5de32d1ed7"
        },
        "item": {
          "id": "eb5261e9-45cf-44f6-b2e3-a563db95d61b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54a9729d-33f6-472f-a051-3d0a74cecffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b943899f-f53f-4ae8-a094-cd824b77dc30",
        "cursor": {
          "ref": "3f673b34-9981-4649-9e68-a61989e37bf9",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7d98109f-0969-49d1-9d5b-f513c21c166f"
        },
        "item": {
          "id": "b943899f-f53f-4ae8-a094-cd824b77dc30",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2214276e-fd0e-4b16-9ff1-9eab4810be14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c2edfb-e98f-49e5-a7fe-736f56021166",
        "cursor": {
          "ref": "77ec1698-fcce-4d5b-8a17-eab5c8fbb650",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "63982dbb-cb66-4c2d-93b1-771a1c61b30e"
        },
        "item": {
          "id": "e6c2edfb-e98f-49e5-a7fe-736f56021166",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9addf977-953b-4265-a17f-0e3903863933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53241a4-ecc0-43e2-8a4c-265021171d2c",
        "cursor": {
          "ref": "ff6bb9ce-c838-4ec0-a959-57210d100edc",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a99d3f8c-fb69-4ef2-9bc9-3fcec93f016b"
        },
        "item": {
          "id": "f53241a4-ecc0-43e2-8a4c-265021171d2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "24a6a991-8f5b-4b76-8fc0-a061e56fef7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7572fd92-aad9-4e9e-8dd1-fec1acd2eafa",
        "cursor": {
          "ref": "4eac9342-d857-469b-9810-0cadf345d689",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "398617c0-9a8d-4768-9268-a355cfd5ed16"
        },
        "item": {
          "id": "7572fd92-aad9-4e9e-8dd1-fec1acd2eafa",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f39969a8-7d95-4887-be5d-7e5574ec7eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3448f66a-9074-4caf-84ed-761181698a8f",
        "cursor": {
          "ref": "0fae48ee-6ac0-424a-adb3-2f4127b10881",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c68aa3ed-4d71-4206-81dd-a5d2abce68b0"
        },
        "item": {
          "id": "3448f66a-9074-4caf-84ed-761181698a8f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2415e465-14f6-41ec-99c9-69b9511d14ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f866d876-91eb-442e-a336-9b9fdb77534e",
        "cursor": {
          "ref": "4ef9ede6-ef72-4a65-a0bf-3309c08bb3be",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a989bf62-9df2-4e89-b5aa-0e068c7b7fd7"
        },
        "item": {
          "id": "f866d876-91eb-442e-a336-9b9fdb77534e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4b51baac-ba11-4356-abdf-d0266ccf6a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53974de7-a6cc-4488-a29e-bf04df9432d8",
        "cursor": {
          "ref": "74a646cd-dd74-4b95-beb9-4639327d8f81",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4b1ad87e-23fd-46d1-a449-97bde53a9dde"
        },
        "item": {
          "id": "53974de7-a6cc-4488-a29e-bf04df9432d8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7e2ffe8e-6e02-4163-b805-0d3fb81c136d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eac721c-cc19-443f-8666-c10a3f47177c",
        "cursor": {
          "ref": "25f6f984-0cf5-4f35-9ad0-1b627bb10335",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3c406a18-9803-4298-b220-6117a58d7919"
        },
        "item": {
          "id": "2eac721c-cc19-443f-8666-c10a3f47177c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ffc0794a-2537-4628-8cfd-ee67b4e484db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b59929-32dc-432a-a685-7919b0e7ff7f",
        "cursor": {
          "ref": "d3f0bbc5-ff7b-458d-8a89-f8639360b4cc",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "60c6f88d-fdb2-4d62-99e6-2bb8f76de6c1"
        },
        "item": {
          "id": "27b59929-32dc-432a-a685-7919b0e7ff7f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb5dfbf7-8d46-4ef1-bd19-c7678a79300a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d48cab-f89f-42ac-b77c-f38056426c7c",
        "cursor": {
          "ref": "062da904-198a-4452-a3a4-87d564ae7adb",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fb348fd9-0ab0-41ea-b2b2-1afc89d76367"
        },
        "item": {
          "id": "d3d48cab-f89f-42ac-b77c-f38056426c7c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e1fc6a7f-6890-472c-b22c-93ecfcaa47b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87ca7de-da56-4685-a0cc-9a2ab4f4af09",
        "cursor": {
          "ref": "041a492c-3172-4cf9-a769-bf1a98ba3e85",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4bc73b1f-8750-4427-a617-df61929c9543"
        },
        "item": {
          "id": "f87ca7de-da56-4685-a0cc-9a2ab4f4af09",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cc7bdb50-a6ee-43fe-a143-6a805a9669c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5ca169-069c-45c7-b226-4a84302e1eab",
        "cursor": {
          "ref": "ac5004ed-58cc-4e49-96ac-0878c6a91a33",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5909d310-f9a7-458c-ae89-c8297c0ef550"
        },
        "item": {
          "id": "3d5ca169-069c-45c7-b226-4a84302e1eab",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d284df6b-8a06-4e15-ac85-99bd851d4add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af0a037-1750-40ee-b205-483a73f30eaa",
        "cursor": {
          "ref": "944a597e-fbb2-4216-bdf6-aea8e5946adc",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5c271bae-ade1-4a4b-a150-6b62a14137be"
        },
        "item": {
          "id": "9af0a037-1750-40ee-b205-483a73f30eaa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "962aa08e-b0ef-44f1-9475-db2bd760821e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d70b2b5-8978-4b2b-8323-62abf1c09c13",
        "cursor": {
          "ref": "a499807b-d08a-41a4-b9ca-ee0835f726cb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "75bb5dbc-89e3-4141-8a37-c5517d6d1576"
        },
        "item": {
          "id": "6d70b2b5-8978-4b2b-8323-62abf1c09c13",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b0ec2a34-33de-41bd-9c81-f772e1c73635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63f7500-fab3-455f-b838-52b2722e7988",
        "cursor": {
          "ref": "3b407501-bce9-4511-a988-fb5e0509a6da",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a4139321-4bef-4e21-a91d-7180e6740b23"
        },
        "item": {
          "id": "b63f7500-fab3-455f-b838-52b2722e7988",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "26b4ffed-3918-42ca-b324-1264aa57e85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743176d9-68ef-48e9-aa90-9819fb9f13e6",
        "cursor": {
          "ref": "91b9b13e-8360-402b-ad80-712847d87a24",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "be4dd48b-ac3b-409c-8376-e1c428c6a2bb"
        },
        "item": {
          "id": "743176d9-68ef-48e9-aa90-9819fb9f13e6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e1896842-5986-4df4-bf45-547d683b3b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1cc86f-9033-4118-82c1-9bd5ffe6d4ba",
        "cursor": {
          "ref": "6258cef1-2afb-4a60-9a06-1bedfabd325f",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fdffaaf5-b4c6-4790-a3c8-69590b7c43d8"
        },
        "item": {
          "id": "9b1cc86f-9033-4118-82c1-9bd5ffe6d4ba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "14603f83-58f2-4a63-94e2-f6e4a7964b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d61504-4f33-4302-9cd8-f87892417c32",
        "cursor": {
          "ref": "4b627fb4-a515-4ffa-93ff-667e96dbc811",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a7d2eaf1-5850-4e83-a9a8-ec6843acbf88"
        },
        "item": {
          "id": "28d61504-4f33-4302-9cd8-f87892417c32",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ee4f9e94-97c2-4c1f-9253-df78d3f51c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bbefa6-5308-44c1-8b40-e5d165b382f8",
        "cursor": {
          "ref": "237cd4ac-4eaa-4325-a10a-8ed25f3926d8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "40fcfa30-095b-403b-aa5c-6e45dcef6c59"
        },
        "item": {
          "id": "f3bbefa6-5308-44c1-8b40-e5d165b382f8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "54e7696c-0595-410f-a612-70f859ea29b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23d6dc0-9973-4021-bcb0-ec5749d51d2f",
        "cursor": {
          "ref": "2709beef-e9ee-4fac-86fd-1b42d5c7e03a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cd3ba1db-78af-413b-a106-df05512a1516"
        },
        "item": {
          "id": "d23d6dc0-9973-4021-bcb0-ec5749d51d2f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "79eff088-ffd9-42d9-8f0b-e1dfc091308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c72e55b-b547-4b3a-ae84-62165e1fd8bc",
        "cursor": {
          "ref": "93890c4e-6bc4-4385-a1e2-3101577cf973",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "372e3d71-d6ae-4e66-b955-552fe8766292"
        },
        "item": {
          "id": "5c72e55b-b547-4b3a-ae84-62165e1fd8bc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "81bed333-9a6f-4498-a900-98f7e186fab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df81580-9555-4743-a986-9d8c31ad19be",
        "cursor": {
          "ref": "b38d90bc-9434-4cc5-b314-13ffdff21dca",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "670bbe90-5675-481c-84fa-e00070930c3b"
        },
        "item": {
          "id": "2df81580-9555-4743-a986-9d8c31ad19be",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "734c9d90-08b2-4b48-a7eb-16b944fc4367",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad029b7-87a8-443a-a495-a016b12aa524",
        "cursor": {
          "ref": "50e9a6c9-2e3f-4c47-8f45-4d107e6f7456",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "77ea2a24-3d05-4306-9916-c76da9817d20"
        },
        "item": {
          "id": "6ad029b7-87a8-443a-a495-a016b12aa524",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6c42c27d-4b25-4b72-91b0-e533899cfe47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "0cbedb58-d013-4c85-896c-264a284b2d3f",
        "cursor": {
          "ref": "fb2b7c73-0a33-4a30-aa9f-aa62b0b2970a",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9c4e699c-88f8-490f-8918-3a3b3e96209c"
        },
        "item": {
          "id": "0cbedb58-d013-4c85-896c-264a284b2d3f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b96e20a3-d98d-4d02-920d-3a3461700a01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "1ea39c26-bcec-4674-8e31-c855992de3f4",
        "cursor": {
          "ref": "74375470-e1d3-44f0-9bea-eb9376db90c3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "22f9c7af-3c81-4ef3-89d4-0ad498d4497d"
        },
        "item": {
          "id": "1ea39c26-bcec-4674-8e31-c855992de3f4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bdac4b20-601e-4e67-b0ba-b771043a8b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3f7612bd-b25b-4c96-9ec8-08fe6dcba1e7",
        "cursor": {
          "ref": "6d5eb665-1baa-4526-af25-2ca1af8ac57b",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b212c984-a305-49f3-a050-db7f393d138e"
        },
        "item": {
          "id": "3f7612bd-b25b-4c96-9ec8-08fe6dcba1e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "437cd079-d132-4bf6-b168-44bb1af15938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "88432521-faed-43ad-8388-b7d81ceec912",
        "cursor": {
          "ref": "e70b7803-deee-4fa2-9220-b19a07dbb9f3",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fbf80bb0-af20-45f2-9591-4fadcb3436a0"
        },
        "item": {
          "id": "88432521-faed-43ad-8388-b7d81ceec912",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a4289fb4-b14c-45a0-bde8-be7b84a60779",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5cb8d19a-c378-47ff-b5f3-d4dbeed68317",
        "cursor": {
          "ref": "ddbc9d0e-a307-46f3-9004-e9fa3b77760f",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9b6868c2-e694-44cc-9227-a7339b060d65"
        },
        "item": {
          "id": "5cb8d19a-c378-47ff-b5f3-d4dbeed68317",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "826e4374-5d19-4888-9989-749a6e0e1407",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "b16c67cb-4db5-426b-9161-fdd31f10cbc4",
        "cursor": {
          "ref": "2193351f-46e9-4786-bf08-b246798c1912",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dbd8647e-0ea5-4163-b3f1-2a144a10bb8a"
        },
        "item": {
          "id": "b16c67cb-4db5-426b-9161-fdd31f10cbc4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "50a224c5-d0da-4216-9572-d6cdc851bd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96a5e96-29b6-4f8a-9db3-01108bbfe47b",
        "cursor": {
          "ref": "f0917f5e-3c5a-47b5-9522-fd2b33bde267",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a9073c8b-0a0e-4493-b4fe-c9a0061ac318"
        },
        "item": {
          "id": "f96a5e96-29b6-4f8a-9db3-01108bbfe47b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eec03361-5121-4439-966f-a1958f2acc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6fc6b5-c0b5-4143-99a4-fd9eff22080b",
        "cursor": {
          "ref": "038f4d6f-0569-483b-b1dd-2f1648c936d6",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a0365357-86b2-4c1d-b750-f74c3659537f"
        },
        "item": {
          "id": "0e6fc6b5-c0b5-4143-99a4-fd9eff22080b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ed52815f-cc2e-4e12-bf25-675ac5201960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d765db-d4b5-4cdd-8567-22f5a6c50418",
        "cursor": {
          "ref": "48a4920c-e48a-41cc-a673-059a7d6b6703",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7455bfeb-43bb-4346-8162-a4fdde4ee700"
        },
        "item": {
          "id": "59d765db-d4b5-4cdd-8567-22f5a6c50418",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "29f65fd7-d076-4638-ae76-6d3cb06954b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719ab94c-036f-4e57-9e93-69d6bdd3dadf",
        "cursor": {
          "ref": "db597109-fba5-4e5c-a8d0-d06e9a6ddd43",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "776bec4d-4fd2-4896-a49d-6a40d0cbd60f"
        },
        "item": {
          "id": "719ab94c-036f-4e57-9e93-69d6bdd3dadf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5f74d8d5-4c87-4abd-b1d4-2f382e27ae2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e343984-699b-4dad-8287-25f7cc252d9c",
        "cursor": {
          "ref": "b40fe70b-39de-4403-b66c-2ec945f77195",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8d35292f-266d-4dfe-b535-8d46937376a9"
        },
        "item": {
          "id": "4e343984-699b-4dad-8287-25f7cc252d9c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8ac974c2-6a04-46aa-be75-53b406240e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c261779-fd07-41b7-a7f6-353c20d53e9a",
        "cursor": {
          "ref": "a89de576-104e-4c51-a76f-f03953b32c43",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "43ab7cc4-b5c5-4a99-baa8-e60ab491bf77"
        },
        "item": {
          "id": "7c261779-fd07-41b7-a7f6-353c20d53e9a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b7215ae5-6b55-4bf7-88de-bbaba25398cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e04f579-f1f9-4f3f-9489-1cf9c3edcb25",
        "cursor": {
          "ref": "f5fc791e-af6c-4804-8923-80531370cfe4",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "af649f03-0284-4fae-b4d3-1fa78ae7bba9"
        },
        "item": {
          "id": "2e04f579-f1f9-4f3f-9489-1cf9c3edcb25",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8fa85bdc-7f6a-49ac-9a81-2b8817f4fbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec55f50-a5ea-4fe0-be14-19668178c5ee",
        "cursor": {
          "ref": "cc74d70d-7b90-43e2-bb30-eac95a059c8d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "12d241c7-3930-44d7-917a-88b85089a691"
        },
        "item": {
          "id": "dec55f50-a5ea-4fe0-be14-19668178c5ee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "941fd1db-65b1-4c84-90ce-97f665f737c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226cb926-1fec-4f9d-9005-69df1a26a108",
        "cursor": {
          "ref": "49fa13f5-abd3-4c46-8aca-d37cb0f49e1c",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8c20d0fe-5707-4570-9b1e-9ff975726812"
        },
        "item": {
          "id": "226cb926-1fec-4f9d-9005-69df1a26a108",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b47bad44-d331-40fa-bd68-1a58ec7d775b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2707ad44-33bd-4121-b93c-aedd6267902e",
        "cursor": {
          "ref": "3ad77d65-e419-4da4-bac6-d81bad0c9bf8",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5bf7ff11-0395-4ffa-ad69-2fe7278ef6d6"
        },
        "item": {
          "id": "2707ad44-33bd-4121-b93c-aedd6267902e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "67a8feef-878e-41c1-b2c1-44dc82116452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f7cc4b-6206-40fe-9ae3-f07fbb96c7b5",
        "cursor": {
          "ref": "0d6caa9e-dfc6-4e23-9ce6-88c5591115c4",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a573fca5-e21a-4876-ac42-22f4bddb8547"
        },
        "item": {
          "id": "84f7cc4b-6206-40fe-9ae3-f07fbb96c7b5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5343bcb0-9ab9-47cf-b2ff-1aec90a08ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff5fdf9-435e-421f-b1ed-3c08d91d5af6",
        "cursor": {
          "ref": "f7b71f0c-d854-4d7a-8691-f21c653353a1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b5e6a52d-17cc-46f6-873b-02a0c61c7167"
        },
        "item": {
          "id": "8ff5fdf9-435e-421f-b1ed-3c08d91d5af6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e1199688-03d2-4bc8-9b6a-bd13fa8270f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f1d9ed-5be4-44ec-b817-67e39c283e51",
        "cursor": {
          "ref": "7445819d-444e-405d-877e-abc5f289469a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d76c71e4-162d-4079-9794-a88e6e057215"
        },
        "item": {
          "id": "64f1d9ed-5be4-44ec-b817-67e39c283e51",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a855a91-dcd6-4c1a-bbf8-18dfe2fbd2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62411679-22d3-4ea5-a2dd-f1f77d84c46c",
        "cursor": {
          "ref": "538a9297-cea3-4e0b-9b64-2f800a06135e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8af8cf96-e807-42dd-ae5f-e8017ea2da44"
        },
        "item": {
          "id": "62411679-22d3-4ea5-a2dd-f1f77d84c46c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f1b1dbd3-53bc-4e6a-96f2-43eb2bf8e401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7597e418-3db9-47f4-8213-064519dc8816",
        "cursor": {
          "ref": "752bac86-1f7e-4b3f-9fec-4142e1d880a6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b1928142-d523-4c9f-b72e-0b762407c3ba"
        },
        "item": {
          "id": "7597e418-3db9-47f4-8213-064519dc8816",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2ae27b97-6030-48c2-aaa1-f0bf12fa8003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4271dfee-59a4-41b2-a4ef-e0917cf6c9b7",
        "cursor": {
          "ref": "8b98ca48-2941-437a-ad81-543f64b4ca39",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "63bdddf8-55ea-4ea8-9ff3-01399530a5e5"
        },
        "item": {
          "id": "4271dfee-59a4-41b2-a4ef-e0917cf6c9b7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2b3eef7c-e43f-48a1-b375-ae5ab538393d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9537b47-9305-42ff-a26c-3de25b8e6276",
        "cursor": {
          "ref": "94655fe6-77d4-465b-b624-0c09d5ac280d",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4ff852f1-2158-4651-abd6-7ffd254186b5"
        },
        "item": {
          "id": "e9537b47-9305-42ff-a26c-3de25b8e6276",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dd388b99-7912-43cd-a23e-12ed71506a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba40249f-7ad0-4290-9b62-7d271ed61c8f",
        "cursor": {
          "ref": "34bb0c6b-ff0f-4c5f-a77a-621531281e21",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "29487af9-9e72-4f3f-8d1b-19fff28f64b2"
        },
        "item": {
          "id": "ba40249f-7ad0-4290-9b62-7d271ed61c8f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "23ba007a-4ca1-46db-8808-a38389bcf56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeed656e-b79e-41a4-831f-217333f69250",
        "cursor": {
          "ref": "f72c6805-6143-46a7-bb2c-97ca50c7a087",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9b63adee-d820-40ec-ba93-52c3f50b798d"
        },
        "item": {
          "id": "aeed656e-b79e-41a4-831f-217333f69250",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7c21dcc9-020d-489c-bc10-e9622bbc986b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9673f7a-bba3-4d03-9776-81b443e40788",
        "cursor": {
          "ref": "ff8548b4-4f45-49c1-861e-e3c3382e473f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a2ba62d0-2172-4a9a-b65f-f3bf7605133f"
        },
        "item": {
          "id": "d9673f7a-bba3-4d03-9776-81b443e40788",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "040fe697-76f7-44f4-80de-e9c57835c6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f1b20a-9d0f-4a7d-be77-5c88c7d63fe9",
        "cursor": {
          "ref": "2774ac7a-0620-4626-8af8-549bcde64636",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2503f6fd-ddfb-476f-a831-e06fa08a1f8f"
        },
        "item": {
          "id": "30f1b20a-9d0f-4a7d-be77-5c88c7d63fe9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1de53834-4c40-4d4c-9816-1bf77d32838c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9584303d-5207-401b-87c6-8447c6870e82",
        "cursor": {
          "ref": "43db269f-baab-48d8-a484-a37783329f88",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6216ca73-1465-4c2b-b450-e4ab73d63212"
        },
        "item": {
          "id": "9584303d-5207-401b-87c6-8447c6870e82",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0fb8f5c2-3b96-43a8-b83c-94b899f05676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bef41b2-edec-4c99-8758-8aa616c9a3c4",
        "cursor": {
          "ref": "29fb9478-89e7-483b-88ee-4e3344c8b22a",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "29a906be-0268-4e9a-b061-4077b4b777a9"
        },
        "item": {
          "id": "2bef41b2-edec-4c99-8758-8aa616c9a3c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "11f4335f-6ea8-4d46-af0b-ca75b49d9b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b399a31-b334-43ed-ae42-41f04134fc62",
        "cursor": {
          "ref": "279449da-0eec-4666-aab7-3ecf9d29cac2",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a886fdd5-5e26-4ba8-bd10-fa149df43b8f"
        },
        "item": {
          "id": "2b399a31-b334-43ed-ae42-41f04134fc62",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f53384f5-cb8f-44c7-b86e-ca47214876bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dc7b9c-1c7d-4b16-ba60-76c37e411c8f",
        "cursor": {
          "ref": "fd431a4e-d77f-44f9-93e8-41c4d9ce9e88",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "386f9a05-e035-4110-a0c6-8ce1ebb9cd2d"
        },
        "item": {
          "id": "e2dc7b9c-1c7d-4b16-ba60-76c37e411c8f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "484311e9-e3db-4030-a6e4-8dfde5263e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725ec13a-52a9-4cd1-be50-e2d2a305f8f2",
        "cursor": {
          "ref": "67350e4f-9631-40ed-80a0-afbec632220f",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0489116a-826c-4e1d-af1f-73c64bf85ae4"
        },
        "item": {
          "id": "725ec13a-52a9-4cd1-be50-e2d2a305f8f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6777d016-13fe-4504-870f-bb939cbece7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25178eb4-7ceb-43dd-81af-59c87f5d0d1b",
        "cursor": {
          "ref": "67691350-e2c2-4dae-bd04-9f98efd3a1dc",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9551cb8f-01e9-4eb3-ac3c-33a5a94e749c"
        },
        "item": {
          "id": "25178eb4-7ceb-43dd-81af-59c87f5d0d1b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "870b7f89-a36b-4b94-8812-de61e9d01a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477a53ea-e029-4990-96f3-21e7f9ab02cc",
        "cursor": {
          "ref": "47b25879-b8c1-496e-9b51-9e4ba50f840d",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "abed8b1b-8620-4e74-b6aa-0c28cd6c2309"
        },
        "item": {
          "id": "477a53ea-e029-4990-96f3-21e7f9ab02cc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fcbb0927-14e1-4c65-9f87-865a406fbc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa4a1f9-cbac-42b4-99ad-c50da1ae64cb",
        "cursor": {
          "ref": "a4575ef9-81c6-4a61-99ec-93d61366ad57",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "72bb32aa-9e77-43e6-bd5c-52c9aee9d228"
        },
        "item": {
          "id": "0aa4a1f9-cbac-42b4-99ad-c50da1ae64cb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "611f1f33-7462-4743-af13-7969a10c7fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de05286-3d27-4228-9738-b4ba6e0559df",
        "cursor": {
          "ref": "ae8f0085-c707-425d-9578-ac42bd6ca7b4",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4278ac46-abb0-4a2c-8ff0-60670b8be1f2"
        },
        "item": {
          "id": "1de05286-3d27-4228-9738-b4ba6e0559df",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b15dbc3-1290-4bfb-9b47-af478a08e25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6d1ee5-4005-4bdb-99b6-d74735a9fb01",
        "cursor": {
          "ref": "c40bf5af-8001-4dff-9069-2256fcc56fc4",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6fadbb08-067d-49a5-ae3a-a8f25920239e"
        },
        "item": {
          "id": "9b6d1ee5-4005-4bdb-99b6-d74735a9fb01",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9a421289-904f-4c74-8951-8859f8557341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5605d794-c4de-4fdc-a014-7f0ceb6f8191",
        "cursor": {
          "ref": "32503529-27f6-45ed-bbd1-377fdf950b70",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c133a947-b8eb-46a9-a944-fd7cae61163e"
        },
        "item": {
          "id": "5605d794-c4de-4fdc-a014-7f0ceb6f8191",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc228292-683a-4aa1-bdbd-fc987f5a0e3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62081730-d5d0-4b90-8f73-9ac65a9cac78",
        "cursor": {
          "ref": "99dea8d3-774c-4bdd-9995-c929b4cbfcec",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "03c2e6c6-4239-43a8-b952-b910c3a1eda6"
        },
        "item": {
          "id": "62081730-d5d0-4b90-8f73-9ac65a9cac78",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1db675b4-ac2e-4f0a-b398-85a478a87880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149a97e0-79d9-45aa-a925-b36e1b925a9f",
        "cursor": {
          "ref": "a87207d2-1420-46a1-8fa8-a3ec23191b7b",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0d91a69a-8bd6-4222-b821-7f3c9964278d"
        },
        "item": {
          "id": "149a97e0-79d9-45aa-a925-b36e1b925a9f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c905a224-9473-4841-bdfe-c86e6728b3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fc2b1a-eb10-45a9-9b11-a93efa6be497",
        "cursor": {
          "ref": "a7b4d6ba-2d7b-44ce-ad95-9271af128420",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5afbe119-50c8-4d11-af73-1d5a9f46ce1e"
        },
        "item": {
          "id": "b2fc2b1a-eb10-45a9-9b11-a93efa6be497",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "876762b6-363e-4c37-9d97-bbaf49950048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26812f06-43a4-43ed-8e8a-27119c883f7a",
        "cursor": {
          "ref": "9efddc0a-3ffe-4cfd-9d4b-7b6d1ca74d45",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bbd487e3-eaf7-4497-ba9c-7e3d3516901c"
        },
        "item": {
          "id": "26812f06-43a4-43ed-8e8a-27119c883f7a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1f2c8295-2b33-420d-b68a-c37b4369c422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea608ed-c319-4dad-8d71-997fd0454b06",
        "cursor": {
          "ref": "89be9cc5-ca8b-4284-ac2f-548115f3da3f",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "559a556f-4362-4e78-9278-6fa94ce32091"
        },
        "item": {
          "id": "bea608ed-c319-4dad-8d71-997fd0454b06",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "946bd8b9-eda6-46f1-b7e1-e21f4d2e31fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c1dff9-71b7-4972-9b3c-897e555f8a60",
        "cursor": {
          "ref": "ac43dc9d-5874-40ad-b7cd-0f2dc7c22254",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "120fb7d5-620a-41ae-b6b8-d95beda57661"
        },
        "item": {
          "id": "00c1dff9-71b7-4972-9b3c-897e555f8a60",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5af184f0-464b-4781-8bbc-847667e941b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91974a0e-aa65-450b-b80d-ad6684dba8d4",
        "cursor": {
          "ref": "f87ddc32-932d-46fa-b86a-c93ff84955f2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "099be8c0-f7ba-457d-aa7d-ba8e87d52e43"
        },
        "item": {
          "id": "91974a0e-aa65-450b-b80d-ad6684dba8d4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9a3f000b-658d-4268-82e8-37086521ed50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b995cfa-dd33-41a1-aed8-66d680e94a10",
        "cursor": {
          "ref": "7bc328fe-111b-4127-9898-d3128f90a83a",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cdde5a59-aaa8-4f58-94ba-0471796af1d8"
        },
        "item": {
          "id": "1b995cfa-dd33-41a1-aed8-66d680e94a10",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6cc83a15-9d42-4f48-bfd5-4454393690a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d44cbe-ee78-48a2-bd23-2c5af339d6ff",
        "cursor": {
          "ref": "963ca1cb-1def-4d5a-a71d-2a6da5c072c9",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8cae16b4-d247-4cda-82f9-43a5fc1f4939"
        },
        "item": {
          "id": "56d44cbe-ee78-48a2-bd23-2c5af339d6ff",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ec1bca92-602a-4ab8-bb53-1ef21c61878c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62825a42-29a6-42a5-8343-f9219605e90d",
        "cursor": {
          "ref": "a6c1e660-efcb-471b-9520-084a0704aad1",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d403b0ad-5868-45dc-a803-b8a17e28957e"
        },
        "item": {
          "id": "62825a42-29a6-42a5-8343-f9219605e90d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0a8a4ad4-ac00-4487-89ae-6bbd353638d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ec4cd1-2cee-4fa3-956e-69166afee5d8",
        "cursor": {
          "ref": "311bd3e9-f669-4977-9ba1-6820eed6f439",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b881e5b9-39ad-44fa-8b02-49f084dfc852"
        },
        "item": {
          "id": "41ec4cd1-2cee-4fa3-956e-69166afee5d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ed7769be-58da-48ef-a6e1-65920d67aa4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e187c4b-ea85-4db8-bc70-26a5fbfb46cc",
        "cursor": {
          "ref": "864793c9-a9c1-42b3-89f8-f42ca77b143b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "92698645-3cdf-4b51-b0dc-6ff4dff53c35"
        },
        "item": {
          "id": "7e187c4b-ea85-4db8-bc70-26a5fbfb46cc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a590f5d1-d5ee-47f5-be5c-c693b3735685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8d35d8-a21f-4d27-a435-d1c986d54204",
        "cursor": {
          "ref": "e6f9f6b8-4aba-48bd-89b6-44e489e485a1",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2e979140-59c3-465f-b8a0-48d452cb7340"
        },
        "item": {
          "id": "7b8d35d8-a21f-4d27-a435-d1c986d54204",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b72b5d11-fc86-4cc9-8dd4-8c688cbedc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f9645f-252a-4368-80a5-988a305e9414",
        "cursor": {
          "ref": "4f2cce09-aabd-4087-b2ef-996ce204fa60",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2691d15d-5b7f-491e-aa87-3a34d8dec9c9"
        },
        "item": {
          "id": "28f9645f-252a-4368-80a5-988a305e9414",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "eed0a171-ad4a-44bb-86df-3cc98c21efbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb65c3f-db89-4917-82fc-d3c1d5a914f2",
        "cursor": {
          "ref": "0319b057-631a-4710-9420-feab929df046",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "af009248-9a25-459e-bff7-bfef3681645b"
        },
        "item": {
          "id": "ceb65c3f-db89-4917-82fc-d3c1d5a914f2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc9d8cd4-583e-4c1f-ad61-b1d74d3a4228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc79ebb2-f02c-40c6-955b-3988f9734ef0",
        "cursor": {
          "ref": "baff8589-63d0-4f65-a2f8-a16d7f603645",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8fb4a52b-faac-4c7c-bab4-5056e753f024"
        },
        "item": {
          "id": "cc79ebb2-f02c-40c6-955b-3988f9734ef0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "00c41b27-d57f-4f11-a8b2-dcdf43d2ce30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d445c18a-bd1b-43a5-8cfa-b8df98a4e1e3",
        "cursor": {
          "ref": "437bc77e-87b9-4a2d-bac3-f28c29530ece",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bfb84034-4939-4ca2-90d1-060c0b240428"
        },
        "item": {
          "id": "d445c18a-bd1b-43a5-8cfa-b8df98a4e1e3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1a10045a-2530-445d-8ea3-f8e8e626f165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e64af2-b4e2-4368-a27c-5999cef6f72f",
        "cursor": {
          "ref": "2dadf0f7-6eb2-40c6-8b4b-4ccb93bfafbb",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "55634c75-2d3a-4969-8cd2-ab387ba62c53"
        },
        "item": {
          "id": "23e64af2-b4e2-4368-a27c-5999cef6f72f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aa5384d9-ed2d-42ad-a850-5211148931b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae818d4-bf5e-4b0f-83cb-f69147985856",
        "cursor": {
          "ref": "a82296b7-93f0-436f-aca9-ea9357ba751d",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9a7e63af-36d6-45e3-bbc1-a9ae255e50c8"
        },
        "item": {
          "id": "1ae818d4-bf5e-4b0f-83cb-f69147985856",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "484fa4c4-4d27-415b-b047-19b9d6ad1512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809e99a1-bf93-4f82-85a1-3bdfdd247dfc",
        "cursor": {
          "ref": "705a2bca-70a4-4048-8022-535c2c2d25aa",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b9dd890f-81a6-4e6d-9ba5-293ff66e6fc2"
        },
        "item": {
          "id": "809e99a1-bf93-4f82-85a1-3bdfdd247dfc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ccb17cd7-d0bc-4e02-96db-f1d1d03ffe05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4145b197-bea4-4214-9f47-9181ebadc38e",
        "cursor": {
          "ref": "a31cfe01-13dd-444f-8367-236464fda015",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf3d450b-cd86-429b-b8d4-ee19c2cd4477"
        },
        "item": {
          "id": "4145b197-bea4-4214-9f47-9181ebadc38e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "49b0f7b0-54a9-4311-bb59-238b3cbee049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2109120c-1ce1-48cd-bd5a-4ad90fc43d1b",
        "cursor": {
          "ref": "1314c624-3248-45ee-9500-1cf6f2231825",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eb43b63c-92a9-4eb6-97c8-4fcf0f93898e"
        },
        "item": {
          "id": "2109120c-1ce1-48cd-bd5a-4ad90fc43d1b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a8c65c59-4aca-4a3a-a196-b224f917bae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f473e05-2d39-4f61-bc4a-239ddcbf3dcf",
        "cursor": {
          "ref": "b6687428-62bc-40da-a530-70fb62a36835",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "77022cad-1f98-4b06-89e6-6088d9576297"
        },
        "item": {
          "id": "4f473e05-2d39-4f61-bc4a-239ddcbf3dcf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2f98983c-fad6-4ed0-8c7d-9f32ccbd122b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab06a9ca-8159-489e-98c9-8433aa97a86d",
        "cursor": {
          "ref": "0dc79946-e320-4ed9-a615-d0f16fed7fc7",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8e342acc-5348-41fd-8e96-39c0cb894a9c"
        },
        "item": {
          "id": "ab06a9ca-8159-489e-98c9-8433aa97a86d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f3232fa0-c10c-4d46-a6f6-2aa8ae2b4fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85154173-67f7-4fd9-ad0f-02182219813b",
        "cursor": {
          "ref": "d4599e8c-6e5d-4cb5-8656-689353f946ca",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "99dcaa58-81b6-4815-81ba-c05069983d0a"
        },
        "item": {
          "id": "85154173-67f7-4fd9-ad0f-02182219813b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8a888bae-2d39-412e-949e-4175856ff2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426c5527-f4f8-4674-a4e0-91146358e685",
        "cursor": {
          "ref": "10d85e51-91df-4947-9f9a-cb5f1a3b9400",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b90a31b9-b557-4d94-ab73-927ac96a531e"
        },
        "item": {
          "id": "426c5527-f4f8-4674-a4e0-91146358e685",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0a6aed75-e2c4-4725-bec6-feebdd1f060a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f0268c-1451-4548-8fbd-f51b9aaa8d22",
        "cursor": {
          "ref": "819ea7a9-9f8a-4f86-b4a9-1014840adba6",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6b30665-ddf9-4142-9504-b1d37b1bbe8d"
        },
        "item": {
          "id": "e1f0268c-1451-4548-8fbd-f51b9aaa8d22",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4f6ef98a-4706-4cf3-94ca-1cd962409810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3c7304-46ca-4778-99e5-7480bfe89955",
        "cursor": {
          "ref": "68a9e375-9c4a-451c-84d5-00e7d2fd1e6e",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9a3aaa9a-52ae-4636-b522-8419b1633c10"
        },
        "item": {
          "id": "ca3c7304-46ca-4778-99e5-7480bfe89955",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ea3fda9d-ed51-42e1-9c95-9121c927265c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74c9b6-72a2-4ebd-b622-b2d1555043b4",
        "cursor": {
          "ref": "5b7e7d00-7655-47e9-8728-ff3eab124bc8",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4ad30375-92a1-4265-855f-fcecfbc6a61e"
        },
        "item": {
          "id": "da74c9b6-72a2-4ebd-b622-b2d1555043b4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "65ac4b65-15e9-46f0-a994-01364df3ce32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2af75d-098c-43db-baf5-04e9c4ef3d8e",
        "cursor": {
          "ref": "7b057436-62c9-46aa-b49b-7f778a3bc28d",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "14bd5207-f9aa-446c-bfad-d5895ae8899f"
        },
        "item": {
          "id": "6d2af75d-098c-43db-baf5-04e9c4ef3d8e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f5687634-ddad-48c9-8af5-082bb78b8034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d80f917-8f15-44d7-8f7d-5395d559d6bb",
        "cursor": {
          "ref": "62939b7f-6ab1-410e-8ef3-3d3219158352",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6585f7da-9266-43c8-afaf-efda2e81f6d5"
        },
        "item": {
          "id": "6d80f917-8f15-44d7-8f7d-5395d559d6bb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3253e756-eaaa-4f4f-bcc7-26b9832c8b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36705ed2-78d1-490c-a60d-9b47e5de3be1",
        "cursor": {
          "ref": "977baf3b-f4c7-484e-ae73-233bb80e3925",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "aa166260-1b68-4d26-ba7e-901ff6e494ba"
        },
        "item": {
          "id": "36705ed2-78d1-490c-a60d-9b47e5de3be1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "efd87815-aa12-490f-b5bb-a0c63a5d76b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1e4c42-5ce9-4e85-9f0e-91f622b1aea7",
        "cursor": {
          "ref": "cf12a39a-d5b7-479c-bcb8-52d1d3c51419",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "21fd6c8a-a9fe-4e24-a8f8-2a7320348874"
        },
        "item": {
          "id": "6e1e4c42-5ce9-4e85-9f0e-91f622b1aea7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d9d2c043-b0b0-4854-abd0-7ac045e2c1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad44d38-5e44-4c46-a140-cd1fcb992f3c",
        "cursor": {
          "ref": "4b337b1e-a633-429e-afc4-d19f30579a90",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0acfb03b-82f6-4ec2-9d6f-71341057bd26"
        },
        "item": {
          "id": "8ad44d38-5e44-4c46-a140-cd1fcb992f3c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f59e4604-c369-4348-adcf-5609ac9cea9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d0fa53-bd28-4a7d-bee6-f09c8b0d6967",
        "cursor": {
          "ref": "b376b0c1-9fcf-4da7-a51a-a36269ba69b9",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e3baf19c-7cc6-4525-8d8d-62b711bcf843"
        },
        "item": {
          "id": "48d0fa53-bd28-4a7d-bee6-f09c8b0d6967",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "10bab9d1-d9d6-4198-aef6-a10ef9b03e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285c5ead-9792-497d-8a19-8e06b5654773",
        "cursor": {
          "ref": "6d09bf8c-3d55-4695-bd12-2cd2eecbdc79",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "edc3c45d-2097-4ffa-9800-a17b37aaa7cf"
        },
        "item": {
          "id": "285c5ead-9792-497d-8a19-8e06b5654773",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cb7b08ae-07c1-49b8-9273-84b01facfc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfdb91c-d398-4ff9-90da-72f7466cc4dc",
        "cursor": {
          "ref": "bf11e2a0-8627-4d6b-aeb7-8bc5665105ea",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f434dfc7-521d-4d8a-ba88-d1ea0a6fefb3"
        },
        "item": {
          "id": "adfdb91c-d398-4ff9-90da-72f7466cc4dc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3e0a0b28-8c40-4406-aa38-405aefc7e16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a15b92-4e9b-470c-80ec-f4abb07314bd",
        "cursor": {
          "ref": "55c81097-99b0-4546-a5ed-6171ec189875",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a5eced9f-b4cb-4200-b556-2498d8025f99"
        },
        "item": {
          "id": "d2a15b92-4e9b-470c-80ec-f4abb07314bd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "76b765d1-381a-47c3-b3b7-91002e9905a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97e9615-2097-4929-915c-313e1be2791f",
        "cursor": {
          "ref": "8ad70733-9e5a-4a00-84fb-33d43e8adeb0",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c4cb918c-7d40-4654-ade0-b25947e30ede"
        },
        "item": {
          "id": "c97e9615-2097-4929-915c-313e1be2791f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c9d4d9a9-36a9-4f3f-b462-bd89da5cf4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8220ca-b5da-4cdb-bd43-58d2215413ac",
        "cursor": {
          "ref": "cbdf93db-6eec-4501-992f-aa7e2cb54001",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e5dd0c46-a9a3-4856-a75a-523670691b21"
        },
        "item": {
          "id": "9b8220ca-b5da-4cdb-bd43-58d2215413ac",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "09d5f506-11db-4de1-9363-d264784c4213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f235faec-d2de-4355-9880-07384c9d91c9",
        "cursor": {
          "ref": "1056e584-528b-4625-bdc1-af2363bb1e46",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "78956ef9-40d0-44ce-b2da-94f6c3384ec0"
        },
        "item": {
          "id": "f235faec-d2de-4355-9880-07384c9d91c9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "efabaddb-6b0b-4de6-8218-1f1a5c390dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b2cad6-d189-4342-bff2-be0c12bc2fda",
        "cursor": {
          "ref": "5049eb3a-997d-4852-a375-1a8d2dc2a25b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d6ec0dc8-247c-45d4-9504-0d8335de2aea"
        },
        "item": {
          "id": "73b2cad6-d189-4342-bff2-be0c12bc2fda",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1e1f6195-b603-48ef-b01f-b6e907898550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c72e81e-2af4-4b19-8f04-7ff0fa330f18",
        "cursor": {
          "ref": "14136260-6cca-46cc-9e13-bf8813b26388",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9220bd6-61a9-48c1-9c4e-e0ec565f0685"
        },
        "item": {
          "id": "6c72e81e-2af4-4b19-8f04-7ff0fa330f18",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4daf306f-6346-46c4-85fd-0e95bd7c585b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec07ff82-fc13-4da0-b5b4-1e7401c1e7c2",
        "cursor": {
          "ref": "d836fa2c-b26d-4be0-861a-4884989a7225",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e31f2ed1-a73c-4c8d-a5f9-e8c220c0317c"
        },
        "item": {
          "id": "ec07ff82-fc13-4da0-b5b4-1e7401c1e7c2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "de6b7712-dbd5-4766-a50a-b66cb88daada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a18125ff-1ddb-48a6-b832-c1ae8d947490",
        "cursor": {
          "ref": "3b816b7a-6a92-4ab7-9f05-d02ffbfa72dc",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1ed86e48-cd64-4bab-bdff-79a287d26b03"
        },
        "item": {
          "id": "a18125ff-1ddb-48a6-b832-c1ae8d947490",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "57ea28c0-c99a-4033-b7b9-c3a14e36e679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9774be61-6a13-4fa3-aeff-ce0edcf8e4ad",
        "cursor": {
          "ref": "709947a1-0fbe-4327-a359-5d1a912ca9b4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "96653fee-f070-4905-9434-54c92d2a2a5d"
        },
        "item": {
          "id": "9774be61-6a13-4fa3-aeff-ce0edcf8e4ad",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "af2cbacc-e148-460a-9749-7a90dd4ef314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989dbd79-a45d-48c0-90cb-52377aad16f6",
        "cursor": {
          "ref": "8c39b1ea-9391-4221-b43c-3b113764e158",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e771d4b1-e852-45a6-995e-6b30a0f0d084"
        },
        "item": {
          "id": "989dbd79-a45d-48c0-90cb-52377aad16f6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ff68fc7a-a24c-4335-9883-89d40eea5c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e59849-51dd-4731-aed1-89037bef44ce",
        "cursor": {
          "ref": "dd73d7b5-ab9e-4560-a502-573b6c63125a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cafab4a8-52ef-43b3-8fe1-ee2775609fda"
        },
        "item": {
          "id": "a7e59849-51dd-4731-aed1-89037bef44ce",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "755cec6b-af15-4d8b-be44-1603fb2ecaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bd4d2b-54c4-4f40-a0b2-39bed5d011dc",
        "cursor": {
          "ref": "2b746357-83d0-43e6-8648-97bb4ac9816c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "df7a315e-6997-434d-8614-aed4e5fe98bb"
        },
        "item": {
          "id": "f8bd4d2b-54c4-4f40-a0b2-39bed5d011dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3c58b196-a85e-475a-ad10-3c7f90fe2149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e5c33c-b9b9-4a8f-b71f-1d9bdad55d76",
        "cursor": {
          "ref": "9b47c3bf-ba2f-464b-91a0-ff2143e8099d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "01703b65-b33b-48be-aa3e-6a4dc416518d"
        },
        "item": {
          "id": "59e5c33c-b9b9-4a8f-b71f-1d9bdad55d76",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6c23afe5-2494-4dd7-abef-091c368dbd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1329bf34-e99a-484f-977f-e4b0f9e6a7f9",
        "cursor": {
          "ref": "9b68c6b3-2d6b-4ccb-afb0-6aa51157b6f6",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "36a19872-7b85-4d9d-ba78-c0f323f46f87"
        },
        "item": {
          "id": "1329bf34-e99a-484f-977f-e4b0f9e6a7f9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7f8062f2-f3c3-4888-bd5c-014fe644e2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fb937e-c643-41a9-bf2d-20f8ff9071da",
        "cursor": {
          "ref": "1591aae8-5932-4946-bfba-4880c3461569",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0239bc8d-2e1c-42f3-9313-90c806ebd371"
        },
        "item": {
          "id": "44fb937e-c643-41a9-bf2d-20f8ff9071da",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4f9eaf3a-0d77-45bd-8f51-4ea6662309ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b049d378-469c-4924-a60c-65496ddf6bca",
        "cursor": {
          "ref": "e00b7b66-afed-4cf2-b26f-5d315a09c452",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "81d65db3-2467-48a3-9608-941e03f11136"
        },
        "item": {
          "id": "b049d378-469c-4924-a60c-65496ddf6bca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2ee4ed5c-b494-4a88-b6d7-16bd2f103879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14082e9-f860-48c5-b873-75989cf4bab3",
        "cursor": {
          "ref": "72ce4906-abea-40a3-89c5-1d08a78ccf87",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c0aa7f6d-9920-458f-a826-20d4b9310263"
        },
        "item": {
          "id": "b14082e9-f860-48c5-b873-75989cf4bab3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1f89d560-da85-43f1-bc1a-b39ffc34127c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e76616-9e8d-40c2-8dd7-cc66e35eb266",
        "cursor": {
          "ref": "cf5870a1-770b-4914-bfa0-344843e5ce48",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0f544bd1-4e64-4999-9b91-d5c6c4d335ac"
        },
        "item": {
          "id": "a9e76616-9e8d-40c2-8dd7-cc66e35eb266",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "def1e338-dd0a-459b-a486-633e281aa81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36f6e8c-b931-4137-b687-c87f196e1a82",
        "cursor": {
          "ref": "ace73246-31b7-487b-bb76-ba2f04e28148",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e9d59c23-60ff-4a94-9a81-b7b8a0b17295"
        },
        "item": {
          "id": "a36f6e8c-b931-4137-b687-c87f196e1a82",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6fcc2ea9-91c1-4bb3-b2b6-fc6b616c50e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b10b221-f5db-49f1-8410-329dd566192b",
        "cursor": {
          "ref": "0a1143f6-6157-44fa-bafd-6f1868086cde",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1439c5f1-36a3-4e75-8243-bf320da32a92"
        },
        "item": {
          "id": "7b10b221-f5db-49f1-8410-329dd566192b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e35db8da-e62b-46bf-afad-2cef0157e958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0793ac-a4dd-4f02-a087-4c94bc4ed293",
        "cursor": {
          "ref": "6ed03181-3d62-4932-8b38-06641434ba59",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b8b90d41-048e-41a8-bc1a-57c3d472f213"
        },
        "item": {
          "id": "bc0793ac-a4dd-4f02-a087-4c94bc4ed293",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3aef2d82-8b99-4ced-a27a-5819e5b4db66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3930408-12d8-485b-bc33-60562699117f",
        "cursor": {
          "ref": "b684975b-e5f9-4254-a481-fa2866af7243",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e7b3b245-c708-479c-816f-baff36e172d2"
        },
        "item": {
          "id": "d3930408-12d8-485b-bc33-60562699117f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "459c91b1-2db7-46d8-97b3-ea40f32c1d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd28f394-8a39-401c-a7f9-ad160660d378",
        "cursor": {
          "ref": "ea92c344-0411-4415-bfeb-3d83d65952e6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a5051935-811b-4ef6-8f7d-ff159677d1f2"
        },
        "item": {
          "id": "fd28f394-8a39-401c-a7f9-ad160660d378",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "03d7ae1a-8cb4-402d-a239-3e623f7bbe41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865fa19c-c894-446b-b05f-9407ba1931fc",
        "cursor": {
          "ref": "4b69da86-fbad-4f0b-96e5-2bb30f8aaa84",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e2316320-d9bb-4ecb-bd8f-f007856ca2a1"
        },
        "item": {
          "id": "865fa19c-c894-446b-b05f-9407ba1931fc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2ac2e9db-7c9e-4324-995d-0445fda14539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adadac7-1181-4190-a80e-939f8cae42f8",
        "cursor": {
          "ref": "edbfd23b-f125-49c1-ab26-df1ac2dd68cd",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f8349a2a-bee3-4e82-b72b-3ffb170cb43c"
        },
        "item": {
          "id": "6adadac7-1181-4190-a80e-939f8cae42f8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0879ca1a-a1a8-468d-aa21-06924dfbe0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59fc5ab-dc14-4fe5-bd3b-0bd58c139d40",
        "cursor": {
          "ref": "f3a74417-136a-4faf-ac0c-b6287672ad6e",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5fc7e4ce-2232-4d1e-aeb9-f340692c50a4"
        },
        "item": {
          "id": "d59fc5ab-dc14-4fe5-bd3b-0bd58c139d40",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aeb5ca3a-b325-4639-b685-1c3f8b17f3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f012ec43-70a9-4f58-95cf-f9e8a3aeffd5",
        "cursor": {
          "ref": "1f88c010-6695-488d-acbf-b1c60b9dc569",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cb34b348-1e64-4b83-9e58-de84108e5d7c"
        },
        "item": {
          "id": "f012ec43-70a9-4f58-95cf-f9e8a3aeffd5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "54f6af93-fbe0-4310-a153-cd6ce0c7fbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2d67b9-4c50-4994-85f4-b4e091739e21",
        "cursor": {
          "ref": "cba52fa7-2474-43c0-b1c4-42f48b60ebbb",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a585060c-e40f-49d0-b72b-9faebfd471db"
        },
        "item": {
          "id": "4c2d67b9-4c50-4994-85f4-b4e091739e21",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "73a61228-241f-43e5-a456-12b996ace35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaaf4ce-6879-47e2-b996-6fec949b4d7e",
        "cursor": {
          "ref": "77e9ff62-3523-4e89-9e3b-d72fb01b9260",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "28f43eae-1c8b-4105-b663-c9e69f40a152"
        },
        "item": {
          "id": "edaaf4ce-6879-47e2-b996-6fec949b4d7e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "229af1c2-a07f-420b-b356-201a855655e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a204de-8b74-4b86-be8b-9d9d7ae746d0",
        "cursor": {
          "ref": "69aca269-63bd-4721-abc3-8f98f814854c",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5daa6358-4dc9-4649-96d5-83cc015d6e67"
        },
        "item": {
          "id": "70a204de-8b74-4b86-be8b-9d9d7ae746d0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2fbd25c7-cb80-4f6b-ab30-94d0f6e7c799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e1ec53-103a-4a6a-af5f-fc9579360acf",
        "cursor": {
          "ref": "b00ac6c2-d793-4fe6-96e1-659d4c82eaf1",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cb29212e-0186-4229-8567-052231409cda"
        },
        "item": {
          "id": "16e1ec53-103a-4a6a-af5f-fc9579360acf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "92510103-20ba-4ad1-b4b2-c80b8d304b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5f47a0-b0fa-4517-9f93-a60acb0f1728",
        "cursor": {
          "ref": "c80d709b-c6f0-4b65-af46-d81384c4c6b2",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d96b75bc-731a-4294-bcaa-1fd40858ef9d"
        },
        "item": {
          "id": "5d5f47a0-b0fa-4517-9f93-a60acb0f1728",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "64bfb061-7a14-4869-be30-fc7ee3d7209b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ddb9fb-f3bb-4d7b-9f23-171973e2a22b",
        "cursor": {
          "ref": "4d634108-0ff9-42d6-ac4a-27dea5ae1992",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7ec9511b-f989-4303-9575-5fc872d4f985"
        },
        "item": {
          "id": "29ddb9fb-f3bb-4d7b-9f23-171973e2a22b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4fe3c8f2-240c-49a5-892d-6644101df255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4b4836-b205-4f25-aae3-398b3f435926",
        "cursor": {
          "ref": "c6310cea-2558-4e54-90fc-0846d9c62913",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "69e3394a-02de-4cd8-9903-b40e249de552"
        },
        "item": {
          "id": "ee4b4836-b205-4f25-aae3-398b3f435926",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b347695f-2881-4af3-9a43-844b43dc4782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ecae43-9c0d-46f9-b901-a856608ca46e",
        "cursor": {
          "ref": "6ec162cb-ce5b-4c1a-ab0b-31d63cff3731",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "61dadc31-8a3b-46e4-b255-9ab82224e545"
        },
        "item": {
          "id": "25ecae43-9c0d-46f9-b901-a856608ca46e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3422aedb-ba71-448e-9af2-d215b72770fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc45d063-a8f4-4c5b-92a6-4e851d978354",
        "cursor": {
          "ref": "7d0368d9-60ee-4d1a-8cf7-7fcc86e7478b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "585aaaf8-651a-4f12-84b4-8b3eb54df75e"
        },
        "item": {
          "id": "bc45d063-a8f4-4c5b-92a6-4e851d978354",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1417ad6b-ee1c-4b09-82c5-9c0b0c978e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455aa289-7e7f-4b20-9ee7-503515cb04ea",
        "cursor": {
          "ref": "5bf4fa3a-c302-4155-aaf9-6cb04c56f012",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "08f2353d-1bdf-45b3-ada0-41d0b5ee1103"
        },
        "item": {
          "id": "455aa289-7e7f-4b20-9ee7-503515cb04ea",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "49cba880-ce03-4c89-84b9-b8da6fa9856c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "58087c55-0b8b-41f7-9e07-553547e4bcc8",
        "cursor": {
          "ref": "4eb58906-9675-4e1a-83cc-a91097ec6013",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6d6407fa-b35a-41a9-afdd-2a19be0ef7a8"
        },
        "item": {
          "id": "58087c55-0b8b-41f7-9e07-553547e4bcc8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ca91f00f-c986-4400-93f9-4b3bcf519246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9e3e7f48-d116-4819-90ab-30e5ea0bc8a6",
        "cursor": {
          "ref": "a50b764f-4f20-4ebc-912a-6d41ce157fe6",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d6d9b77c-a1d7-40f7-8790-723e809c68a6"
        },
        "item": {
          "id": "9e3e7f48-d116-4819-90ab-30e5ea0bc8a6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "757610c7-f6ac-417c-8557-5c5702b4d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "14da3548-208c-4342-9867-7bf0bd56f11f",
        "cursor": {
          "ref": "be25a55a-f5c0-4ee2-8b5a-23929f23d005",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "51f8c5aa-e910-4455-a1d0-f80483e45a66"
        },
        "item": {
          "id": "14da3548-208c-4342-9867-7bf0bd56f11f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6a152028-e6c8-40b8-9c7f-137ad2064e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf2a7db-1489-4bf6-8cce-b11a780a819b",
        "cursor": {
          "ref": "b7b7b525-d5df-4eee-9abf-ef85c1075596",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3543a369-c2f5-41da-a01b-671a7cf4b711"
        },
        "item": {
          "id": "adf2a7db-1489-4bf6-8cce-b11a780a819b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6fdc6e6c-8adf-4bdc-822e-bed08e863ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "bd834bc8-ae86-4f14-905b-dd1f59de1bb7",
        "cursor": {
          "ref": "399dbf1c-f2a9-4b2e-b4b3-5dda31f825b2",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dbed56b7-a1dd-4ac5-84ab-6e004e48b626"
        },
        "item": {
          "id": "bd834bc8-ae86-4f14-905b-dd1f59de1bb7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "782a007b-9fca-4c5a-adf4-3ec8a67b706c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1183,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6e407337-ce67-4b35-974b-7f965ee12b96",
        "cursor": {
          "ref": "9ce10bec-dc38-45c0-a1ca-0485988c4b31",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ffec72a3-9519-4345-8e03-80a6ced8d9f6"
        },
        "item": {
          "id": "6e407337-ce67-4b35-974b-7f965ee12b96",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0ab7a658-4e0e-49bc-b62b-0216c4366fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "74df3555-7b93-4486-b318-f47c7ebb6072",
        "cursor": {
          "ref": "98723d92-cc38-4569-b35d-1ec80b80db91",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ccb85aa7-2599-4bbe-925f-fd3ada683214"
        },
        "item": {
          "id": "74df3555-7b93-4486-b318-f47c7ebb6072",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "860738f0-5836-4fb6-b11d-b87e83e00bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c330a478-2386-42a0-af5e-4b1aef99716c",
        "cursor": {
          "ref": "4179f237-7a0e-45e1-a7c4-d7912c5dbb86",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3841a623-fc63-4d0e-a1e1-a3ee0a371aab"
        },
        "item": {
          "id": "c330a478-2386-42a0-af5e-4b1aef99716c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5acf65f4-2a08-494e-a947-e1f2a999c7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "02095f71-c6e3-4075-ae6e-a4831d778d5f",
        "cursor": {
          "ref": "e6dc9d5e-6d52-4922-a40f-df0052aedcba",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "81aac197-5a07-4e4f-8f27-4fd06e8461b0"
        },
        "item": {
          "id": "02095f71-c6e3-4075-ae6e-a4831d778d5f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b6c0974e-869d-4127-af22-a6736705fcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bd6e837c-0d20-4bb0-8cf6-9145e13c9ca2",
        "cursor": {
          "ref": "f3f530d9-1b35-4b54-bb95-0fba064d0919",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "80e786c4-a87d-4ac1-95ac-35ae1663be62"
        },
        "item": {
          "id": "bd6e837c-0d20-4bb0-8cf6-9145e13c9ca2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8984f005-affa-4dd2-9227-bae04456d6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f54b376-d394-488c-a982-df8fe244c683",
        "cursor": {
          "ref": "53d58f80-6ae7-4805-ae60-d8b21dab2383",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c6c5fb9d-158a-41dc-a236-3e35b43d7dd9"
        },
        "item": {
          "id": "7f54b376-d394-488c-a982-df8fe244c683",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "61d044b2-5479-420f-b0a3-131c2553090a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2536aa-e8d1-4a5e-8bad-add3772dbb0a",
        "cursor": {
          "ref": "17d4b6e4-2c0c-4366-ac0f-f602c0a8cd90",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1651222c-f535-4ace-8ad2-7011f554d99d"
        },
        "item": {
          "id": "5b2536aa-e8d1-4a5e-8bad-add3772dbb0a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "deb5559e-8dc5-46eb-961e-cf550cdd3f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f667d3-2ccf-437d-8db1-ebdedab506e2",
        "cursor": {
          "ref": "63dc99ab-9e2e-487b-8bd2-c2be6a46078f",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4bf0f499-a525-4fd7-92c3-56682c92a40f"
        },
        "item": {
          "id": "d9f667d3-2ccf-437d-8db1-ebdedab506e2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "21230a9f-0554-4e90-bdf7-343c72d10382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14eee6cb-6c01-4af8-994b-7dca13322d81",
        "cursor": {
          "ref": "b95510f6-1202-4ee6-9a03-b43bb43bc676",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fa98deda-9c67-4e6f-942f-fcb0228d9df3"
        },
        "item": {
          "id": "14eee6cb-6c01-4af8-994b-7dca13322d81",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bb995fb6-896f-4182-9a91-ec615f45d49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b70d5ea-8a7c-425d-97e9-5a67e8e3ba8d",
        "cursor": {
          "ref": "52802331-d5dc-44fa-8221-2f559598566c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3ffe50d7-b49f-41fc-a75e-6a63b3cd1e5c"
        },
        "item": {
          "id": "9b70d5ea-8a7c-425d-97e9-5a67e8e3ba8d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0d3de46d-89b6-4253-9d05-c51e3f22df5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcb2f4e-9000-4f08-953d-ffdfd2d7d6bc",
        "cursor": {
          "ref": "81d2b23f-6d4a-4209-acb5-39eac2ba7d46",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1b4220b7-df74-45d6-b272-7cdf98ca5615"
        },
        "item": {
          "id": "0dcb2f4e-9000-4f08-953d-ffdfd2d7d6bc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d92abd47-588b-425d-9d84-67f7292a3f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6f2702-117a-4bce-886e-f23d0201f635",
        "cursor": {
          "ref": "e8a11929-400c-4873-88bd-4d15c244d962",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "912f8ec3-e10c-4ed6-a84d-227c6dbca842"
        },
        "item": {
          "id": "5e6f2702-117a-4bce-886e-f23d0201f635",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7ecc98e6-5033-429f-90c0-73bc00204a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf25fe64-56f8-4175-89fc-62beb7450e11",
        "cursor": {
          "ref": "9a9a8991-94f6-41df-b1af-95c69b36b1fd",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f85e70e9-f7a9-4859-b2ea-36caf14f0f0d"
        },
        "item": {
          "id": "cf25fe64-56f8-4175-89fc-62beb7450e11",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "19985666-770c-4312-af2a-f6070919ef6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c9cabe-b719-4b32-bd9f-4154b5d3e627",
        "cursor": {
          "ref": "f778a8cf-6f39-4a06-9e1a-4ae96b1d3fd6",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bc509255-f140-47a0-8dcf-31aa5c4a2d97"
        },
        "item": {
          "id": "a5c9cabe-b719-4b32-bd9f-4154b5d3e627",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "49600eb5-ff55-4c9e-bf5a-3f4fb7cdb420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19916992-c949-48f5-88ed-234a57cbc5b2",
        "cursor": {
          "ref": "de8d1bf6-556d-4aaf-9076-b5069a946066",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "76c0dfa0-1724-441e-b707-49719dca7944"
        },
        "item": {
          "id": "19916992-c949-48f5-88ed-234a57cbc5b2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7133a0ba-77a7-4854-9127-f5311a7bbe4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7be800-699a-491a-9fd4-45138551e4fe",
        "cursor": {
          "ref": "0da85235-041b-4740-b0ae-439724462132",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2749479f-3ee8-425c-8b11-e4ab88460196"
        },
        "item": {
          "id": "db7be800-699a-491a-9fd4-45138551e4fe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "509eae80-d44d-4b01-9805-92b3f407c31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb624c8-139b-43e5-9a03-796eb34bf83e",
        "cursor": {
          "ref": "73cca0db-ba3e-4075-bc93-b77a2afe3a6a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "145222ab-bcb7-4532-8cb8-8e29fa542aca"
        },
        "item": {
          "id": "2eb624c8-139b-43e5-9a03-796eb34bf83e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "278ea58a-57af-4a05-aff5-a11b9498dab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2c9652-3c00-4f66-92f1-f18af8adf25c",
        "cursor": {
          "ref": "fd27a9b1-3ce3-41db-8382-c4f667120356",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c65b6418-9017-4faf-9785-a07fc4748dcf"
        },
        "item": {
          "id": "8a2c9652-3c00-4f66-92f1-f18af8adf25c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cf81ba18-300e-4122-8f82-48d2115dd427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1289,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8b691631-b044-4f84-b370-0106a35660e0",
        "cursor": {
          "ref": "d0130285-4c4e-491a-8619-67c991ab94c9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f7b1b955-20b5-420b-9db0-4cd947a3d2ec"
        },
        "item": {
          "id": "8b691631-b044-4f84-b370-0106a35660e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4af671c8-e319-451a-b13b-15e9490b5649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1354,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6cd55037-c85d-4eaa-a5c1-ae217d470d9e",
        "cursor": {
          "ref": "3102fede-011d-4a01-8ae1-ef3638573d47",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ac0191f0-0b8b-48b0-9345-e73e6f6bb92b"
        },
        "item": {
          "id": "6cd55037-c85d-4eaa-a5c1-ae217d470d9e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f0b90b80-8c21-49eb-8f2d-096560eeb899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e675c3a1-77be-46df-8919-b669d6920693",
        "cursor": {
          "ref": "43f07098-1eab-47d6-9277-bfb0552f4465",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "90a2cfac-fcba-4dec-bb5e-0afb51bfec76"
        },
        "item": {
          "id": "e675c3a1-77be-46df-8919-b669d6920693",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "46523d3f-79c2-4a1d-98c8-f2965cb632fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 712,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "36f0047a-7199-4ffd-8fa5-d4837360f077",
        "cursor": {
          "ref": "1ad557d8-65c9-403a-b9c1-e18c6ffd706f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a1997084-0de9-47ee-8103-4680321fd183"
        },
        "item": {
          "id": "36f0047a-7199-4ffd-8fa5-d4837360f077",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "310aa007-567d-4946-8c9c-938f9a9e19c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3483b08d-f22a-4359-a9df-7a2296d9403b",
        "cursor": {
          "ref": "e6e08d59-bb4e-469d-98cf-778c6eac782e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6eec6b42-a63a-4a7a-8245-b03f01407775"
        },
        "item": {
          "id": "3483b08d-f22a-4359-a9df-7a2296d9403b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f77b0087-915f-4453-b682-1ea4d837f58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3917b78-023b-4dc8-8015-c59145194a60",
        "cursor": {
          "ref": "6356e19b-2e8e-43b7-8fe6-3e365a44ab65",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "da0ae003-1a2b-4663-aeff-3adb23483d43"
        },
        "item": {
          "id": "c3917b78-023b-4dc8-8015-c59145194a60",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "57ae2241-9a76-40d9-85b3-ad40fc4ff84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fd2a37-0d2d-4955-927c-ec95e9469774",
        "cursor": {
          "ref": "86937f23-1abc-4825-937b-a7d8769a5146",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1dc4674e-262d-403f-a491-ff9887cc6aa8"
        },
        "item": {
          "id": "81fd2a37-0d2d-4955-927c-ec95e9469774",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "189d7ccb-8ffd-46a8-ac84-5f71b032d0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7811f8b3-5105-431e-a333-1b12916b420a",
        "cursor": {
          "ref": "9ebe7e08-5893-4d6e-99dc-a3efbe854e02",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d6ef897d-939b-4113-a948-1c680c5d0a6e"
        },
        "item": {
          "id": "7811f8b3-5105-431e-a333-1b12916b420a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b9f630da-b8b8-4aa2-9785-7ef88479efca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6f4922-3b29-4b72-aa9e-03947e2fd093",
        "cursor": {
          "ref": "65dda227-94de-49ad-b39f-de0698442864",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "df0cd792-f203-45a3-8bcb-272a84ba24f4"
        },
        "item": {
          "id": "ab6f4922-3b29-4b72-aa9e-03947e2fd093",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "05518c0e-6e39-4db6-9e51-18ff08a46636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fca6e7-ac57-474f-bb42-629044ca1b71",
        "cursor": {
          "ref": "0d78fed2-16bc-43bb-b878-a8abd213f037",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "af021582-e091-47ad-90a4-3b81042c7e58"
        },
        "item": {
          "id": "a7fca6e7-ac57-474f-bb42-629044ca1b71",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "584dca7d-412d-4140-b9e6-89563b08d0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b948adef-6c47-47f2-972c-ce036a74d23b",
        "cursor": {
          "ref": "c7c5dea8-8aa6-4083-bf51-be7f1726805c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f358b6e-2fbc-4381-9288-078c4ddd66d7"
        },
        "item": {
          "id": "b948adef-6c47-47f2-972c-ce036a74d23b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c843d47a-b87c-4231-b017-2ae011e9999d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa9ecd1-3a15-4dd8-8fe5-82410ca48b6c",
        "cursor": {
          "ref": "4401bb46-5085-4a2e-a7db-ab66be0dcc50",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3afdc4ee-a934-49fb-ab39-9ac5599ce57e"
        },
        "item": {
          "id": "cfa9ecd1-3a15-4dd8-8fe5-82410ca48b6c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "148d7b41-64de-4cd2-a8a8-375226dccec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3421d2d4-3c2b-46be-877d-781a0222b4f0",
        "cursor": {
          "ref": "f439f8ae-00bc-408e-a7f3-c468927a26a7",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2574deb9-f648-47d8-8180-8cadd6836774"
        },
        "item": {
          "id": "3421d2d4-3c2b-46be-877d-781a0222b4f0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "49b3ec3c-ec2a-4bdd-918f-806f95ce2c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d494869b-98a0-461d-a9c1-aeda1af60994",
        "cursor": {
          "ref": "a236cdd8-34c3-4c2c-bf9e-eb1af1c99510",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "32d4dd5e-8b49-4f6c-9d11-7ec497895d9d"
        },
        "item": {
          "id": "d494869b-98a0-461d-a9c1-aeda1af60994",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "de52f841-b248-4c35-8be8-9cb43045b238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e76cbaa-ce47-4a3c-b496-3b8066608ef5",
        "cursor": {
          "ref": "1fff991a-c9c5-40fa-980b-af67dc6a4e6f",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e40a616c-b6a9-4782-a796-e4301d2921f8"
        },
        "item": {
          "id": "1e76cbaa-ce47-4a3c-b496-3b8066608ef5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b757815b-c984-446c-af74-32dfddb02ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6228c8e8-1202-47f0-9fa8-54956a0c967a",
        "cursor": {
          "ref": "4cd6980d-0d92-42b8-86c0-e36dfbf08f9b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "315af7ff-bad0-4977-bc0a-3bcd41413315"
        },
        "item": {
          "id": "6228c8e8-1202-47f0-9fa8-54956a0c967a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fa7aafb7-f482-4c88-bfbd-b7194296be30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd4809e-3eb2-4969-9adb-28712a2087ae",
        "cursor": {
          "ref": "ace076f7-cf54-4688-b87e-7a176598d89f",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "889e61a4-79d8-48d7-ad65-e7c9d64f2601"
        },
        "item": {
          "id": "7bd4809e-3eb2-4969-9adb-28712a2087ae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bd335499-6d2e-4a43-badf-fcc1cd5d28da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5803f644-ea1d-4e08-9410-1d4bfd6990eb",
        "cursor": {
          "ref": "c9a7ca67-f9fb-44a2-9fd4-ba0ade8ae9fe",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8501f87c-acc6-4171-ac1f-f9b5d890f0df"
        },
        "item": {
          "id": "5803f644-ea1d-4e08-9410-1d4bfd6990eb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6b88ba35-5136-428f-906c-ee532c885fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bcf3eb-e092-4744-b291-fda1b528dfe2",
        "cursor": {
          "ref": "3a61a229-c826-4e5d-a379-783632ece193",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b19f9a40-a017-49ad-9555-74b1f8b36ab8"
        },
        "item": {
          "id": "a7bcf3eb-e092-4744-b291-fda1b528dfe2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "24bf95c9-5d61-4f6d-b13b-45dca6c77349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cda52ff-696f-441e-8cee-a9489805ba14",
        "cursor": {
          "ref": "088ab6cc-1732-4bd3-96c1-e0938464385e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "00539095-2330-43fb-b4ed-a79506a363c1"
        },
        "item": {
          "id": "9cda52ff-696f-441e-8cee-a9489805ba14",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3e89775e-0e70-4956-85c8-bea97ea4da50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defa26e7-790d-4bc1-8dca-08ef63be84b5",
        "cursor": {
          "ref": "d7b98096-8b9d-45ef-b066-7102c6c9d46d",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "24e57b9c-3f7f-4b9f-ad9e-eefa2b351f10"
        },
        "item": {
          "id": "defa26e7-790d-4bc1-8dca-08ef63be84b5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e96282ce-4259-40e8-9f73-5f18a577656f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90f6a6b-9512-40b0-90c2-d5b92bbaac6a",
        "cursor": {
          "ref": "7ce4f5b0-07b4-4b44-8f91-92bd1fac6357",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "59ac878d-fcd6-4234-9463-d729294f6809"
        },
        "item": {
          "id": "e90f6a6b-9512-40b0-90c2-d5b92bbaac6a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7b326baa-3b42-48fe-b377-e883a5e0f3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d30155-f8d6-4a78-84d4-622d04b01fb4",
        "cursor": {
          "ref": "412e1cef-e3c5-4fbe-b6c2-ffa8cf082ddd",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c657edab-8af5-4c65-bb52-e513409b0956"
        },
        "item": {
          "id": "13d30155-f8d6-4a78-84d4-622d04b01fb4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e630f064-8691-4ab3-b100-7f9debda696e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96191ae3-e32f-4a54-94bc-f0d54d02971b",
        "cursor": {
          "ref": "b3462a86-a993-4879-a7cf-f60504d43227",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cc90304a-0a13-44bc-bf64-237e06dcb187"
        },
        "item": {
          "id": "96191ae3-e32f-4a54-94bc-f0d54d02971b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "30d70792-d125-469e-97ce-a22a616534b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062608aa-141f-4bc1-a51b-f4ade055d4ca",
        "cursor": {
          "ref": "f2f9268d-2620-4636-b78a-b1239e526703",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3f33a238-d1a8-47a4-ab8b-2c9007022cbb"
        },
        "item": {
          "id": "062608aa-141f-4bc1-a51b-f4ade055d4ca",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6c8ba679-7284-4128-9137-8aadef72d1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd10e06-d339-45e7-8ab7-009d57c26620",
        "cursor": {
          "ref": "23d5567c-8bcd-46a8-94b0-ac1a21442270",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "28a6d389-05a7-454f-b3cd-242d7a9cb638"
        },
        "item": {
          "id": "2cd10e06-d339-45e7-8ab7-009d57c26620",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0899ec7b-383f-4346-83d6-dc68e5204047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34747162-c47a-4ebb-aad1-19016eaca3f9",
        "cursor": {
          "ref": "2de870e2-1de7-4990-9763-d3c14f90c058",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "08b54491-fd78-407e-97e6-0ace3b674891"
        },
        "item": {
          "id": "34747162-c47a-4ebb-aad1-19016eaca3f9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c84e1a0b-8b1e-4cbd-acce-cd7fdef9b4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790c8534-56a0-49cd-8b96-a761d759c8a4",
        "cursor": {
          "ref": "d2ebaa0c-c0a1-4c53-9d63-6622a573f2ce",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8a9055f3-ebc5-42c1-90e3-d0af38eed6ab"
        },
        "item": {
          "id": "790c8534-56a0-49cd-8b96-a761d759c8a4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9d69b52c-7ceb-4fde-881c-fb4bcb9f3e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297a69b2-2a7c-43cd-89c6-ada26205e6b1",
        "cursor": {
          "ref": "18719275-61ce-434f-a8e2-ab89c5011f9b",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bba5a2d2-648e-42e5-a50f-952190333a7f"
        },
        "item": {
          "id": "297a69b2-2a7c-43cd-89c6-ada26205e6b1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1a832f3b-b74a-4189-894c-dd648faa2489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966324a9-e9c1-43f9-ba48-819b1a79cfdd",
        "cursor": {
          "ref": "1c0af3f2-c671-4dba-840d-e040aee05a46",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "109da556-0b58-4bf5-96c5-7776caa2b37c"
        },
        "item": {
          "id": "966324a9-e9c1-43f9-ba48-819b1a79cfdd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b72ddb0f-f998-4936-8a26-e7fb1e1564e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4ab795-d087-4c4e-9fae-c14a196f2b5c",
        "cursor": {
          "ref": "3520af46-4d1f-443c-bdee-41120f089a11",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f94f7a86-2eae-4235-8881-b8ad547e2b76"
        },
        "item": {
          "id": "1c4ab795-d087-4c4e-9fae-c14a196f2b5c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8bc96ee9-e873-4b37-921d-eaf177448026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed48510-57a4-4073-ae21-6dfb68ff7c3c",
        "cursor": {
          "ref": "1c5facd8-1121-413c-afe6-eb05fb4cf9fd",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "43cdf937-f074-463f-ad9e-08bcea8cd0c1"
        },
        "item": {
          "id": "9ed48510-57a4-4073-ae21-6dfb68ff7c3c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e8349a6a-adee-42fa-a361-fccf3d8d2852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f569cfa5-e0f6-44d1-bef0-44b8d1ed566e",
        "cursor": {
          "ref": "d633ea43-2a61-43d8-a339-2efc4adf0b6c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "06a291af-0c18-435b-9e63-3d0428c8b988"
        },
        "item": {
          "id": "f569cfa5-e0f6-44d1-bef0-44b8d1ed566e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "eaf2c994-5ed3-4efc-b438-af295f64d4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d8e55b-fd59-49ea-9f1c-d1fab6a6a9b7",
        "cursor": {
          "ref": "3a351591-13b6-4dcf-a4ca-b903325071b1",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "822458ae-95f2-47ae-ad79-411f6b4b6e35"
        },
        "item": {
          "id": "35d8e55b-fd59-49ea-9f1c-d1fab6a6a9b7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "13da7c8a-cbc3-4ba5-a545-91bdbcfa4b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa0d21e-a011-43e7-8357-f0c7577e9f59",
        "cursor": {
          "ref": "bdd10422-d499-4b62-bb00-a9ebcb200012",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "818cad14-2985-4431-a532-a40a53b30d0e"
        },
        "item": {
          "id": "ffa0d21e-a011-43e7-8357-f0c7577e9f59",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "70a02c05-50f0-4e48-bb73-9d14176a59fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb9d361-b200-4bd4-be36-9d47fb64dbb9",
        "cursor": {
          "ref": "5b7807be-8ed6-4620-b969-d515a6ddbc00",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9460fa4a-390e-4d54-a045-f72eafd799f6"
        },
        "item": {
          "id": "0bb9d361-b200-4bd4-be36-9d47fb64dbb9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "baa55a93-fb23-4734-aaa5-7b9123a1d37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc9c5aa-f4f5-485e-9eed-e4712788b1a6",
        "cursor": {
          "ref": "6c3c6360-4f92-4a74-93e0-a2dc510443a4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4c645703-30d5-414e-9fe5-e7f7f95d276d"
        },
        "item": {
          "id": "bdc9c5aa-f4f5-485e-9eed-e4712788b1a6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fdc3af5e-5697-4bac-888a-a1a35b93bbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d629ae01-2ec1-41e7-915f-52123f052d3f",
        "cursor": {
          "ref": "9ba5e0a7-a8da-4c66-987c-b307f4955944",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "98feac51-c6cf-49ee-ab92-1ef233fcff49"
        },
        "item": {
          "id": "d629ae01-2ec1-41e7-915f-52123f052d3f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4225cead-b81f-4fc0-b1cf-64092d8d6f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e2ad1c-c103-4712-8dce-4369b825ca26",
        "cursor": {
          "ref": "95463e98-f6f6-4a14-a63b-25ef546c2163",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0673d036-981c-40a7-b231-6071348d878b"
        },
        "item": {
          "id": "d2e2ad1c-c103-4712-8dce-4369b825ca26",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e33f368c-d465-409a-a657-023547ca02b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b167c6c7-89c0-47ed-a4d8-8ed25a71df60",
        "cursor": {
          "ref": "75c0c702-4ae1-4e86-8a0f-bc5cb8c13a35",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "dbf8f94a-b59c-4d97-b7e8-39913d8b8019"
        },
        "item": {
          "id": "b167c6c7-89c0-47ed-a4d8-8ed25a71df60",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6810034e-c962-4d73-820d-aa09fcd4cbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f20ab72-aee0-4f35-abec-242d27de9a78",
        "cursor": {
          "ref": "bb875d74-0e21-45c0-a6de-29c5072b27e4",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "593677ba-cb62-4d8f-b137-18816c6e4270"
        },
        "item": {
          "id": "3f20ab72-aee0-4f35-abec-242d27de9a78",
          "name": "credentials_verify"
        },
        "response": {
          "id": "34fd2d89-4c93-4916-9840-0a38225a8e25",
          "status": "OK",
          "code": 200,
          "responseTime": 879,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16548dc-0f38-48e3-962d-8d270a0af194",
        "cursor": {
          "ref": "4d8f99cf-088b-47ad-8e33-68be065af874",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1b51ad5d-94b2-4ab3-938b-595b9b0653e7"
        },
        "item": {
          "id": "b16548dc-0f38-48e3-962d-8d270a0af194",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "51306c70-e7bc-4b4d-b046-cbdec0f1806a",
          "status": "OK",
          "code": 200,
          "responseTime": 738,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e7c44f-5832-401f-870c-c8784f714d5d",
        "cursor": {
          "ref": "d3e8a13d-86e7-4a3c-9710-146d186bf2b9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f1d2d6b2-0c60-4085-a984-5d11bff8bd1a"
        },
        "item": {
          "id": "77e7c44f-5832-401f-870c-c8784f714d5d",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "77e7c44f-5832-401f-870c-c8784f714d5d",
        "cursor": {
          "ref": "d3e8a13d-86e7-4a3c-9710-146d186bf2b9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f1d2d6b2-0c60-4085-a984-5d11bff8bd1a"
        },
        "item": {
          "id": "77e7c44f-5832-401f-870c-c8784f714d5d",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "d844ed0b-6b63-4dfb-a8ff-0babc5b3d38d",
        "cursor": {
          "ref": "7efe6557-e76d-4d4e-9f10-ba2e05fca0b6",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f9288737-897f-4910-9c30-ee54b544f2b4"
        },
        "item": {
          "id": "d844ed0b-6b63-4dfb-a8ff-0babc5b3d38d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "26bd573e-6670-437a-933f-bf199307f54b",
        "cursor": {
          "ref": "1f7dc6d4-e1e3-42ab-ab2f-db79b8bf6088",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fbaae752-fa13-4294-a62f-97ec5bd1579b"
        },
        "item": {
          "id": "26bd573e-6670-437a-933f-bf199307f54b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}