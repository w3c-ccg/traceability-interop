{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4f3b1b44-d391-4445-a371-9e1d7a0fe63e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c0d9d4f3-70e8-40d7-8e76-878500f13bde",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67522b70-73b0-48d1-8e44-a754c4b5de64",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7bfef4ce-d220-498d-af2f-c577c5c8f9ea"
                }
              }
            ]
          },
          {
            "id": "1e26ea20-851a-4adf-92b2-86970bfac2e6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9373bee7-ae30-439b-9650-bd7aafadf6fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b6031a9-727b-495a-a14d-65ff0ff9e804"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2acdf65d-092c-4343-81cb-1b108a82e6e4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "97cb210a-2af0-4fcc-a102-7cb0bfcbd548",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f93bb99c-4f32-453d-a7d6-218079256cb2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70778cbb-d706-47e5-998b-cef4ba499546",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "adffddd4-9448-4825-a7cb-10f45a364726"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a964dadd-959f-4aef-b637-d319a8e5e9a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c37832b9-ba78-4116-9ec0-b28a74b0ad9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2822d45f-d6cc-48c5-bc57-9f155acdbebf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53460eef-85c0-4f41-8efe-221839bdd21c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "165e347a-1bae-4907-bbf1-052848b39037",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2be8ed27-9759-4bd4-97be-9e270184c335"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07728722-7291-4639-a1d0-41ee3718f118",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12404919-5154-4b20-8078-ffd707475af0"
            }
          }
        ]
      },
      {
        "id": "f26e71bc-df2e-4e57-8151-d08694af1e7c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e8018254-e483-408e-a894-f3e606ac600f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9f31ad0-b0a0-4f65-bfaf-ffbc386cc41b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ecb62f90-54f5-404f-a3ec-0e226a7441a1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d477cd1-f29e-4eca-83a1-7ed1b54b77fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "635d3cb0-fced-4a11-8350-6caacb4b4fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4c9f81-fe4a-48c6-b6df-9a22c98a02a3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995fc792-1ddf-4255-be0d-f3a5c17f967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "992da6b8-5325-4605-852e-cae17a8906f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f528904c-adab-415f-a2db-c29e4c942575",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c160c6d-9920-4e5e-af5e-89902b2df382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c63d8be-ee3c-487c-8d3b-875e75d4ce79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7440ffd-1e7b-410e-8f87-863c572aaf2a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1953c41-8e38-477c-8586-9101f85bdc57",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e3cf3b-e774-4ca6-a78c-54a6368c763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e176b74-2182-4563-9d68-0c82903a01b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b416a24e-7615-4a9d-a48a-bd1ce599c1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e81a0e6-4424-449a-8218-539392234778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb48a80f-bead-483e-a385-5616edbb1bfa",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2a3adf-1a47-4fb1-827b-2d82791704c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c500ab4a-bbb5-4706-8ea2-f98c52e6269a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638b4525-ffc4-46a3-9d8f-c48f74cd268f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "815df5a0-a18b-4361-8934-e135c87db698"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bb5d8a36-7403-4a3c-8cdc-9215f8a63aa9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "47c97f0d-6442-44e5-8d0a-203cf89f6430",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5011d4ac-cc4e-4c50-a04d-d7fa18d0fa8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e744dc07-4785-4e8b-bef2-e3bc9ba08f54"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70d09678-4d93-4c07-91d1-1d15d4aff453",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2805fde0-efaa-4a10-95d3-9650f40a35c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66a19320-5d88-4b74-98bf-27b35490358d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c00f58f-84f9-4784-88af-2785cd2801f9"
            }
          }
        ]
      },
      {
        "id": "81e2c348-2730-4ad8-a1f8-e5bd96cf63a4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7352e19a-aa6e-46a9-a68b-69551fb78703",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f68abadb-1f40-4fff-98f6-2a838de8f875",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "39fe03b1-2fcb-404c-8713-b1caa7ab8e0c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea81174c-b971-4909-859d-afbcbd18b9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32af96f3-bde1-4ba8-8f2b-09d110d316d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a154e9-b924-4977-bdc8-d98c14f97c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "606360c9-82f6-4591-b47d-bac5f72a866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dd7186-85a5-4578-9321-19352d4ba221",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f54f9f-b8fb-40be-ba9a-970caed77e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b93ccae-1e47-4c46-a4f0-78f15d5008bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b813219-ee7d-432e-95fd-3d975b9d4e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "059a98c4-a448-4e0f-af35-e9d9e992292f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734cf2dc-f4b9-4e76-808d-198d65c43f2d",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad0969c-c372-4da1-b912-2f2d0f73ed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74998ed1-3e26-4a90-8ee7-5c58aa3cd295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4603bd01-6738-4d1f-80a3-23a752bd3d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb0e2bb2-44c6-4e5f-b9a1-d4b502d3f5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a928034-47cf-42d9-92d1-ef38ce0146e5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfdafec-352f-4152-babf-fa6282a3c974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5991ab2e-6e0e-4940-86ab-1f6110487824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c6f796-7969-404b-b26c-6bd7920bd3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed53f3d1-524d-4303-b7e2-9c64ad55e7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846a40fe-cdb7-4bf0-a878-54ec506caf23",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e985099a-fe35-4e47-8dad-ad6c5cb6b746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c175802-0330-4b0f-9dac-02e6b5e964fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27efeb-4851-4cc4-8c4f-c80bd57e6a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50f7dade-111a-4ec7-a493-0f85af143aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cebaa8-d058-4419-b5fb-820694275e18",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e88f5bb-14cf-477c-9804-d4271d2f1c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8709d4d5-6c86-4301-ad1a-0eaa8de9ac18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065be19a-aec5-4779-b17d-a932d65d9514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1855d1a4-361f-419d-a78c-7767a322935f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded1fda6-bfde-40fd-b7cc-4f7145400cbe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd98f78-03ae-437b-a54d-6e0cc5cb6536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f255b93e-508e-4f21-9e0d-da8c461ad2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674daa8e-99e1-4552-b43b-1c38a8334cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c37e4801-6d83-4b67-a5e4-bc779e2ecc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fe9231-8de8-41ff-a89e-3984e56862a9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a36f236-a7b0-411b-a45f-18dd89a12c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d7c6b3-1288-4529-b33c-3135000dce5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9747cc62-a2b1-4adf-81c5-276d909f8341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e5cbf62-bf0d-4446-9552-22703a49b868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde77c75-6575-45ef-aaa8-e59d167e16e7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86ca10f-2219-43d5-a232-618e9397c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40dd658c-6e81-41cf-82c6-7ef07ed172ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1cae11-97b2-4198-8ada-da3b7985dc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90d94e33-657e-451c-b450-b39e2067d03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4852c67b-87bd-439b-a872-7f6a4ffc2f91",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bf51f1-efc7-4734-a5ce-3f7e960286f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ceee80-3c8e-42ee-b5c2-24439b523b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b991f678-8e36-4f74-ab61-bec71256fcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "114d18cc-2437-4e0a-a8f4-1ec2e9b4ffc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8781f2a-50e5-4e7f-84c2-e0144dd93005",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fcca9c-c499-40ba-85fa-838d370d3343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7088e2c-316f-4a02-90e8-4e821888b51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac4f7ee-c777-4853-afdc-d88196c5c46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b1bbae6-6267-424a-b6c7-5077d81a3a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e624a8-a33b-4fc1-9536-51c8b60bf8a2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bf44c5-d356-42e0-8928-bb94dee4e820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4deda69-3c42-4079-854c-9f3d4cf70c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6c440c-a1e0-4dd7-9922-cadf22bec7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bb81340-c8d9-49b4-962b-a582b3763a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f585ff-7fa1-49e5-82ff-bbee609596fe",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c48fec-0122-4456-a389-c57bf29947b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e025fdd3-d5e8-4d1d-9312-ec2161b7ea0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dcd16d-aa04-4746-83f4-87073a9d8d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4d97111-610d-48fd-8b17-92f1e562001c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8731f9-3390-4542-bb50-98624733bdc0",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1954072e-14b5-498c-aad4-ae5d0bfd7f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae7595d-8e7a-4af1-a753-bbeb0da2f400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702aed0a-e44d-49a2-b002-3d08cfdf722a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "24f3b58d-7328-4860-954a-4bb76a896d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5feed7d7-31bf-40a4-bdb0-d08db9a3590e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da7757e-e34c-4d66-a375-ad523c154378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990ab17e-a879-4ec6-9394-6b82b130c6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a547572-fc94-4d1a-8632-3a5263413c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d5bef60-d4a5-4d30-9c6b-9d0e642fcc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6062cf6-52ad-47d3-9712-8402e77659c9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53145214-6914-43b5-9d0a-ed2933ea7ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e3523f-9132-492d-ad7f-554a1f670704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbae31ff-b4e4-47e3-9a78-5f8b8076886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbce8bb9-8141-4b70-a315-37d8ce6ca7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b156303-305f-4a2f-8e97-847b9f1592f6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178144ea-a6f2-4a16-8e38-41d4a8b4ab42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3de61b-c6f8-45dd-b54d-a4b640f752b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02262349-190f-416c-bd1b-175d4d708fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62c5729f-f3e7-47c9-a803-ba3390da5459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161d01ef-92dc-4942-8f06-403c4c69b272",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de43c453-82f6-43b3-8754-f950896fec76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cefd1a-e441-4dbe-93fe-d820adc76ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ca1883-5104-4aeb-9a5a-643eb87bfcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e9c31b7-b01a-4fad-9cd1-02926c286397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f3059a-6863-4293-a67d-055775686452",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872b527a-0546-4065-b3d1-1b938bdfb9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09776f09-8811-482f-bd90-ba0ecc95204c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894752c6-f349-4785-a093-cdaa12f28e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "514f6ffd-34c3-4d32-8907-8f46aaf709d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdb3d03-504a-4ffa-9c3c-1e2596227441",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26cb304-2c9d-4354-9228-113994cc737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d83f6d-e6dc-4571-a026-6cfdf4877b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026bddf4-b356-4b32-8c72-f79325cc4273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b484d44f-6f94-4d10-91a2-ec01f3dcf1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba5deb-c000-4aa7-b869-fbb0f8dcbe55",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49867c7c-22bf-4eb9-9bce-1b2f36249457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0ee9c9-6bc6-423f-b599-c3f13c175c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06bf488-cc83-41d7-97f9-cfe3eab00d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "759e4878-77aa-4d2b-b375-aace948e8212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1262ab9d-546c-4dfc-8254-a3597e9ba1fa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd986573-fcc9-4132-9e4d-96678411e1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9a93dd-2a04-4e91-8a02-6082039f6d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49763f3-5d83-44b4-b229-6092fc028ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "049c7776-abac-4e3a-8fbc-f0c4f3c6cf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b514a3b-86b9-4715-b3d0-0df56d0930b9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e92f00a-c30c-4b88-9f2a-1ff5e589b275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6827f63a-b425-4422-baca-4b0407e203db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e274b4-75fb-47f9-97ad-0de831bab41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "760cd6fe-7e33-493e-a4e2-17169727a248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973bfbcb-d58f-4239-8b63-d1fa9411e154",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ab4b82-c331-462a-96fa-67a6d2dd3753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271d6650-56b5-4589-aebd-95bf5326db77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843e1062-5e39-4751-9b8b-00dc4e644a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb05c9c-8322-413d-bf54-5a6be2582266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4348cb26-639f-4693-91aa-f0351bc343f9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884becea-9ce8-4cd8-872c-3b3c730f98e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a41bc38-26d2-4dae-ac5e-1268992f6727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17d65e5-f554-43f2-bbc7-46db23e26843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16ea01e4-18b4-47d5-9e1f-5910541ddf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51cd200-7e1c-4fb6-a596-eade3df036a8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae02dd15-239a-4576-9811-32eb577546e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89001fba-7f52-4a03-ba15-6602bb5ebfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f4bf91-5ea5-4ba9-a8f2-3f1ae36f1cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "531ca9ab-d712-4c33-b989-a55b043477bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae6a257-c014-4e5c-ad0a-711a2291f3f0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9ce954-7e4e-4682-93ff-aeffeb14a867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ad0918-6b65-4895-b2af-70d82ed33806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acf54d7-0b00-4bed-b6f5-b4344417c73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "974384c2-e194-4b81-82f5-a63956c66702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6468e0b0-3a06-461a-b3de-0b38e594a665",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933ac334-38b7-4136-a107-6a28a9bfa536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4303750e-2e70-4a48-8fda-8f1b333d94cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e94bfb-ab72-453c-bc8a-449661d965f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bee773c-cd97-46a6-877d-1b724d8a0536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f24c4e4-07e4-4380-9db1-0995e23e544c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec65d832-f27c-4489-957a-6447646f939b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b259a1-ef93-4731-bcb9-1fc3409044d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401f6c20-a40d-4029-a783-7c406af96ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb0a285-49f6-4036-b048-5beb5c9f4ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d888427c-1f95-462e-9efc-4a6e2259ff9e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50db0603-0d47-49b8-ad03-4107b030b2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f12fec3-a01e-45e3-9687-101518dbe9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec05754b-9060-4fa9-b02c-a7255c2e0122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf697cd3-59d9-4887-8dba-de649981c0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45386ff4-417b-42f0-bbaf-71178ad34b50",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f7f097-6be6-4555-a681-73cfd493d55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d95cc34-3e84-4ed0-859f-ab5b11d869e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5662afa-6bd8-48f0-a892-66eb617c7634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07539792-a49b-4c69-aee1-1fe6fb0085f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea111103-06ac-4a36-b313-e7e09a6ed101",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d19249-4b55-4def-aba6-c1954e416e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172d9439-fa86-4343-abf7-353ad9a285d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1406813-e7b3-4f8e-955c-d991c09118c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5633894c-855a-4232-be27-709c26a2f423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e64721-7649-410d-9e1b-07e8bd3f0e5a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c9a3c6-5339-4e2b-bedd-4cbfb5a85556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e46c74-099f-403e-b7cb-ebdec3d2c716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573b669e-ee6d-4347-90b0-78f6dd0ad1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99eb5581-ebd9-4723-be0c-d75d301d424f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fe671d-4864-4cc4-b2cb-85b8b09109c1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e377906e-f1b7-4106-ae7a-8d9d10b43b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd22c6c1-2516-4df0-a394-ac19dde84786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d99c224-f2b4-41b4-864f-f0fa19143b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0ea714-82cb-4eaf-8421-c8f8358f9c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea0d4a3-ec3a-42bc-bff6-9851c9921060",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9720d7ed-4568-4d89-81ce-72baba5c7a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6e68a2-f60e-4f3c-8130-52a4fa21318a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f75a66-9cee-447a-b95e-b295b688428f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcee3e3-93da-454d-a6de-5c381ed07b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7423b05-330a-4538-90f8-06b780061b58",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0b331f-946c-4abf-8a54-17b08be3ac81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ecf0c5-aade-4255-9d4f-277e7b62c390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1164dc-bad2-4168-b8a6-6bea8e31a792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56f2abb-0b7b-4059-8766-407b3091305c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b9acb5-778b-41ca-898a-3504d7feab6f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018e139d-2d77-487a-b824-971a49c0c917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f784be7b-5aac-4abd-a230-ce38778a29af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25315e99-c66a-431c-aadf-4e94eac9c6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e0a190-52b0-4e8b-ae58-7d56d9687d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cbefa1-1ebb-4c7a-a967-2df0fa853abc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbb6123-dcdc-4854-bb67-248e12fc52fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7388d79f-58a8-4b18-a0bd-fe827eca2ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768baeae-8369-4cf3-83a6-3bfdb513b191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20c68c7a-a4b1-4516-b84d-08815fcb5d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966c4b25-1135-4a03-93fb-4dbc83b64f6b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7455ed7e-1733-4faf-b412-b3590d79478d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840a47ca-bfc5-470a-8227-bcfdee1ab903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3397c3e6-ea82-4e00-9b74-7b2a721c1b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76abc493-1925-45dc-a712-e8016dff52bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aacff12-3a0d-4cdc-abed-2106a73dcf35",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675d95f2-9f96-49be-8d73-464540348b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88522cb9-b548-40e1-aef6-d95f78206f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1edc34e-46eb-4048-8485-2ad920849046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72d073f9-e0b2-4db1-aa96-bce5d9267396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068e2ff-5b20-4f30-9141-975e86ba444e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e47ce2-b741-4d3a-8e83-597a1e014e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f034998-a4f8-4239-a085-56bc363ffb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aeb2a3-b1e3-4b10-9b5c-c249516f4393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "783c129f-01b4-4629-ba90-ef1b5b22e237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b624cd-7b34-4c36-a10b-881f0864431b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044ce448-ba5d-43a2-ad0c-80a4af74bb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ebe2a8-042f-4e94-9d0b-5a28e59b6112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11af5976-9ae6-41ad-be19-ba50ee9d945e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3adb0b1-00fb-408b-be04-31da0347086e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5327769d-5bdb-4b20-b3b3-37c69b2441c8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d25b48d-19e7-40ab-8f2b-51bc4cb68cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74ed519-1a83-4241-903a-1878f39f4993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5e2041-fc51-49aa-87e2-7340a33db52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "35b22279-019a-4250-9fa3-53147a46f2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68b8290-fd4b-4cf7-91a4-ab194526c22c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c183345-d903-453b-ae5b-599233c211d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e522f79-7204-4283-a7e5-1cad37faeacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cc31c6-bd4e-4949-99b0-68acc710364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "196698ad-4358-4359-9621-493b72126e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce08ba4a-5d26-4a65-8a4e-c39bf881b3d4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a696aa2c-9c52-4c9a-8f6a-981e9e3c0672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3300158-892c-4faa-8699-5a3bf8e73603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95b8290-c309-4f31-9202-3da2d565cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "819843cb-6416-49ca-a320-92475fbbf5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339dd4e5-6f12-4d98-8899-bf8cb93933eb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32002c30-c9f7-49bb-bfa1-99be98b902e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c8eac0-c34d-44a7-b6c2-e73b7bbf470c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa6d137-dcee-424e-acf9-3399eb2e5ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "76467866-0913-44fc-96ff-6772e72b495b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e48464-fd80-4afd-b79c-c16201ad147b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfcfcac-041d-4bb1-9ec3-f40a3affed30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1ea610-ed49-4754-b81f-2bbc71a62336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3057df98-4c4e-4c1d-bc81-d70bfb60f85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d0ea51-db66-49a9-9792-850948cca713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e239fed-0612-40fc-b74b-c54b83fd6f5b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f4f9c7-fc39-47ff-a2ff-10dcd36f8e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e7f360-ccc5-49b5-98a5-a6ef6404d651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39845fad-a94f-4b52-8aee-c9d204d05908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4f8035-ddec-4559-85e6-f134d47d1c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8991f0b8-2dc2-44b6-91ec-0804e57866ad",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e82a349-8c36-4a3c-a527-b8f64dfcccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00279074-667e-4ef6-8ca1-ede955e3c1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009def92-b87f-475a-a7b0-00938461a8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c98e9372-59bf-4b8b-82f5-86909baa75be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0710dd-db10-438f-9d51-90861f6c7ae0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5177ca6-22de-4e72-8eba-4178378fc382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61caf14d-ad35-4ce2-b851-62226db37168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62ceb59-fa1c-407a-b326-efbbfdf61664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4b033e-1f1c-4812-a1f4-0bb25dad60fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df701d7-1a5e-4c51-acfd-defd7fc32b76",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a754152-9fa7-4756-9c41-50ceefd56947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6a4bb2-0667-4093-b92c-696028ceaa97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ecdb1b-7151-4221-a80a-347cf04d4ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06faf6d8-46b7-424d-9abc-3f0a80a25931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d6faa1-4b57-47ec-b679-73cfa157c81b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef20158-bf05-446e-85e7-faeb747e3cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fbf888-0e46-47d5-a7ca-661e897d7288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09801aea-c272-43f5-b726-bb68a6ec1e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f98a63a-f6b4-4f42-a3a1-72870f7ccf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cdd372-58a2-42d5-8a13-026059621378",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97627184-e520-49df-9aa6-6f02205a0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a838e590-9db7-4132-abb5-9c2d1d048979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54084db4-6497-45a8-ae7d-ef03c921022e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab2f5db-37f6-476a-b010-b1b121509965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9870ad-b4b6-4ed2-aaa7-e6c7647fa0b2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265c57df-4943-40b6-a978-4de901de4f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee4a26e-7855-4417-88a9-d9dc87c958e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca2b18e-d5d8-440f-8719-45415221e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4bd655-ad99-4b66-a495-0fb88bd5f2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce776b2-98fe-45be-97e1-cb965364a1a3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bccbb22-d70b-40d6-b14f-f4ba0efe96c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715136f1-c446-4988-b2a6-0b4878370aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2725e2b-e677-4aa4-8a93-7899e7513462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f37114f9-8c90-48ae-95d5-65fcd33b78a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d44e61-9fc7-4425-933d-0444ae807a09",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72787eac-c904-4bfd-a126-2a39eb5aff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b1d0d4-68f2-4afd-8ab1-7b2e8224826c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3388779b-3a01-4ee1-8ce5-48449bde92ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0a838b-5caa-41dd-988e-33c54cddc635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0c09dc-f7f5-4de8-b3e2-a9c117f5c974",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca73986-58b8-4ee0-b19b-ce5117d9c8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd281e3e-2041-4b88-9dab-b42587f60880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1285f42-d866-4cdb-99b3-3f00a489c422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d7efde-90d0-4d12-8653-b0427b6b54c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca69ec11-3fb5-4b8b-8e7d-a4492fa41f9a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b43f401-7c41-4cc2-85ed-70c794b94d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a410de0-d008-4bcf-bee9-5d337a88430e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b54b566-59ad-4f09-a1d1-2cef10c5b2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a0dd2c07-5aff-4c4a-b33c-fd9541d02ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb34e55-303a-48ba-ae27-4e1ddcd121ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a8b361-a8ff-4924-8ddb-091b29cce387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c97e233-f081-44a5-8eb5-69e946a76f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75cb7c7-3502-4dad-b569-5bd2ebb1de07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "87b48744-8793-4008-8295-bef02d503097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ca69c-9af7-44e8-b86b-2daf1502b21a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8a9c48-92d8-45a0-a779-3a79d5c297dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57039174-42e7-4585-bdc2-bf0c7a5cdb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ae7109-8751-4eef-add3-dccffd060698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1a6580-86b8-4bad-939f-0ca79ceb0a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d1b699-3c1d-4c1c-85f6-db81c078bc94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c130742-d573-4a6b-ba7b-262c303e2244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bab15e1-3e75-4422-99af-15e74bb19347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49637ac-deae-4a96-ae3f-3f1facaf8291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dac1ad9-4e0a-4b86-ab1c-387702bebbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fc835d-4622-4971-8bb3-ee6aaebf3a29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0849a587-77a7-4f15-ac77-49e136330c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1029240-06c3-4040-85d5-1ab524335e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5461dc02-7440-437e-b54c-96b3528a43c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5258a41f-ae83-4b12-8256-2b770d5d3a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40df95f0-4fca-442b-a897-35b4e1e59f43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f482a84f-bfbc-4484-92d0-6a7200195739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027edb9d-ab08-4505-8cc2-554ba1d4129b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eff73f0-e2ce-465c-aeeb-5c546413de9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe491a9-ab1e-430b-a07e-20aa05b995a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffc3f5e-2550-4fd8-925d-34e4ab1d3c34",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a3ddc7-dcee-42dc-9c8e-9347c6fac467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bfe8d0-bdf4-476a-aeaf-494758a0d46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb1be7c-1766-4869-830c-c0de9c716d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fac7685e-3b6d-4cb9-aa8f-1d491c220072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c29a76-ceb9-4108-8fef-5110d66f642e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cc078a-a465-46a8-a1bf-7e895b5460b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862ad6b7-1386-46d4-9298-237fb63b7e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9569848d-4f0c-4447-a1ae-52dcfe1d509f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cf14bf-63fc-4eeb-925e-30d608e576e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b2fa6f-fc49-4605-a33b-af2fcc75b06b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e97c66a-3f53-4de2-aea8-20df1c92c697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262ff2ad-a607-4f6b-96bb-6f829db342e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c81805-c472-4cd8-adcf-edfd60021955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "411a2c66-94ee-4eb0-a58f-42a4f16f2ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32a6b74-0914-4bfc-aeca-52e68d996bf8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1eb7b7-7d58-46eb-b8ae-8498bedae012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85904d1-4d5a-4a1a-af6d-ed40bc83448e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abff5a1-d390-49fb-9c73-bb135dd4a918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "891c7248-9903-407b-a8a9-dcacb66f0dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bde9af-2b66-4165-b01f-71d001f22fa5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c27f65-0fb4-4fcc-8901-82a10d219fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1793f0ce-a251-4440-9802-0c569d25a18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca13c8c-f5d5-436b-881a-0fc1f1eec2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e116f0e7-1222-4275-958d-580b1fcd2514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031984f6-6bd8-4f77-9c90-9c3a08193f9c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d95af9-e2b2-42c2-8582-040ed9ae44ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa6c91e-3bad-421e-ab61-9e18faf19935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da8193b-aa9d-4672-ab5f-da2ac1d570fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "006eed85-60f1-4c46-a252-39b390447777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4d416c-b9dd-4b70-8df3-6d3a2850e1e3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c23771-cd76-4ebf-a442-58ed070936ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cd37eb-010d-4e19-9e62-f3a809f736b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635a824b-d164-42d9-a585-b2de9b4451e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8b98aa-0ac0-4de2-b204-d2c1f3c90402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6614b0-a550-4d69-bbcc-ba726bce0d1e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca19fdc-2e2b-48a4-a322-dc1df5ec48b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab300df-b02c-4b01-ba7b-8900a71160ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2117e18e-2ba4-4495-85ef-7b740a2959cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "600284c2-fc72-43de-893c-9eafb56f9686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7052a85f-0b1d-465b-b294-2e6956e17c45",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2b5c6d-1874-4490-8e28-b7f0e354c17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc0f8fc-1b04-4111-aa43-a206a6dad6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b6a2c8-a908-4e22-96be-1d64393e9311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d074ffc5-1b7a-4a6f-adfc-59fefaeb830c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750bc336-b94a-47f9-bb23-dde1f83f3786",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1896236e-4d9f-4536-b8c0-5330cd1304c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f0d585-26bc-4035-9bb8-328c12c3c843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6939a2-a365-4d39-b5cd-7ea261afb0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77f38e1d-252a-40d8-bf71-2100a5be83ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8537c09-e72f-4ded-977c-8d487ce4242c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d19c6f4-7d1f-49cf-92bb-3a30fba7c0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658a8088-f896-429a-918d-2556df730368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be59b982-0270-4470-8477-9cc743bc3f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a8c26c-36fc-44c6-b2d6-7f1e3996de1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a9a05a-4cf3-4446-979b-7523c8613e0b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ed2475-22cc-455d-b291-fc8d3fa0ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1a5e74-0b30-4c07-866e-f08e5d5aaadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89179b4a-e798-4a2c-9e1d-fd2600082117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "477ec8e9-d805-4a08-a00b-53abfa5d3f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2a1548-5054-4e77-9489-0e2bd924f7f9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd765ba-1eab-4b9c-b62e-3bc795211c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d72708-ddb9-4f4d-9dd6-74d8e14b55c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00c95d6-cb06-4f59-b6ea-9774f2fefb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7918bbd1-1a57-49ca-95d9-580b91d8d07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418b41f3-5ed6-4e8a-8553-2df89b54430a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ddea49-8536-437b-9e5a-adebe4b25d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539d36a2-403b-4c34-8968-4dafd0eed4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad03caf-7cfb-4de6-9a07-3f3da875c93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18c09307-d565-4033-a1aa-0ed27516e439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098f9b5d-37f3-47ed-8e17-e98e48c3c643",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47449f38-0d94-46ed-8ef6-488619b66906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1787e5-fd59-4a4c-a6fc-929092bcf767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aad9d51-b541-479e-a849-afa337cb24c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da7195ca-a39e-4152-a22b-84e2e60193c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82522fd0-eee4-4339-b03f-98dc284742e6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a9a9a3-9e64-4319-a34e-4e4bc5200e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4ac978-3496-4a13-9872-c13660f9bb5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d11902b-3053-4ce5-b155-d575a6754a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64cd5e54-70a3-416c-b982-bfcfa8cd5673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa85756-141e-4158-9f1f-df4ab8562fd3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6cf99-c8b6-4cbd-8ef6-8eff59b333c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f3bcbd-a3c5-4e62-a5b4-d2c9ba780d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3aca8e-f097-42f5-bfc3-a5a0c44f72fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1541bf1e-91d2-4464-8784-adf3f0c99bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6bf8ae-4343-4aef-a6c0-32a971c16c85",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96300a07-5e6a-4658-bb51-d6a7ab265f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c04cbf1-88f2-4bbd-8bcd-97842fbf7f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01ab8ba-904b-4375-b62f-01dc8003ef39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f194848b-7693-48b4-88ba-56901de8ae7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7ad6e1-35d2-4a1c-b2ff-c79fa51f1fc2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab800f9-173a-42b7-ab23-f4ade17eee5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d3304a-51d5-4f3d-9291-51e8a036e4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228227c7-0d5f-4f4d-b89f-f81cde9f8d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce0ac1d-44f0-4e0e-b092-ef2e1f1d11b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc687196-000e-480f-a4d3-c473bf0a9742",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8dbe19-610b-4b08-a783-a57675270f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f27083-814f-4b08-9b70-3ab7405be378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26c30e8-9466-4569-8409-43c0b8159556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4004df8-701e-407b-bcfa-092de27603c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabbbe3c-871b-4811-9e90-3263d3c44d4b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41760ede-650c-4e11-882f-39e4c8a94947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2728516c-dc8f-4167-9ac8-5938486f66dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97444cf8-de8d-4b6d-93bb-69f16b7bd50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fda47d44-8613-4d67-9615-304b199fbc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825da64a-9d2c-4feb-9762-9e05ced49dc4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcaa34e-3b27-45ea-96c5-bfad8969559c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9af2c17-e7c0-43fd-abb8-a8f9dc81fdce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b74c1d-b78f-4204-8167-65de54c7a2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f94f3b-3bcd-4c5a-a49b-ada0a63a3799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6884c9dc-8842-4117-900d-4dae8f8a1125",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7044a01-61cb-462c-9f5c-fbdce9240e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7207c0ac-52f7-412f-805d-6581da4af569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f920a63-2b3a-4611-b635-a2522f2cfd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1311b27c-24a3-477d-b850-c54d810133d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441eeb15-1629-4752-bc74-55b65a5a650f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddd74b6-3cd7-461a-b486-f2bb09e8da31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2454da-8903-4da3-8cae-57b82fba464f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1a2ac3-a38f-413c-a2f4-7057ea65d5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d70e31-7023-48d6-872a-a1b8117961bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0365636-948b-4e11-91bd-bd30e39067ed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ef39b9-442e-42f1-864b-87d6d55ffdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792b6497-655c-488d-aaa2-56dfa5924775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20ae0fe-da45-4f39-b368-ca94a8281d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e504bd96-2f17-49e0-a33f-7cd42d84b81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce65b7d-157a-477b-9a40-b38f72960ade",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdb041f-dbd7-4a48-b7c3-bc631a64a39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c196d45b-2c74-442a-b47a-6fff3706f9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde44ca2-53ab-4b43-91d1-5fcc4b38ab09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "333cda6d-0cc0-48b8-b85d-e848acbf0fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cc0b00-82d9-4cf4-bd35-3d80e874c636",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b26d593-6c76-4da2-b0ad-9f3678464d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af45299-36b2-4db0-afe3-d8ad242c2b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc6e800-820f-4f33-9fd8-8696e644c86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f701acb-578f-4487-a8ba-121d43dee09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cbe754-cd3d-49b7-b0b6-02dbf4ecb000",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0c3e8a-bfe0-4423-976a-c8458173a110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816ded44-5226-4db7-9b91-96668b050dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e614fac1-07c7-4b41-a1cc-6050ae718812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e90136e-ad5b-4e30-9940-0ec496035021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3250f92-b738-44db-b015-b326a0b4ead1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb23daf7-161c-43a8-ac9c-8ef8f843690a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07a9c4d-bc09-4273-9015-0fcf1b07838f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aef7ef-269a-4601-9d29-4a64e8c696b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9db1aacf-0bdf-4bdf-8bae-a43061f4beba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa06716-5459-4b66-b085-ffb609ea6dce",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8026fa-d133-4183-b114-c63c54ba0857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6256f6c-58b9-4b77-bec4-aa4948874e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d41fd0-15f5-4b2b-855a-1f4a3b0685e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f25e21b0-1693-4b86-a15d-78badc8c7fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebace89-68a6-4daa-a1a9-c793e91b68ee",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a20766-6a70-4a34-a988-a81b68c1679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4f740faf-b578-4ec1-9407-2674df539c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6209db31-f7c1-4c45-8891-3e916fece1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0128f60-ad3b-4681-a977-5671e08e2fe3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c966f153-2a77-49a0-b207-141ecead509c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c72f9b8a-8ed6-4451-9227-fea75470316b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea532778-708d-4b09-afbd-833ee3787333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6499343-d763-48d4-a74b-50d8dcc9b211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4650e6-7aa1-4032-98f1-966da654e675",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4f4f203f-e4b6-46f3-bf4f-8231ef29d7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170a8b47-e0bb-487e-932c-ec911c321bbe",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6285d4ce-041e-432b-b92c-67344ac5a02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16502092-6795-4ea2-8320-7e2f621dc144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5879bca9-3205-4c2b-9357-78ba4465ee23",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "edaa6a65-9e53-4ad1-8a93-d1fc28db6e4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bd6b12e-a3f1-49f3-98bc-113f148ab3a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01375276-b8c4-4962-a52d-5084b2ab88ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d482a5b-3a24-4258-b967-5a591cd51b52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33a96d48-c358-4983-8c98-4b2d74aa1d84"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3457b958-5022-40c9-a981-27411a654719",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14af4ee2-95b8-4a56-aa0a-1dd59b6bcc95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4eb15445-ad8a-4526-a06f-b1378e93715f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1756a9dd-0d5d-4d1a-889b-eaa68f79a6aa"
                }
              }
            ]
          },
          {
            "id": "c31827bc-d6c7-4562-aecd-1d47c56dca86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e162bfaa-b2bb-4191-8123-037d649a7963",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2248024-75cf-40a1-be51-41c1deb50e08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "983b3cd6-e516-4fa1-bb54-6e8566c6a0a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d93a93e-3354-4995-9aa7-ffb5fb90875a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "195b3bb1-d290-4d21-b711-f3799c965f03"
                    }
                  }
                ]
              },
              {
                "id": "3bcd24d3-b05b-46bd-a3bd-e9430c3bb008",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "224c8f36-e66f-4c8a-af2f-ad5e3b505f5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a21fb176-779f-4f20-834a-c47fc7711af2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2d1b498-65b1-4a5e-97fe-2d844769fbb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9a653257-96e3-47af-b428-9e6e06670232"
                    }
                  }
                ]
              },
              {
                "id": "425db399-22b3-448a-acfb-03ced12fe47a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5890f78-60fc-4acb-bf2d-baba9f70c7cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79b45178-b0ba-43e8-b19d-2acb72f335b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "add67f8f-2598-47b3-acdf-25372b87ed95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8f14882f-8d71-4a1f-9fec-681d6eb08d1e"
                    }
                  }
                ]
              },
              {
                "id": "1e46ddfc-330b-476f-8d8f-685e749d1769",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b36e1cf-e1ba-4858-9b9e-986e6c8570b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86167399-c9ce-4fcd-bea2-10f8ecd2fb6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8505d58-89b6-4ef0-bf9d-294af993b671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ca54fed6-1e26-4ae5-8c9e-be8bb183fe69"
                    }
                  }
                ]
              },
              {
                "id": "34c1e720-3ce5-4da4-8f3a-0d16122badc5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88b1392c-ba16-44de-8d78-3b0ed4cd8dde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8ed2f6e-4607-49d2-984e-2170a05ca25c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8826e6e7-ff90-41f5-a37e-6df8568600b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59277b99-4168-48cc-b94c-78d582902b60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1d14379-3e6a-426d-9291-1a0d20f208a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66649799-403e-47ce-9612-68b268ede3a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "467e3069-f4d1-423f-949b-5ad81dcc9d75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "111e1af1-dba7-48e9-814b-cfb7ae262e6b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb906ec-ba44-4d2f-9680-62d6dc942c89",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7ab42df8-235a-4847-856d-c96a9b85eb76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e6629b8-5c4e-4f14-a5ff-99da0e0a7b48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1dd63dd-1882-4f20-b7af-739ea59d8d4b"
            }
          }
        ]
      },
      {
        "id": "5971be43-e089-4a55-9730-475b5dc57f4e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "63326c9a-3bf4-4a0e-8126-25fde0390f6a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca21684e-0586-428b-9e76-a5c1bcba3cf6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "07d8cce2-0425-4016-a6b4-b85a213802f6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09bc528-aaa7-48c2-9654-10a92d20776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ea5b0f-ac09-4f84-a62d-5e83666994f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1823b8ec-459b-4656-bd8a-a7980b35172d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e679a96c-80d3-4d4e-b4c4-5e2cab68b8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e888c8-a0f8-427c-9606-43e4e96ca6d2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee02062-4f45-4ee6-813d-0fde4f7b45d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72adf5d0-32dd-4097-943f-d366e6fb1682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7314601-9f9e-4a10-a6e5-a6edbff8097a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5453680a-870a-4667-8c24-b6f938d994c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fea10f-5487-4372-b622-19bc26e13223",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef267d80-e6bd-45a0-9a58-e130dec0b228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37da3c1-6a56-44da-a9f3-da682f4a5e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f88d0f7-ac3b-40c4-9846-d8bd50eecbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0e1759-f2ee-48c0-9a9a-077b1c2eb9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d770c44-08e0-4964-bc07-fc73271f0fe7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25106f0d-a366-48fd-abdd-886ae8a9b281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3013ca10-07f0-460b-b4e2-bbfcf33c741e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9eba91-0cb1-407c-9435-b63ab84a2f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7bdaa7-86bd-47f3-b58d-50f0774ff356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18fd06b-9db9-47aa-b4fc-005e096940de",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1e90c7-77ea-425f-a7e9-6543d2c33afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b93fae-ad3a-47df-85d9-07d737fa9982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598ec842-9c6f-4a67-a7c0-a0f0e9e017b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa4f07f-25b5-4422-bc1b-4bbb0a82a676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3167f5-d575-4aa3-9523-7ce2f9241bcd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cd5c1a-a28d-435c-914e-17b51c077848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d7b2ae-8bf9-40fe-8a7d-8a5f1545caf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc6d42e-24ce-4616-b751-4477f06239a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06926ba7-9e1f-4887-8a9b-a13f81bf7a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930b7743-0ff0-4eba-a988-a2a1a87ac195",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a637c58e-7656-441c-b362-91579d98321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03118b99-45d6-41e0-bfda-b6a855d86bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a295e3c6-d74f-4b78-86fb-5c9c4090a8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "97affb7d-60b6-4b5a-9f4b-e0900be560ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdd7b11-6d25-48ab-abde-f687c5e88159",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098b5e03-ccab-488b-a258-87a6d8087bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ffd0dd-3cd3-429d-b25b-aafc0c485354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41db499e-84e3-42cc-8db8-e455ab7fc7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7367c183-e69d-4a77-813c-3b0175b9320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390aef39-3729-4fdf-9392-cf4592348468",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29248e2b-8e6c-4b6c-8c89-9fb840332fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44076922-15ae-4beb-9241-8e9fbe641857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916f6f60-67f6-4897-b784-c70a6ba2de18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62887a3c-ac7f-4656-866f-c46c2b29023b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f6f04c-387e-46be-9e1e-6c69866b9671",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899231e5-edc3-45db-a134-1ddd4ca92356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aad17c5-eb74-4d74-b8b2-2c5ebbfed97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5736f31-ea9a-4278-95f6-37266369188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45472cb0-a488-438b-8552-38191d4f438c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500a2eb3-0487-42a6-b1a7-2f914784b290",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa96c5d9-da82-4e3e-b1b9-89f7cac0693d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08ef1df-f30c-4a69-a5ba-27e8d1d660f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d234ce-b35f-41bf-89d7-410576d877e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc7e40d-a2fa-417f-9d4b-35e8b96d5606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6808f57-f86d-4df7-9389-20b34c33b5bd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618a3cfd-3757-4010-94c5-527ac2ad7535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3654b05-0c41-4e5f-88d3-c13ee6b014ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceffb2b9-79b4-45fe-879e-7bddc6b2f387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98268b3e-740b-4c38-b28e-8706332172b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0709a523-728d-48fb-9244-a743dda578f5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85c8574-9352-4a25-b0a5-9a36d923c69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8403a0-c5eb-4d0b-8449-eae63df84b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5f5f62-9b05-4524-a2ad-239c27a4046d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d34ec4-6386-4c6e-8e3d-fb6a4648a39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8cdeeb-6561-4b27-8ae2-7f7c2ab4f0d5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082dccf8-55e6-47dd-b155-db6cabe665cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cd1d4f-6fb2-45af-be55-32efdc433141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac76f71f-c03a-4c7b-a248-e8cdd3bbeeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "33c7cb5b-c095-4428-ae1a-4c1777c08c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b396072-776d-4fce-a050-a34ca35bd26a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6af4c8-a19f-43b9-9dda-f2e96c24c631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ae3133-e0c9-4a46-823c-1be7e3d52c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f07526-dacb-4e64-977d-e920cd9ced87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0618877f-5dbc-46d1-98a4-ed11eb2ffbae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e34adc3-58e3-43b9-894e-40767ff3f6b0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebd7ac3-31da-4b54-81cb-47376fab6864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c010704-0b27-46d0-bc2d-90c5394d8ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8315ebb1-f975-4bee-95f7-d39a9b6c01b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99972425-c251-4048-a0d8-15803bcc8691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d810f6-d456-4f97-a6c1-4f7db5849679",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d99070-f7b1-4fcf-bc94-5f1cd1183e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c21281-4767-428b-b853-e360a8584261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2636a914-933d-4458-a803-fc9151606769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd725bb-3d18-4558-a79c-9444a2c53392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc9035d-cfe5-45aa-81cb-2d71bbf59bc0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42684111-a2ec-4ee7-87c5-475da25c74d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bdf9fe-1cd4-420e-b984-683a858a2825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbba7e8-459e-4bfa-847d-a67d265d1dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36de103-4f20-44bd-9337-9bac68561171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bdee95-53bd-4050-b430-27670696249f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cdf243-406d-4933-9ed4-ad20846a75da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2251da03-57d7-453b-bbde-1dd85989a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1668fb64-3afd-45c8-87ca-647007a0d20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b04c47b9-f6b2-4651-9634-4de817201df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d597220-9c6c-48f5-bb06-4078bc972ef8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b661bba4-1796-46b1-bd4a-58d0d78bdb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbc1185-effc-4a22-b9fb-861fb00f104a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0383c630-ed46-4832-80d3-ecf13c0ce553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93fe3960-d5fd-4975-8d7f-c2d30711bf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a4bcee-97e1-4f9e-ac2f-d4de689f6671",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde74c7a-6c5f-4833-bbf0-f08ce7aeca99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d9fbee-15ec-4d7d-a676-41c8b4763fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd69a350-44be-4c30-aa08-720872c7ce73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440386ad-2646-4297-b892-9973cfa11c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93b1545-1d75-4744-bddb-4a2594ae4c44",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8c1dc3-6a7f-48ee-bf0a-bc306ffaaa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29689c55-607c-4b55-a527-00180944ff7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f7d2d7-8a60-4bb6-ac7f-86915acbcb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a77ad7-6edd-489a-a1e7-d020aa3cd2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef72d51-81fc-40a5-b4ea-a5472021ff34",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d55e40-4f6e-44c7-9f28-234798d0a605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c86d9f-405d-4658-a6fb-fb3fe3a5055f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e333ff6a-bc13-4a6b-bb83-c8a63f5c0ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ee264c-70f6-4213-9bd2-e55eb0e9494e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8e330e-f6ae-4c87-a1af-c5d92a8d4671",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5662a5-6d05-4f14-a937-59f3395d9f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3944ca7-a961-4143-ba29-579d0a5763c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73de9cd-37b4-4a75-a769-b08205505484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce685489-cbb9-4d5c-a5a8-01df875fe6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d75e7fc-c368-4021-b6d8-03f1d37909d5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f06ad5a-e09c-4dc9-a4de-d6a7435f50ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb8cfac-31d2-4497-8a64-4398a37a8cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc76798d-8459-4622-9629-1c7ead50f7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da69f0e7-07f7-40ec-b7ba-0a9b301e5f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcc1188-2d69-4a94-a500-1f4f0908076b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50aa4811-17e9-44ba-a4dc-cd20a67ae9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dcf2607-a2cb-49b6-9789-86dcf5e6b898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f666da-e774-47f0-b34a-ba9a1767dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba589def-7fd4-42ff-91c5-f34abdb12c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17ee56f-390c-4435-8756-12551a885b15",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2b054f-76bd-4f01-8f6e-6540b7dfb5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5921f4d2-e932-4691-a447-567bdf50feb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a9d480-b823-4174-b50b-5295780b2d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c750d69-0073-4c00-b2ed-cf371f2091d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68829097-169a-4e5d-98fb-431a181631eb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3bb9b5-86e7-4010-b4cd-15663ac7e249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c20241c-eb67-4c7f-8d44-930bf090df5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9d8713-6998-440f-962c-5afa34674dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba543e05-8690-47be-b16e-d4b9d6433e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f31237-e35a-48bb-a9e6-87fb113710ac",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20532755-251a-4671-864a-99fca07c9a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279c415b-d2ae-4dfd-b7e8-a0b3a746d63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f986d29-fa7d-4817-854f-b31156ee2e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59ecae4-3b8d-43b3-a813-bf3d8f7d9220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2fdc68-e55d-4be7-9a3e-1ae84d217840",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857d20d2-ab9b-4f62-b8c3-628261bae148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340218fb-e377-4795-8c31-0d21a0a8383a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a9623a-c4bd-4fca-968a-48b9354e2640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10483521-38db-420d-a715-f6d4ec7c2c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983198a1-48f3-45f7-9597-045bfdd71712",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0e0132-7ece-4cd5-99be-7a47319a761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d79890-221d-4f40-9af6-331e9e2e0805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e77558-bbcc-422e-a8cc-5925590968d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1447fef7-2562-40ea-a98b-2d7e01854174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b68a3b-8040-49f1-943b-82b66677724a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642a178-05ef-4b81-93e2-5affe0952e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465c192c-cba8-4aa1-9166-5898ec5e294e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0432fdd-6c81-432f-858b-61764b03eae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df56791-219e-40fd-89e2-ea987717e175"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec2fe003-eea9-4330-844e-875bb9f3bc81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c445f9b8-53cb-4e59-98d4-98e02e5a5dbc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064e61ae-ba4a-433f-b711-d15477f961ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd768bf4-3e42-4115-972a-b77083dbf18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb7e255-37e8-4f80-9769-65fb8b501ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9533672-33db-41d1-9108-8e1e50a46c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065b4f41-335e-423e-8488-44eb3f6a6f97",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e65544-4188-45db-afae-167a3e1d1c98",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d9a515ae-d7c5-492f-abff-de4ddbb00852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c314a8c-5368-4328-8f9c-033570c67cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69c1270a-3941-4781-9c8c-f099dedfc546"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f955790-b488-4e10-a07d-171dc351d2f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7e1f13b-5f32-40bc-8e77-0feb5cfb3c99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a010c782-9ba4-4019-ad65-1ea8ee599fe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0ec111d-6331-456c-a0d5-519445bb1dc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b2b2ede-4e33-47aa-890f-9f38f2318a65",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "032461c3-e88e-46a4-b51b-dacee44b2660"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2d277fa-8347-4b21-ad9a-5532bd2207e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb098d61-43a4-4b55-8c25-864017de7e1f"
            }
          }
        ]
      },
      {
        "id": "dc57cf85-c648-43df-a55c-e830031f17c1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "393d98a2-0862-4511-8fa1-2e57a817580d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b5370cd-0b42-4e67-ac48-27b241a63523",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d9547d0-6206-4252-9da3-d2e91c0a06d8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94737dd-2ef7-4007-a49a-a5ec1dd59c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9224408f-b0d4-4b76-8bd3-55920c931e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e5881e-8d7a-42e1-ad84-509988b48e7b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8fcb68-4ff6-471a-85af-55559b0a0ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e9eb40-69fe-42e7-81ed-4c9f9d855c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d41b31-c697-42dc-b9cd-e61b7e6bd6ea",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01780e9-f8d4-4790-8785-7e108343de22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5812b3-88b7-4024-995e-499ad5948640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1873e0be-f97f-45fa-89bf-feda59535a3e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8927e09-8439-4172-8931-4404635af8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767bdc51-ac20-41f1-9806-10f1f43188dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb96ba11-8d77-4648-bac1-a9bf5befa9c9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2f5ce8-599e-4022-aaa4-61e176249ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2941f1ca-7253-4ec2-b77c-e9f46c129756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bf9872-767b-4e4d-aca2-fe4573a2869d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3188b7c3-8cbe-4bf5-ba5b-6908ee883865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821f45c5-2cb2-49d7-85d8-2cac66c70e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0686c9-407d-47da-83ff-74757542a012",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a2bd5e-67a6-4516-99cf-b384ed303710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c87a38-2034-4079-8438-aae42cab2fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac09b38-e45b-46ca-886b-f5e261782275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb5470e-6adc-44a1-8152-2da079d5fd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c2bca1-6451-4a87-8411-125e8b8b5cf9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c46895-e19d-4477-b3a5-5234755b428d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02dabf13-4d5f-494e-9958-dffbcddfc8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd4efdb-da84-4ee1-86f9-741740e16c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6e0663-0f77-48c5-b1b0-a21855d7a4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3423c2-d80b-491a-89f5-f6a42e0ac673",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5aba9a-49b3-4c26-8de1-ebcf1ed4bc24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58dcf61e-2657-4535-9cf2-f204f8091762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b5933-5b20-4fad-95f4-be42daf95bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952fec82-1507-42ea-a8e8-bdea87bd8dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361dbb10-9b29-42c3-bd9c-24f20c1385d0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13005bf1-e807-4eef-9337-39562b70703b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40b8450c-0d94-46d6-b2ef-0cd5e9ae5522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcf2339-4c41-46a5-93f9-acd6853a7ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ad940e-315f-4433-910a-64d2fc286559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43387f1f-b202-48a1-b816-0e2c1a61543c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6955386-3633-4536-afde-3b43f7347e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7f3d1d-9aed-4094-912e-a2e6965297b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a005d6c1-a658-470d-a9b3-3c3ebe4cbf24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9173cac0-9c89-4d2e-a976-d83951a41956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5124a1-e4bd-4efe-a006-45f7eed084ae",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d94f9b0-22de-420f-9152-fb1595d44a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896ef2d5-e998-4cd5-806c-a85f1829e4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5449b0-b1d6-4149-9ad8-472dbdff4136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c378dd-6aff-48bc-85e2-e7bc1f6fcb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53f6d1c-c26f-4d6d-b2aa-9135e0c12e10",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5a337b-dba4-4794-86d3-cbcfac363d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932e098f-8d36-44e4-b5ba-83f22004e1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9668e531-a43a-4877-ba0a-61100c1c053b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce69367-f0f1-4ac1-90c3-d0a2904cf676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6444614f-c8a2-4e11-a40c-3afcc636bbd0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583f76cc-06c9-4083-8485-8bdc0eb415e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2339ae5b-288d-404c-8a82-7fdd4d622193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ffa68a-b2f8-470b-b2c2-22192169ef5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c95cd0-4f1c-4641-94b2-136348fa9e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9585d4e7-d5a6-42e7-ada0-3a79afa2aefb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbb8043-3d2b-40ea-a2f3-0e2488faf69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ec5c5c-d57a-4d00-9500-726be1e49eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb45c442-e83f-4e45-abb3-1ee572a21503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b96e7d6-c9e6-43bd-99f9-3f7b235821eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7463723c-acc3-453e-987d-33859b4cb104",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60161967-b841-4328-86a2-6197898b22f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b4a297-640f-45c8-813c-157b794ee63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a3c05d-00dd-4289-96da-1b03d73f74fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f64204-1b72-479e-84a9-cc14bf9950d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913bb898-2a40-43b3-b42e-e61444ffc3c0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f23cdc-b09e-4dbd-9c11-c89481e88dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5daa934-8fc6-4d1f-bebe-f7b3ef884d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d532b8-9e93-4e4b-8c3b-ce4942a9c0a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5768d85c-ec22-4159-ab31-9c7f480446ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d592411f-2612-4760-9dd4-bf095e18bc7e",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cea26e-8bcc-439d-a2bd-0fa88c00ee71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab27a29-6044-4fbf-9840-d67fb1710a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8edac8-7132-42b6-8386-fe764506a04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97aeb2dc-0ff2-449e-a1c9-fcf54cb3d980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e965e53-31ab-4e43-82f4-d48bee67ba2c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f027ac-82ff-4f40-8942-76311590cd07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21836005-4220-4253-89ee-a4fb22fb5c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c6d64e-5f8f-4abf-9269-db28ff4933e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef4efcc-857e-432c-ad87-916ff3eb980d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8977910-e936-4956-9e61-8250d8a47675",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69212b4a-599f-4c43-8f94-4a0c52be7546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "facf73e6-c686-4909-864b-7150374130ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ed5f7b-794c-44a3-9f36-53e82d210732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e1628c-7f0d-4a6d-a408-21c7d37e31b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117907bc-5246-43aa-b2c5-2652d0334cc5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2170338d-1072-4546-b0fd-1488a3894b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bd2f5e-60d6-4d68-ba74-07faab74f2c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48392b7d-38ab-42f0-9c64-c607deb6a308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08912068-4864-4eca-81ac-44cce3104204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86da0da9-0d7f-4195-9543-89d35192e8b0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f89555-f49f-4a05-9a6f-42582bc49d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbd8838-a069-4bf6-a2fd-e939273d453b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff70eaf-1fb4-4e36-8b66-3dcc8e784e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b643eb-19d5-4737-8158-4b54edcd8b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f25ac19-2d88-43df-b556-630a67df8de8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb29830f-122e-47ec-8b7a-4b805d285f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50534bc-fbc7-4fde-bdc2-6ad3a686b293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2718dc51-dbfc-4f99-8353-732cc887ad99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93b0b2f-2044-4b35-8564-d0d627dbdb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cb95fa-c91d-4ae4-b43d-3b7ea5cff9ad",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf6b93e-18c2-480b-861c-0162ee14bde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d97b32e-76a4-469c-8505-73aa6d2c2cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae340cc-1e1f-4ad4-98f3-7a5b6af77a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a88190-ee7c-46ef-81d6-130ce87b40ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99329591-dcf3-4b2e-8abb-c5526cedcb61",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fc73a2-f5a0-4e65-91e6-c83aab296333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1db085d8-d710-4894-a28e-99037ef882e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197e8032-9778-4727-ba08-39fc73b35df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72ee07b-3566-4473-aa7c-ae183ebc781b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cab3561-8d06-48cd-9227-60d35b9e5697",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaa8935-09e7-417c-9f22-181f1149642f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1ac802-7239-4f3b-becd-1e38b4277e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e41cd8-7f87-4491-ae2f-d3abad79c1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50619e23-18fd-4e2f-9666-6380a51d4ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc072a39-d096-4510-ad7d-0854039b48ef",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbcf6c3-d1b7-44b6-ab3d-c2d4351b345d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4014c534-89af-4e1b-a99e-3926e685f970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d511127b-ab6d-46fe-a833-40ee0be0d93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a065a2f-ee18-46eb-9a53-cbe9e3cf5a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9819d649-b6c8-4492-bb90-1228c0a94207",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774a3f40-abb7-4f15-947b-b6cf900112bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c501e36d-3e65-4329-a983-2ffdad5bc8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f7af6c-e006-4267-8192-3288fcf58859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aef65b9-3217-4b86-8fa3-38338600027e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795a5d2a-b3e2-47a2-bff9-0156cef7f55b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15b166d-2534-458d-bdb7-f0e6e044b842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61e2e2a-feb7-49a1-b97f-a3a336eb9473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0d0b46-9482-4333-97f2-0d2bceccb6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584c8a44-d44e-4b97-992d-5df136946e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242525ca-04a9-4309-a653-a53d0395768c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3760679a-3ba6-416c-8799-b964c96dcbaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc44440e-e28e-4924-bd19-4b7d62b4a5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb1b658-02fd-44f6-ad18-52eef456c4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb3d12b-ac85-45f2-a29d-78a3118b2c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec6ae2e-c80e-4aa0-824b-f61adbbf9534",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5695f10-86db-427d-8d29-9eee0ef2cbd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1b993a5-0152-44fc-ad33-28dadcd97f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff47b392-4b82-458d-b3df-33f76ba81bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b5d0b0-3c33-4a9f-b134-abdc36a5b36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a8cf48-a34e-4b83-b9a1-80331cde53e8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c25efe-a33d-4e26-871e-15918269ae92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a147d5c8-d2e7-48c7-a150-87e7432b537f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c184f8b-4979-4012-88e7-f9c794355b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e705e5-e264-4925-a4dd-f98309ea4e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23644305-cb6d-4726-b91a-4c6afa977dc5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38cad33-5123-4bec-acad-48497823c692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9e5cf1-0190-4dbc-99fd-2da664fa9da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e51617-cb22-428f-879d-e703b59a175f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a883db22-67c7-49f1-aae8-a98a1519bbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486f5ec9-925a-43cc-b76d-81b8bf114bfe",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba608517-c1e8-4239-983f-dd0baba0ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "312ce814-1b34-4ee0-97df-540c89df4095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c7b355-9593-48ff-95a0-cbef47f9a962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb068db6-5899-4cce-b57c-b251a56c6e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c4ec9f-6793-4dd0-ac8a-983f0a99693e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e369d79-a140-4910-b9a0-dc209d61ec45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "515dbf76-a6eb-4f51-86ae-1ba8ee489308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7910f0ae-f1ac-4c1e-9cd5-55517f0b67a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14735bc9-dbb7-48de-b2a3-d6cfd4df1edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4f2cd3-5f55-41d7-b6ed-a803f234212a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc6d756-b348-4aee-ad5e-a17a7e8c1e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff935d23-1e39-48b2-a0e5-72f534f69282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c17ffc9-90f8-4ec3-9e6b-c2982d7887ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6266ad97-5709-44ef-adb7-609446704a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78db030-e472-458a-8470-fd01df937f5b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d343a95f-0b92-4b8f-a045-26a39dda9bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295b63c5-e07f-45e9-9c8f-1732234403c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746281c9-5477-4c21-93e2-a25d37cd5959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522efd91-0f01-4d62-b00f-0602319949d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5c552b-f76a-4a0c-adc0-846d433ee549",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d88068-30fd-4493-a049-170055f4b24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edab7b5-3309-4c8e-b798-1834c362c530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557a392a-e420-4123-9176-bf4de76692d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa866bb-2a78-4092-9d90-4b25d65fde73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3ae905-45f6-4a64-a625-6f817b3f99ec",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a85087e-cdac-4655-b36e-8d1f3c2a7c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36e69f4-c752-4856-b699-e1b668517339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2963f51e-0bd6-4f98-b22a-b0b63c22850d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b48632-e852-4830-a8f3-8514b375dda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7b78e7-8592-4ce6-8b8d-9dcd4561a39b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19f75f8-5b41-4e96-9583-7ab9fcc666ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad5fcdc-263e-4c42-ba14-de8661c326a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a70b848-def8-484c-a271-9040cb996321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2fc15a-b3d6-43b4-9a4b-bf9de2789452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6612bf53-4636-4017-8c5f-7bdb7c0e2c03",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c19bb9b-4500-4962-98c0-ea72440e64f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41d6048-3a74-40f5-aa12-f67d7120c5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904514ac-dd73-4fb0-8792-e7e6d747f9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8086cafa-89cd-4427-9952-2327bfbd68ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbfbd60-cc0e-4a0d-8ab4-afe90a1cf59c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88ed390-7bab-4e9b-ad17-7a9142fc4a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e183120-c6af-4823-8037-a3fca5b20399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6010b03-8135-4375-8623-161d3b8cec43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb4c4c1-fec0-410c-8f1a-0e16a53121f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fe9d8f-e6d0-4d0c-bc87-3d0eddf96279",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47074eb2-4e29-41be-bfdf-9f0b9e452e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be30f01-3ba2-4d93-abba-2b31a6840f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444fcfb9-33bd-49bb-9cc7-420c78dea4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb68b9da-b82b-43f4-a1ea-c06a27dc1256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83abd33-3fae-4a7b-9dc5-b6587f43875b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28383b52-033d-4e94-a75e-d860ddeedc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff6eff0-c8a5-44d0-8410-8f6b6277c773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e42a397-6f40-4073-bc34-cce47c3fb0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa3f8fa-59a7-43ad-b952-845e895ea924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2082f700-a7da-4e50-b62c-a913d60b5630",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691af9b9-0aa8-4c0e-8d82-1295fd85046f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a2c115-45e2-494d-9590-ea0967d2c93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b6c08d-2779-46ec-851a-e3b050ca89b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f004be2-8e2f-4795-b2b8-09632a008071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bff26ab-786f-419d-ba51-283a0cd20b9a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac07bba-db4e-49c9-899d-3cf9b7a42b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1166d3-cf52-447a-8986-c99bc497128c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d507bc-27ee-45ab-ac01-63b218e8901e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f932e30-a4a1-457e-a18a-e19b8efbfb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42bd096-fca9-4eda-b38f-0783cd777345",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1980bf-983a-47fa-a604-f74b25c7a447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b795294-a66c-46dd-98c2-75a15eb2c677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bf8206-a589-4d5f-8e66-f9217925594a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6b3233-eeea-4d13-adef-af9bbc99fab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56964bc6-9a89-4914-a716-22ec4b70d221",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c35799-a10c-4ba6-8cda-13ad79edd90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc93908c-38d4-4b70-b5a6-e5363dac3c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ce172c-efe1-4804-a2cd-e212aaa31b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd73ab4e-47e1-4c3d-ba56-0136f9dde0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795302ee-b0df-4238-874d-3cfc17775da9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e804996-5e22-4c72-b1aa-25deca568b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b58ba50-4c03-4d26-81e0-68ba563bf4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea4931c-e178-48be-aaac-716638bf8ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77b212a-420a-43e8-89a0-d1eb0431f4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27334ac3-b274-4834-9063-6da94ea75e89",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfda442-10f5-4273-89cb-fc14eda1bb8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f5afc5-4f8a-4a78-947d-943160e3bea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f21acc-6a81-4509-a073-d63cd4096423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f76adc2-9606-4eb2-ae9c-598f66a6cfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605b692c-fce8-4b33-9a72-83ab7fd8a48e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba3e830-3f0d-4cd1-9da6-387ef7abc330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef491aed-e4bf-4d09-963d-fe2b220317ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae4dd8b-3755-4c95-a15c-b43a0dfc931f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0b80a8-db71-4d9f-8672-433687c2a7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a2f5b5-cbd6-4ced-ac77-c07dff483fd3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dbdcfd-650b-401d-9bb5-ab96a487053e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7096fa5a-e18a-401f-b44a-081c7a8ec545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb5ace1-332e-4bec-96cf-3cbd30315e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780d4348-ba5a-452d-974a-60556fd074c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa515e1-cf9d-4cca-8bd1-d28da501eb69",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53e50f6-8076-448a-8982-b8a35152a8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94da7d6-9ce8-467b-a024-16f31f357b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ea6a65-3da4-4205-988f-01a030749343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4374f521-36bc-48c9-9129-faa790cea5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86f7521-aed8-40dc-b18f-f117a05a1a21",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af987e8-f0a5-437c-9040-ab194717a8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea15e6f4-32d4-49b9-9c42-9965c359fc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8839ae8-05aa-4654-833b-51de7ae45f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b154cee-3ead-45e8-a83a-2b53ab1bb55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18874e13-df0e-43a7-8a33-8518e879bdff",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66693650-2212-4652-b531-64c227fc2143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cb8096-48b4-4240-9f15-fd4df8d4518e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5986bdd5-244a-4254-b7bf-d97764c834bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c4b4d0-346b-48f8-b059-899f96067d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177d268b-5ed1-470c-b87a-0502cbf8fc8d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadf54b0-366c-4063-a9f8-7555241fa24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91212d9f-2f91-4cbb-84f8-8ea23489c213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa855822-e360-492a-a9b1-b74f9cb9c583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b0f018-c407-4d34-ae64-64b1bf13138b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de04667-17ca-485b-996c-07de613ea3d3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066b703d-3715-4dcb-b468-b240b1c1738c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca47962f-fe40-449d-a39b-46bd21dfaa0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74f9f8c-3b84-4beb-94bc-75882e806beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b3bb27-9930-4ea9-a327-0bc781231bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0daee85-780e-4fec-ab5d-3e61a6469268",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78a5a62-80da-4ec2-b8ea-6593b9ecfcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83004af1-8131-4df6-a7b2-6582fed5373d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257712f9-3899-4b9b-9883-317fb228a3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d78499-69d7-4323-a5c5-20655016ebf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6962062-832a-4e27-92f2-9d0e775bc5dc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d25871-53c2-49a8-9779-50a64982fe92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67a12e7-04e0-4bfa-a185-077ef0934b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05aca2a1-e804-4476-9f93-4cadc63aa43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b67d27-78da-4ed3-b9dd-c541e409e010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018a8042-caca-47dc-ad27-c41e8d1c1f5b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bd0d60-40ec-406a-924c-d292c12c173f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c0c382-378c-4b6c-9180-1cea96e6579a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997b1cf9-04d2-4a99-b1de-c1c120791db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f92d26-8ef6-4248-9845-3a58ad10efe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f0b620-9d96-42e7-a15b-5a669e6c82a0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76604433-f454-4155-884e-78479eed0dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff5682d-ee1f-46bb-b84f-814da72cdbf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1d5985-3da7-4e41-9770-0d47893da662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb932e76-341b-4566-9c61-00bc4a97b81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36c4b4a-7a88-4fa1-904d-6053293d70dd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2557ebc8-8b80-4c8f-81ab-a9ba5e6236de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf7a217-6293-4658-9fa6-689b10b913ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14515c2-20e4-4335-bf6a-097754371d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202f3262-76a4-438a-a028-379fa36da4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2579c0a8-ad64-4ef3-bc39-e953ac7672b1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3e1aed-de94-46a7-84f2-aab15605a44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f86c272-c844-492a-87cf-8718fcbe2443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449e471f-8bbc-4fcb-b1ea-f56a9768dfba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16524569-1886-4d8f-80d6-b581330d1890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf6572-f0bb-46da-9851-459bc850b61b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d33cb7-a7b3-423b-84db-1186dd6eb90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7258cd-2a19-4543-a65e-da164bec44c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40914732-f012-4aa3-8fe4-5cfbb25453af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b200f6c0-e387-49dd-8c46-ed347cdd4806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fcb2b3-b849-45ba-a0a8-dc2301387c6e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba001086-e4b6-41aa-b50e-c69c8f30c564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c077dcdc-0564-4075-86a5-aceaa3a2e44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ddf650-51e4-4be0-9c39-89f0b5a7b008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3c1916-da95-48db-8ab5-5b187272582c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae62970-d60c-4d39-aa0c-469544810db7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce134df-37f1-4e80-a2b1-71250b282208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c445cbf1-e85c-4bb8-881b-df145d7b89a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d2758e-23fe-439c-94ab-0dad455623c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa51e191-1369-4a13-b4c3-1238e6e6c5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fd5de9-2fb6-4dd6-8046-5492f6a50bd9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f927e1-c427-4794-bbb9-020e85c40e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e36b20-d446-439a-a729-f89716071062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c7f325-2343-499e-b179-b242687381cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42391d28-bc6d-4311-8cbc-6c5703598cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6560ff-96d6-4f9f-8393-5c7aae4f065e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98ef861-40b0-4772-8f7e-3dada4201414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cd0f4b6-a4f3-45c1-9c96-6582dc24adbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b14319d-9a02-417a-ad02-dc5849d887bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff662bbf-6a2a-40c3-9056-3d6206721856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2130da95-becf-41bb-801f-b0080a633a65",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b643351-8203-4c03-9fd7-84ee2423375e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ca1382-947b-48ba-8640-530f607c8205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2d7113-3a1c-421e-b408-e751746ed81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dd8729-3ddc-46ec-9340-9df04b118d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c086ca1-acc4-4ff2-bdba-fbbc51aa8834",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01eebc35-37a5-4417-b72d-24cdfeddeaab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fecd9d7f-f7df-42c4-a407-d5eb7d1428a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db63f83-6f0c-421d-82f4-648010817c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef0869d-0d39-4e25-89e0-ae86f5f47082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdeba3d-0ada-469d-b07c-1ac5f0dba0b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d800f17a-7673-481f-becb-731e8c019805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a587c0-89a6-42b0-8cda-bf14d04805f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5e10c8-ce8d-4269-a29a-0171d899e097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87ef9ee-dad1-40ab-b8af-2e6730ae3d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2953ca-3a06-488f-b735-66a7f547c30e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11d4c7a-2fb2-44a2-8171-409866edb520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c0906d-ad01-4e41-925a-83904a30b5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d75f7f-4d43-42fb-9ac2-35e0987f27ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea5b8e8-8493-4544-bdba-6eb39d99b595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad1b7fa-2a90-4719-8ca9-0d00df4df4b9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4857ebb7-c6cd-4459-abce-cae5b7516035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd7bc3cf-c169-4c47-b1db-f095192aa3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d90b8d-ecef-4ffa-875b-742d3b4cd60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb03e14-29d5-4169-ae88-a171009aad89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dc0152-0c8a-400a-a640-dad4e53f4e70",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a795e8d-333b-4da7-aa2c-53862f3d1e40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfe2ccb8-3562-4c8e-a887-3535ddcb511a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc0eef6-9f24-4e2f-8ead-eb12c9748356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38980ca-c870-43ca-a212-dbd8878df0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af055a90-ac18-4192-963e-5c98d5467ae3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f1143e-4e24-4db8-b1c1-297e8a26acb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83337cbb-3e7a-47b3-b778-e32bfe4f4f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf24cc5e-5f37-49e8-b850-726d4ce442af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fe8aa6-7c28-44ef-99ae-5c93d52477cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2008246b-9557-4841-bb6f-00716e14d977",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd5a97-b5ef-4901-a95e-9db615c9b458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fcf1ba8-5a39-42a9-8560-a1b1f442e5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0063a720-59d3-4efe-bc01-be81e8540357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2226124-1023-4b93-9270-4c35acc79452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6310bd67-11e2-416f-a233-c3f767a31f62",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f109cd5d-0e85-4b6d-b10a-71d97729710a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434441fa-c54a-496a-868f-f9266dad2a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c75d6d8-a3b4-4571-bc37-bc6cc8ce6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89585cfa-93e0-4794-9e1f-6dffa115c5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f080a7e0-df31-43b4-a24b-80180e4bd425",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406ff7cb-53b0-4e2d-a106-db499300de61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a8cc76-07f0-4fb0-b544-dc52e5e625fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dba671-1895-4db5-a36a-d5dab8255bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428154cc-264a-4f7b-8a9a-07e1d6be0445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930bdfd4-0ae5-4fdf-93a2-132c8ba68178",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e71186-69d5-4bb4-89cc-6bd667e43eb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c4c7d6-2e5b-409f-9537-a4acca4b5bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb951f5-66a0-422c-96c4-0a768af86e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985dca2d-4884-47d5-8d02-09b5a469c7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c955dec-bb06-4310-ae40-d74907b384b7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8fadec-344e-49af-b072-d3e10dc244d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673066d4-7a95-4476-b976-c011160846b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff18922f-46c7-4588-b731-4b56c82d4b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293b1786-c6e2-4785-9735-a02601c999d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc043d64-fa73-439e-bbf5-7e8999529b2a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17acfef2-3132-401f-9947-614c9d33fe1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8fa391-eff9-4dfa-9da1-e3d16631e74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27ac1e3-324d-48c1-8082-c48f15f2f2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe228b8-9746-470e-b159-15fa63f13755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de038bb-ddbe-4b09-b08a-ea88f5f7747e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56f4947-c171-4f09-a75c-d590736507a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13ca44a-49f0-42a7-a89d-b598eb61c331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b53b312-7302-4e75-b2a4-04932bf2fa7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81de980-cd42-40f0-8816-7ed3fc8ca70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538c3daf-6a73-430b-9254-837e6d32ecfe",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ba4df1-b739-4eae-94be-f3c67d7ea7c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c2a660-d084-4474-85ba-3e55f2db0fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d05337-1e4f-42a8-b88d-0cf475a3c27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210fb946-22ae-4407-9f78-b3a9e2aa24a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f07b22f-9aab-40f6-8c51-b3278e3875d3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa3bf44-001a-4ef8-9635-233ba12e98d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2446e5e2-59b0-417d-ae5b-65b7d5beb443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57efcc5-c50f-402d-9f68-9a08d2bcfd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2833fc2d-ba7d-42b9-bfc6-22209ca70534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78278528-34ef-4f7d-a33b-b2e95d1d0f3f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3cd37f-5f0d-4f18-9e26-05cc2453b82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4966472-3501-4efc-8819-c2d328f889e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e72b51a-b7cc-46e8-9d45-4451fd0ae62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b26726-bbe7-4264-9f38-137052395710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705a4ea5-a7f9-4e07-ae88-c160a33f94c3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3702b567-d484-44cd-a483-1c9d3348775d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24231257-5571-4a16-914e-cf8b279e7bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9f2746-b0e9-4ead-801c-1344aa668784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042c1a40-43a2-4e41-8e88-e45fa435703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf886f71-cb26-4201-adf7-0895d306cf03",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de5e85e-b886-4bd7-b29c-43d610502fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa8e3247-2072-4df9-bbb1-0d1654dd2d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97030be-c9a9-4f1d-b3aa-e247db5dc701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa73568-e411-4861-a619-1d24bbd26f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccb4e34-669c-4227-8577-8204c119831c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f13424-6b8d-46bc-9de3-8e96ffdae44c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e40e08b-65e9-4f07-ab3f-74ef26e9af80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afca249-f199-4c6d-8eef-9e06b13ce89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0238b5b9-2819-4b0f-9a7c-01c73ed72bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03eee4ac-d030-4f38-9f4e-eed61d30aa12",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d8cfc-6d91-497d-a407-ee30adf78614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f14720d5-193a-45f1-8d82-79a5133f6299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191e9fb3-1248-4eec-8d9c-9930a3a2a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25877a6-469b-481d-b328-38bd5d677ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51e0eb7-52b5-4213-8e53-f28d4f146433",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fc9fd1-5dc4-421e-9709-56629466a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2674a7d1-7b57-4a44-800b-971602faa2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc38ff2-ae15-480f-9fbe-a5bbfc9beea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07402ec-382e-4701-b6d0-02b2ecb6a2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755fd12f-cc72-472f-943a-7e316824bf49",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05462654-1121-4217-90ee-75c3d075c2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904d1a3b-9c53-4988-8414-057554d43895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce00780b-7fb2-4860-b59c-9cf457782188",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615d8454-89a4-4cfe-a43b-8d466f898f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a234a6b8-658c-416b-b8b4-4c07c1ec5e4c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921b207e-5123-4519-aee4-e80fe40fbdf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30e35a61-3800-40c7-bbd0-e66f8b79964e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e66945-bc40-4da1-bde0-a562fd1cc19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720ddcc6-9acd-4aff-b761-0e663d276d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835f2806-2e84-4e1f-ab13-830d3ecdca5e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c6d3c8-3167-4e2a-84cf-fdbdf641ed41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ee424b-69bc-4664-8171-c7fd180d2b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b69145d-6a2b-4b49-add2-76af569b52a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ddd4dc-56f8-4367-9c55-6c652dbbcd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39e72f2-70fb-4b16-86e3-6b1a755a1d0e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80f9128-bc6b-472c-8f35-e3ed91990e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56490d93-e6e1-436b-814e-84bfa33ccaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eaf59b1-d814-4573-a64e-3c0ce2f30cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3549c27b-51f5-4d4f-bbda-477708a1d7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b7ca5c-8618-4508-bad0-dfd7cde80161",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2a626e-6590-41e2-80e8-3e09efee68ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81dabbce-ab95-48e4-8c65-693507ee6ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2246b4d7-c645-41bf-bd83-c64c832b8b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45405a67-842e-4c8c-ab9b-7abd96f09932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdf3fc2-09ef-45f7-ad82-c33b14a35255",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52f7106-989e-4c3c-8ef7-808e353912a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df8380e-ddbd-4fcf-a816-68c6c7ef689f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ebe3eb-180d-4240-bc2f-52a3e6d3966e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423e809f-ad3c-480f-b9e4-9f8ebd901470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9e5ad8-695b-402d-8ccf-d43afcb94050",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb398b3-363c-43d7-9d1e-dfd7256c47da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b2b78b-9d42-4545-9273-d11dfb54d354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b519aacb-d21c-4955-a843-6f1eaf11eba3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a6b9a4-83eb-4435-a160-acade8ac5649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5398dbdc-42e7-477f-8510-17570c11bded",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14b1dff-793b-4f0f-a46e-c75c7329b839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d23bd0-73e2-49a5-b73d-2dbd6e058143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f38ac1-6555-4a8b-97ab-f2f67e246147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94da708-f169-406a-a987-3ad8c395ec70"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1288201a-8727-4301-8177-432fa610f7f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3be00dd5-69ee-432b-9434-09af90dfd3cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c69ee1fe-ea99-4dad-92bb-6add243c61cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d5b8934-842f-4442-8875-7d4c4ee350c3"
                    }
                  }
                ]
              },
              {
                "id": "524a0570-6c18-4390-af6c-6cf3281ff64c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c47c91e9-ecdb-40f4-9c5a-ea4fb86060fb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb401f7-8de3-482d-b538-d1241095186e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "08e0ef55-5b21-458b-acfe-ba9029f29cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d44a304-6471-44a0-b0c2-935fb24a298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bf6e619-64b3-4acf-8035-0862af69e007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b57918-2979-4075-be62-ef15dd7a1bb0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8020a5-43d9-4282-8c17-2c7e73e1e7e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "88f8c5a7-68e3-4749-814f-57c00536f54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143527c2-9a17-406f-9876-f3e22f05380e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d1833ce-250d-45b7-a317-5bdb9dd78951"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8763df58-7c8e-44a5-ab9d-969b2d3ab65c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee8089b5-8473-4aff-bb9a-042da6a5f76d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c785908-7410-457b-8d2c-ebc63fcb0220",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f721f596-f5ec-4ac4-a179-a205c7f4e2e4"
                    }
                  }
                ]
              },
              {
                "id": "ce434c34-4e62-48b2-92d7-4ef7e9694631",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "276e9e51-cca1-4a13-b456-6704609aa8ef",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc24bac-962f-4751-937b-3d871de12707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a388c035-44bf-4d5d-b405-67255d257d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e21759-4c2a-4e82-b9b6-1f7e57646cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6918c8ed-da43-44ee-85a8-a1c0d58e0d04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "56bbb8f5-73d5-4238-bf48-47a7c2772400",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f00801e-df24-4a3e-ad07-45c8127fc052",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "faddae95-c1d4-4da8-a189-d66cce2a39c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b101f344-de0b-4019-b11a-5bb0cce134cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b49854a6-57b7-4420-87ff-6081d8ce0e3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f66cb53-c279-44e4-8977-fff85c4c3abf"
                    }
                  }
                ]
              },
              {
                "id": "1f10e909-6814-4c02-8b8a-c302f612baa5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1acc99f-bdc2-4bd6-8b69-59388d834ec5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cac35583-8a6e-453a-bb9f-213651711bde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d00e8a5-199b-43f8-a360-02e5e54ba91b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c5ef175-dab9-4002-9cbc-fe5c4c9faf5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57832349-3794-431c-bce0-1975437a3734",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b652a266-40ae-445c-82e8-dc4706000a16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33f132dd-a438-440f-b4b4-d2e8d4fe3f3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f38b5cd5-6276-4584-8503-e0a6afd7baca"
            }
          }
        ]
      },
      {
        "id": "c694816c-75a1-4c97-a478-0962043186d1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ca659905-39b0-4367-9975-a8d12c231eb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "461f6dbb-a59c-4b00-af8d-35ccbbc23e79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddbfc02-14de-45d4-b4e2-6868bf191601",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de3c38ff-2c9c-4e67-9fe1-317b4aa13a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d1e4d3-c17b-4367-ae13-a62d7106c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "418f9ee8-17e4-46bb-83d1-19cbe2ad3864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ee2a8c-5efc-4d74-9e36-8111412f1ca1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d903f92-2349-4274-8c75-aa0686a54a99",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6fc5589b-4399-451f-bd38-a5dcabfc0fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d604194-47f1-4f57-93ae-c76bfa4201a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9414214-949f-468b-b9f4-90fa28a52c98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "649dc82c-befc-4962-b0e3-fbc39a6e26ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b1f34dd-3690-4cf0-9d2a-86fa359e7a3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bb2aee1-ff7e-43fd-bedb-cbe3a4e86132",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26ef4f3c-d04c-4f2d-bb9d-f3e6fdd32154"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e126f31a-727c-4e2c-8b66-d5d96e98f21f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8e767ad8-3b90-412c-8007-dec3e765c3a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43f61d96-4517-4f96-a4a3-891261f25410",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b284a4b8-aa9e-4172-a231-f448dbc17884"
            }
          }
        ]
      },
      {
        "id": "e5fd1205-5d0a-49fc-ab22-d99b2250e9bf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dd7df24f-48c8-4135-a9b5-c601de67c8e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "283f62ad-40aa-480e-a1ad-9ec14ea853a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be5c6351-7728-46da-9c82-309c186703f4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f350629-0c85-491d-be3c-f198ee0ef7f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "da213a2e-915e-44b2-b878-4e856d3d5402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f280a6-0cfa-45c1-9c7a-acdf1d821ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "186f9730-cdeb-4cc3-a7e5-d3cc48318a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51baa067-16b9-41ea-b438-70a5d08bb5ec",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdf584c-8a10-48d7-84bd-72de7e6e1a41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "68fceed4-4ca6-409f-8331-c58d59e9a5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665a4dc2-30b8-42cd-8f50-2cfa05bbede8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "240365f4-102d-4133-b37c-84d35fe801b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aee9631-1555-4364-897c-12930b0b4eb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f614f7e-5c2d-466b-a7f1-d07fcb80d88b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb0235b7-39d2-4ec1-9764-c304e62293a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3d5c33c-13c9-4db9-9295-65f3bab288d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcdc3dff-512f-4a7b-a495-500fa67df351",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "223841d4-f26a-4cc2-b996-3ec8f29f9998"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2488a68f-da0f-4951-aad1-9c736d8ecc92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ccb579e-b99c-4741-9627-37ce17348989"
            }
          }
        ]
      },
      {
        "id": "43eb610a-82f0-416c-93a9-5d41957e2992",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5dd70e59-9ec7-435c-a9e7-9afcd05a7956",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0197e710-91da-484e-8834-f6673486fe51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe482de1-8749-4fbd-b948-00c5e82b4896",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2aa2963-9458-41b5-9f3f-9f563b994bfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a120c288-f526-4207-b17c-483918472864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e947fa2-fe52-401b-a444-e3dcb62f4405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "321073f3-fa46-4fe7-b9ac-9ba775b98f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3369cf27-d729-40be-b147-a3a4852575a9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c22783-814d-4622-9d95-f6e8a5d62e33",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "70a72c84-38ea-45b1-827a-332a367755e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bf6e1e-4016-48a1-a8a8-e2f3658bf719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "042ea008-0c5b-44d1-97de-e757215de5b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c264a4c6-9abb-4a34-83ec-75fd73949fa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3a92327-7f45-476c-ad61-932714f85316"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d8b70d1-9df2-442a-85e6-cdfa5e563e5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89f02886-12f0-4991-b169-e6eaedf9dcb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e33bf7d-6e6b-47cf-bf63-6a723dba2a41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b8a0d9de-5dda-4102-b56f-8588b7a64fab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b74ad824-6074-423b-8f79-ee374b026af6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa62a06c-dd76-40b4-a5a7-5e5cc6e7530e"
            }
          }
        ]
      },
      {
        "id": "07a4abcb-3e6f-465d-9fb7-b77ab3b10002",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "098ad12e-b06d-46ab-8409-3eb3d8605358",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc1d8935-c5e5-4369-8695-423fee84e07b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2a262e5b-26da-4f2a-83c3-bbf2283f5f63",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cd79caa-bf24-442f-8737-bf91486dd61e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8f4d3ce-a76b-42b4-b068-f13546d5862f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.61068702290076,
      "responseMin": 12,
      "responseMax": 1225,
      "responseSd": 177.909685146688,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674002429032,
      "completed": 1674002469581
    },
    "executions": [
      {
        "id": "c0d9d4f3-70e8-40d7-8e76-878500f13bde",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2d76224b-e14c-4824-934e-55759e257781",
          "httpRequestId": "db0bedf7-7812-460b-82d8-ec49423601a5"
        },
        "item": {
          "id": "c0d9d4f3-70e8-40d7-8e76-878500f13bde",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "85ad0e64-d464-4601-9033-0e035bd534ef",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 0
        }
      },
      {
        "id": "1e26ea20-851a-4adf-92b2-86970bfac2e6",
        "cursor": {
          "ref": "052af7de-cc5c-4183-92c7-373135ebaee3",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0412ab2a-07c8-4ba6-9e1c-92f6cabf1e1d"
        },
        "item": {
          "id": "1e26ea20-851a-4adf-92b2-86970bfac2e6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9a498180-3dd7-4d8c-b0fd-11d1477b88a7",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "f93bb99c-4f32-453d-a7d6-218079256cb2",
        "cursor": {
          "ref": "506282c1-e54f-4c06-9e82-f6763d85fdbf",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "09adcc0c-b352-4a87-ae7e-019e1dc88a2e"
        },
        "item": {
          "id": "f93bb99c-4f32-453d-a7d6-218079256cb2",
          "name": "did_json"
        },
        "response": {
          "id": "ff383c21-a835-4853-a806-197acc0159da",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb62f90-54f5-404f-a3ec-0e226a7441a1",
        "cursor": {
          "ref": "b4f34717-ec5d-4309-9882-bb7e46a78ac2",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ff43b55e-8a43-45b1-9595-6a8efeb14ce6"
        },
        "item": {
          "id": "ecb62f90-54f5-404f-a3ec-0e226a7441a1",
          "name": "did:invalid"
        },
        "response": {
          "id": "818e292a-9768-49a7-9954-d3853a840886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb62f90-54f5-404f-a3ec-0e226a7441a1",
        "cursor": {
          "ref": "b4f34717-ec5d-4309-9882-bb7e46a78ac2",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ff43b55e-8a43-45b1-9595-6a8efeb14ce6"
        },
        "item": {
          "id": "ecb62f90-54f5-404f-a3ec-0e226a7441a1",
          "name": "did:invalid"
        },
        "response": {
          "id": "818e292a-9768-49a7-9954-d3853a840886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4c9f81-fe4a-48c6-b6df-9a22c98a02a3",
        "cursor": {
          "ref": "4954e30d-e1c2-4624-ae32-b99b8c59b70b",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8679a625-9c21-45d2-a458-3906a61d910d"
        },
        "item": {
          "id": "ce4c9f81-fe4a-48c6-b6df-9a22c98a02a3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c797bc9e-f1de-4a73-991e-fd6536667a90",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f528904c-adab-415f-a2db-c29e4c942575",
        "cursor": {
          "ref": "bbc221e0-91bb-4e38-8007-9c94065b0a3d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f11273df-932e-4c94-a2ef-1a880a591295"
        },
        "item": {
          "id": "f528904c-adab-415f-a2db-c29e4c942575",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5251a76f-10ed-4827-96d5-c10571b99642",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1953c41-8e38-477c-8586-9101f85bdc57",
        "cursor": {
          "ref": "0bd61c37-9c09-4ea2-ae6c-2cfb5200578f",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "119be3a6-cbe8-4fd0-a820-99ae9006fc7a"
        },
        "item": {
          "id": "f1953c41-8e38-477c-8586-9101f85bdc57",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b017a2cf-dce3-4f9b-b233-6451bad24e44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb48a80f-bead-483e-a385-5616edbb1bfa",
        "cursor": {
          "ref": "c1133e70-cabc-4b4d-b248-7fcd966e393c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9f37a85a-a406-4f38-86f2-c9843cfda306"
        },
        "item": {
          "id": "eb48a80f-bead-483e-a385-5616edbb1bfa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8e32c9f3-4780-4a40-9416-3046c84e2399",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb48a80f-bead-483e-a385-5616edbb1bfa",
        "cursor": {
          "ref": "c1133e70-cabc-4b4d-b248-7fcd966e393c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9f37a85a-a406-4f38-86f2-c9843cfda306"
        },
        "item": {
          "id": "eb48a80f-bead-483e-a385-5616edbb1bfa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8e32c9f3-4780-4a40-9416-3046c84e2399",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c97f0d-6442-44e5-8d0a-203cf89f6430",
        "cursor": {
          "ref": "83a1613d-4805-4bd1-9d6d-a873873bdf1c",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "618691c3-15ca-4f95-83b2-7c2e4a6eff91"
        },
        "item": {
          "id": "47c97f0d-6442-44e5-8d0a-203cf89f6430",
          "name": "identifiers"
        },
        "response": {
          "id": "ecf931f3-b724-44c2-8e5c-5148a914c127",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fe03b1-2fcb-404c-8713-b1caa7ab8e0c",
        "cursor": {
          "ref": "2f4f1580-824f-433c-8607-7751d504351b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a86e0118-75bd-4134-91f4-037e61c52fa1"
        },
        "item": {
          "id": "39fe03b1-2fcb-404c-8713-b1caa7ab8e0c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85be9cea-9697-46fd-9f2b-b3a64b79ef11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fe03b1-2fcb-404c-8713-b1caa7ab8e0c",
        "cursor": {
          "ref": "2f4f1580-824f-433c-8607-7751d504351b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a86e0118-75bd-4134-91f4-037e61c52fa1"
        },
        "item": {
          "id": "39fe03b1-2fcb-404c-8713-b1caa7ab8e0c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85be9cea-9697-46fd-9f2b-b3a64b79ef11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dd7186-85a5-4578-9321-19352d4ba221",
        "cursor": {
          "ref": "0a174959-14a2-4e2b-b78a-76fda93551c5",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "77ced76b-bede-4427-957e-cce3ec320edf"
        },
        "item": {
          "id": "84dd7186-85a5-4578-9321-19352d4ba221",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6239bf11-1e7f-45af-bd9b-93f455c1c01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734cf2dc-f4b9-4e76-808d-198d65c43f2d",
        "cursor": {
          "ref": "26455396-9f33-4f5a-9adb-8aa55b4ba68d",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "84ac258b-7fa5-4eff-aa17-53d8f4794b99"
        },
        "item": {
          "id": "734cf2dc-f4b9-4e76-808d-198d65c43f2d",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "9737d6a2-3a93-4852-9548-af6c76abe4b3",
          "status": "Created",
          "code": 201,
          "responseTime": 672,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0a928034-47cf-42d9-92d1-ef38ce0146e5",
        "cursor": {
          "ref": "77b555dc-86e9-4f9e-acb6-5a56808341ec",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "85b8100d-a57a-4ede-8e9d-748020c62566"
        },
        "item": {
          "id": "0a928034-47cf-42d9-92d1-ef38ce0146e5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c2ce722f-217f-4b5e-9841-3330c02cb031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846a40fe-cdb7-4bf0-a878-54ec506caf23",
        "cursor": {
          "ref": "305a05b2-c2c5-49b7-847f-d24316e4bffb",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b16c2ed-53d6-471c-b26b-2ebef796f92f"
        },
        "item": {
          "id": "846a40fe-cdb7-4bf0-a878-54ec506caf23",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5fc95d8d-8c61-42f6-b42a-d5655ef41da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cebaa8-d058-4419-b5fb-820694275e18",
        "cursor": {
          "ref": "f072990e-33d0-4d35-a5ac-1dc21fa93b44",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8fa8691a-09fe-4cd4-a4c1-eb71bf5aa843"
        },
        "item": {
          "id": "f7cebaa8-d058-4419-b5fb-820694275e18",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5d6d962b-2087-47a5-9d5a-50cb95a277b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded1fda6-bfde-40fd-b7cc-4f7145400cbe",
        "cursor": {
          "ref": "bc58d6d8-0e4b-46c3-9c6d-03baf6c95c60",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ded8fc46-4067-4032-b67b-29d042ac41f4"
        },
        "item": {
          "id": "ded1fda6-bfde-40fd-b7cc-4f7145400cbe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "707dd743-b7e8-41fe-97f8-1f63bca7b432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fe9231-8de8-41ff-a89e-3984e56862a9",
        "cursor": {
          "ref": "6588844c-5387-429a-9ab3-10949e0e3f2a",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5e9d5f25-0e67-482d-a177-c89ac7952f06"
        },
        "item": {
          "id": "58fe9231-8de8-41ff-a89e-3984e56862a9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1df99ba0-5efe-49d3-8669-02bf95156fed",
          "status": "Created",
          "code": 201,
          "responseTime": 517,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "cde77c75-6575-45ef-aaa8-e59d167e16e7",
        "cursor": {
          "ref": "00c32213-5b30-47b6-bb29-ba22f420f5b3",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "01a9dd0f-db40-4b77-8db8-caaafb5ae5a2"
        },
        "item": {
          "id": "cde77c75-6575-45ef-aaa8-e59d167e16e7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b6c1b96d-cb8d-4f8e-b8a8-08f538f89056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4852c67b-87bd-439b-a872-7f6a4ffc2f91",
        "cursor": {
          "ref": "4e36016e-3557-4545-bce9-97463e9bfcc0",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "15a95351-6a7d-4f6e-ad7a-1f71282c8ad3"
        },
        "item": {
          "id": "4852c67b-87bd-439b-a872-7f6a4ffc2f91",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6fa3c302-f549-4014-b321-c0e3a9a7f7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8781f2a-50e5-4e7f-84c2-e0144dd93005",
        "cursor": {
          "ref": "6dbed644-b8d7-4ac9-a040-96401a382182",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87db929c-17a8-487d-b7ac-74cd7991bde8"
        },
        "item": {
          "id": "b8781f2a-50e5-4e7f-84c2-e0144dd93005",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1095c8ec-6624-440e-9a17-8510a6c7e7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e624a8-a33b-4fc1-9536-51c8b60bf8a2",
        "cursor": {
          "ref": "583ceb60-a103-4a79-b906-437f80b24c9d",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c4c465d7-709e-4893-a93a-a4f3f3a51398"
        },
        "item": {
          "id": "60e624a8-a33b-4fc1-9536-51c8b60bf8a2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5f5114bf-98d4-4a57-8d4e-9d66132a6ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f585ff-7fa1-49e5-82ff-bbee609596fe",
        "cursor": {
          "ref": "c74ce1d4-c7f6-46da-b1c1-7819caa35f68",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6e94c88a-8485-4fa8-8073-38086e6e1a8c"
        },
        "item": {
          "id": "35f585ff-7fa1-49e5-82ff-bbee609596fe",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b4606c8a-96fc-444f-9d28-3418cf8c5eb6",
          "status": "Created",
          "code": 201,
          "responseTime": 543,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7e8731f9-3390-4542-bb50-98624733bdc0",
        "cursor": {
          "ref": "7a5c6fa2-daf9-417b-806e-9f8d0ee54194",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3bfd8847-7f7c-4e70-b2d3-b27a4362d017"
        },
        "item": {
          "id": "7e8731f9-3390-4542-bb50-98624733bdc0",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "36b51732-d0c5-42e6-80c0-e49e12d5d071",
          "status": "Created",
          "code": 201,
          "responseTime": 1225,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5feed7d7-31bf-40a4-bdb0-d08db9a3590e",
        "cursor": {
          "ref": "9acc64ad-cccd-428e-b7a4-940c2058bbf6",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "83b3706c-040f-4939-a302-d6c70a07122c"
        },
        "item": {
          "id": "5feed7d7-31bf-40a4-bdb0-d08db9a3590e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3af8f7ef-f712-4ecf-99d5-409683eae6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6062cf6-52ad-47d3-9712-8402e77659c9",
        "cursor": {
          "ref": "2b440f5e-d7ac-493e-8ad7-c2543ba465b5",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3344f39e-b97f-4ac0-8575-d36f7b56128c"
        },
        "item": {
          "id": "f6062cf6-52ad-47d3-9712-8402e77659c9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "752e3c80-3fe2-4fa6-af46-4ce3d70011ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b156303-305f-4a2f-8e97-847b9f1592f6",
        "cursor": {
          "ref": "0ea3bf64-cfce-4140-8310-718113443ece",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4c693d3b-910e-4e87-b6d2-b61f62844909"
        },
        "item": {
          "id": "1b156303-305f-4a2f-8e97-847b9f1592f6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a5c4f497-b8f1-4130-875e-f4c523c2407b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161d01ef-92dc-4942-8f06-403c4c69b272",
        "cursor": {
          "ref": "8baab1f4-c6d5-4afc-aabe-1734124f76d3",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "406618ea-4944-4201-bdd2-4e81e5d50523"
        },
        "item": {
          "id": "161d01ef-92dc-4942-8f06-403c4c69b272",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "45f2b0f9-fe9a-48bc-a9cc-54ba9d63c66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f3059a-6863-4293-a67d-055775686452",
        "cursor": {
          "ref": "ac47155f-2088-48af-80b9-0cd4be5236ea",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d19d45dd-0559-4a82-9db5-e2bfb1d0d1e4"
        },
        "item": {
          "id": "19f3059a-6863-4293-a67d-055775686452",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f3c5bff6-f40c-4fcf-9d33-16abe2abac9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdb3d03-504a-4ffa-9c3c-1e2596227441",
        "cursor": {
          "ref": "a512f297-1ed3-42d9-acaf-653912adbef3",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "79219774-98a4-4296-abe9-e1d3db82f567"
        },
        "item": {
          "id": "6bdb3d03-504a-4ffa-9c3c-1e2596227441",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9d111018-cc4b-4ae8-8f08-4d2ad319d692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ba5deb-c000-4aa7-b869-fbb0f8dcbe55",
        "cursor": {
          "ref": "780759bd-e63a-4694-89bb-cc53ab0b9633",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eb0efc49-f872-48cb-95cd-05cc9b5f8d24"
        },
        "item": {
          "id": "a1ba5deb-c000-4aa7-b869-fbb0f8dcbe55",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aa152cb9-474a-4ed9-a96c-d1134a2c8cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1262ab9d-546c-4dfc-8254-a3597e9ba1fa",
        "cursor": {
          "ref": "67c67f28-270b-4c12-a5c7-d29e74503eb3",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0c5be3ad-46cf-4f92-9ad7-c35b65ef5998"
        },
        "item": {
          "id": "1262ab9d-546c-4dfc-8254-a3597e9ba1fa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "975ba980-1a47-4cd6-9ab2-fc99c3fe51b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b514a3b-86b9-4715-b3d0-0df56d0930b9",
        "cursor": {
          "ref": "0f7a2e26-6a9f-45f7-9a39-9e98f58ebda5",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ea885172-ee62-4e82-bfc8-1ea9a041ac98"
        },
        "item": {
          "id": "9b514a3b-86b9-4715-b3d0-0df56d0930b9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1a3fe5fb-7280-48b6-b5ee-74230280e5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973bfbcb-d58f-4239-8b63-d1fa9411e154",
        "cursor": {
          "ref": "7b7ab541-6538-4046-95ad-ddb49d831b79",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e06efbe-ad30-4d9b-b8dc-cfff61eecd60"
        },
        "item": {
          "id": "973bfbcb-d58f-4239-8b63-d1fa9411e154",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ecadb2b2-0584-4619-920d-3ffbe1f95270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4348cb26-639f-4693-91aa-f0351bc343f9",
        "cursor": {
          "ref": "c595b556-6aa4-488d-b076-e14afb8ac173",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "acc36811-c090-4fe4-81e6-0266a02eaaf5"
        },
        "item": {
          "id": "4348cb26-639f-4693-91aa-f0351bc343f9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3a9e7bdf-31b7-45e6-b412-598da61935ce",
          "status": "Created",
          "code": 201,
          "responseTime": 658,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a51cd200-7e1c-4fb6-a596-eade3df036a8",
        "cursor": {
          "ref": "67afd95b-3e92-4e07-b60e-79012733c3a6",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bacadd27-de16-44ba-b7e3-e90bd41d1005"
        },
        "item": {
          "id": "a51cd200-7e1c-4fb6-a596-eade3df036a8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "30e21c34-b822-4f92-bdac-7a0c49a39522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae6a257-c014-4e5c-ad0a-711a2291f3f0",
        "cursor": {
          "ref": "2de08639-e72f-4666-acdb-a7766c8c2b6f",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "494755c3-bf35-42eb-84aa-6aa8bf20fce3"
        },
        "item": {
          "id": "5ae6a257-c014-4e5c-ad0a-711a2291f3f0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f70eb34-02ef-4d0e-8277-8c2695a85567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6468e0b0-3a06-461a-b3de-0b38e594a665",
        "cursor": {
          "ref": "9005adb0-15ca-4452-990d-0b23badf1cea",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "93d7a824-6610-4731-9afa-fe1f4ce5941b"
        },
        "item": {
          "id": "6468e0b0-3a06-461a-b3de-0b38e594a665",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4051d2b2-e45a-4f41-80e0-286deb6c5088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24c4e4-07e4-4380-9db1-0995e23e544c",
        "cursor": {
          "ref": "02369834-6451-48c8-adae-ddad20469f06",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "db0964a0-5d7f-4a24-9945-bc2f2f865436"
        },
        "item": {
          "id": "5f24c4e4-07e4-4380-9db1-0995e23e544c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "417c62e8-c70f-40e2-87a9-7e156ac8c489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d888427c-1f95-462e-9efc-4a6e2259ff9e",
        "cursor": {
          "ref": "60a0a982-7e63-4b64-9712-f876ff298783",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c04c870c-f31e-4aee-b97f-c345fa7a41d5"
        },
        "item": {
          "id": "d888427c-1f95-462e-9efc-4a6e2259ff9e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7f5c1769-c35e-4634-949a-d33fa78dba0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45386ff4-417b-42f0-bbaf-71178ad34b50",
        "cursor": {
          "ref": "f39d76af-5581-4e21-bf90-0cdb9dbd0f3b",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b27a9b5d-b96a-4402-8013-c64f8c6bd468"
        },
        "item": {
          "id": "45386ff4-417b-42f0-bbaf-71178ad34b50",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a4131ef2-84cf-4025-ad70-a6c43a2481d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea111103-06ac-4a36-b313-e7e09a6ed101",
        "cursor": {
          "ref": "60f1aeb6-0b15-4704-8a53-6356bf8a1fcf",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7355ad7e-d409-420a-b91e-7d1a63824460"
        },
        "item": {
          "id": "ea111103-06ac-4a36-b313-e7e09a6ed101",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e25d1bf4-b8ae-4f58-b9b6-c1a4499562c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e64721-7649-410d-9e1b-07e8bd3f0e5a",
        "cursor": {
          "ref": "5aaf7c8a-e20e-488c-acfe-be87b6585deb",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8ae67bd9-fa87-45f2-945b-8e078aa2de18"
        },
        "item": {
          "id": "c7e64721-7649-410d-9e1b-07e8bd3f0e5a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "678497f9-9785-4712-8d40-d8b90ee0dba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fe671d-4864-4cc4-b2cb-85b8b09109c1",
        "cursor": {
          "ref": "a81e9930-9c56-4964-9ba2-737b3301adc6",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c9e1a60c-086a-411c-9c50-e18b565f348a"
        },
        "item": {
          "id": "52fe671d-4864-4cc4-b2cb-85b8b09109c1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "12529d65-aaa2-4d54-98bd-f4b9d283468f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea0d4a3-ec3a-42bc-bff6-9851c9921060",
        "cursor": {
          "ref": "d5c97aec-5815-4867-b9c4-fd73dff5fb7f",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dd2cfc19-d65f-4ae7-ab9b-4919d05bc1fa"
        },
        "item": {
          "id": "8ea0d4a3-ec3a-42bc-bff6-9851c9921060",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6172ad10-1a3a-4007-82e7-2e3f96992212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7423b05-330a-4538-90f8-06b780061b58",
        "cursor": {
          "ref": "3676199c-4cc1-40bf-9f75-99a94ecf5cd2",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ee214f6f-bed4-4014-a447-c3fd6b26495d"
        },
        "item": {
          "id": "a7423b05-330a-4538-90f8-06b780061b58",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7b053ac4-d28a-428e-b7e9-faa0fbc54024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b9acb5-778b-41ca-898a-3504d7feab6f",
        "cursor": {
          "ref": "1483f722-5f54-4665-a1dc-bea6af9cb8fc",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ed86d890-30b3-473f-9bcf-20dba01f28a1"
        },
        "item": {
          "id": "23b9acb5-778b-41ca-898a-3504d7feab6f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bf8b47ee-0acd-4c50-aa16-b3ebad2b8921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cbefa1-1ebb-4c7a-a967-2df0fa853abc",
        "cursor": {
          "ref": "c155f05e-dc88-4615-85b7-06c99a0ed697",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "407ad2da-fa13-4018-b80c-5343607af96d"
        },
        "item": {
          "id": "b5cbefa1-1ebb-4c7a-a967-2df0fa853abc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2640b14f-0e68-4861-b805-3ad8fdb71628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 620,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "966c4b25-1135-4a03-93fb-4dbc83b64f6b",
        "cursor": {
          "ref": "18d59036-7fa2-4360-bc15-24fef8aec04c",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "88135747-bacf-46ee-9ba5-603c189c574d"
        },
        "item": {
          "id": "966c4b25-1135-4a03-93fb-4dbc83b64f6b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b80cc6a6-64eb-4646-ba57-b2952fb094d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aacff12-3a0d-4cdc-abed-2106a73dcf35",
        "cursor": {
          "ref": "c58d6795-2b8c-4d17-801e-f68c11c32ed9",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9e8b2601-b68d-4bad-8f1e-1e8baded4421"
        },
        "item": {
          "id": "9aacff12-3a0d-4cdc-abed-2106a73dcf35",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e30f2033-26a1-48ea-a757-e979e3e0abdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068e2ff-5b20-4f30-9141-975e86ba444e",
        "cursor": {
          "ref": "6cbc8278-a36a-4ed4-8bb9-b5ba49452a26",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7fe8eb65-c507-459e-aca8-a1c5b0c6be76"
        },
        "item": {
          "id": "3068e2ff-5b20-4f30-9141-975e86ba444e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b2455073-f197-4e48-9986-2047f93596e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b624cd-7b34-4c36-a10b-881f0864431b",
        "cursor": {
          "ref": "794902cb-26bf-40b3-ad9b-9b41b34f6ab2",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2427f04f-33ee-48f6-9dd9-d2c093ca487d"
        },
        "item": {
          "id": "56b624cd-7b34-4c36-a10b-881f0864431b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "13552f0e-6bdb-4a37-8d91-853318143e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5327769d-5bdb-4b20-b3b3-37c69b2441c8",
        "cursor": {
          "ref": "9ab15b9b-f188-4e99-bc26-f875dab3195c",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e692494a-c941-4ffc-be2d-43b48502611a"
        },
        "item": {
          "id": "5327769d-5bdb-4b20-b3b3-37c69b2441c8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8c6e812b-7ae8-4dc5-a6cf-e2528ef7e3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68b8290-fd4b-4cf7-91a4-ab194526c22c",
        "cursor": {
          "ref": "b0fe513e-4e70-4610-9b47-403db39e442d",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7b371918-766b-4830-800d-5069c9880c41"
        },
        "item": {
          "id": "e68b8290-fd4b-4cf7-91a4-ab194526c22c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "18f685c2-4101-4d31-98b4-35f94f124ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce08ba4a-5d26-4a65-8a4e-c39bf881b3d4",
        "cursor": {
          "ref": "f15dbe4c-5303-4e33-acc3-50bc904122c5",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1bd9d4b8-2eb4-4bb9-bd59-a02a80bfdba6"
        },
        "item": {
          "id": "ce08ba4a-5d26-4a65-8a4e-c39bf881b3d4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9546e509-3278-4ef9-9612-9b778746f5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "339dd4e5-6f12-4d98-8899-bf8cb93933eb",
        "cursor": {
          "ref": "3bfce933-ad46-4a0c-93d3-9da356eeb0b0",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f5edbc99-7ee9-41b5-882d-afaf9572af39"
        },
        "item": {
          "id": "339dd4e5-6f12-4d98-8899-bf8cb93933eb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ca873cf6-5060-4e25-ae3e-de814ae85cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e48464-fd80-4afd-b79c-c16201ad147b",
        "cursor": {
          "ref": "886524de-956c-46e9-befd-d081767cd9e1",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1935eb16-8bc8-4338-b1c6-fca91870a42f"
        },
        "item": {
          "id": "04e48464-fd80-4afd-b79c-c16201ad147b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "27921225-d23b-4bc2-af8c-a278f5aefd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e239fed-0612-40fc-b74b-c54b83fd6f5b",
        "cursor": {
          "ref": "9f85485c-a1d0-4f68-bb8f-d8fc5709621d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d822ffb3-bcd9-4612-b946-3512e1e3da48"
        },
        "item": {
          "id": "0e239fed-0612-40fc-b74b-c54b83fd6f5b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "82cf1b9c-e108-4aa6-8c95-8307c1a65752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8991f0b8-2dc2-44b6-91ec-0804e57866ad",
        "cursor": {
          "ref": "ccbc60d9-1904-4e27-80bd-cc185f8735d4",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8f2e9bdb-1a0b-40f5-a861-b9973fb9b394"
        },
        "item": {
          "id": "8991f0b8-2dc2-44b6-91ec-0804e57866ad",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "36b953d8-7026-44d2-af43-510c0e6948da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0710dd-db10-438f-9d51-90861f6c7ae0",
        "cursor": {
          "ref": "1a82790b-1f93-4bac-8b6e-cd728b2f611a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b061d51d-fee4-4e4f-8160-f6b0a76133ff"
        },
        "item": {
          "id": "9d0710dd-db10-438f-9d51-90861f6c7ae0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a5b4f236-d38d-47f0-8ada-2e6457a8d24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df701d7-1a5e-4c51-acfd-defd7fc32b76",
        "cursor": {
          "ref": "7a58f01e-3fe7-463b-95de-03fd11f7ab15",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ac30a1bc-3cdf-415e-8507-4aa7dcd8a210"
        },
        "item": {
          "id": "1df701d7-1a5e-4c51-acfd-defd7fc32b76",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f326cda8-e7e1-4d77-9318-f460010bcf79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d6faa1-4b57-47ec-b679-73cfa157c81b",
        "cursor": {
          "ref": "ad225f14-3f72-4549-a5fc-6c3c5c1bb88f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1081622b-59e7-49d8-8aa5-abdffda1febf"
        },
        "item": {
          "id": "65d6faa1-4b57-47ec-b679-73cfa157c81b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "94a5ec20-2abb-4c08-9545-fb69bca8a1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cdd372-58a2-42d5-8a13-026059621378",
        "cursor": {
          "ref": "2d5df8b0-35e4-4fec-8898-fd70dc40a17b",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "289dc1d2-2166-4ecd-b87a-7e0b1fa1c259"
        },
        "item": {
          "id": "a0cdd372-58a2-42d5-8a13-026059621378",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ba81f601-101b-4485-8017-327941bf202e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9870ad-b4b6-4ed2-aaa7-e6c7647fa0b2",
        "cursor": {
          "ref": "3296d9a5-cdc0-4c9b-bd51-f4021de18147",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0c92fe85-85c9-425d-adba-6eeea641b597"
        },
        "item": {
          "id": "2d9870ad-b4b6-4ed2-aaa7-e6c7647fa0b2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6f89181a-33c4-45be-a1cf-31cc32b70d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce776b2-98fe-45be-97e1-cb965364a1a3",
        "cursor": {
          "ref": "4dea8f8c-8229-40cd-91bb-650a48b48639",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bbd6d3b5-306f-4e7d-a8ff-229b6b0e2845"
        },
        "item": {
          "id": "8ce776b2-98fe-45be-97e1-cb965364a1a3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0fd0ae4f-6998-4417-84e7-18e3c554b48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d44e61-9fc7-4425-933d-0444ae807a09",
        "cursor": {
          "ref": "0c3ac749-5e82-48e4-bf8f-b48a7a099aba",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "39fadf81-e01e-46ca-886f-72291e7446b4"
        },
        "item": {
          "id": "f7d44e61-9fc7-4425-933d-0444ae807a09",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f707210b-a3df-4d4b-93ed-143e52803dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0c09dc-f7f5-4de8-b3e2-a9c117f5c974",
        "cursor": {
          "ref": "9f7ffc40-1924-4d99-8590-9f2a71e10fe8",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ccce2784-3d0b-45b8-b5b4-3ee437152aa1"
        },
        "item": {
          "id": "8b0c09dc-f7f5-4de8-b3e2-a9c117f5c974",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "41a87ca5-38f5-4322-81d9-8dbeaa5bde46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca69ec11-3fb5-4b8b-8e7d-a4492fa41f9a",
        "cursor": {
          "ref": "9dac1abf-bb45-4628-8e05-57d9c698a634",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4757bce-6e96-43ff-b28f-41732c8de8c6"
        },
        "item": {
          "id": "ca69ec11-3fb5-4b8b-8e7d-a4492fa41f9a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "df5dfa77-ad57-4aab-b6f7-6cd688333733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb34e55-303a-48ba-ae27-4e1ddcd121ed",
        "cursor": {
          "ref": "c5dde6f4-9233-4104-9c66-491bc81913dc",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6f15df97-47d3-4637-9abd-3a7adb265517"
        },
        "item": {
          "id": "bbb34e55-303a-48ba-ae27-4e1ddcd121ed",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e15670b8-eb47-465c-9bb9-d3539cdac499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7ca69c-9af7-44e8-b86b-2daf1502b21a",
        "cursor": {
          "ref": "eafdf202-3c2d-4ea0-9609-6159414d7186",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "08412a98-f092-42f1-a5c2-9cb2b8a90d4a"
        },
        "item": {
          "id": "1d7ca69c-9af7-44e8-b86b-2daf1502b21a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f53b7776-43d0-48ae-b876-1fe0ba697285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d1b699-3c1d-4c1c-85f6-db81c078bc94",
        "cursor": {
          "ref": "8d98002d-33c6-429d-8a34-2fe01f43b366",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5aa89b4d-0f04-4466-a1e4-4573e5233723"
        },
        "item": {
          "id": "53d1b699-3c1d-4c1c-85f6-db81c078bc94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "71052be0-57d5-47db-b6cc-7ffedf6018d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fc835d-4622-4971-8bb3-ee6aaebf3a29",
        "cursor": {
          "ref": "e76600dd-ce41-4ce4-bc1b-67f4b3a40453",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7620c6d1-6d21-4ee7-b038-9be28aa2e02d"
        },
        "item": {
          "id": "f5fc835d-4622-4971-8bb3-ee6aaebf3a29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ba31663-9b61-4dd7-9df7-f3ae66a4432e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40df95f0-4fca-442b-a897-35b4e1e59f43",
        "cursor": {
          "ref": "548e6d0e-a38d-4a8b-b0b0-baf7b129461b",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9319c606-ee22-4af9-b20f-b04efe0d45c2"
        },
        "item": {
          "id": "40df95f0-4fca-442b-a897-35b4e1e59f43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d0bc1cb7-6389-4058-999f-96abefa6ff83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffc3f5e-2550-4fd8-925d-34e4ab1d3c34",
        "cursor": {
          "ref": "4e34c8b9-c956-45db-8f02-a19025150444",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "db2ada55-9f72-49ce-b34a-f9d7cab2483f"
        },
        "item": {
          "id": "5ffc3f5e-2550-4fd8-925d-34e4ab1d3c34",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8fd33fcd-15a7-43ab-a3ce-cbfa2e5dc3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c29a76-ceb9-4108-8fef-5110d66f642e",
        "cursor": {
          "ref": "afc31b83-8eb5-4412-9785-08d2cd4410e2",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d673a702-31a3-4de7-ad12-191981668093"
        },
        "item": {
          "id": "47c29a76-ceb9-4108-8fef-5110d66f642e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "147e6aea-9398-47cc-ac2c-67919b856c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b2fa6f-fc49-4605-a33b-af2fcc75b06b",
        "cursor": {
          "ref": "321d1028-8275-4f89-a08d-4b49a4d285cf",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ef4788eb-14ac-4c6a-b782-7dbc618c37bb"
        },
        "item": {
          "id": "88b2fa6f-fc49-4605-a33b-af2fcc75b06b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f25d08a3-b792-4faf-a823-1f41e5f00fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32a6b74-0914-4bfc-aeca-52e68d996bf8",
        "cursor": {
          "ref": "0d4c16e9-2c98-4cf1-8c9f-e4bc7b1f33c2",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5c070d32-b9b5-45c1-afc8-bfe243379343"
        },
        "item": {
          "id": "d32a6b74-0914-4bfc-aeca-52e68d996bf8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "51e438a6-8793-41f9-9c0f-5dfca7184639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bde9af-2b66-4165-b01f-71d001f22fa5",
        "cursor": {
          "ref": "6c686dce-8165-480f-a597-324cf859f5da",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dd92748c-7ac1-4de9-bce0-da42abe9a723"
        },
        "item": {
          "id": "e5bde9af-2b66-4165-b01f-71d001f22fa5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f638fd2a-3f2b-4934-aecf-983e7db566d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031984f6-6bd8-4f77-9c90-9c3a08193f9c",
        "cursor": {
          "ref": "2c9f4e21-192d-4c95-9b84-6894b102edb3",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a2fa6f3c-bc06-4f8c-92c8-f114e5cf1083"
        },
        "item": {
          "id": "031984f6-6bd8-4f77-9c90-9c3a08193f9c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "21029dac-5704-4ce4-9dee-b1bb867a26ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4d416c-b9dd-4b70-8df3-6d3a2850e1e3",
        "cursor": {
          "ref": "734289f7-32cc-4e0d-904d-ebf166892eed",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5a9adddb-a592-4410-8eef-9c9623500682"
        },
        "item": {
          "id": "0a4d416c-b9dd-4b70-8df3-6d3a2850e1e3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "47981fee-ef35-463a-ac3b-1c78c14c5c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6614b0-a550-4d69-bbcc-ba726bce0d1e",
        "cursor": {
          "ref": "dc611665-890d-4e39-8aa3-155e027e13a7",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "894783a6-0d16-4a56-aef6-667492e1d3e8"
        },
        "item": {
          "id": "2c6614b0-a550-4d69-bbcc-ba726bce0d1e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fd49598d-7dbc-48ef-8b2b-c022f9a9f5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7052a85f-0b1d-465b-b294-2e6956e17c45",
        "cursor": {
          "ref": "46674e89-3990-4716-a6f1-40601048dd00",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "946884a0-8f5a-4c11-a77e-64161d58a5b2"
        },
        "item": {
          "id": "7052a85f-0b1d-465b-b294-2e6956e17c45",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "98c82f6e-ed37-4389-bee2-50ae019bc634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750bc336-b94a-47f9-bb23-dde1f83f3786",
        "cursor": {
          "ref": "3c3c9f35-ecb0-4233-b646-8d20579f2498",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "df4108c8-84e3-4da2-958f-a6864cb5cfbf"
        },
        "item": {
          "id": "750bc336-b94a-47f9-bb23-dde1f83f3786",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5508a201-5bc6-4453-9780-b4ce54e7d22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8537c09-e72f-4ded-977c-8d487ce4242c",
        "cursor": {
          "ref": "891550e6-f764-4306-bc61-4ac8196d4d2c",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "be331cd8-f6df-4a4d-aaf1-161a6a9bbb80"
        },
        "item": {
          "id": "f8537c09-e72f-4ded-977c-8d487ce4242c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "68087b6c-06d5-4333-a647-ebfbd44f410e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a9a05a-4cf3-4446-979b-7523c8613e0b",
        "cursor": {
          "ref": "8f09df4f-676d-4279-9071-2b6590325995",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "537af482-8f3d-49b6-9c75-1bcd11101e6a"
        },
        "item": {
          "id": "19a9a05a-4cf3-4446-979b-7523c8613e0b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9e4a7a6b-fc16-4fff-8b18-767f78b7cc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2a1548-5054-4e77-9489-0e2bd924f7f9",
        "cursor": {
          "ref": "30a82b12-9c65-48e7-840d-e761b0f49e40",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "63d54b5e-51c2-45a1-9d2e-04858a0a8936"
        },
        "item": {
          "id": "fd2a1548-5054-4e77-9489-0e2bd924f7f9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4d7f6a5c-1a62-45b3-a41d-2adacd758b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418b41f3-5ed6-4e8a-8553-2df89b54430a",
        "cursor": {
          "ref": "a403646c-4fc6-4c82-b363-6574b4937a3a",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8b4676fd-d957-4426-a43f-be21892f091e"
        },
        "item": {
          "id": "418b41f3-5ed6-4e8a-8553-2df89b54430a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f3aeedbb-2b14-4af2-b946-b5ba22411a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098f9b5d-37f3-47ed-8e17-e98e48c3c643",
        "cursor": {
          "ref": "0faaca5e-50c2-4b80-9129-3070a3eea214",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d593cba2-683d-4ccb-9dd8-31d443b442af"
        },
        "item": {
          "id": "098f9b5d-37f3-47ed-8e17-e98e48c3c643",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8c9407c8-4b08-4f36-b47e-bee58ef61d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82522fd0-eee4-4339-b03f-98dc284742e6",
        "cursor": {
          "ref": "2d33f619-d148-4947-a3bf-0d11fa79a584",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "22d19628-adf2-41f9-8341-7dd1011a0ed7"
        },
        "item": {
          "id": "82522fd0-eee4-4339-b03f-98dc284742e6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f9165e5c-1f41-4aba-8b30-ed8dc7178b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa85756-141e-4158-9f1f-df4ab8562fd3",
        "cursor": {
          "ref": "0b9e084b-61d8-4332-9563-b75a5451cc92",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5c996e61-6ae0-4ac3-922d-9843f5b41739"
        },
        "item": {
          "id": "caa85756-141e-4158-9f1f-df4ab8562fd3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1e6f4263-63e9-4a74-bcd6-1c5bb127d86b",
          "status": "Created",
          "code": 201,
          "responseTime": 670,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1a6bf8ae-4343-4aef-a6c0-32a971c16c85",
        "cursor": {
          "ref": "ef261557-0416-4bca-a931-3fff2091ed46",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ac7ac2ca-8c9e-4990-bebd-7349cc3d3df3"
        },
        "item": {
          "id": "1a6bf8ae-4343-4aef-a6c0-32a971c16c85",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4636b37d-20c8-49a9-b142-5e00f2b908cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7ad6e1-35d2-4a1c-b2ff-c79fa51f1fc2",
        "cursor": {
          "ref": "8454caf3-15ec-499a-8f13-9957b4151d2d",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f2c4cdf6-5d33-43ec-a8ba-3713c1b5a74b"
        },
        "item": {
          "id": "8c7ad6e1-35d2-4a1c-b2ff-c79fa51f1fc2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ded27f29-25d9-4ef6-b8ab-b32e2c1b5bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc687196-000e-480f-a4d3-c473bf0a9742",
        "cursor": {
          "ref": "2a9ac98d-b431-4b51-89a3-5b60b8ed2f6f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "03a5235d-fdb8-4c3f-8a62-80ba4c0212e8"
        },
        "item": {
          "id": "cc687196-000e-480f-a4d3-c473bf0a9742",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e7d89b55-6845-4724-8a0b-a4b4ea461f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabbbe3c-871b-4811-9e90-3263d3c44d4b",
        "cursor": {
          "ref": "9dd5a78f-245a-4ff5-8a2e-144a3df6a4cb",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "327b11f2-5082-478a-b8a5-7400905fce1d"
        },
        "item": {
          "id": "eabbbe3c-871b-4811-9e90-3263d3c44d4b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d20265b9-fadd-4c8f-8cf5-674c5e38b192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825da64a-9d2c-4feb-9762-9e05ced49dc4",
        "cursor": {
          "ref": "8b57916a-ea01-4269-a13d-bbbf68e304ac",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "46efc1cb-7821-4898-9934-c83663ef28b4"
        },
        "item": {
          "id": "825da64a-9d2c-4feb-9762-9e05ced49dc4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0279366d-02e8-4184-976f-c4038b5a4689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6884c9dc-8842-4117-900d-4dae8f8a1125",
        "cursor": {
          "ref": "3fab4f17-4c1f-4393-a7a9-061161229ceb",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fae2d46a-2b24-4148-aaaf-4fc3c97f0226"
        },
        "item": {
          "id": "6884c9dc-8842-4117-900d-4dae8f8a1125",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "63513483-fb72-44ea-a354-f4750224e471",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "441eeb15-1629-4752-bc74-55b65a5a650f",
        "cursor": {
          "ref": "38150715-824a-4cbb-a2a8-a390dc810538",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5bead5b6-480d-4b10-8629-be5cacdbd1a8"
        },
        "item": {
          "id": "441eeb15-1629-4752-bc74-55b65a5a650f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "64e02d78-62d4-4566-bb23-26e16d6f7c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0365636-948b-4e11-91bd-bd30e39067ed",
        "cursor": {
          "ref": "67077af9-46be-498c-bb8d-c9780bec39c6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7898fa65-5ced-4e7f-9856-98288b9b42a3"
        },
        "item": {
          "id": "c0365636-948b-4e11-91bd-bd30e39067ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "efef5ff5-8e3b-405b-a137-9ca96009f974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce65b7d-157a-477b-9a40-b38f72960ade",
        "cursor": {
          "ref": "7133d0c2-0dde-4f2f-9f20-9ee11efa6918",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b9e6bb09-53f9-4c81-bd3a-9667f069fb83"
        },
        "item": {
          "id": "1ce65b7d-157a-477b-9a40-b38f72960ade",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "593d470f-6f7b-45c5-9144-467fe97d6903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cc0b00-82d9-4cf4-bd35-3d80e874c636",
        "cursor": {
          "ref": "50d3ec67-4062-4931-8969-3ee19e626034",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "55f65d5a-0db3-43a9-ab06-81af03de78b3"
        },
        "item": {
          "id": "69cc0b00-82d9-4cf4-bd35-3d80e874c636",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45c31bc5-ae1c-413f-820b-6e084587cb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cbe754-cd3d-49b7-b0b6-02dbf4ecb000",
        "cursor": {
          "ref": "0b289a07-88ff-4049-afb3-bd53520f84b1",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "28b89f26-86b3-4903-b54a-846fd1b81702"
        },
        "item": {
          "id": "55cbe754-cd3d-49b7-b0b6-02dbf4ecb000",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a97db495-fb59-49c4-93ac-8fa4dc5d7a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3250f92-b738-44db-b015-b326a0b4ead1",
        "cursor": {
          "ref": "279f58e1-3b4a-4308-b7fa-2a10e3f87882",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "88cd9a19-ba32-4950-affa-d710a9f9f3a7"
        },
        "item": {
          "id": "d3250f92-b738-44db-b015-b326a0b4ead1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8ea487af-c4ad-40fb-89b9-b4bb028c04c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa06716-5459-4b66-b085-ffb609ea6dce",
        "cursor": {
          "ref": "c5afa209-71ec-4aee-ba50-c6abb85eb3d3",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4d33c0ad-3f68-41c6-bc57-c108b2d28e6c"
        },
        "item": {
          "id": "5aa06716-5459-4b66-b085-ffb609ea6dce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "283cbeb5-a2ca-4053-a042-3398ea2e5b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebace89-68a6-4daa-a1a9-c793e91b68ee",
        "cursor": {
          "ref": "cd575880-e217-4a58-9d5a-714b9fe90c6c",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "afce17b0-be47-45a8-bf4d-1cb37fe0985f"
        },
        "item": {
          "id": "2ebace89-68a6-4daa-a1a9-c793e91b68ee",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7665c1fa-0666-47ff-8d2f-0e16e3cb30af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72f9b8a-8ed6-4451-9227-fea75470316b",
        "cursor": {
          "ref": "ad261e98-b1e4-4421-be1f-998771acaada",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d5344553-b271-4123-8a1e-e6fc04adbee3"
        },
        "item": {
          "id": "c72f9b8a-8ed6-4451-9227-fea75470316b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "eb897908-1b02-47ed-b6fa-3014ab197891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "170a8b47-e0bb-487e-932c-ec911c321bbe",
        "cursor": {
          "ref": "ab3a63c1-95ea-4151-8b88-134b7b14b45c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1b7c699c-4c49-4b6d-8482-5bd4da3d8e32"
        },
        "item": {
          "id": "170a8b47-e0bb-487e-932c-ec911c321bbe",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ce7703fa-86f8-4747-858a-8c83cb6faa86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "e162bfaa-b2bb-4191-8123-037d649a7963",
        "cursor": {
          "ref": "dddcc421-0897-401e-8a89-2b8e406dea38",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "dea711d5-8c88-45bc-b2c3-b6125730c9f0"
        },
        "item": {
          "id": "e162bfaa-b2bb-4191-8123-037d649a7963",
          "name": "credentials_issue"
        },
        "response": {
          "id": "322b1716-3bae-4061-b769-53b61c95fc88",
          "status": "Created",
          "code": 201,
          "responseTime": 691,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcd24d3-b05b-46bd-a3bd-e9430c3bb008",
        "cursor": {
          "ref": "a8beb314-c19d-46c4-9a3e-d9efecaef2f4",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "acf5c1e9-f108-4f6f-a0b8-cbe9989506d7"
        },
        "item": {
          "id": "3bcd24d3-b05b-46bd-a3bd-e9430c3bb008",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0d7f0bbd-88b0-49f4-8f14-88ae226f6828",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "425db399-22b3-448a-acfb-03ced12fe47a",
        "cursor": {
          "ref": "a4cc48ab-54a6-43c7-b6bb-2a33b8afc26f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bf5337c9-9c89-4fd8-bbf8-8890d3822c15"
        },
        "item": {
          "id": "425db399-22b3-448a-acfb-03ced12fe47a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d60288bb-3e0b-4c02-bd2f-6160d8b213e4",
          "status": "Created",
          "code": 201,
          "responseTime": 708,
          "responseSize": 746
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e46ddfc-330b-476f-8d8f-685e749d1769",
        "cursor": {
          "ref": "c17da78e-4053-4350-950f-17e1f6e7e2c9",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1e565688-7ef5-4803-ba7d-94e7e02a3ee8"
        },
        "item": {
          "id": "1e46ddfc-330b-476f-8d8f-685e749d1769",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dde1f4e9-cc54-4ac4-befd-5cee5a01334f",
          "status": "Created",
          "code": 201,
          "responseTime": 676,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c1e720-3ce5-4da4-8f3a-0d16122badc5",
        "cursor": {
          "ref": "cbb98fc9-6a67-47a2-a52f-d6108823022a",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b0d1e0b3-055f-44d3-ab07-cf0a9882de96"
        },
        "item": {
          "id": "34c1e720-3ce5-4da4-8f3a-0d16122badc5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9ef6908d-36d7-4a90-a279-1cb071ce2a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 690,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d8cce2-0425-4016-a6b4-b85a213802f6",
        "cursor": {
          "ref": "230a2c18-c80e-4f23-ba6f-196f0abc9237",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a972c33b-9b43-4166-9f35-0ada597f6a00"
        },
        "item": {
          "id": "07d8cce2-0425-4016-a6b4-b85a213802f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "74a54a45-a9a9-49ce-a741-78612a92022b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "07d8cce2-0425-4016-a6b4-b85a213802f6",
        "cursor": {
          "ref": "230a2c18-c80e-4f23-ba6f-196f0abc9237",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a972c33b-9b43-4166-9f35-0ada597f6a00"
        },
        "item": {
          "id": "07d8cce2-0425-4016-a6b4-b85a213802f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "74a54a45-a9a9-49ce-a741-78612a92022b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "73e888c8-a0f8-427c-9606-43e4e96ca6d2",
        "cursor": {
          "ref": "4cb96db4-d00f-4fb1-a877-244347eebf89",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f414e158-caf9-4958-96cc-4ef9c679b543"
        },
        "item": {
          "id": "73e888c8-a0f8-427c-9606-43e4e96ca6d2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9d8711b0-ab2f-4e19-a803-b994c1676f1e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "17fea10f-5487-4372-b622-19bc26e13223",
        "cursor": {
          "ref": "9645e772-def8-45b5-967c-c8898792e6b9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9f9cad2b-2001-4f7f-bf58-1792f15b4ca9"
        },
        "item": {
          "id": "17fea10f-5487-4372-b622-19bc26e13223",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24ffe5c1-50fa-4b1a-95ef-552d44b3f91b",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6d770c44-08e0-4964-bc07-fc73271f0fe7",
        "cursor": {
          "ref": "8bfe4815-2983-4a5a-a358-01c7d83310d8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "da9f3667-fc0f-45d4-93a9-7c9fc2a1c286"
        },
        "item": {
          "id": "6d770c44-08e0-4964-bc07-fc73271f0fe7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b61a1a56-9aa9-4dee-a19a-8970d6f75717",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b18fd06b-9db9-47aa-b4fc-005e096940de",
        "cursor": {
          "ref": "d0cdc928-b2c3-4f65-8ae7-5e5bc12f11a9",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "11daa6c5-70f5-47cb-b9e5-bf414891c400"
        },
        "item": {
          "id": "b18fd06b-9db9-47aa-b4fc-005e096940de",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7638b2b1-aad7-4432-8d01-eb1399e98bee",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7d3167f5-d575-4aa3-9523-7ce2f9241bcd",
        "cursor": {
          "ref": "81b0493a-6dd2-46ca-a4ea-b7bfcacbdb2d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3f279696-f67b-479e-abc7-52ba5039c6cd"
        },
        "item": {
          "id": "7d3167f5-d575-4aa3-9523-7ce2f9241bcd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5645ebb6-cb69-46c4-803e-0df765418a8a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "930b7743-0ff0-4eba-a988-a2a1a87ac195",
        "cursor": {
          "ref": "20d4b919-6337-4f2f-a3e4-689aece42ed7",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "280468ea-165a-4423-bceb-f2e5395a70a0"
        },
        "item": {
          "id": "930b7743-0ff0-4eba-a988-a2a1a87ac195",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "52844ee3-55e2-459c-a11f-e66e472b3272",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cbdd7b11-6d25-48ab-abde-f687c5e88159",
        "cursor": {
          "ref": "e500dd0f-33ee-489b-b5dc-171cd0626c24",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1babaebd-5be5-4fff-8a17-3b5945bebcdc"
        },
        "item": {
          "id": "cbdd7b11-6d25-48ab-abde-f687c5e88159",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b6e24fe0-cfef-4706-aa6c-9961980fa22a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "390aef39-3729-4fdf-9392-cf4592348468",
        "cursor": {
          "ref": "e8484714-240a-42c1-bcbc-74c01e1cc83d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cf81b5ec-19ee-49ad-b3b7-8c64d53a80d5"
        },
        "item": {
          "id": "390aef39-3729-4fdf-9392-cf4592348468",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "65706b73-3611-4911-a535-28a857e4f2a1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b1f6f04c-387e-46be-9e1e-6c69866b9671",
        "cursor": {
          "ref": "61eb8b02-61d0-4230-a211-fba264170868",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "237a2bc5-aa4f-4dee-b7cc-283b77defec8"
        },
        "item": {
          "id": "b1f6f04c-387e-46be-9e1e-6c69866b9671",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "586f371b-c613-4724-9876-a88dc77b7ef6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "500a2eb3-0487-42a6-b1a7-2f914784b290",
        "cursor": {
          "ref": "e4f40fff-9f23-4aeb-aa50-6426b1338c95",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "21eba8c9-5cd1-4ca2-ac69-be806c8450fd"
        },
        "item": {
          "id": "500a2eb3-0487-42a6-b1a7-2f914784b290",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3dcf5ff8-1b76-4c1e-8a28-15fb82dc09a8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d6808f57-f86d-4df7-9389-20b34c33b5bd",
        "cursor": {
          "ref": "3ac5a866-198d-45f1-8160-2a83bfa8e427",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "52b6deaf-2606-46c0-a38c-66d1829dc148"
        },
        "item": {
          "id": "d6808f57-f86d-4df7-9389-20b34c33b5bd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6f1c8d77-ef1b-4a9f-88de-39a53091ed7f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0709a523-728d-48fb-9244-a743dda578f5",
        "cursor": {
          "ref": "d4137d77-0630-4fff-8d1d-fa3fd4d6761e",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "04925474-93f9-4759-85ee-9167a69f777d"
        },
        "item": {
          "id": "0709a523-728d-48fb-9244-a743dda578f5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "27f1f29a-b0ae-4891-90d0-af0d094e2603",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6c8cdeeb-6561-4b27-8ae2-7f7c2ab4f0d5",
        "cursor": {
          "ref": "5fead657-9862-4712-8be4-bcf68f9b4b26",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dfb6ff7b-01e1-4f2a-8cc3-5b5a7db30abb"
        },
        "item": {
          "id": "6c8cdeeb-6561-4b27-8ae2-7f7c2ab4f0d5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a0abe9ba-5a23-42e5-b9d3-5e7c3c10cab0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "9b396072-776d-4fce-a050-a34ca35bd26a",
        "cursor": {
          "ref": "11dc14d1-1aac-47f0-8476-9001dd29656b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0d889309-73a2-49a1-8402-4979a728a9b8"
        },
        "item": {
          "id": "9b396072-776d-4fce-a050-a34ca35bd26a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "23cc3032-6e35-49f4-9ab1-9762a52a37e7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3e34adc3-58e3-43b9-894e-40767ff3f6b0",
        "cursor": {
          "ref": "681c58b4-b7f5-405b-8eaa-8200dd14e899",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "de92b22e-5e3b-4367-b431-06b174f485ce"
        },
        "item": {
          "id": "3e34adc3-58e3-43b9-894e-40767ff3f6b0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b9194133-07ae-41ff-87de-8e94079e4303",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "16d810f6-d456-4f97-a6c1-4f7db5849679",
        "cursor": {
          "ref": "5047189b-30b1-4a13-9d11-4b906c9dd23a",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7cd7455b-d08b-4f72-85cd-a64124d23695"
        },
        "item": {
          "id": "16d810f6-d456-4f97-a6c1-4f7db5849679",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "41d462d0-5c5a-4cd4-80ef-3e1afff5fe37",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "6fc9035d-cfe5-45aa-81cb-2d71bbf59bc0",
        "cursor": {
          "ref": "f296f0ba-3d5f-48ca-b242-e2a9ceccf02d",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4257464b-fd90-4e51-8e77-f6743985ab4f"
        },
        "item": {
          "id": "6fc9035d-cfe5-45aa-81cb-2d71bbf59bc0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "901c3f1e-6f84-4acd-81d0-198ab9c90979",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "48bdee95-53bd-4050-b430-27670696249f",
        "cursor": {
          "ref": "cc99f4ad-88e5-4068-a31d-cf7e5b832c29",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3a5d2ed5-9b7a-4357-8f68-5ca5169220ca"
        },
        "item": {
          "id": "48bdee95-53bd-4050-b430-27670696249f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8b65337a-c4e2-4f07-b05a-978a8a381ec2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1d597220-9c6c-48f5-bb06-4078bc972ef8",
        "cursor": {
          "ref": "b504d2b7-e274-464f-a22a-2d98962205bf",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "00ed993a-dc52-45d9-9a57-d9ede1aa7af4"
        },
        "item": {
          "id": "1d597220-9c6c-48f5-bb06-4078bc972ef8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2a2dd0c1-457b-4e74-98f0-12fbdf6714ca",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c1a4bcee-97e1-4f9e-ac2f-d4de689f6671",
        "cursor": {
          "ref": "16d024ee-b1ce-4a7c-a3fd-3a0f34510c61",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ee131065-bd43-4c18-8818-c0fb70efc511"
        },
        "item": {
          "id": "c1a4bcee-97e1-4f9e-ac2f-d4de689f6671",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6cd2a52e-b301-4158-8051-61167aa45563",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b93b1545-1d75-4744-bddb-4a2594ae4c44",
        "cursor": {
          "ref": "13d3acd4-c211-4f4a-a4e6-62b51488a15c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29f9dc2f-34a2-4131-8d29-8dcb0b3d635a"
        },
        "item": {
          "id": "b93b1545-1d75-4744-bddb-4a2594ae4c44",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cdf295f5-6c9a-434c-a8f1-62ce6db8a394",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4ef72d51-81fc-40a5-b4ea-a5472021ff34",
        "cursor": {
          "ref": "c5d91513-e55d-4b37-8f0b-c42c712a0328",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f9fd58c5-259e-4921-bef2-51f3765b103d"
        },
        "item": {
          "id": "4ef72d51-81fc-40a5-b4ea-a5472021ff34",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "12ea0dce-81f9-44e2-b61a-92c1c1cb349f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1a8e330e-f6ae-4c87-a1af-c5d92a8d4671",
        "cursor": {
          "ref": "9f5c0bc1-443e-40ed-bc0c-1475937e7892",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0f99adf7-d9ec-454c-aee0-1bfbabbb6287"
        },
        "item": {
          "id": "1a8e330e-f6ae-4c87-a1af-c5d92a8d4671",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "763586b4-298c-4bcd-ac08-237ddc42a054",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5d75e7fc-c368-4021-b6d8-03f1d37909d5",
        "cursor": {
          "ref": "775eccb5-4667-4cfd-8aef-bd6c82894e35",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "453e31f6-671b-449b-8e7f-8a00fec6191f"
        },
        "item": {
          "id": "5d75e7fc-c368-4021-b6d8-03f1d37909d5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7a5483fa-bc9a-4682-8c73-d3db032291e4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "4bcc1188-2d69-4a94-a500-1f4f0908076b",
        "cursor": {
          "ref": "7e6916a8-1b97-48cd-833f-7ecb59a0fa9f",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d4b893cb-c096-4085-9442-0be28df5f0ab"
        },
        "item": {
          "id": "4bcc1188-2d69-4a94-a500-1f4f0908076b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a7b6485b-c7aa-47a7-ac2c-10b4a8b6874a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b17ee56f-390c-4435-8756-12551a885b15",
        "cursor": {
          "ref": "9dc6d748-91a9-4b20-92d3-da1c484565ce",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a82591d8-fd92-4f7b-a83e-765fab256539"
        },
        "item": {
          "id": "b17ee56f-390c-4435-8756-12551a885b15",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "384b5124-3096-49f9-8fbc-d3722a6bf726",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "68829097-169a-4e5d-98fb-431a181631eb",
        "cursor": {
          "ref": "10530488-dd3c-4974-a115-87458e5dedb8",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1b296350-3402-4bbc-aef6-022fa6f0be56"
        },
        "item": {
          "id": "68829097-169a-4e5d-98fb-431a181631eb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61ccac45-50d6-4708-b900-6ba7965efac9",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "60f31237-e35a-48bb-a9e6-87fb113710ac",
        "cursor": {
          "ref": "d32283c0-a3e1-4f82-bbda-9f619bf68321",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7aa809ac-4e5d-4bdb-9fa5-f1c6d19d3ccc"
        },
        "item": {
          "id": "60f31237-e35a-48bb-a9e6-87fb113710ac",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c57ffe6d-8983-476f-b2a7-463c09940ef6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ea2fdc68-e55d-4be7-9a3e-1ae84d217840",
        "cursor": {
          "ref": "d11eda25-95db-49fd-8bc3-7045c45c46cf",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7819bcf0-9b9c-486a-b221-b4e48ee4802d"
        },
        "item": {
          "id": "ea2fdc68-e55d-4be7-9a3e-1ae84d217840",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a8304a9d-4a14-4c8c-ac2f-17907766297c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "983198a1-48f3-45f7-9597-045bfdd71712",
        "cursor": {
          "ref": "04e6c8a3-76ee-4591-ac13-0824cc23ee72",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8b1d4ffb-05b8-49e3-8427-97fdc7cbface"
        },
        "item": {
          "id": "983198a1-48f3-45f7-9597-045bfdd71712",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1a0aaf70-ba4e-4b7c-9920-939a46b1553b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "57b68a3b-8040-49f1-943b-82b66677724a",
        "cursor": {
          "ref": "1f844a31-46a4-49aa-82ef-5def6d5c4345",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6cc2e0a0-231b-4491-9d61-434d74227d01"
        },
        "item": {
          "id": "57b68a3b-8040-49f1-943b-82b66677724a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1bcc0b33-8753-4a3f-9bda-0402a09df41d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c445f9b8-53cb-4e59-98d4-98e02e5a5dbc",
        "cursor": {
          "ref": "1d155555-9927-4189-aeeb-29826a0b0429",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "526d0b9d-e938-45fd-906b-920df080291b"
        },
        "item": {
          "id": "c445f9b8-53cb-4e59-98d4-98e02e5a5dbc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6b16a68d-3805-4e01-9152-b5380ab25f86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065b4f41-335e-423e-8488-44eb3f6a6f97",
        "cursor": {
          "ref": "2b73b27b-5185-494c-9869-962574b64090",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3ec62e82-f52d-43e0-b43e-688f846a2c87"
        },
        "item": {
          "id": "065b4f41-335e-423e-8488-44eb3f6a6f97",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f489c12f-9c1b-4971-ab28-22afc068e15c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9547d0-6206-4252-9da3-d2e91c0a06d8",
        "cursor": {
          "ref": "4bfd4670-82e8-4f3d-bed8-191eb7e8a5f8",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3b192ee3-57f4-437d-be08-54042393cbc3"
        },
        "item": {
          "id": "9d9547d0-6206-4252-9da3-d2e91c0a06d8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ecf4009-26de-4013-bd19-c219891cbc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9547d0-6206-4252-9da3-d2e91c0a06d8",
        "cursor": {
          "ref": "4bfd4670-82e8-4f3d-bed8-191eb7e8a5f8",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3b192ee3-57f4-437d-be08-54042393cbc3"
        },
        "item": {
          "id": "9d9547d0-6206-4252-9da3-d2e91c0a06d8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ecf4009-26de-4013-bd19-c219891cbc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e5881e-8d7a-42e1-ad84-509988b48e7b",
        "cursor": {
          "ref": "54e8375b-6675-4709-8656-4862aa4c2e4a",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a15c8b13-dd1b-4ea0-8345-a55e64d7c70e"
        },
        "item": {
          "id": "71e5881e-8d7a-42e1-ad84-509988b48e7b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f85d5b22-8358-4f49-afb8-4d8c8c498651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d41b31-c697-42dc-b9cd-e61b7e6bd6ea",
        "cursor": {
          "ref": "71ee1199-3ec1-4c0a-ad05-fd821770764b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "68ac4c0d-3baa-46be-98d2-01ec81720a7f"
        },
        "item": {
          "id": "27d41b31-c697-42dc-b9cd-e61b7e6bd6ea",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d32b42cb-9d36-4c6e-b699-4866eba894a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1873e0be-f97f-45fa-89bf-feda59535a3e",
        "cursor": {
          "ref": "398f6744-c0cf-4dee-b94c-c71a6f1b49ed",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aaeba4b7-da94-4ac4-9dc0-f41fea4b4ee2"
        },
        "item": {
          "id": "1873e0be-f97f-45fa-89bf-feda59535a3e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "acad54e2-1c09-4a81-9d03-884ced2cba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb96ba11-8d77-4648-bac1-a9bf5befa9c9",
        "cursor": {
          "ref": "b6d5a587-d6c8-46ea-b021-ee529b1ea680",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aacf5175-69f2-4971-87bf-919dc9012418"
        },
        "item": {
          "id": "bb96ba11-8d77-4648-bac1-a9bf5befa9c9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "594c5149-eb2a-40ca-bf23-cc08e6cb2832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bf9872-767b-4e4d-aca2-fe4573a2869d",
        "cursor": {
          "ref": "585e00cf-e639-4833-a485-aa87c7d41872",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "95c1a6c1-3915-453b-a29e-af13e0db7fb5"
        },
        "item": {
          "id": "77bf9872-767b-4e4d-aca2-fe4573a2869d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1964405f-1934-4ab2-b6d0-71329aed7646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0686c9-407d-47da-83ff-74757542a012",
        "cursor": {
          "ref": "e0f663a5-ec34-4a4f-95fb-40c1ef7fbf02",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5a2ae5b9-6141-4a0a-8cbb-de6effeb6f00"
        },
        "item": {
          "id": "5f0686c9-407d-47da-83ff-74757542a012",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "68b65ddd-6b84-410d-be8e-9e216ecaea15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c2bca1-6451-4a87-8411-125e8b8b5cf9",
        "cursor": {
          "ref": "dfcf94dc-9249-4c12-b54e-434a2537a091",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "beac490c-5d01-4013-ac88-f9ac036646af"
        },
        "item": {
          "id": "56c2bca1-6451-4a87-8411-125e8b8b5cf9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3ec7f626-92d3-44ae-b542-382c17c91116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3423c2-d80b-491a-89f5-f6a42e0ac673",
        "cursor": {
          "ref": "0f28c17b-5c92-49cf-9c16-6c20e816b7d5",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c4f2ecff-8299-47db-b457-41e5168f0919"
        },
        "item": {
          "id": "5a3423c2-d80b-491a-89f5-f6a42e0ac673",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2b5727e8-30f9-47be-bffc-201b436e3a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361dbb10-9b29-42c3-bd9c-24f20c1385d0",
        "cursor": {
          "ref": "4ef70bd1-37a7-4fe1-b821-e0b16ea80ce5",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d72af4c1-28f7-40f2-8ea1-c0ae9c5006f7"
        },
        "item": {
          "id": "361dbb10-9b29-42c3-bd9c-24f20c1385d0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bb3c3956-164a-45d1-a7c4-6113d538fe6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43387f1f-b202-48a1-b816-0e2c1a61543c",
        "cursor": {
          "ref": "6534b075-c873-41d3-92a4-0c5f95637088",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "92c413bf-bfa0-402a-8012-33180472a40b"
        },
        "item": {
          "id": "43387f1f-b202-48a1-b816-0e2c1a61543c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4698b25e-f48b-4086-9e0e-9e157e96377d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5124a1-e4bd-4efe-a006-45f7eed084ae",
        "cursor": {
          "ref": "66bf4bb9-889d-452f-b2a7-af2baf027457",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5d85ef6b-6554-40e9-9103-446d601fa98e"
        },
        "item": {
          "id": "7e5124a1-e4bd-4efe-a006-45f7eed084ae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "31127006-c00c-4eda-95bb-1be0f4824de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53f6d1c-c26f-4d6d-b2aa-9135e0c12e10",
        "cursor": {
          "ref": "443519e0-7692-45e1-ac1b-7297e0cd0060",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d1f68f69-1d43-4d41-9ab4-e17a3f87dcdd"
        },
        "item": {
          "id": "a53f6d1c-c26f-4d6d-b2aa-9135e0c12e10",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "076b3af2-0a2a-436a-bd11-45a404599ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6444614f-c8a2-4e11-a40c-3afcc636bbd0",
        "cursor": {
          "ref": "1fbc9479-f1d2-40e3-a542-4d80f2a426ae",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3bef54b0-4225-4ad2-970f-540fb2300ab5"
        },
        "item": {
          "id": "6444614f-c8a2-4e11-a40c-3afcc636bbd0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e41793cb-a63e-46ae-8ee8-40d9a994fb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9585d4e7-d5a6-42e7-ada0-3a79afa2aefb",
        "cursor": {
          "ref": "dff4d9db-ca8c-4d75-ac0c-b89939eaf6ce",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "77dcb187-d96a-4b98-95e6-b369ed3d2319"
        },
        "item": {
          "id": "9585d4e7-d5a6-42e7-ada0-3a79afa2aefb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e587989d-874e-48af-b710-f7c291dad8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7463723c-acc3-453e-987d-33859b4cb104",
        "cursor": {
          "ref": "847b712a-0060-4b1e-b7d7-729f5b48c9df",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2e61f42b-b7a3-4059-b45b-fbc3407c0656"
        },
        "item": {
          "id": "7463723c-acc3-453e-987d-33859b4cb104",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fd7bdd3e-ab59-4287-8dda-961adb16e09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913bb898-2a40-43b3-b42e-e61444ffc3c0",
        "cursor": {
          "ref": "a1f6cf57-6b17-419f-9d1e-afe30872c263",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "aad0817b-9104-437e-b36a-21162c08b536"
        },
        "item": {
          "id": "913bb898-2a40-43b3-b42e-e61444ffc3c0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e8fb1b11-6bb9-4baf-a335-d129064cc6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d592411f-2612-4760-9dd4-bf095e18bc7e",
        "cursor": {
          "ref": "adad703e-6bf4-4fe9-8fae-2bb2dff3a363",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "58a5b24e-fcb4-45b7-aa53-b5f762ccc463"
        },
        "item": {
          "id": "d592411f-2612-4760-9dd4-bf095e18bc7e",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "e99d8d5e-e282-4339-baa4-44fa9de25945",
          "status": "OK",
          "code": 200,
          "responseTime": 647,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8e965e53-31ab-4e43-82f4-d48bee67ba2c",
        "cursor": {
          "ref": "f2f94faf-71c4-4cb2-8135-83f5f9839e88",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ae5db2a3-2351-4291-af1e-051d50540626"
        },
        "item": {
          "id": "8e965e53-31ab-4e43-82f4-d48bee67ba2c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "26dd5dd5-d1d6-4a44-ac22-7762cf5eac6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8977910-e936-4956-9e61-8250d8a47675",
        "cursor": {
          "ref": "b2db6082-90a7-49bc-a732-7903d5fdf304",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "74e1c333-08cb-4a59-8770-66ab7b76f500"
        },
        "item": {
          "id": "f8977910-e936-4956-9e61-8250d8a47675",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "48964bac-8ff2-4261-866b-58f8824e5010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117907bc-5246-43aa-b2c5-2652d0334cc5",
        "cursor": {
          "ref": "5d244235-ed6b-4fe1-8343-4d896cc16fd6",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ddb15b0c-00c3-4250-9082-1dbbdc484c49"
        },
        "item": {
          "id": "117907bc-5246-43aa-b2c5-2652d0334cc5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "eb74dad4-8734-41b3-a150-17ea2a22ed83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86da0da9-0d7f-4195-9543-89d35192e8b0",
        "cursor": {
          "ref": "77147bcf-786b-448f-965d-e07642d7711e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "79b1e55a-6a4c-4263-b691-2a5006f9797d"
        },
        "item": {
          "id": "86da0da9-0d7f-4195-9543-89d35192e8b0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b9ac9bcf-ec32-409d-99f2-8bf2ccd43a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f25ac19-2d88-43df-b556-630a67df8de8",
        "cursor": {
          "ref": "bf868e2a-288d-4b99-8761-500b9cf4b6ca",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "85625a6f-a2e1-4227-a8e8-360e428dc09e"
        },
        "item": {
          "id": "5f25ac19-2d88-43df-b556-630a67df8de8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5166747-9e14-4daa-ba66-59ce232fc4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cb95fa-c91d-4ae4-b43d-3b7ea5cff9ad",
        "cursor": {
          "ref": "5f9ad42f-330b-49dc-8f8d-f42f8006fda7",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "733d526c-065c-47c0-85d5-4bbc249072cc"
        },
        "item": {
          "id": "53cb95fa-c91d-4ae4-b43d-3b7ea5cff9ad",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7d013a85-5604-4e91-8a2a-c7e9d9763912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99329591-dcf3-4b2e-8abb-c5526cedcb61",
        "cursor": {
          "ref": "692a5e73-a2c1-496c-aaad-ff05274a4456",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6e49552e-e6da-42c5-a566-a872e3f0b34e"
        },
        "item": {
          "id": "99329591-dcf3-4b2e-8abb-c5526cedcb61",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e14d072d-3563-4230-8014-493189ab7d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cab3561-8d06-48cd-9227-60d35b9e5697",
        "cursor": {
          "ref": "84f4ad39-d120-4072-885c-428944449ef8",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a3000190-e9f0-4dd2-ade7-d52831876b0a"
        },
        "item": {
          "id": "0cab3561-8d06-48cd-9227-60d35b9e5697",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "547721cb-fbda-43ac-ac7d-858ce4e44c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc072a39-d096-4510-ad7d-0854039b48ef",
        "cursor": {
          "ref": "597d4608-c9b1-4105-b1ce-8c4d3a0aab8b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aa9e1b4a-7025-4bb8-a36f-4beb67641aa4"
        },
        "item": {
          "id": "dc072a39-d096-4510-ad7d-0854039b48ef",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4191349c-d397-47a7-a2b7-6c17d3b8e9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9819d649-b6c8-4492-bb90-1228c0a94207",
        "cursor": {
          "ref": "c0560378-6c96-4bd2-8140-4ec9ec75ece6",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "04e8d563-1d9e-4b51-95ff-249352801954"
        },
        "item": {
          "id": "9819d649-b6c8-4492-bb90-1228c0a94207",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6a19ddda-1af8-4b2f-9876-860f2ca2af9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795a5d2a-b3e2-47a2-bff9-0156cef7f55b",
        "cursor": {
          "ref": "345c68a5-f0d5-4f43-a178-9f9ff70652ac",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "448fc8e4-f8a2-4b65-a4a2-273305232551"
        },
        "item": {
          "id": "795a5d2a-b3e2-47a2-bff9-0156cef7f55b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "360e6423-3e7a-43bb-90fd-9290cef59ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242525ca-04a9-4309-a653-a53d0395768c",
        "cursor": {
          "ref": "e3d51bd3-650b-460f-b30e-9b62fe69b98d",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "59d2f964-8fb2-41c4-9388-d654ddbc3e8a"
        },
        "item": {
          "id": "242525ca-04a9-4309-a653-a53d0395768c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "be10baf1-cbc3-489b-b236-75a40f089f8b",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5ec6ae2e-c80e-4aa0-824b-f61adbbf9534",
        "cursor": {
          "ref": "418786ab-d628-410f-a238-47f776afb35b",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d5c4dc01-407d-4fa6-b699-f24bdfd73aeb"
        },
        "item": {
          "id": "5ec6ae2e-c80e-4aa0-824b-f61adbbf9534",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6175845d-3ff2-430f-8737-1d8eecff8f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a8cf48-a34e-4b83-b9a1-80331cde53e8",
        "cursor": {
          "ref": "90343d2f-8fcd-40be-b041-ed26853cceed",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "816e3bbf-8cc3-42bd-bdd5-382c1be1e86d"
        },
        "item": {
          "id": "68a8cf48-a34e-4b83-b9a1-80331cde53e8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d62b39ac-71e6-4f59-bc07-c763be486849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23644305-cb6d-4726-b91a-4c6afa977dc5",
        "cursor": {
          "ref": "601fa651-31a0-4610-8c39-c5666dc7cdd3",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c103100a-685d-4c95-9183-cc572336dbd7"
        },
        "item": {
          "id": "23644305-cb6d-4726-b91a-4c6afa977dc5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "eba0d63a-cf97-46a0-b242-1ec3c776e133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486f5ec9-925a-43cc-b76d-81b8bf114bfe",
        "cursor": {
          "ref": "b4153211-1b53-4909-a80a-25b5a3239861",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "44e0db53-e3e2-472f-a8f1-973dc4651ab6"
        },
        "item": {
          "id": "486f5ec9-925a-43cc-b76d-81b8bf114bfe",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "89d001dc-4c6a-4bc7-8371-316f649192de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c4ec9f-6793-4dd0-ac8a-983f0a99693e",
        "cursor": {
          "ref": "4e495a69-7c35-484c-8069-b7728f390b64",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e453a2da-4f61-4754-b73e-6f217217a05c"
        },
        "item": {
          "id": "c7c4ec9f-6793-4dd0-ac8a-983f0a99693e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7dd24fb5-7846-45e3-8ad5-d756a8069327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4f2cd3-5f55-41d7-b6ed-a803f234212a",
        "cursor": {
          "ref": "eae79735-d4bf-4f15-9c5d-18c8a39164d5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d70efd3-b1a8-4c6a-9800-60a602b5da06"
        },
        "item": {
          "id": "ef4f2cd3-5f55-41d7-b6ed-a803f234212a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a6197e97-f9b8-4b12-94d0-7963012cde5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78db030-e472-458a-8470-fd01df937f5b",
        "cursor": {
          "ref": "5ed50543-84de-4b8f-a527-81281242140c",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f28071d0-7420-4a8a-b64a-32049256e2f6"
        },
        "item": {
          "id": "d78db030-e472-458a-8470-fd01df937f5b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6316d465-e8fd-4dd7-9c54-759f05217d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5c552b-f76a-4a0c-adc0-846d433ee549",
        "cursor": {
          "ref": "6fab1383-085a-47b5-81bc-da419b3f8736",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fc929f44-edcf-4c1c-8372-ea1b4e1ac7f0"
        },
        "item": {
          "id": "9c5c552b-f76a-4a0c-adc0-846d433ee549",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "60befa5b-a428-4374-98fb-3e7e01ed2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3ae905-45f6-4a64-a625-6f817b3f99ec",
        "cursor": {
          "ref": "e1fba802-438f-4e94-817d-b6b0aaf6536c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "54e99760-9a62-4052-ab6b-85647cb17f74"
        },
        "item": {
          "id": "ac3ae905-45f6-4a64-a625-6f817b3f99ec",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "57c404b8-c965-4116-bf78-dc7d5aa65d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7b78e7-8592-4ce6-8b8d-9dcd4561a39b",
        "cursor": {
          "ref": "3bd0ac4e-6a57-48f3-8714-bbb0c6d8d2fc",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9d0e7269-e86a-4fa1-bf60-0c33ed72ca38"
        },
        "item": {
          "id": "7a7b78e7-8592-4ce6-8b8d-9dcd4561a39b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cb3feab8-6493-41ba-a778-0c095bbd0541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 641,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6612bf53-4636-4017-8c5f-7bdb7c0e2c03",
        "cursor": {
          "ref": "914c28a0-369b-44b6-9a5d-fc1e19b48617",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2e497849-7745-40d9-9fdf-743ea14edd32"
        },
        "item": {
          "id": "6612bf53-4636-4017-8c5f-7bdb7c0e2c03",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fae1470a-600d-4aa2-b46c-1fc946a5822b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbfbd60-cc0e-4a0d-8ab4-afe90a1cf59c",
        "cursor": {
          "ref": "4588338c-6f75-4e4e-9a00-bc4db9067193",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5ae3c8fd-f1b5-4bc9-ad10-6bf558124f80"
        },
        "item": {
          "id": "cfbfbd60-cc0e-4a0d-8ab4-afe90a1cf59c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "63a2948d-7286-41b7-a9a4-193824123268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fe9d8f-e6d0-4d0c-bc87-3d0eddf96279",
        "cursor": {
          "ref": "cca4e8b8-dd71-410e-8343-dd407058d95b",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a20b97d6-4dc4-4987-bd16-20b41d4b900a"
        },
        "item": {
          "id": "39fe9d8f-e6d0-4d0c-bc87-3d0eddf96279",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3b209b54-0715-43d6-b131-d0ad0582b8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83abd33-3fae-4a7b-9dc5-b6587f43875b",
        "cursor": {
          "ref": "a0812ede-a78a-416d-b83b-b31f60ab5f6d",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7b64bbb2-c95e-46aa-bf51-7051aa1143df"
        },
        "item": {
          "id": "d83abd33-3fae-4a7b-9dc5-b6587f43875b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b6042897-0470-46fe-831f-4e078b30d20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2082f700-a7da-4e50-b62c-a913d60b5630",
        "cursor": {
          "ref": "5e5ba8dc-7684-407f-ad9a-c206d35c9570",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c71f1993-9706-481d-b5df-f27546465b3d"
        },
        "item": {
          "id": "2082f700-a7da-4e50-b62c-a913d60b5630",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "eac3bb99-e292-49f3-8c61-55f761425fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bff26ab-786f-419d-ba51-283a0cd20b9a",
        "cursor": {
          "ref": "ba09220a-ae2d-4355-959f-e02aaf476913",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "365dd7e0-f9c1-4e59-b902-e1bc3a29df2a"
        },
        "item": {
          "id": "7bff26ab-786f-419d-ba51-283a0cd20b9a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a80558e8-b744-4f3f-b798-8bc22dcf5b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42bd096-fca9-4eda-b38f-0783cd777345",
        "cursor": {
          "ref": "db76ed9a-ac10-48d2-9930-f6acc131acb0",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "431759af-6718-400a-b498-14988b54f6eb"
        },
        "item": {
          "id": "d42bd096-fca9-4eda-b38f-0783cd777345",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7203529a-2389-4907-993f-861697d5354a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56964bc6-9a89-4914-a716-22ec4b70d221",
        "cursor": {
          "ref": "0fe8642d-583e-488f-9b4d-ca885fd8aa32",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fe9d59a6-c0de-42d7-b33d-284727dfffaa"
        },
        "item": {
          "id": "56964bc6-9a89-4914-a716-22ec4b70d221",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "794ee3c9-85b7-4727-9ff6-d822f52e2f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795302ee-b0df-4238-874d-3cfc17775da9",
        "cursor": {
          "ref": "02696078-3aab-40b3-9333-122299516b0e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5794c826-2ea4-427b-a38e-2587a4937a28"
        },
        "item": {
          "id": "795302ee-b0df-4238-874d-3cfc17775da9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4114b1f5-0227-4e82-b3ca-bab94af62768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27334ac3-b274-4834-9063-6da94ea75e89",
        "cursor": {
          "ref": "9e359779-28cf-440e-bc6b-5caef4f317ca",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "346829b4-1b80-4c89-963d-e0720fd9714a"
        },
        "item": {
          "id": "27334ac3-b274-4834-9063-6da94ea75e89",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7b9abbd7-2acd-41e3-9709-f7e2cc25cebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605b692c-fce8-4b33-9a72-83ab7fd8a48e",
        "cursor": {
          "ref": "7cef5a1d-7fe0-4fc1-836b-3283cf3eb64a",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa39139a-7f26-4514-bf49-c23d69ee6901"
        },
        "item": {
          "id": "605b692c-fce8-4b33-9a72-83ab7fd8a48e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bce734f9-df2d-464c-b061-ffa3add0bdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a2f5b5-cbd6-4ced-ac77-c07dff483fd3",
        "cursor": {
          "ref": "83ef847b-efb8-44d6-9cb6-35b9c5c63040",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dd8a245d-8922-4c58-813e-45634f7c811c"
        },
        "item": {
          "id": "b9a2f5b5-cbd6-4ced-ac77-c07dff483fd3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4309a996-c3b7-4331-b96c-5ab785f5621c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa515e1-cf9d-4cca-8bd1-d28da501eb69",
        "cursor": {
          "ref": "9a00bc9f-b27d-4847-83c4-7197475a99e5",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "faf46c83-466e-4947-aff3-f7614fed4f65"
        },
        "item": {
          "id": "cfa515e1-cf9d-4cca-8bd1-d28da501eb69",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7e214bf3-35cf-47f6-b5c2-e2e5b678d8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86f7521-aed8-40dc-b18f-f117a05a1a21",
        "cursor": {
          "ref": "a5ca4ef9-8ab9-43d6-83d1-ba10f564fc9d",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ab0f94b8-dd97-4c6f-bf1f-74b669c91002"
        },
        "item": {
          "id": "a86f7521-aed8-40dc-b18f-f117a05a1a21",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b00ff4a2-82f9-42bf-9bc7-241e51492f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18874e13-df0e-43a7-8a33-8518e879bdff",
        "cursor": {
          "ref": "434bccbb-6060-4401-84e4-8a23aa7d5dad",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5f8aa10e-2432-4c46-919c-a82bc384dff2"
        },
        "item": {
          "id": "18874e13-df0e-43a7-8a33-8518e879bdff",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "47ce8577-b87f-4c92-9fa8-41fc90313a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177d268b-5ed1-470c-b87a-0502cbf8fc8d",
        "cursor": {
          "ref": "ba784646-0200-44c6-80b0-d5b7a7f95a28",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a74b042d-0aec-4ffb-b288-4d493e6c022d"
        },
        "item": {
          "id": "177d268b-5ed1-470c-b87a-0502cbf8fc8d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4f750c55-7fdc-4063-8f1d-4314a6dfe5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de04667-17ca-485b-996c-07de613ea3d3",
        "cursor": {
          "ref": "d7e55024-1aae-4481-b619-c7691e10b69d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e91c8693-4c4e-4965-8e79-3f0d6cc337c1"
        },
        "item": {
          "id": "2de04667-17ca-485b-996c-07de613ea3d3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c81eb321-2eb7-47f8-b294-1e7dbf6675bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0daee85-780e-4fec-ab5d-3e61a6469268",
        "cursor": {
          "ref": "6a9d3baf-df0d-4b7f-bdc4-9571b1bc5e19",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a53e14e-799c-422f-b11d-54525277256a"
        },
        "item": {
          "id": "b0daee85-780e-4fec-ab5d-3e61a6469268",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "63e52369-9c67-4bf6-9098-9b9157534989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6962062-832a-4e27-92f2-9d0e775bc5dc",
        "cursor": {
          "ref": "b78441bd-fa46-4b94-9de8-876c95cc84ac",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "036f1403-26e8-4a3c-914c-4e452ae44550"
        },
        "item": {
          "id": "d6962062-832a-4e27-92f2-9d0e775bc5dc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "39f996fc-bdaa-4c83-be7b-8a7716a0dcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018a8042-caca-47dc-ad27-c41e8d1c1f5b",
        "cursor": {
          "ref": "7206b734-10b0-406b-be64-4698416ee02e",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "736601dd-b3c6-493d-9555-1145c76c59fd"
        },
        "item": {
          "id": "018a8042-caca-47dc-ad27-c41e8d1c1f5b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fd444737-224c-4a50-8246-ff7af7c1da6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f0b620-9d96-42e7-a15b-5a669e6c82a0",
        "cursor": {
          "ref": "3006156b-0fbb-49ba-b1ef-373c6d94a244",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e79d9a7f-6797-4e51-bf06-d4b680d5915c"
        },
        "item": {
          "id": "72f0b620-9d96-42e7-a15b-5a669e6c82a0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80567d7e-fd7c-45d5-84e2-c66a794208ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36c4b4a-7a88-4fa1-904d-6053293d70dd",
        "cursor": {
          "ref": "fe51775f-d172-43de-9cdc-10531fae4522",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "319bea1f-3d8d-47ec-9481-1accfb45617a"
        },
        "item": {
          "id": "b36c4b4a-7a88-4fa1-904d-6053293d70dd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "55d75a3f-7158-430a-ae00-615f680c2cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2579c0a8-ad64-4ef3-bc39-e953ac7672b1",
        "cursor": {
          "ref": "ae4db1a1-79fe-4003-ad2e-3684745f0211",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "28e076e5-9bce-4e7d-bb2f-aabcdadfb41a"
        },
        "item": {
          "id": "2579c0a8-ad64-4ef3-bc39-e953ac7672b1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9659fec5-687e-41b1-91d0-5a155208e02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bf6572-f0bb-46da-9851-459bc850b61b",
        "cursor": {
          "ref": "fa75f4b8-5bb9-4075-a809-ba36bd3667e6",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b2ce4491-7403-4636-908f-1e36cdc66a7d"
        },
        "item": {
          "id": "44bf6572-f0bb-46da-9851-459bc850b61b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d7b26d8d-8b94-4f82-abdf-54a447e5ac35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fcb2b3-b849-45ba-a0a8-dc2301387c6e",
        "cursor": {
          "ref": "e891e36f-161e-423c-89df-40e1ea89d8d8",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f04cf7c9-f246-4c04-a54d-a63a37acc7a4"
        },
        "item": {
          "id": "00fcb2b3-b849-45ba-a0a8-dc2301387c6e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b9ec9b62-6693-4ed5-9a2e-cdbe20a3a466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae62970-d60c-4d39-aa0c-469544810db7",
        "cursor": {
          "ref": "8d8cdd77-860b-4bff-a79f-91c21c1f533c",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d9b2265b-dad9-4f0f-919d-7a83c1841af1"
        },
        "item": {
          "id": "4ae62970-d60c-4d39-aa0c-469544810db7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "361fd0b7-5fab-47d2-a0b1-636c35be2982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fd5de9-2fb6-4dd6-8046-5492f6a50bd9",
        "cursor": {
          "ref": "db833203-6e45-4f37-9301-3de4a17f778d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fb5b6d6c-ee86-4537-960b-5727aaa2d81d"
        },
        "item": {
          "id": "42fd5de9-2fb6-4dd6-8046-5492f6a50bd9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "019789d0-98f1-4965-9d05-0fc805f09755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6560ff-96d6-4f9f-8393-5c7aae4f065e",
        "cursor": {
          "ref": "ce4a4e7b-b834-4829-9435-efd9b05b9232",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1632ed66-3d3a-4197-9f79-b587996f8f2c"
        },
        "item": {
          "id": "6f6560ff-96d6-4f9f-8393-5c7aae4f065e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "766ef0b4-a656-47cf-aa7c-7238c333a048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2130da95-becf-41bb-801f-b0080a633a65",
        "cursor": {
          "ref": "d6ba2e8b-6fa8-421f-bc04-f60ca16eb141",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d9a0f542-d8b1-4095-9d97-626bcfa57b60"
        },
        "item": {
          "id": "2130da95-becf-41bb-801f-b0080a633a65",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "44e2e125-a131-4b08-9bc7-9c21457bfde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c086ca1-acc4-4ff2-bdba-fbbc51aa8834",
        "cursor": {
          "ref": "f1247465-fcff-4521-9785-629dff6ad9af",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "15c91476-4040-4d86-919b-9fd356ca4670"
        },
        "item": {
          "id": "9c086ca1-acc4-4ff2-bdba-fbbc51aa8834",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "25fa84d3-9a98-4f25-81cd-d7caa47cd99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdeba3d-0ada-469d-b07c-1ac5f0dba0b6",
        "cursor": {
          "ref": "7d88bc78-de69-46eb-9fc2-cd02b0584303",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "81e9423c-3b05-4cc7-8d06-cf572167a975"
        },
        "item": {
          "id": "5fdeba3d-0ada-469d-b07c-1ac5f0dba0b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b9f89637-c873-4571-982c-ee6edd8b69d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2953ca-3a06-488f-b735-66a7f547c30e",
        "cursor": {
          "ref": "564125e6-5019-45a4-9b48-8d45b3c8dfd1",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "173afe4c-f36e-484d-ad49-4325a826a076"
        },
        "item": {
          "id": "5e2953ca-3a06-488f-b735-66a7f547c30e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4217aa98-23e6-4079-a9c2-900788e6132e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad1b7fa-2a90-4719-8ca9-0d00df4df4b9",
        "cursor": {
          "ref": "b5486004-53c5-4481-9d09-9763aaef0a91",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2add9ffe-6a59-4310-b5f7-1b81aa620fb1"
        },
        "item": {
          "id": "9ad1b7fa-2a90-4719-8ca9-0d00df4df4b9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "658cb650-9a88-4862-9549-060137b8f898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dc0152-0c8a-400a-a640-dad4e53f4e70",
        "cursor": {
          "ref": "682528ca-8ad8-45c3-9eae-62c53de1ce90",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6e20d90b-2ff9-43bc-a5a3-34ee5b0cc1eb"
        },
        "item": {
          "id": "81dc0152-0c8a-400a-a640-dad4e53f4e70",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7dc47645-0a05-4cb4-85ce-54b3ef5a561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af055a90-ac18-4192-963e-5c98d5467ae3",
        "cursor": {
          "ref": "65234b0b-1478-4ab5-826d-a8c25373bfef",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "69b0c3f7-08cf-4362-a5d7-b760a65a4b2f"
        },
        "item": {
          "id": "af055a90-ac18-4192-963e-5c98d5467ae3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55c095e7-c168-433b-aaed-0941d27f2c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2008246b-9557-4841-bb6f-00716e14d977",
        "cursor": {
          "ref": "2b9119a5-f38e-4a25-87fd-9ca76dc16bde",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "631c524f-772e-45c8-af15-9d1cf197a9e3"
        },
        "item": {
          "id": "2008246b-9557-4841-bb6f-00716e14d977",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ce36b0d1-22ae-4458-8ab1-632c50d823cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6310bd67-11e2-416f-a233-c3f767a31f62",
        "cursor": {
          "ref": "8a68742a-1fda-4678-baaf-d7041241c5d4",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b52b877b-0ae5-4708-8c66-39c6399fdcdb"
        },
        "item": {
          "id": "6310bd67-11e2-416f-a233-c3f767a31f62",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b7f2a1a6-0de5-4318-b6dc-9da7a8438795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f080a7e0-df31-43b4-a24b-80180e4bd425",
        "cursor": {
          "ref": "b84d07ba-9537-49dd-88d0-61b5fb4f29a1",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fdc42301-7d3f-454e-9581-bb66710d9cb4"
        },
        "item": {
          "id": "f080a7e0-df31-43b4-a24b-80180e4bd425",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "64a336b8-f1e8-4342-b237-91452aa05c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930bdfd4-0ae5-4fdf-93a2-132c8ba68178",
        "cursor": {
          "ref": "79b3805d-928a-46a0-87fb-d5dc0c6943ff",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5af84b35-6de6-4895-a7f0-6ab518d33808"
        },
        "item": {
          "id": "930bdfd4-0ae5-4fdf-93a2-132c8ba68178",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0a2ddcb5-c946-41de-89fb-33e02ceec676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c955dec-bb06-4310-ae40-d74907b384b7",
        "cursor": {
          "ref": "6b77ea06-4f23-44bc-9005-4046e7ab38cc",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c9079377-6988-4bf9-8ec0-c4e0e79eb449"
        },
        "item": {
          "id": "7c955dec-bb06-4310-ae40-d74907b384b7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "01e2cf4a-161d-4cc4-918a-204ab4e01e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc043d64-fa73-439e-bbf5-7e8999529b2a",
        "cursor": {
          "ref": "12c09a63-f433-4c60-bc97-1e9d51bf8e0f",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "549eb34a-8ba3-442a-84ee-1509a0f7f8ab"
        },
        "item": {
          "id": "bc043d64-fa73-439e-bbf5-7e8999529b2a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "24e0b5ee-902d-41c0-a855-022f464025e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de038bb-ddbe-4b09-b08a-ea88f5f7747e",
        "cursor": {
          "ref": "90738340-24ea-496a-8862-b03b36e4f4e0",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "664f3258-56bf-4406-bd86-658de73b9ee1"
        },
        "item": {
          "id": "5de038bb-ddbe-4b09-b08a-ea88f5f7747e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "320d7b1c-1419-4326-8921-91b60e1ff4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538c3daf-6a73-430b-9254-837e6d32ecfe",
        "cursor": {
          "ref": "1c155b16-7e0b-442b-aeb4-63133ebe7b7a",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "88a80682-1a6d-473e-9e44-9c14a3cfd7e2"
        },
        "item": {
          "id": "538c3daf-6a73-430b-9254-837e6d32ecfe",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9adf0c26-d193-4553-acd0-5d607578d5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f07b22f-9aab-40f6-8c51-b3278e3875d3",
        "cursor": {
          "ref": "661f9f0b-f31c-4aff-b099-301f247e41e5",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e821fccb-b433-4615-9579-e43c75555517"
        },
        "item": {
          "id": "7f07b22f-9aab-40f6-8c51-b3278e3875d3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f16929d9-d636-4f1e-a4ec-7260b7bfd94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78278528-34ef-4f7d-a33b-b2e95d1d0f3f",
        "cursor": {
          "ref": "0815faf3-e128-47e5-8f86-07aee55ad411",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "37943d1a-af28-447b-ab19-d1e1d03eef03"
        },
        "item": {
          "id": "78278528-34ef-4f7d-a33b-b2e95d1d0f3f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3efa01dc-7525-44cd-937e-51227371d110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705a4ea5-a7f9-4e07-ae88-c160a33f94c3",
        "cursor": {
          "ref": "ae283312-075e-4f57-b254-8f2f2a17c900",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "700ba3bc-5558-456a-bd67-77d82db2b28b"
        },
        "item": {
          "id": "705a4ea5-a7f9-4e07-ae88-c160a33f94c3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "67ebdfa1-1ada-4fb2-baa4-65ae75cb1f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf886f71-cb26-4201-adf7-0895d306cf03",
        "cursor": {
          "ref": "47fa6114-a06c-4056-9344-dabf1209a181",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "34a6f5eb-8df5-4b4b-a870-8ea0855a5704"
        },
        "item": {
          "id": "bf886f71-cb26-4201-adf7-0895d306cf03",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d14f797a-6717-4ec5-94ee-28aa81642f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccb4e34-669c-4227-8577-8204c119831c",
        "cursor": {
          "ref": "5ec17f46-95eb-4fc1-82ea-d293ebc2a987",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "853d56a3-d3c6-402f-adac-acf77d973271"
        },
        "item": {
          "id": "4ccb4e34-669c-4227-8577-8204c119831c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b6d21414-267d-4be5-a590-08fc82dc8de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eee4ac-d030-4f38-9f4e-eed61d30aa12",
        "cursor": {
          "ref": "1df379a1-b27e-44f2-a3ec-5a5b17548a05",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3ea3e55c-07d2-4f67-8871-f7a12c8f4ddb"
        },
        "item": {
          "id": "03eee4ac-d030-4f38-9f4e-eed61d30aa12",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "82bee37f-b42e-4d11-a2ec-54c500bf0abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51e0eb7-52b5-4213-8e53-f28d4f146433",
        "cursor": {
          "ref": "cfba86ff-8b12-4fb5-ab90-d33cb468fd99",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "21eb064b-b635-4864-a7e6-d634104c43f1"
        },
        "item": {
          "id": "a51e0eb7-52b5-4213-8e53-f28d4f146433",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cbaea423-3f9f-427b-bce2-76383686bd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755fd12f-cc72-472f-943a-7e316824bf49",
        "cursor": {
          "ref": "e236dd6b-cd61-4da9-af43-38c425dfbe74",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "41b10758-3670-4997-baba-e2fa2b916cc7"
        },
        "item": {
          "id": "755fd12f-cc72-472f-943a-7e316824bf49",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fd913ba7-1034-4bba-97a4-b01ec54c57bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a234a6b8-658c-416b-b8b4-4c07c1ec5e4c",
        "cursor": {
          "ref": "758dfa27-1569-45f0-9bdd-6f725b14d82b",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9bd74870-8814-42d2-ae3f-2d8e75c6471a"
        },
        "item": {
          "id": "a234a6b8-658c-416b-b8b4-4c07c1ec5e4c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4be04432-0d36-4f81-8929-0b07e053e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835f2806-2e84-4e1f-ab13-830d3ecdca5e",
        "cursor": {
          "ref": "6fcd2d2b-36b2-4bf1-8f2f-c5a08475e9be",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "50edf8f9-8aae-4af0-b0dd-13dada0cfd35"
        },
        "item": {
          "id": "835f2806-2e84-4e1f-ab13-830d3ecdca5e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "68c57ae5-55dd-4042-8ffb-93f2d76a78e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39e72f2-70fb-4b16-86e3-6b1a755a1d0e",
        "cursor": {
          "ref": "c66a2af4-3156-4de0-bafa-56a68c8a9f89",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2a824e29-2de4-4bf2-8b9c-201aec181625"
        },
        "item": {
          "id": "c39e72f2-70fb-4b16-86e3-6b1a755a1d0e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8c5749ff-098c-4821-91fb-297217ace6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b7ca5c-8618-4508-bad0-dfd7cde80161",
        "cursor": {
          "ref": "d5b49949-872c-40e3-ad05-fdfa20086c3e",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d130e4a2-1cdb-4142-ab57-8cac154a31be"
        },
        "item": {
          "id": "60b7ca5c-8618-4508-bad0-dfd7cde80161",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "12c1dfab-e626-4e98-9a15-a8adb32b3adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdf3fc2-09ef-45f7-ad82-c33b14a35255",
        "cursor": {
          "ref": "a842fba7-a62c-4d39-837a-7a170e90630e",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d02c9e91-be10-4cc1-87cf-aed8c6f73c74"
        },
        "item": {
          "id": "0fdf3fc2-09ef-45f7-ad82-c33b14a35255",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d1f099bc-5c50-4f47-a70e-819e232e29ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9e5ad8-695b-402d-8ccf-d43afcb94050",
        "cursor": {
          "ref": "74252dea-4a3f-4d36-b7b3-6ca86941ea0b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7f5b217a-bec9-43f0-83ac-2316560e32c0"
        },
        "item": {
          "id": "5f9e5ad8-695b-402d-8ccf-d43afcb94050",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ac448bdd-9622-431b-aa94-6864f32b0e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5398dbdc-42e7-477f-8510-17570c11bded",
        "cursor": {
          "ref": "e7830b73-e7ea-4cac-99e5-0078de6ca8ac",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f02e9889-810c-4e3e-8fe2-cdc87c4c1762"
        },
        "item": {
          "id": "5398dbdc-42e7-477f-8510-17570c11bded",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d85ba137-31e1-4aff-9214-7bc3bb123264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47c91e9-ecdb-40f4-9c5a-ea4fb86060fb",
        "cursor": {
          "ref": "d77722aa-10b4-4411-af40-86e430b421f3",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a443adaf-ce0c-4ea4-8fc6-47af9e28c07d"
        },
        "item": {
          "id": "c47c91e9-ecdb-40f4-9c5a-ea4fb86060fb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d72b9f59-bf1d-4990-b4c8-aeb73e2b56e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b57918-2979-4075-be62-ef15dd7a1bb0",
        "cursor": {
          "ref": "9c830de6-b7c3-4cab-bf8c-b45df5996528",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dd288d10-2f0b-4440-ad33-80a27c510f82"
        },
        "item": {
          "id": "67b57918-2979-4075-be62-ef15dd7a1bb0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b0509430-075b-488d-ab33-7d4fbc70705c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276e9e51-cca1-4a13-b456-6704609aa8ef",
        "cursor": {
          "ref": "30e6b791-70aa-4af3-9d2b-a0300b2da4d9",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7b2d722c-9229-4c51-8fca-5a972531d6cf"
        },
        "item": {
          "id": "276e9e51-cca1-4a13-b456-6704609aa8ef",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2cf7f124-64d8-4b17-ab12-fc2a7d2b6f4e",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f00801e-df24-4a3e-ad07-45c8127fc052",
        "cursor": {
          "ref": "9b959091-bc4c-4201-ab23-b6109e2a7f52",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "abd3bffc-90e3-4139-afdf-4a524fb73fc6"
        },
        "item": {
          "id": "3f00801e-df24-4a3e-ad07-45c8127fc052",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2c3af873-04af-422b-bd22-62a55e493150",
          "status": "OK",
          "code": 200,
          "responseTime": 617,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f10e909-6814-4c02-8b8a-c302f612baa5",
        "cursor": {
          "ref": "6f373f09-53c6-4933-9ca8-cd134dd02cd3",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9275ebd3-565c-434f-9072-a2f8e5bafc43"
        },
        "item": {
          "id": "1f10e909-6814-4c02-8b8a-c302f612baa5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "92e98feb-e7c3-40be-9a8d-75f75d9ee6cc",
          "status": "OK",
          "code": 200,
          "responseTime": 610,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
        "cursor": {
          "ref": "0e2e667f-6e12-4411-8831-bab921dc7959",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0658da28-5a66-4c00-b590-0a24b844ce77"
        },
        "item": {
          "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cb33cc03-5e39-43f4-b8a6-cfd6b751e8da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
        "cursor": {
          "ref": "0e2e667f-6e12-4411-8831-bab921dc7959",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0658da28-5a66-4c00-b590-0a24b844ce77"
        },
        "item": {
          "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cb33cc03-5e39-43f4-b8a6-cfd6b751e8da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
        "cursor": {
          "ref": "0e2e667f-6e12-4411-8831-bab921dc7959",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0658da28-5a66-4c00-b590-0a24b844ce77"
        },
        "item": {
          "id": "67e74978-7208-45d8-9270-0eb068a7a79c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cb33cc03-5e39-43f4-b8a6-cfd6b751e8da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ee2a8c-5efc-4d74-9e36-8111412f1ca1",
        "cursor": {
          "ref": "48a2d1fd-c940-4aaa-9a9a-6886dc334244",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c091aafe-6c3b-4023-97dd-9cfd86d025e4"
        },
        "item": {
          "id": "e2ee2a8c-5efc-4d74-9e36-8111412f1ca1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ed2c8de8-e672-4bc1-be7e-646bbf9e80fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5c6351-7728-46da-9c82-309c186703f4",
        "cursor": {
          "ref": "d479f018-5734-41cd-8324-67ae169ac57d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "782e540e-fbe2-4c71-a3b4-553667575262"
        },
        "item": {
          "id": "be5c6351-7728-46da-9c82-309c186703f4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f6350a9f-bca6-4b51-ab84-bd25dec0560d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "be5c6351-7728-46da-9c82-309c186703f4",
        "cursor": {
          "ref": "d479f018-5734-41cd-8324-67ae169ac57d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "782e540e-fbe2-4c71-a3b4-553667575262"
        },
        "item": {
          "id": "be5c6351-7728-46da-9c82-309c186703f4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f6350a9f-bca6-4b51-ab84-bd25dec0560d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "51baa067-16b9-41ea-b438-70a5d08bb5ec",
        "cursor": {
          "ref": "ad5ee044-dae0-4d08-8791-34afb6895e20",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ee7de602-c0ce-4e3b-bcf7-7ca9e7839fb9"
        },
        "item": {
          "id": "51baa067-16b9-41ea-b438-70a5d08bb5ec",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4a0d33f7-b9ae-4af0-a0b3-55162e866e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "fe482de1-8749-4fbd-b948-00c5e82b4896",
        "cursor": {
          "ref": "6e6be1a3-ba2c-4ce6-ad60-9c66a20088b4",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fd32ed1b-2c8d-4baf-890b-b3214303a3e0"
        },
        "item": {
          "id": "fe482de1-8749-4fbd-b948-00c5e82b4896",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a55180bb-6a56-4874-ab81-5f5ca9823f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fe482de1-8749-4fbd-b948-00c5e82b4896",
        "cursor": {
          "ref": "6e6be1a3-ba2c-4ce6-ad60-9c66a20088b4",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fd32ed1b-2c8d-4baf-890b-b3214303a3e0"
        },
        "item": {
          "id": "fe482de1-8749-4fbd-b948-00c5e82b4896",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a55180bb-6a56-4874-ab81-5f5ca9823f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3369cf27-d729-40be-b147-a3a4852575a9",
        "cursor": {
          "ref": "5bf3c00e-5285-4922-97f1-77f5c878e023",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e1077771-826f-4282-9430-bee29ca96ac2"
        },
        "item": {
          "id": "3369cf27-d729-40be-b147-a3a4852575a9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f2deedc4-8e56-49f6-97dc-7b0fe3c43466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}