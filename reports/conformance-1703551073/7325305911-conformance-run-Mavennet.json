{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e236b24c-a24a-433c-8ea2-5a15be71700c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3bb8e71a-2b84-4289-8769-dab021b9c47e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "038f62af-1c55-4db4-9cfe-d4ff0aedacfd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "672ae807-3e70-45b1-9315-09c0619e0899"
                }
              }
            ]
          },
          {
            "id": "ee845c52-d727-4a95-ac49-03835f8cfe04",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9eeb038-7cd1-46e2-b31c-7f6c4b045b99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c67f22df-ec8f-4456-8c25-d6d0bf9cfab3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d51a9a94-201a-461f-996d-a45818bfd8ba",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "109f22aa-f68a-4182-9517-b5bb5d362097",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a80bfcde-f06d-4520-ac0a-dbf1c3cc95d3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e25ddf45-f44e-4d0a-8024-8f392fe4b315",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19313370-178b-436a-9188-70e9da1d33d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fcaef8f-1415-4464-878d-c6ed5edec3ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0875b38-d6e5-4601-9d4d-57873fc8a9a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e4800bf-c7f0-4534-a21a-48e7f1845764",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8454dbcf-2723-473d-aa35-22e5b86ec8ad"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62e4875a-04b8-45c3-bbdc-70c551570506",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "829a5a28-db6d-45e9-9de7-ae5dbc8cae9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0901b91f-d215-4e8a-a988-6ef504d79d78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f31a9021-1f7a-41ea-b32d-96c92f07c761"
            }
          }
        ]
      },
      {
        "id": "73f1b4c6-e0d9-455a-a288-9378d266c582",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2048e4e1-835f-4cc2-bf0c-557b98cd1def",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa1c6338-5336-4681-92c1-178a7b0b81bb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18724a57-3b6f-4a8c-b9cb-fda267995a9e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336f54c9-cf76-4c6a-a8f9-6aeeb633255a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8794ba1-2223-4644-9ff7-329173b9de2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e1f234-41e0-4599-a7c8-1a0a5419180e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f64a7d-a684-4174-a123-76f7d1e33f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7aa8f5a0-faa8-4f1d-adea-554ce33b56be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bae1d3-cece-4e8c-87ff-629772e7f9a9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b666dc-c56a-46b7-9cd1-1d5327bdd3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "608a86d4-d01a-48a2-a52d-b86dfe6a0185"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67d90844-04d7-4b38-adf3-c35222c06c67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4858787-b87a-4019-ad49-90e980c0c278",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d58271-d089-41c6-8773-c30e6d0ae0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02dba08e-4281-48ef-8045-dd4a151c7ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3855fe-4cd9-4e97-8f8a-b9d3cbfd32fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c682c1b-0eb6-4db9-b16f-1da66961397d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8bb9e7f5-d1b2-499b-ab41-ed0786d7e351",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2add2517-c52b-4dcd-ace3-32e806136aa3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f268d88-e158-4bf5-961a-f6326dcc6fb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c8658e1a-a87a-415a-baf6-0f2489e56a38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e07f0071-18d3-495b-bda1-ce6f09ff8077",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "023031d4-5b7c-4b08-ae67-b12237afbf18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "152087d4-8d89-472a-b258-8b91de12543e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19e734c9-09b9-4316-8671-81b064f50b44"
            }
          }
        ]
      },
      {
        "id": "f4993214-a792-4938-8044-53d5ab85ccb6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80727de5-c353-4bae-8854-b3bed39a3747",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a021715f-1f1e-42e5-80fb-40c0be39fbff",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a5816876-1051-4c03-9aaa-1c79458472b8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d5232f-71d7-4eb8-ae4d-e4d94f846f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd53b5a-2f87-4aef-9744-d1b7cba77fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9651f8e-f1f2-469c-a516-cf0ca837e168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9060bf5f-b610-4040-b84b-38742857825d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba16b39f-33da-4f43-9719-8680e84e6315",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080d555e-9113-489c-be7c-85c7895e710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45935a74-bb3d-4874-a688-ecd7b2981b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a902ff9-0b7c-4843-946b-3ca3cde34125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c84cc58a-c8fb-44d5-87bd-3138c4c41009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5172cef-7426-4541-b95b-8ca838f3f091",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723ff6cc-ec55-478d-baa7-38b96b6dced3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9446edf0-8baf-45b5-95b0-ac8ccb113f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be68f62e-cfcd-4d2c-897e-f4fa300d84fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd480ea8-85d5-4eda-ae74-5cc216b8421f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ce12f7-bd52-4c20-a18f-55231fb5a075",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c2ee7d-bfa2-4768-ad2e-429aa15d44eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417235bf-f3fc-4f3e-aaa7-35e23cde6da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58d7672-ca1e-48a4-955e-767e125b77dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b8ff917-a1c6-423d-82e9-0e5692b4c5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e9193f-ded8-4993-bf8a-37f5790d7365",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96741062-8de2-4a09-a29d-210b1b021566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942ce8a5-c4cc-49bf-af57-39cde085b3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12a5a61-771e-42a3-9003-ae354f3281fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "671007ca-6e5d-4cc3-8125-755a97c76ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f2b596-f624-4a92-9034-97c6580c253e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9207b588-80ef-4dd1-97bc-0c2ef8d9e82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369d058b-4f67-4830-866d-7bb5e4b99550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d981dea-4ee5-48e3-963a-ffcb3561cbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b3446b3-0443-4e08-ba52-3a6e46c09c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333d37a4-1b0a-4688-98a6-7629e79c8057",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2daebb8d-738e-4e1c-9ac1-8c4865c609e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9533d418-e09d-40e1-9fae-a1de8d8dbab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82d0cdf-178f-45a2-bd15-406a74499169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af20edc5-62cc-4572-a484-80e14840397b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cb06e7-1bd2-4353-b0e4-4fd23a68603e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7e83c7-d6ab-47ae-a356-c38fc47fc453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e004806e-c300-4a36-8dac-44cf4e66ea47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979fb190-6460-490f-87bd-4331b2dd894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dd40e43-ea7a-4735-af83-d93a2f396253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d6e1ca-dabd-4335-a40c-11ffd7f22270",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653aebdc-5c6e-4203-8f2b-088d0418a75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b4f997-e1db-425a-8be3-489363b5a2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192f4dcf-231d-4639-8b9f-26ab4ab84ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "778a2d91-4849-446a-94cc-061baed2e5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fd6923-1241-411c-b26c-68c592a602e1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd1e682-7b11-48f6-98ee-6aa45612cd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a143e2c-c7b7-4aed-a7a2-cbaacec7077d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6990beab-9ae2-4836-ad50-008c81a296d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b8821ee-52b1-4c04-88da-208215d0a434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ca200a-3844-4613-a2a5-3442f2cdb196",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e5e561-58bf-42ad-90b1-cc4e7f9715a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a288427-55e4-4540-8cad-12ec7e3eae2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0926031c-14ae-48df-8969-ff2bcb921bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd4321a2-233e-4abb-bc60-26cd3131c25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370a7af2-5cdb-4b11-b1d6-3fdebb2c76c7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a03f2de-5e0a-4d76-8b86-38ffbee229b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8ae738-c499-4d5f-b412-5fef15b416c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137f6b95-ceb6-496c-9efc-0f9dd2dfe42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70c98a7f-826f-4218-aba6-e827351784b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953046a3-0979-4484-9577-3cd0143c0853",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e518c001-f2f1-42dd-8290-38353ec4a7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24491b9-948d-4113-b955-68bc4343e8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dea6a62-8ba2-41a4-97d6-93ae8e7a8d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be65f15d-47c4-4cfc-a6ac-f78ef4cb5ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eacf466-49e9-425d-9144-8c02fd14712d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c370ba4b-58ad-41ec-8fe0-7b501edb7791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaa23c9-57ce-4535-822e-74509100980a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf33148-0314-46cf-83fd-461a78279ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25330b31-b367-4440-9c3e-0a85e4db4c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2d058a-795e-485d-b445-3841c18e42a5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c649182-a9d1-4d4c-aa1f-eade1281a80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b4765f-616d-4774-b9ca-dab79504f47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69196f1-e42a-42ea-b43d-4272b227256b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e081ef13-3665-4d55-861e-2633aa9decf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a86057-3f49-4eb7-82b5-8c5b39a5a728",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451c9a71-a93c-4308-ba4c-882f1255c4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87511eaf-96f8-4777-8f5b-0dd4e5111e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd21ca3-c6df-4a9b-98fb-70120a21dbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c7dca1b-a8e2-4cb0-b16a-81f14826df8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53c1048-f3c1-4034-8c9f-0e89f5c8b015",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2ce946-ad61-4d08-bc55-b402bdeee972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6715968-1239-46fb-b7a8-f13c0f41275b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3279d28-a6ea-4939-a966-2b714ed33a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2776afc3-1c1e-4552-a344-c8efe239f140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de87940-5e60-4764-bf28-0b73383cbfd2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01243b5-5339-46cf-945a-5ffc2c1e8e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86986d15-51fb-4fb2-91f7-4f16dc9cb6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116c0861-c5ac-4583-8b0e-9f6c99a2f4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf145ca7-b513-4eaa-9fe3-a07e68d3a9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a84ed7-5fb0-47c6-bb9c-a47e79298b73",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdeeae8-9522-486f-89c4-3e410212e459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332b27a8-eeb4-405f-b0c6-6c8464c86040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd81209-420c-4af4-90c3-f3e76cdfab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51022055-9727-411c-b13d-ba9a25c880e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ded9ab4-f103-461d-a02e-fe4eca3b8ccb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7797b8-db34-4936-91cd-b3182760200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55951cd6-97d2-4f66-9bb3-e109f40df8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb13afda-6803-4f6b-bf27-fa7fd302f135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35869b0f-a193-423d-b1f5-a065ca27ad40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854fe092-e2e0-42e7-8178-ffbe8735419a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29587c0-3393-4f41-ace0-3e68adbf30e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa34edca-c1a3-46c3-9be8-97394ffaeb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b676f0-b551-47f5-9d2f-c2262f1198f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9a513f-bc88-4611-93f7-87488569e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb041fd8-08a7-4cac-b3b7-5a2f2fba9686",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004b74a8-f3e3-4ecd-aa74-8b3dbbd07c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8c14e9-d4cc-4c7f-977a-72aca092aa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd73176c-702b-4337-805e-dd3765227eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aede07e5-5249-43f2-b8be-2bf6bdf586c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984706a7-cf83-4efc-acb1-1a7ae7521f35",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dff89e-ad48-40f9-8d21-d676746be8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bc3b56-a5dd-4fb5-8041-72a7c177bcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73f9eff-4cde-4eee-ac12-8e13e097d9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8bbf17b-d49d-4018-85ad-cf6cd7fccafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f937aa1-9f13-4a0f-ba57-097d16e11850",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2761107f-b507-4b5f-9f4f-f49779169998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c8a8f2-a932-4a7f-a688-3ced5f1a2d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf18346-b806-41c0-b0e4-91d8c106d81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7402d2-85b0-4335-b487-b21f138b65bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9001e38-a5f1-4cdb-8d2a-1a9e4342acb5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53d021c-699b-402f-a094-78a150ec7d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab28a74-4b95-4402-bc0a-57adc9b558b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f35dc3-b921-4e94-b181-ca88699664ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5342b9bc-8f70-4641-82bc-6125d36f4dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acbaf85-b809-48f7-9873-4d84d1443b6d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f69969-e47a-480c-8bc6-72fe3f9cc748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb75c1f-16a4-45fa-a258-55a885b684e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e5b5e2-8b33-4a84-8737-ce976ccfe5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f671f44b-4f8c-4a90-bdcb-0b4d9654302b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eda6d53-f67e-4ad9-bd4f-9b4faf632ab0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d10026-260c-4910-8d72-6269c7b44b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf69403-70b3-4fce-b619-236ff2f7dbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a325c126-8afc-4f3b-aa7c-a9f49bfaa8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed70aed-1a2a-4670-97b8-fee82aa60408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1268fdb-c372-47d2-b400-c186c41d3a0d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93d55b7-f537-4b30-af22-1dd5bad4d80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb54478-bf5e-4c05-b05f-97c595d8040b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee19456-369e-42b2-a375-716dda8d2ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab880b3-ecb4-46d5-b71b-d9c1d6fa6375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3629a7-b7dd-4d1a-bc36-a52f132afe63",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784db26a-ffe5-44b0-819a-a56490b2a3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec2e1b8-9f57-454c-8f69-0e1912bec99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b750d4e-0646-4bb0-850c-d05dc8dbd5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "728eace2-8a1a-47dd-842f-4e5273f97671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0bdde1-fad8-47a5-b69d-738ee43501a8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d66894b-d4cd-462f-a03b-294098f0f8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86341b4-2b7b-4ea2-8827-a27a6dbf25ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d68f1c-29f8-42b5-a7de-1aaa159ebe9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb27dc8-04b3-4e1a-afbd-a063a2005e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110b8460-3631-47a7-a0db-7bac16ef3dd3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a0e1f9-fa0b-4c8c-8718-004cc34e4d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5a5620-7b46-4c68-aff4-fec6e00c289c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caaad0d-e2c3-4875-a61f-cf8efcbed3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cc18d4-4d86-4de9-9109-ccc05577f663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20587ed5-4041-4c5b-901e-48c54b2f73cc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2cfd4e-6b99-4a8c-89b2-417718aa7f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b526812-4147-46bc-819b-7fb05e1b7dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f8a1d2-adc0-4ad8-80b3-9a77e2cdc1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6d8268-b2c4-4f92-9ae3-9f5a2f9ba2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b200472-ac16-4f62-90f5-2b726508941e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6bea35-8a3c-4803-ae1c-ba750ad0a318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0694ff-6097-4e27-a8e5-18342d1f2b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f080146-680e-4777-ad8b-04757d0a5741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c51e80f7-b17e-4430-abb7-da1c453460ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69d4f76-9e65-401e-a9fd-b54f3ca536dc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeca1bb0-92e2-4928-a5b7-b9a6579dd2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd237dd-d0e0-4421-89a3-ea00875a1a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d826a0-15cf-4970-9e75-93ca61ec39bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4acecae-95a2-46eb-974b-cced78c29530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695824eb-fcdf-4122-ace0-a4faa7bde70f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871806d7-ee0d-46f6-a9bf-9f65955e670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265e75fd-0cc3-4c32-9d8c-a88812b29c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a86219b-6bcb-4f47-8643-5ad3bbb522af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "16a66cf1-32bd-48e4-b042-66e9fe2c17dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023072fb-485d-4dcd-bac4-c72422973d28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035f3826-bf09-4646-a773-bc875392a96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d79a4f9-da1e-4474-9acf-23912737c11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db042a4-4ef1-40da-8178-68771aa119f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7406a33a-38d1-442a-abdf-ef615ad027b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e47466-a141-4c5a-881a-8a3fe6429861",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847bf76e-e999-4f8a-b48b-3bf430e2ef7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a180c58-759b-4348-9b23-0f95b5f3edcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c424ce-448b-45b0-9ca8-4e414a60d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a9e89-ff1a-4acf-8210-7b21922b59c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8dddce-390c-4cbf-8543-8bb847a9102d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee0ad6f-9431-4382-8913-de32ebeb7e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5658d5bc-9296-49e2-bab1-a7123d4a24af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb081758-c7d3-40b0-bbbe-e97aad0e3045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c118c66-dcbc-4d4c-96e8-ba8b11bb475f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acb43c4-f7bd-41e1-be70-ac3020808e29",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ce750d-928e-4d3c-a310-9592bdca4e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bd1030-1745-4deb-87e4-d6ce6c2a56f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e3fd21-de7e-444b-90af-8fe6426f34d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c9006d-22f0-4612-81a2-ce21f8320be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c694a4-8997-4a05-8565-c9fb6d8382ba",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f17818e-e5f4-425b-93d0-4bad026d25f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9a8500-e40a-4cb5-859d-b11af3c390a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804ce472-123b-4811-835d-db1cea82f3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2023c730-f7d6-44d1-9274-bead1d7075ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f31c2e-c03c-4180-8aa1-e440c7755f79",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6312defe-9ce9-4c43-991f-c4ee8731d93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25792c4b-8f95-4316-b78e-0ca091618cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ed2f5a-1944-4926-a441-ca9e0e258b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f57e1691-fe46-499d-82f1-cf703789e2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcde053-45db-444d-a7d1-4f19165b8326",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e887c84-ab17-4471-a489-99692b39683a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d0a991-2267-4852-ae95-42aed0f582d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20c14cf-6e6b-4067-9e2a-b8522e9122f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcc8a7d-8a0b-4826-84ca-a2631aa0493b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74924efb-d27b-480a-8324-340b0602b8f3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db17c76e-7c96-4e4c-94c2-4af68d1a2412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114b0b48-1e07-4a64-9e12-3198615d8f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4192d055-7e76-4c4e-b340-98328606719b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a19406-ff43-4eaa-8eb5-9754e1fd34b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ad1118-444f-4821-9627-eb12ab7d224a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d1434b-a1c8-4ae6-8273-60ba79dfba5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10adc9b9-298c-4b31-976b-31c32522a4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7efe740-4026-47f7-9716-77dcf6b8fd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "554d3e5c-6e88-41ed-bc68-c6d7d405169d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455c2d5a-6fbc-414a-81b9-a1187f5a18b3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b535d8-bef9-4e74-882e-3b2707cc67f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8dc293-dcfc-438d-bcf9-285b26d1fc14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b22ecf-2f54-46c1-b573-c0b0d26785a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79cf190c-5acf-426a-b09c-919da26b926c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de45d61-aef9-4bfe-91b4-814a0cc58a33",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd22f76-2a0f-4899-92ca-55244bcdfba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78371db7-0535-4403-9630-15f95e8f5886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bc8979-c79b-47be-8185-adaaa5808d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae9d849-5830-4c57-b9a5-f1958ef09149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f594fb0a-65b1-49a4-92e5-6e652235b9d8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1888eea1-61df-4bcc-83af-5f716a20156f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8f7b6f-e592-4c8d-a8e5-61bc8d45d38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a883d886-1398-436c-84fc-30de11c8f238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2370c0-05f1-4076-b459-24fbdb63475b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7799e48f-8300-4397-8b1a-fbaff928b3d1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710ce6dc-31f3-4be3-b141-05d21c503006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2403b83-1723-42cc-98ec-3b373255042c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a98d21-0672-4c21-a1a3-41ac0a37b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e33a941b-d71e-4bf7-b25b-77590fca048b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a721ecf7-c133-4dfb-8b69-ed1d3aa0af5d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efac49b-0886-4e73-a4a5-bc939b925479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e644c7dd-eec3-4c2a-9df8-623beda4e41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e7bfb8-c763-4d11-88d4-4d401c0fae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f40840-d5fe-48ca-a2da-be6541b55658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e47d16f-0aa7-446e-8790-5add9ae561c5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2194e4f6-72f8-4f87-81da-eb09de4c8d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5814ef7a-dc2d-43df-99dc-e3a8012bf09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7bf637-ef54-4f22-9578-6b1581fafdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0efc8c1-055f-4651-b80a-af94b9028365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b915086b-98ce-472c-807b-0916739a3384",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d586091-58e1-4722-84ac-05f284fc5180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e6295a-9846-488d-aea9-36c46716b6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c31d43f-817d-4fbb-b968-e9ed1d71f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc3a9ea-4461-4089-87ea-7ad57e473268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0443d967-8528-4c5e-ad63-d3a00ec4206c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5965c827-a80c-447c-b2a5-7b9450fd2746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ad5d37-5ccc-4ed5-ba09-712c592f08f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10d6d2-5ea3-4f4d-b3c8-a952b8c983d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "747d51ff-4f06-4a55-ae16-3b4257e845ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27221b7b-d193-4a12-abd5-510eac2941b6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72bbcd1-bc14-4075-b50b-dde1fe2d3329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b95baf-00b1-419d-8f77-d94c4b167726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dd18bb-2a0e-43f2-8f5e-140890ba31bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df810ee-de61-41ee-8c0a-915fc9a5af3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42be5b24-2a74-4a19-86e4-ea6b4df5b807",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405e7ed8-9791-42d1-adda-985245653848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379ac9bf-9ab9-4f97-b591-e3ccc4f72557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7019d00-b5e6-4a00-bf4e-81edceccb94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31a7e35-0625-4096-a939-4518031edcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980ded0f-9ffa-4806-8bd0-69466d32df76",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33971dbb-80fc-45f0-88fd-d8a1d68226cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256e12a3-38e3-4fe4-ab8b-89936837a6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c775ae-688f-47a3-bdab-b1335a8c90ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08a3488-c00c-4e37-8614-f7d311129074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb30838-eb9d-4148-9a9a-d2b11a2c7cef",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce28a5d-ba04-441d-85aa-044240884022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6deed74-a4f7-47fa-9e4d-230c4ad7a33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9348cdb-1662-4d6d-a1c8-c992c2dc7e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfb8ea0-b95d-4e30-b324-bca0f83a93bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5620cd32-bb2d-4753-ba7d-d3d33417dba4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7993352f-c5d6-4a0a-ae29-db1c574637f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca5d9a8-6c3f-4143-b520-e73a6f8373e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67428697-4f16-47ba-9a20-d58e67b6853e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0f14d8-970a-408f-b49d-2b4116d315e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172a68d2-bc91-48a6-a1d0-0d1b47ef7f2a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d918f3f4-a12c-4931-8916-7c73e84284dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133cf36d-b3ee-43ba-9bc8-b804f9fbd032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f167079f-7953-4686-9fc2-7fd9574fd6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1cf213-e859-47e2-b0d5-ca53056a8484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6b99c7-fb87-4e9a-9e32-ba19e9ac2b8b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80cb113-f3a8-436c-93a6-4e71493171ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13cde63-4a27-4170-a489-2d5ccdc0faae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b58d8c-aebc-4186-b7f9-51f8abf241cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcb5ce2-aa34-49fe-82d2-6d0d525ce8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c30aa6-853e-452c-85f4-f959e29191a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eea7c6-ce9f-4a2e-b9af-88b1a1fb75ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5228658-8e52-4497-b6b5-bb0f9347bdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98f03e0-a006-4ba9-9952-13f2d162b4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "96a663f7-e38e-4413-9035-9121600e7207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79541642-fd19-4c73-be8b-484e0ad6f2c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cf4ddf-e147-4824-b180-f722bdab1a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe1e9f9-0fd9-4c93-ab70-951a1c9498bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1271cc-a365-480f-aa80-b25a0c582e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfc835a-a10c-46a2-acce-dfd7580201c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4572ffc7-c993-4620-8c24-b64a88af2b5d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f2199d-43f1-4648-a37c-b762553c4f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105837d0-46b9-4e62-8e32-741ca594d75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293d4cef-933c-4ef3-bfba-3a3e28a5f460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "950d9562-c549-48ba-bf86-3759b74a7b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a63f2-4b15-4784-a30a-26fb6f68a8ad",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0965e5c3-0e04-41fe-aa91-909f8eee992c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cb94e8-36bb-4e68-956f-f5ef507a0ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280a3a66-4f49-4aeb-b71e-15d278c73d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e6a1f2-020d-47a2-a5f4-43cd071be93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f95f519-7e3f-4e7f-8e36-1a0f89f41700",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfd50ba-93bf-4aa0-ab1f-4ab18e756a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70bfb9b-2a13-4b35-a5a3-f913506f3378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f12fb18-0fde-4446-9566-ec65237dcfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ba04ae-36cd-4ae7-9b25-ae243b69069d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9830995f-7464-4b40-a11b-e6bfaef7a023",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22a8a4f-2e8b-4a69-9622-86436671d7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e600a29c-f5b2-4a15-8906-bfe3384556b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde96fa8-81d1-4556-8178-f1fa24576b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0568175d-502d-40d6-953d-30197e39db08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e85a1e-6ddf-4d59-9eb0-698f578d8dca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2d88fd-8505-4f09-9739-9cba4af40023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe76bbd-7b07-49a7-a06d-0f0d98fb8fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca44187c-c7ab-4a77-bca0-d30ddebc8cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38f58de3-86ba-4721-993d-1145dff68768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3faf21-3f96-46c2-a322-f1e0d11cec88",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37aa9e06-1025-41b7-a322-b16df2402dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282aed0a-14d4-4cab-8ad5-d3314f86dcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fe0d17-41a0-4259-9bcb-e04f774d27f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8f5515-bc59-4569-9541-e66331896c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2357f798-cc67-484e-a669-cd4a00f6ee32",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debd6554-093d-4189-b8a6-36616a9b07d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f11316f-d57e-4e5f-8ff6-f1d6b0ce5382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110e293-19c6-4242-93fd-d9af889fc29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "88d3a4c9-3079-4202-b608-b4ff8d858f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1df7004-5272-45e2-8cfb-56485c095068",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48a5cc2-3c2d-42df-a2d5-9e019af06f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93cace3-b860-4623-852b-ea40f466f617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893c7aa6-fa05-4887-927d-98b25ce58079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca168a0-0819-4f6b-9788-d8ed43594875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d44fd70-8db0-43e2-9012-00fbd38c98b7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baab38e-ccc6-4425-ab4a-bce640d195a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd8caf8-a3cc-4535-abe2-786988e4e9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2910c30-e12d-4094-8559-6051c0481216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3d9617-c63e-49ea-bc69-a6cc6dc2483a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d028a47-557b-485b-9b3d-a67a1b9ea776",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4201fb8-a288-402c-a046-719ff3c27716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c4d25c-246e-4675-bdc6-e4558be27f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f501de51-504f-4f42-a934-aa3d53c1b016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac151420-5f88-4ad4-bc70-ead6a812926f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7f7bb9-284d-400a-934a-ab4c24f5f4e6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0f6f9b-430f-4fc3-b9b1-0166780ef19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea8cce3-99d8-4288-b95f-0143a1d13dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b864a825-9b8f-42ea-bec2-48739c0af5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61628722-541a-4944-8313-3c9b3f6c2122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d137e906-f0c1-4fb1-995d-9310f3580bf5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6a8cfd-82eb-4261-9bcc-154574914f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ecc38a4-5a26-4c53-b9e5-4017af45c7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71226eb1-b206-4f33-83a7-0c1f779f4edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca655cc0-21ce-4eb3-b1b9-02a9d07bb917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e808668-90c7-4ec0-b28d-76cdc36a11b5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a5ac9d-a0de-4404-b9f5-c58ba0ce9d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b2d89b-891a-4b3e-92e9-82c2c262be20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259895f7-2112-45cb-a3c8-bfe57553558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8c271b-961a-49f5-a9f7-40a238a5a0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b97240-fc26-4c74-9de1-b3b4634f8e30",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c913c0-e23e-4d34-b121-e86606c9b24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b38d39f-d399-4745-82fb-16127678caf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caf887b-e6d5-459a-96cf-b384a77f5442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e27c5f6-5e44-49de-8acd-0826aef92557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9924527f-a0e9-4e30-b890-db15ed26fe0a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29690685-38d8-429b-b0bc-2f47ba4cd135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e0c2da-097f-407b-ae59-e655196a327d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30758d1-6aca-4f71-95f0-5bf5b380e256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5129be48-4755-4e82-a4c6-3951eb80ef73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a032e23-9b66-43c8-ace2-81c544b7b994",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d67a816-17a0-49f5-b677-24d421c4d79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406e9733-52b0-4a76-90ad-3fd1c71d09b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a060a69-a31f-4e2f-8e7c-69d0760ffbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26a34a2a-7b3b-429d-8185-ece0839e8457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc717e3-6d25-4773-ba33-642f40f55573",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a83c42-241b-4876-ae98-7c07527ffb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462211a2-e203-457a-9b56-8bc8f2347adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a331a1-0583-4bd1-b2dc-cce546816681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "796b9a98-9bde-4a65-8cca-83b0730b845d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adda53ec-0c8e-4dcb-a7fb-9d36edeb3257",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af72451-3a57-4228-9b9e-6d8dae27b92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57b1f8b-f1cf-4050-b3b4-3f95c705486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f9cc94-4850-496f-ac15-b6ab9e835439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef09aefb-a9e3-4c8d-b3f0-0fb921e1943a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4db32f-8292-413b-afca-18070a46054a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4daf0b95-347c-4258-a807-bdbfd411bf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b99f88-9054-4888-8467-f967aa034695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a72608-845c-4f47-823b-199259e067d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c51885-c8fe-492a-9584-7c2713f21330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae40b4c-3d97-4f37-a220-2d9d46aadff6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c40b337-77e4-4ffa-bc28-89cca613ccca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea9560a-e134-4ad6-bb2f-521bcd7466dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7783c69-3a2f-4893-91be-922ceb447da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "008aeb62-90e0-44b4-ae0c-b742dc27968a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e586b23-3433-4d6e-bb79-1b6fa538287c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f752ab-9803-4636-a20f-50de3aad5384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572bd2d0-2328-4d6d-8128-223db520d0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad9d22d-dbf5-41cc-b975-9a9a8c80c71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59dc1aae-8b6d-412b-a59b-625a98e15a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e46da4-8cb0-4d31-8b61-f7aca4b387f1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a6ffbd-3025-4344-aa34-eee8ae534734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580fe22c-f36e-4617-9d89-5a2d7963fcca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a33024-f81e-47a4-bdd3-4a021c9611a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd07ae26-a84b-4a49-aaf7-0d127c6a337f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d9d49e-d160-47ea-80e3-005a7f963a72",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5dc187-baee-43dd-96be-f6e2a235f888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28590371-f88a-4c63-82f0-8c4010421a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bb6ea5-af69-4848-91a4-c322fa442902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f82e0b-fde3-4c3c-8c71-9d91335f489d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d354f9e9-46b4-4415-b5fc-4eb227db0265",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36a532-2aa9-495e-8f96-99156e4460aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b6c3dc-8700-431b-9e93-649ceb15f9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5cdec8-bdfb-42f3-adb3-a6f90ad6cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a65ba607-9689-4574-8e94-f09088ce9ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3190bb9-dfc7-4ba0-8c76-d386d923e3b4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9883236-87ec-4c24-867f-ae6c3fce3166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4ee516-9a57-4e08-8f09-cb5884523a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2442a9-27d0-46d3-bef6-3da00f126a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb014b0a-ba02-46fa-a0c1-37b30389ecd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375c586a-9f15-4318-b937-1a064d984e4b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8ace2c-d6ae-4344-9911-26e4de1e744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567577f4-0304-429a-b30b-7f549fd32523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cba4e3-e8cd-4550-9d73-069216075c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f6a6a7-cf02-4b95-9d7e-0c999ffc544d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6c11a2-d5eb-41f8-be27-78b6e5584ea6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe2482c-bfe6-4b78-a145-14ed19d1b25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad64b4a8-a4f4-4911-8426-d2e085625d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82094af0-84b1-41cb-a58c-1c21700172dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c601521-9708-4d56-b4ca-73cec076b5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d42dc6d-9205-4354-bcb3-638488cfdf5c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fe18c9-1f27-480b-82f2-c956674614f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c163ed-eb2a-4d18-88e6-a40e1c51e62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297f01eb-a440-4251-a235-467a6f0dd6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "014aaf35-af1a-459d-bc56-b71e710388d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c18555-ffd4-406f-9eab-58937bbfd43d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d7bd79-7831-41a3-8339-263273e335cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259312ff-3ecd-4aef-9f83-4924b13d8c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1044f63b-ef45-4092-8126-7428046eec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5945d9-38cb-4674-82da-1d3ec6761283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f320f52-ebd3-4a3e-b6a7-22d435f21ae7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2061ee2e-ebe9-441e-a495-cb20e5eb8522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4861b5ec-1aff-42f9-9874-773783d414e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b26985e-6f02-454e-bd9b-34a409d0aada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c37e2673-1fc0-40aa-9734-afcc01bb5626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef9a280-8fb8-4da3-8ffd-e004cb920f8b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4584c802-accf-4408-83de-884867858c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e4c0d9bd-aafe-4020-8348-4c25b5ae0422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c101f0-8c2c-4ef0-84b6-e7c4f3f49fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e17bef8-d90d-47aa-bc7e-7743b06e2f38"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dd93f0d6-5376-4a4c-bb35-e083d214e8a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c29308af-30a7-4c13-8217-f748df1cfc4e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a417e5-37ec-41da-a954-1aa0a7502ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b72389ce-bcc7-4c97-828a-b2487f993c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb120b9e-5c20-4de5-9b38-73a08101cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61530445-60ac-43a1-9e42-2aa73fab6800"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "332583a3-65a4-48dd-a7fe-22ce56db96ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f94bcb5-6585-441d-911f-63d79ee62983"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5957d08-a33d-460d-aba0-351348d590bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a120fc8-de7a-454c-b6d6-b197cefec362"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "496c5bb7-c569-4a9c-8a0f-f3bfc10aef15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45316170-f0d1-4a78-8400-490f167d16d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0991c361-a963-4118-ac97-f76ab705c31b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa1317ff-58af-4109-bbfd-c032ee60a0ed"
                }
              }
            ]
          },
          {
            "id": "c78f00a0-4dfb-4930-abae-dcbfe047a891",
            "name": "Positive Testing",
            "item": [
              {
                "id": "437a2f49-ab82-4ee9-91c8-69dea86971f4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "795b5837-6864-4e71-a615-188225038d64",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fa7dfb-5d81-4e00-889c-68d4be02029d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "369586e6-0308-4875-bfbf-b986b3efbf13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fc3182-073d-4a29-adad-637aef8d542d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69ced3e-dc3a-44f3-a078-4f285386d7f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0dbadc01-f75f-443c-9c2d-15a9e131192d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "598bcd12-0de2-4702-a8a2-33dd6ca763a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5674caee-8c56-40a2-98e6-85e96369086a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c9276ec-6028-42bf-b4cc-c8772a2f2810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b1a5625-9db9-4e38-964a-6acead999486"
                    }
                  }
                ]
              },
              {
                "id": "68cee43b-418f-4a97-914f-6a20e82406c3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44c3f396-b9eb-4a7b-9211-bfcf0dde2208",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b88bb3e7-131b-4701-a8d0-0d0c87d78fbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "152ce644-1ba3-4ef6-b296-b57b2b2b512f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45d04c9d-8701-4536-9b93-0f0e38a51ceb"
                    }
                  }
                ]
              },
              {
                "id": "2003a0e3-f066-4e8f-b1b1-ecd0419ba0aa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14e394fa-e3ce-49b3-8a52-ba1fa8876898",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4b54db3-9d53-47a8-8d59-1e627c8862cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b736196-48cc-454c-bf49-2d4807affa29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9650369-3c2f-49e0-b1f9-f30cdb337548"
                    }
                  }
                ]
              },
              {
                "id": "ef4a8873-ac25-4ddd-a1d5-4234096adffa",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a3e8a57-0596-4c96-a9b8-b6ab056000eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "feb27914-6942-4d01-bd0d-2f2eb546ad0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16e1eb33-a14e-4eed-a1f3-38338c94a585",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c4dfc904-4a5e-4aef-a153-0c41627b2971"
                    }
                  }
                ]
              },
              {
                "id": "cb65ab7b-feac-43bf-a829-111cc7f83677",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5771eb73-4618-43b6-b01f-96856f14b65d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30b34828-4795-431a-8352-49245b0c78f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aca8895-891b-4cf3-87ef-ac066d7c2624",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "af9dec51-8789-4603-89bb-6c594310e277"
                    }
                  }
                ]
              },
              {
                "id": "309e37dd-7ced-4f74-b7e0-805f2ca1a428",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30702197-f652-4f5f-acfa-6a065b2c608f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9f4a542-ea43-4697-8bf4-ddb27212e53d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdd0f866-6b79-434f-9a35-17537a034b8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e216619f-0440-442d-b2e8-64c4034b7a12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27aaabd1-5da0-4923-8069-b22c575d5160",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06c99cea-1ab7-4d31-a85f-59f616ffdd8c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0156f77d-4260-41fb-8ced-b6584241238d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfde1630-eabc-450a-a1d2-436129d874b4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68732a9e-4eca-4831-b036-a0c567e1fe7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1a441129-3c7b-4965-b2af-4bc321ec08db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "342b0bf0-9e39-428c-96ac-1c769c3e249e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4626b51-3ffa-4052-9bd6-a33269921149"
            }
          }
        ]
      },
      {
        "id": "f4ca8c8b-9f94-401e-9407-e147f80f4a6a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "81d400eb-eb46-4765-9d74-2e59bb88592d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19d06bd2-3faf-4d3d-8c27-9b44e138a090",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04ec56d9-5242-49cd-a84f-02b731815743",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea3e68d-ea5b-48d6-a6fd-9fa0186119f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb6fd91-6a9a-403b-83e9-5c0b57a8fee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ef6f18-c3be-405a-b2d9-3f04586025ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d668a6c-ce10-452f-9f10-b8130da5520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e3601e-7fac-460a-bf9c-581e7e3f3573",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd30466-2c5e-4d22-923b-d023cccb9db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e6d7ae-3fbf-4c4d-bb37-83acf3a7837e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eb049f-4f9b-427f-ab68-a6eee45f425f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "049bbcbe-26f6-476f-ad22-8a1b1fcf9abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee76432c-0ce2-440b-a70e-c318a6b8896c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2f38e7-2b59-49d8-9a20-c76cf31beddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4d8e4b-1c7b-4017-b3be-7af5b34c3732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbd84d1-fb59-4f17-a247-f0b46e78ac05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bb8027-6b82-48f6-a29c-925396e15022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fb6886-38fa-4a06-9119-6bc58084574d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b585b29-81a1-43fe-9cd6-1b2cb11d19f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75dea56a-a94e-4ce1-bf3c-6c9dceeb377e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45c6d69-6a1d-4d8b-ab12-7a5743916d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7581e590-4f4f-455f-a68c-ec58d08ca02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1254bd-b00c-47d7-94a1-8bd5a68c59f8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a2aafa-74b7-4bc9-b7d2-6cdd896bdc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8dd4e7-357f-4b84-853d-fa3f29fb5182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34776fc-772e-466c-b87b-470e03a0b875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e13a30-4e92-4d4c-85c1-e51b302259d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b97b40-b8db-4f2e-b41f-090cc7dcbf1f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fd69ac-5677-4ccd-ad2a-44b7ca281d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7f1afb-8e59-4243-b0b7-15f7428c27be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4708e8cc-b303-4adc-8c5b-3f834d03149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "755bc68e-ed71-43b4-b261-6d1e38f5d235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbc26d9-704e-4ffa-9667-0ebcad3985aa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc434ed-dc8a-4fe0-9ccd-be56b2706f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269ed378-b2cb-42b2-bdde-027e66cc9ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e767aa55-092f-4150-bf04-d0b5ad45659d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5320fffe-91da-41bc-833f-08f1a10dc421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064b3c2b-427d-4762-936f-5750d84c0785",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e19cf8-f25b-4d5b-b1c0-4902fb92161e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb856802-bc66-4ba7-80ea-f22f1484414d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d0b6d8-38b0-45e1-ac5e-6f1243f5ab53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1418d7-70cc-4507-ae79-a3aec0758d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b461a15d-bf42-47b2-a7dc-2abf2d38c041",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b32eac-75e9-45d2-88af-784d1cf90f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef63bd13-495f-4ab4-9336-2e58c762c4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302ec315-87c6-480b-9705-5a90e795076a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6176fb7-8a58-4cc4-9b57-2e9475b046ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8439ace7-736b-4a03-bd8c-3c2dd24f38fc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d60bbb1-ef98-40d9-9b7e-f91bd749648d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b287a4-a678-4782-b0d7-268127db3a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b2f405-63a0-43fd-9274-61b72d01faed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7dc1fb-4742-4714-b879-7ac4cdc93ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a41485f-12b4-477a-8bd6-c568ce7d4eb0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36362a0-36c0-442e-be9a-d239fd4fc74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a8e118-0e15-44d3-a54c-d8c6b1dd5699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8290622-64d2-409c-983e-c63197f28d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "04544901-3d4d-49f5-9f11-03d71f87cf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aab37bc-a096-4d22-97c3-dc5cff23c78f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c4894c-74dc-4434-bfe8-d435c3ee9e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17e5cc7-7df4-4aa4-91d9-c5ab26569a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4771b51f-baaf-4616-b0fa-f057ff24eee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91fe6e7c-bf69-48d7-babf-3f63c79af846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a16ca49-252b-4885-a5ea-bf571ab03143",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1b1db7-d919-4a11-9ea3-826c8c171bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896cf4d2-c59f-45d5-bce1-58a49aeefcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f76b3c8-5428-4653-ab2f-3dc794cd89fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c90ad28e-e2a2-485c-8933-c95edb80f083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13675ec7-089d-4c02-9f2e-35da124d7646",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20598ffe-ea40-4036-a3a0-222a22872846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c4afb4-9bdb-4401-8359-d87a16a83bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ec213-1392-4316-97ce-93919d4b7893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4ff257-e5fd-4d07-9d43-0f852fc0fdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a481cd13-83d8-4f8a-af51-0d1d19ad976f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3078d967-d774-46be-8bf9-12aaeae5d652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc93544-bc53-4751-8dd9-c4b02c4f7a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d5d6a4-7105-4255-af0d-857a34bd3ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "47b0e8a7-0945-407c-9e8f-0556f2cbc2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15290da1-d274-4f8a-bef4-7fe78c7eebbf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c985c673-f197-47f7-8848-f35ef05b5303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93252295-1110-4040-b76f-6f835e096bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f60fad-833c-415e-ad45-dea4487fe86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "be88f0f8-f672-4bae-a395-6d4e8151566b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f74dc3-fb47-410b-8d7d-6d9dffc17ca5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc65f41-66c5-481d-84ec-47b1a73eec4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4029257f-5bb3-4b39-b053-1effd5659612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a173c407-cc8c-4df4-8595-a185618a5a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f9819c-5de1-4fa8-ad71-879f96ddc6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b7d334-2e25-4bd2-987d-2a804e8d60b3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ef90b7-3d0f-4497-8a80-c116fc457f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2ef106-9d8a-4288-acaa-e4967358a52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985b55d6-2d90-4686-934c-3c8bb6bc4417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4b576c-98db-4a5f-82f6-5089339bd6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0805b970-0ee1-4a1b-a9cc-4ffc3ed04b72",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a167cc-b530-4b8f-9d7a-6c69fa169836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf69dd5c-0bd5-4039-9440-d0b967fd0887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22091e2a-9705-4e2a-beb8-528e921d9e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0451d58d-56df-4f46-8968-0808f217433c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d4f0d-3d1b-49f4-b9bc-3b2ec6b608ed",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f010750-1b0b-4102-a2a3-08f5ccb9415f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cc8bff-3a6a-4acc-ace1-61f276c17209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65720fce-d0ff-4932-9e53-4f1f4cb1fc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb842d7a-9f0a-4b28-8873-85f8a71fee04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f0648c-ae2c-402a-b089-a6e8a904c0c2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2633223-8be8-4192-b82d-a1d1dcabed86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74142186-2ed2-4f49-bad1-9072ce6722d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b97ae8b-cf83-41c7-a2b1-5a8c8a268c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ed7eda-b518-455c-a910-aca3910c74b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2231643-cfe5-426f-9cc4-723de3afb03e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450740e4-81c8-4224-9b2e-21c1ea547851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40565904-c555-4fe0-bcfd-c6293c9e9a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9020db17-1a43-47d9-8217-da8c1222b73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "442fa908-4a0d-449b-85c4-784645a17d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182508b4-ccc5-4926-ae9b-1236337f811b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4847cd-2f64-447d-a73d-b1576fabe194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394f9dcb-d806-4c76-b41e-addfe15194e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21520905-74f7-4066-bf0f-de00f84e8380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f98285-4e39-45c4-aef8-06f134008b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bdf96d-8dc6-4a5a-a246-f5f96fc1fbaa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e957c36-51fb-4b71-ba48-1f2f3e21eae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fe94db-6103-4eed-81cb-7fae5f4f9cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f84442-c924-419d-8492-8aba98548179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8f68aa-a4d3-4ca4-a392-49c8b707b6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b56836-7288-46ae-a2f1-ce72cff3161d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836f5468-7493-4443-813b-388cf9c162a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8edefc-2be1-4ca3-b0fa-e165cd21886e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0003335b-6828-410a-8788-3b16d01887d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3cea9e5-984f-468a-bd5e-b2a0100a7adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da30effe-16b2-4154-8cd2-c3b9f078e059",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f474b8-b797-48cc-bee9-fd98ddde736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08241bd-7c8d-42f3-90ba-ff439052da9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1a046f-8703-4f31-a585-7e8e2463ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e00b844-80ad-4421-83a6-cf988d3aaf1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683e515e-6615-43b6-9167-48254b0ed1e5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679205e0-29a5-4b7a-9998-e54d55f9c132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1132ce-c9fd-48e7-acf5-a8cd7a6f3158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5788605-b7d7-4832-b2fd-60993ef5638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e758fec-d06f-4d11-8cb4-85aaa228510f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae23ba0-baf5-44b6-8076-2ab26cde11f1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26542ad1-db76-4e19-ac36-ccaaf791ec79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96ce647-e4ae-469e-916b-c5b89ae1c8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f28e0c9-ed27-407e-a7e7-271ac523c1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "456ef355-8b9d-4dd0-943b-8dc790d1d9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8001e1-a6ab-49cc-9255-72147981a583",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d9cffa-a915-4c65-83e1-8f7a3d71a32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a14b44d-286f-4398-9516-b17e9426d4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f278cc9f-5e6c-4a28-bd9a-0567547c2569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43c8a3ac-2e5e-4d9a-8d85-42862f09fdf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa3512a-026a-47b7-9598-ca04e116d96d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b336a4f-1fb0-4b06-a1eb-d7751a0acdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabe7fab-aee0-4e3a-ba0e-16522d9e3393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b011b937-9f54-46c8-af1f-04289b63307d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d62403d-c308-4733-a6fc-186b230fe5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f16fd58-2911-4cad-9dac-e4bae08a23d6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ec3202-d80d-4861-aed5-8c9fbbfc3b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d7843d-588c-4c4d-88ee-bb8a0ae8c9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b84612-d208-43f6-b2b1-f90e773054c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75f1fde8-aef3-408b-abe8-8986417daa62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dda81e-22e6-4e7c-bb71-aa7cb22f1adb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f034833-0041-4128-9a4a-3c1f727c25bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b886752d-71d5-4091-89e0-90c954966d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1068b92b-3d33-4165-9501-ebff1ad22ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad124c5-656e-49b9-b25a-1e8d93620b97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af474400-ad31-4bac-bc79-617ba365e311",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5185989-dce7-4bb6-bc8c-a0d6f6ba2141",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbe1dc1-6eb6-4039-8d77-bed001e4aacb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2c55bfc3-f9c3-4c0a-9293-8c5497607382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341c78e2-6406-4fbc-be3e-dc560b854914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "def655cd-5591-4f7f-8e55-7ac68201179a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da084381-ce5b-401d-b480-d09473a0710d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89cb5d12-b02b-442b-925c-d6074029f83c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a57d79f9-89c1-4b10-a370-f7e8477ad27c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bde2e273-7281-4565-9f81-85f02bb43c17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4c6e980-f14a-4cae-a627-e69bd906c706",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95b87b18-11f0-4394-9d87-a6908b6d5eb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44a5dfc6-a776-4d66-afb8-57cbc4479bfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22683cb0-e544-4365-b864-2ce9984798b7"
            }
          }
        ]
      },
      {
        "id": "5ff0aedf-2f23-40e8-91b1-609e43c29c89",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "df683eeb-d2f2-4594-835c-3b8481ab1829",
            "name": "Negative Testing",
            "item": [
              {
                "id": "566bf4eb-3ecc-47be-90d7-4b0ca326e9ca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c41fd4c-8866-4971-887a-454e8541e145",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f649fa0-c509-43f3-8dd5-90effa89f8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46b4f69-d166-4a35-a25b-aef3be5373a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386cee80-ddd4-49f9-8697-fbcf5abc739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a350906-8da7-4b12-a9dc-8d63020729df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2745020-1c1b-4b1d-afa0-ae0f368a0cf2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d999450-93f3-4201-9889-ce01a23f5432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fd8864-ede3-48a4-a870-8423df82c5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e325ab6-5afc-49fc-9519-0a886022ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a725732-6aba-4e42-ae00-3cab5f4dc61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4e18ca-95f6-4beb-b72a-563c673e726c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730f0474-613e-4386-9c1b-494781e4ace4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb9a121-c7c0-44ee-bf58-200e47bda878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009d32c2-28ea-4250-b14e-b108f338bacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47bbc2ab-f47d-4826-b0e1-61f37301c2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8091dee8-f2c2-4b04-b08e-ef914347d9b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71d715a-9695-402d-aeca-66d2630f9e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aabf279-6c2d-4cbb-9c9d-e180887e86b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df69a83-3c35-438a-b0b6-cd150f018f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a01d99-8816-4049-810d-51a713fb0b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce78bf9-b750-4f43-8f3f-5e23bfb0ac3b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f57720f-79eb-4d68-a6c0-8ff60ef09329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5943c5-9ffc-45ff-bdea-8a3a04c65c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2700c2-f940-4b1a-97fd-83ebb1e4c973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9864a3c5-39f1-4d5f-8133-ebaab4e05c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe880c8-2848-4e11-bab4-7bf863c8611b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49a2dbc-32cd-4939-ae7e-a06049abb7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541c44e5-e3b8-4236-a57c-e51346d9fb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ce32e7-6296-414c-b97c-ce580fb7c7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7269446-1849-49a9-8039-d793e4e8d142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61224fd0-7e6a-4034-ac78-7c32b8d0ffa3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67aca566-2a90-4fea-a6b3-5b77f874e93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0dae9d-7327-4ba4-a233-4c242e4dfbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd78a68-b72f-4b8f-8ff6-6fc3d9b92c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eceb5999-0b56-4ed1-afd5-dbef05ed9764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f3e2cb-923d-4c1d-aead-696b2d1a858f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23831c8-19b8-41f2-80de-a797d4e83e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1c372f-cdee-460d-80f2-47385f4ca02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016d3eeb-4423-4c19-bb32-3d96073a3cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f38b5f2-59a3-40fe-8085-7c2977b67280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b93ac9-70de-4439-bf54-475a09fc5c1a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0956d5f1-287d-4218-ab91-74d2d9e456a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83153b01-cf73-442d-ae99-f262b659d8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945acbc0-f24a-4092-867f-ee7cfd27697c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ab7968-7a46-43e5-a350-7d2a2e862308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62b0770-7dca-4eed-ac49-815d4289b2d4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad3749c-3a19-4543-9b90-102de95b392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27020eb1-ef03-4599-8000-d59a19ccf559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fdbb0c-a7c1-442b-af46-0a4294699a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54ff82fa-0618-4c5a-93a9-32198afb057d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645360e3-07b4-4274-b90d-e53d38eb9043",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8505466d-bee7-43ef-8460-e140ba9a085b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3492ed-79b8-4437-a7fc-d3d8a8b77cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ac6908-7629-45de-8096-13ca14875296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38aae104-af3f-47dd-b236-d0c1d9a0f338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924e9ecb-ad69-4dd4-a5cc-62b758d71c32",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a20bc50-fa36-4e2a-9698-5531ec0b9d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808eef96-dd64-4210-91aa-09aa8791525a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1f0cc1-8d2d-4338-a6e7-d0640d785e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c732ba02-9fe9-4382-a5dc-1d1fdb52c7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62beb819-81cf-4369-b3e7-be3321cdee0b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeeb576-79f7-4638-a376-0284473971fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467c208d-e190-4eb8-ba4e-c28d53c44d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac9b761-c30f-4673-ab7c-dcb6c940277e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c09ce2a6-2f42-441b-9ff3-850a816e5289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db70a78-8e5c-4a34-bc19-a182d033cdbc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305a5807-5641-4e92-9118-299ecaf66c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1c7087-860b-419e-bc53-cfbb3a1f0de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e0f8d7-cf24-4a8a-8334-1a0e59d18f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8138406-1590-4555-a7ea-b8c263cbfb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf5b878-cd56-47bb-a5ac-3f342b1ad6ea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f423c87e-b82f-41b6-81bc-d3b1927f3f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a20725-aedd-41d8-b070-7f27c5edea77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10a130-a611-4feb-b6ca-3ad853311453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "20972443-567e-4e77-897d-4f0612dbc93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c29e940-14da-4674-a28e-de03e1b89459",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f9ff42-73db-4f5c-9009-07236bf5e798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562a9ee0-5f95-43a5-a266-ae8a5dcf085f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c583ca20-91d2-458f-8186-2c521051e951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4340c9ab-07a1-4365-b04c-8f5e12aeda96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37efe49f-e1f1-4a93-a831-9b8b109cb1ca",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5230cbe8-06f5-4f5d-8d40-c96890d54188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3284e79-7fff-4129-aba6-72883798492b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339d1b27-fe1c-4b3d-a2bd-dbcc96ea726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f280ccea-de95-4b7f-9a05-aa72f23cb116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cbc0aa-3588-439a-8f95-d2ff25cf8919",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2ac751-ca8e-4823-9e53-7697b104a808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e004b92b-558d-435d-84d6-ddc199814fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999c4da3-3674-4367-a8de-559de29f174a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "19c2bb76-cdf4-4331-b4fc-b13ff41ea771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d151f63d-a322-4fdd-9fc8-2dc980512ddf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69217ad-d5e4-4efc-be48-4234d6c01a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33790f4e-9508-4f25-8adb-2766f9d426b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54d48f0-1e3b-4ee6-9ab9-5ea2d37e9a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2716c931-ffeb-4a23-974b-0865d6a5ac34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dcbcec-ecdc-4f0c-b8b4-dc250abc3bd4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a28065-fbe8-4758-be27-5b933db7284d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a399b91-4836-43fa-8b07-66de445ecba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea997851-c478-43af-993d-1ff4b33a9611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1462f0f1-af06-45bf-8ac7-571f018e60a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c81347e-9d86-48d4-bf61-93799bd9a673",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f232c8-0486-4698-b0d6-92b9501cc379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba0fd5d-675b-437a-a249-27247cb71b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37af5dac-8cee-489c-b7ee-40361cc38310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "593a08eb-ba11-4546-8689-9c57491141b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3460202-752e-4d9e-aecd-af0fdba6bcdd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839e6278-da0a-408c-8c11-242a12219876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9e5043-f355-48ff-b243-25564b8a1695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7eb3682-28b4-4747-8641-f84be19cafcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c0811c-85bf-4e1b-9565-847b48a43056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae9e73-43f7-4ba4-8b6b-2805a52034e5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64436147-5085-4945-8888-dad01799d432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21779d1-03f3-4873-a6e6-f698068627ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ef012c-6416-4f88-a4ce-1155491f85b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "063f7137-04ab-4f65-bc1c-24b573f00e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa48337f-0d71-4784-bdad-914f004e30fa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cc7872-50f5-4bd5-8802-842ebd22a7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5c1343-1f80-46c1-9c13-71abb262a460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496cd20d-8e64-47a7-a4b9-79c0d05c1d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa4e495a-51eb-4e8d-9369-d944cc9f9735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5723a592-e9d9-48a1-94e7-7bf7069e7f6f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4db8f76-033b-4f33-ad3f-034e5c90d39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc1006c-5369-4ea0-bded-c5f837a26e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ede496-6e46-4861-a077-d080f7c83dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aacfc31-b90a-4680-82c6-c423f69183f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4117364e-1491-430c-8afc-f3ffed2263d2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992cc075-304e-45a1-a0dc-16f14bdc3dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61957860-279d-49d3-b106-1747d8964762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71da6ca1-f84b-49ef-866d-b77bfe2ca9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e34166-464b-4516-a254-69886b98aaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6e189d-4514-4a0e-923f-96087064c721",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b4a597-12bf-4372-895f-78a407eccaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d86340-ef50-4696-871c-a801f1c07b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a870d3-6cf2-4475-88c7-08a83763866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "165410ed-0a48-43bf-8c4b-c652844dc66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9044f8af-d77c-4180-b3bd-eca3c4dc48e0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea791c5-e6e6-4f0a-9488-ce8520c7876e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23853dd5-c13e-4e59-b21c-4cd91dbbff21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712a69d4-572d-4cdc-9936-6996a6a21f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21af74a1-6862-4d97-94c3-95b486489109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0496c6-4c8b-4476-904d-f147fad80607",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e53787-0520-4a11-98f5-fa014949b7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3011a5f5-8cef-4aaa-99db-0fa7567d404a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a80236b-fa0f-442c-a467-73a58f83d504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbde3790-1cd2-4b65-8bc8-a5cb8ed4126c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2e5eae-877a-4d40-ae0c-13c32aa73656",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34ec07f-068b-4763-8f71-36f0ecc126b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc622bd-33a2-4542-b23d-aa9db365b146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06d4b0f-ebd5-4a2e-ba6b-39425034f87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86fd3a52-dbc5-4931-b4db-73d8430995f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53d7492-1807-4c8e-b758-953da8bacbf0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b27fce5-e858-444b-a5b0-c8eb22a213f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ef8bbd-bd54-46fa-b6ce-0f01618dc24b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88280bf0-1b5d-4902-82cc-5d2e3dc6c46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73637bf3-d98d-439b-bd67-af951154b629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c988708-4ec7-40aa-8439-43cf56b78373",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4e329d-d763-4018-9b82-b1e38ec35fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e935f4-73fe-4ceb-95e2-3380119c91a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4b981f-0733-42c2-ad60-978ea7bef44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53707d93-8d07-41a7-9aaa-14b362512449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6208efb-58d3-4225-94e0-ba6611cf03ab",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7432e1-f2c0-4211-b254-4cb2bff94a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb69ee8-9883-48f0-8b6a-1ac811aa217b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10739f59-0797-44c2-82e5-40f18c820fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "487e6b8e-c183-4d05-9f3e-5f07fd6b091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154c03b4-24b4-4d7f-9fc0-8b24c7abb22f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedba824-5048-49cb-b48d-3c474ae29db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa50714-af80-44e9-aac6-00d349c8d10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09461bc2-9799-40bc-aec7-084172d800bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c32d59d8-be4f-4655-a9ea-f5da19f10031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda6cfed-f592-4010-bace-4a9e3b90cbcc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e2a383-7f0b-4c37-ad8b-facbdb4446d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ebe962-4813-4f6d-a6e3-028600024642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf5850b-2593-44db-9cc6-8e836eddeaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16dc6f5a-47f0-411a-998b-2479053e4c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036beb43-ca27-443b-b4b4-e728096f8dc0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb613d00-0775-4d0c-b857-2cea95215412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e2c8f8-3a83-4fd3-9169-3bd0f8073485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfe4102-006e-4fc1-ac52-24a044012c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5be2626e-3a70-4c06-b999-6849f161d6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fc2a73-9a18-4844-949a-fa4d9d97980b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936907f8-bffd-4546-a651-6f6bbca9c385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6241d0f-b530-4aae-b85f-2d76b0262dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e93024-7d82-4063-a052-837ca37de74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6a8f8a-0b0e-466d-9f0a-f8ead48e95aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3185e3c7-1218-4992-bd28-b619777dfec0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30563a8e-0aed-4700-8b8b-9fb1ee3838bb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a609308-ae91-482b-81eb-92d954f54c43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f71cef4a-8b46-43b9-9cd9-231fe1d76a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c8d12a-e2c2-40c3-94a8-af3cbf9939a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8711df73-0f6a-4b8d-9154-b26916617239"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbba7491-1cfd-4432-8e0f-079944b29133",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68987b75-608d-4470-962c-ea770d09e123"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14791ca7-97fe-4544-ba8a-9c437d8d9f73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e0f4338-0bdb-47e8-9a18-97b9b52cce42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "672d3a66-2d28-4825-bd5a-c21a41eafa83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "219bef27-617b-4b72-8f72-6a118504ea35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9813a4fd-ce89-4a91-8b6e-d91336b9d22e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25843878-e230-4a8d-8b3b-76f810db7bca"
            }
          }
        ]
      },
      {
        "id": "504cd09d-291f-43b5-85a3-497b8e508f09",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eaa6d894-850b-4493-9ddd-6a02a9820062",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db125bc4-9dfa-41e1-a460-87e1aa352961",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f642a321-5761-419e-8018-d25dc9aeefb1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c79de26-5829-48a4-b08e-f6cb2625d765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35c3d33-b14b-476c-9a38-0d75b1da8212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42632df4-ea78-470e-89ce-809b110bb8b3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ed71a1-4acb-46e8-8280-b7f5626b64ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01735876-2bae-44c9-b21d-3b3ba71d2eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163c2e12-2082-49de-9f97-876fe2410d02",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496dd42b-c264-44bc-a6c8-a9354c4be9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e17dad9-e91e-46bd-b465-706fdca3e11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d56f57-3ef3-4c38-a54f-695236146bdc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f2ca2e-2fb7-4bac-ad14-f9ea0b8d0157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2ed7cd-a3a2-4758-ba77-aaa4fc9ffd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452ae63e-ed10-442a-a455-d23f6fd5be8a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4324d7d-0aff-4fe2-a1b9-b391a335f16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b616fbfa-180c-4540-ac1c-a8931cc34729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7d938f-05af-47e4-b330-75879de35e2a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b584cfe-a245-483b-b732-1d580f6e63e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f7fb11-a30c-4a1f-ba7d-626d3a58c05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b4136a-b212-408b-80b1-b77851cebcf4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcba2bd-cc61-47f5-b295-a24623a8cc2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd653bc6-3b92-4d03-b647-240fc767fd2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1874990-99c7-4f87-96fd-0f8698747834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09d8448-bccf-4233-9a36-78c4f9329571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6cb4ff-7aed-49ea-b3ec-e4b4dcd0934e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5df5ee-7c56-47fd-a338-3870b682e4fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5348e3-b6c2-4f4b-b7bb-79984e49c6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1194120-4811-4903-8974-c6dd2855c680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88963661-119b-413c-9fcc-139d722c4795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26dd5c3-6195-4648-b509-6de2609986e3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d410d4-23e4-483b-b772-cfce84b42052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "119c5d36-0735-42c1-8e2c-d8cf0177835e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de01f90d-aa00-4563-99e1-d49e89495fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fd5c05-7319-4eb6-b5fb-b23791495ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51637867-9138-4c16-8dfd-e5d74642c231",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646f5bfe-a609-48b4-977a-71eaaa974ba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8ecc28-82a1-4bfb-a0cb-b407f1cba5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c137053-1f2f-4df9-a93c-44069f609761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e09b787-d273-4b80-8c3a-c73df8149f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10fe4f0-443e-4795-8bc1-ed266b6b7cad",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedf128f-6179-4b84-81c7-a545e4613555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a7fe19-f3a4-4857-8b42-a85072f58842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08145428-9229-4373-b82d-71a41b2270f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f554a65d-f2f2-4890-9ae2-636a71518543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a208ce46-83c3-47ad-98eb-d802bf31a810",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33671e4-ac88-43e9-a545-b734bf33e809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b79f263-eadb-445c-8067-0a93a56e8da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f0b5ab-b4b3-4140-8bbb-2881d3800a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb14bc3-4af8-48e3-992f-69baa3a83803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b643be59-1988-42a7-8bb1-f6a7360eedca",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b066d4b-c8ca-4b91-83ab-e30b06f783ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b46438-522d-4e94-a4fe-8dffad9819d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c092e20-5fb6-453f-9ed0-e7e5189114c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee186e03-b456-43fa-894b-2e2c74efd4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4424c9ab-f141-4a1b-9939-dd32a0c89098",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeba2d1-16ef-4596-9655-a2548ae3985c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e829d26a-9567-440d-9c65-c352487c77fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b465a01-d16f-4d16-a503-a6b2febf697a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26289d31-6590-4ab8-a2b4-7e04651cb1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8af4de-e06c-4c75-82ec-0cc74ee05e9c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe7ec09-7c3e-4ceb-b04b-608e7cbadbba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465a4972-a93a-422f-ad01-fad79e9dcb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154a38e3-0f4b-44eb-aef5-90930292e24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec88b87-3196-4b91-bef8-968d45e4053c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22fe7c2-5fb3-41da-a984-1204c322ab11",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288aa3ab-1bb9-4f3c-bbe3-66ed2df2e1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60cef5b-5063-4112-b627-a9d0f1664438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8141776e-6606-4455-a13e-546ca31b27d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efca5fda-f2ea-4248-9acf-48674671a770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418ba718-bddf-45b4-a863-aed660e77022",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6de739-e9ec-448a-a456-1e4de667059a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12500f98-5cc8-4a8b-9126-b0579d1fde05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2988b991-2834-42da-9289-cbdc04abbca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f25d7d-73ad-48c5-b24f-29d8605d0f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365e8723-bc3c-4e2f-b194-811ba1a1d0bc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6205cf0c-4fc6-47d8-a9db-f102e2bfc181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3caa74d5-e9c3-4148-9a10-02217fe84393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e02ba31-adcc-4df9-bb25-eb6542ba5bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cc0b14-66c4-4eb3-8a77-53cbe55313df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3fd861-6642-49d7-bd09-27ce13d9e254",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2214a9cf-f7a1-48c2-8d55-16671411e267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490b69ba-28d4-4c9d-9d7c-6f9550e0f961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf0b99a-9561-4a15-8f2e-c1fd37da4eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1960146a-f323-4628-90bb-d76b0d14f3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60501c0-66b7-4d6a-b0e5-843ed9e9a9c6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5f23eb-ccf3-4cf5-84a8-51c88c4beca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b95ab2-7a1b-4efc-88a5-b9dde1ceb572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9752f1c5-06d9-413f-b1a5-7a9153574cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1f3662-1aeb-4888-879d-ea6a8a9d7228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647c4978-8cb6-47fa-a1d6-507920186c0c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19a4678-a78f-40af-b996-4651b1f4a966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1aae126-7a65-4842-941a-6fe538c5bfce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3a987f-6a3c-4de2-858c-0715555a32af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ca5ecc-b24b-42d4-bc2e-373b1a03a70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4caa22a-b7a5-4f9c-991b-673eb0c84755",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0809710-27fc-4745-8afe-6f358cf1920a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290fddc0-3271-443e-b6ff-6bd210c17b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3510f8b0-b36e-4e24-b6c1-6811661b472c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7d2a0c-c780-4249-b354-525c5b2cf471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d534b5bf-4f8b-4e49-b36f-d31c460a8751",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc0f31f-9dd4-4031-bcc9-02c2d1f86107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c71395-9f89-419b-8c4c-354c072bb985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960467c-2e5c-4f6f-990b-1648fc41ced3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b45b7a-c0b7-4375-90c0-cc6e5ee41a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a850058c-c7ac-48fd-adcd-cac53287b4c2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459748a4-322e-47e4-b200-6b75e3a42ab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b15b9d-5ff9-486e-9f2d-438345db82d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b5b75a-a173-4613-9aff-254b9b1bd011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8088c4f-6041-4268-a3cf-8eb61dadc203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451902a9-974e-43d1-b7fb-092bcaeaf499",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ec2aa9-32e5-4cd2-8b78-177f5fd32b6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a9674c-e194-4a29-b381-9e7ad055ba15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa09ffc-ac9e-4149-9fb9-82cad80d7a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50695b8-e4d4-4e06-9cad-e25e78d2cf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfee5cb-b3c5-4c6f-9669-ddd7d54d7939",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2486fc47-24a1-461e-8169-19a3431c5a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c46b82-347c-4df0-8214-4679340d353c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f04faad-0f48-4279-b109-c9ecdc5ffd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be779e5-f948-41d2-a8b5-c578bd0e189b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a37e82e-85fc-4b1c-a807-48083c34839f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b192bf-b712-43de-b367-07db4d9d0d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8d1053-bbcc-49d4-9bf3-59faeeca6e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26eb4c2-6288-43b2-852d-d9d788eb41e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee17abd1-8169-4f1d-a6f0-61d06f726f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7413609-3a95-471a-8a17-6c3f13aad7eb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffff6f43-b443-4c42-94ba-52af75755bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6192cba3-d6b4-4e27-919c-0129401886ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89f2ab1-b63d-4583-82f7-b415ee6719a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6e29af-9177-49be-9f11-c78f7ea1b57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c23cce-5572-44f7-a19d-aabfdddd9ee3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77095e1b-bb61-449d-91a3-9e2d5126cc0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "189d694d-5ea0-43b5-980b-3c8da6982b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f1e1a5-e5c1-4ac5-ba44-4aec38381645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf2bf83-072a-4d49-a182-88bf0d32c0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49137ac6-613d-4a0f-8451-7b8cde4ce702",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a959e89-9580-45cc-a50a-fe7f4ac3596f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eddcab87-7de4-4612-b929-451a993a9c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd299ef-2f34-4221-89b5-f55eae1bc575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7954c913-3488-4d77-a4f2-bf262de62337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa3cdb2-ada7-4184-a3a4-94feb317196f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69712aa4-7eb3-4f59-b285-fb90506dba54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9307095-6634-4ffb-b58a-461da6ddf4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08812b7d-7a25-4cad-9b4c-3fbf2e1c3e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd230b26-1cb2-45b3-9429-47aa5cec341f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183ae4cc-1e2e-4060-8419-ca54e8df9c2f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40acbc62-174f-4ece-8aee-d1b744e15cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef58fca-2d75-451d-a0b6-e9aeacfcd8de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d034fe9-2cb9-454e-864e-9aeaf73d1505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbdace1-39af-41f9-b041-fc8c9b161937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4109d4fa-a9eb-445f-88ab-5a0553a5d634",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c15b857-ca6f-4253-b82c-6dad3294a92e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff9c7c6-2cc1-4561-91b5-8769948a8d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514b5167-20a5-49a4-a09f-fb9c8fea7e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfdd2ba-4eec-48b1-ae0d-e7e244bfbf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd615b0-1506-4cc7-952d-88544778f222",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d28ea8-fe3f-4d4e-a7d4-dfa1e95d18a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ac7954-6f2d-49ca-86a2-f2bc9b9cb582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8073c3-c22d-4869-a505-40b275a5a869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e6f3f3-554d-4705-88d0-caedbd012809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2494fe7e-ae91-44b4-a75c-2ef6711323a7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7adcf5e-7e66-4ec4-a2bf-cde555bf1d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936ad712-a0f6-4c71-af80-29eaca38e3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2957c80c-7d30-4cf2-a6ed-500e8f77722d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdbb920-f089-466b-9b11-e64b9850cabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79e7b7e-38a0-4086-a126-aad988fab681",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3ab631-c5a4-43ad-9211-87035a41ba7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07201a9c-e0d6-4295-9b90-6394c6409f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd719694-f9f9-4ef1-8215-32df167d673f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3f996a-bc56-4796-9e92-9694567fd369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076035e4-7bee-4d33-af47-d200d463eb3a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e968d9de-d649-4edb-8ccd-0bde56f3ce3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd01c0cb-29ca-4060-ac5c-1f6cc3b90c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7031dc1-a4fd-4015-825d-762bd5607291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b07d058-0068-4af9-a9ec-4123f44bff63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5843779a-1509-4877-b65e-7a747e65ca98",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f4ce1e-83c1-478f-aeb5-5b5c0b6d3efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06710bbb-aaba-451c-9414-069cd7594c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0184fbfa-51d1-4d74-be3e-72c0b867dccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79ee3fb-ce2d-413c-b64d-86916503aecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1688a40e-ca32-4e1f-86b8-ff2cf063e619",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4d6a2b-9513-46f9-ba9b-377683d0393d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e790736-8157-4d3b-97d4-6791a5db31bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0510b8-34ee-4deb-989a-9f58791d3c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033cd5d7-95f7-49b4-a12e-c7114c7512ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05b59aa-d29a-4d44-bc8a-fbdd8db98b35",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922e8852-4815-4e5a-9b39-a92a355bffda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a6384a-c2b1-41fa-9518-8b31720d0627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3811e7-6c4e-435d-97aa-eb76bb9b3c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e637b69d-c15a-4376-b75f-29cb91d4de16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6cd05b-dfc7-416b-94f8-f832541ad0bf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2239e726-f2ff-44a8-b890-ce5517300f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c6dc01-7db1-4e5d-87ca-8197660c7335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040bdbe3-6bb4-4945-a41d-c23f153b4dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f46a39-245a-46a5-960f-92943298c30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1510ee56-84e1-4eaa-9c5d-db745b4c1383",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630b8f33-43ea-4fc5-9f6e-63f2bb89c7fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e3885e-43f3-4dd8-aa46-0c0d35d232fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc4ac30-8358-4f7a-9765-0195ded9c802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de4eca0-06af-46eb-9a70-1d082450778d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb465dc-23bf-4c76-b3dd-cd958de26ce8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be256aee-3b42-432e-9bdc-002f63a4a2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1877b4-34ab-4256-ad0a-18b3a4a1cfb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cefd2df-ea97-4535-8609-7c702b127b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439d7269-17de-439d-acf0-d0c4ca775ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8caa5-4d16-4d42-87da-0a8f2cb832e7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5ea248-cf9e-46f9-8ba5-507eabe924fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2b7403-4eb3-4c60-bb27-5ce9a4b26ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68330f52-7f24-4cce-ac7c-e5f7b02208f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24193e66-8920-4930-919a-fbadaeb16e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6528f6e-1441-44fb-8f7c-f38531e10e5c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd37cafc-7c00-40af-b21f-519bc63d687f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f4be7a-e80e-44c6-b0c8-7190e1814488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35819b9e-7f9b-45e9-a1f5-e6044baa6f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40928887-5a9b-4821-93a0-e59e3362a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf559ef-57db-4818-9e84-380c844e5514",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd1466b-b333-4cf6-a902-97f1c0f1b2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9563f080-7ecb-4112-8beb-847898e1f025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5f54a6-4c74-4f6d-909e-c610d89a0086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f5779d-37ca-46a2-85cf-a935673fa317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1177dd-6ffe-4062-901b-b3e02843f3d5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ddca25-c4b2-436f-bb74-467fbd6cd093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecbff16-955a-46bc-9f23-1521b0f99c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d024d6ca-8a47-42aa-8e1a-7f154cf29f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccadabb6-7221-4c56-9a69-8d7e65003980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0f9137-0ab6-46a4-9a92-4ac55d8ca81c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49067db0-b0cd-4cf6-8b39-bd4986905bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6799a0-bb7b-4bf1-9088-f1e579c26dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148b63f1-89b8-4270-8203-0e7a19676e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8394dbe-602f-44a6-a898-7821e09433c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0d98f7-c398-4b4a-9f87-c748531e73bb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba2aa02-6428-4e2a-8f51-a76a35ef354b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44a33d7-6f76-453e-a57c-fcce0be1ecde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9612b7fb-fd0b-4c91-92db-e53674edfb5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d7e7c2-2db5-4978-8d48-2b1024b20851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d144d534-8f6b-4885-a7b6-a94f68bd95f7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865acc70-0480-4c96-94a2-a6ddcf42389b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1908e81e-a38a-4bf9-80cd-8ab84130cf0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0705a9-a439-4da2-af32-a4a4dc8b0e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5f5a86-adf4-4d4d-8ff8-0c8ff22e510d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ea3e91-f87c-4f63-9d48-24b875c0da68",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd9bd43-d173-4eca-b250-86e3eccce521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b9758f-edbc-4744-9b5a-c2197f64b6bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efc06c3-5458-4865-9d60-00da42858917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e460fd-7a1b-43ad-b09e-86603d0fbf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729455b7-04b1-4626-9c25-ebec8a3a02ad",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfddb1d-477e-4087-9997-f125118f8c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a57a251-73d7-4580-a010-3587af76a6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ab7398-0f88-4f09-a53b-1c89422b3ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba52fbbc-2d99-4b29-b585-78f8e45bbb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810d5d15-21bc-4284-864c-13cd54285d32",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144c691f-2393-42bd-8c72-4940ab9f0102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae70aa0c-2464-472e-b80b-fefce31712b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e8c850-a2b2-4fd2-be76-17222c13b339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72863afe-8ad6-4eac-875c-7e9b6ba0e31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ec420f-dc0f-4d66-85d4-1043963d341e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad969d45-afd1-48da-9e2e-cb07f8c58bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2459df33-acfe-4f66-8532-27bf1daf5b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdca930c-5bb1-4a50-8b48-640295cab8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ca3dd5-39c0-426b-977d-a097c2ef0a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d52968-c33b-4d5a-a142-7a93be24530a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982d7183-7ae2-425c-8f10-7fef9d979dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b61505-77fc-414b-b20b-5948645e2cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fceeb9-9746-4aac-85f8-77eeafaad621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9dca6e0-48b8-48ab-9f10-049d1625d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a777eb-05f0-4c7b-8084-923ac3b4e42f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ad8b83-dc07-4cee-9f46-756930974502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23bd3c2-9185-4e67-9641-2902c3480e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491dee4e-2150-4600-9e11-70ed7508bc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5ab453-0e17-43b7-a356-60d98e9bc7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a76e20-f908-4e83-a5ad-59372fceaa70",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a648424b-62cb-4783-bfe0-2722709d60f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae214bc8-3b40-459f-90c0-7c54b6eaaec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2856426b-9827-4f3e-be48-51ad7370dd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc27910c-03e3-417b-8069-7f30b23d98fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91300a3-a0eb-4e34-bbba-1a998be39ef4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c137fa-99df-4801-9334-037f5a260ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce193f1-0461-451c-adf1-f1c3e8e18a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9caf28-a1be-401f-801d-f95c3d71837a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2784a012-899e-48c9-b22e-e94411764bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961857df-60df-431d-b717-a32945a2dc7d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648e7ff0-ce82-43aa-84c6-08075fcd945c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e92c7e9-0303-45d4-be66-79874e44e36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f90c5b-0210-44e2-a972-267179ac658e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744cf4be-1c4e-487a-b49b-fed5fbdbec13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7a98fc-557c-4c78-8361-159fe03669f7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585dcabb-143a-48bc-bc61-bb33b1d5dd59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a173c88-0ad3-4ca0-a496-0f76f24a7c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427faac2-dfe6-4db0-9432-774b1b3bc377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c45eea-1e10-4f58-8e3a-62e5db8de6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9b2cdf-4610-4c05-8f42-564670f44a27",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cabcfd-a1c8-4a99-9cf1-b1c7dc5376d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b22ac60-72f8-4173-8774-e9335ddd97f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0244bd-d0e9-4adb-b63f-ef8417087ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c2914c-f0e6-4cb6-8857-ca657944123b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641324f2-48e6-411f-89ea-eda382af25a7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758e8d52-8f86-423e-8c0c-2db46432933c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3a86c4-1741-4aa6-8dbc-39f63a55e714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9b5da4-e169-48a1-bd73-07ba3d33ad5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c724b4-9904-48f3-a109-ac71cd72be3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b98569-bfc1-4b33-aa9f-d2275eb9e3c0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31fa6b4-030b-4646-88d8-3c384c47a868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf929931-2b4b-4798-8526-037ee9007db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aac1af8-e65a-413d-ba9f-dbe70134f3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0390c97-7f48-4e89-8931-309d6129511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b70ea3-04a4-4534-95f0-7b58bf92aa3c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1adaf3-6190-493b-80f2-f3ca169a8b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05d0a6e8-5bcd-458f-9f96-5393f584c8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed65408-1c61-4f46-ac02-c1362783db64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d397ce-4723-49d8-bafd-7395c1566658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc01963-90e0-4402-95b1-08460da15538",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faaceea1-797b-4b45-ab53-e5c1829c81fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5085f24-9ece-4648-a6fb-1351ccb90dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f842b3-6c73-483b-9f46-29f4eb4ddfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e42abad-0ae3-4984-ab8f-9293de122518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d871a6b9-9aab-4013-b86e-d84b2c2ae4f5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4970968-f1e1-4372-8a4d-f7124b0ecfcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8a58021-c154-40c9-a34f-189705afebf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa74e35-9722-4bed-a3c0-3be68d3b1d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94d501c-d5f0-4922-bacc-31aa1c13f8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bc81c2-dae2-4872-8332-ef13ea63cc4b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfddcc3c-4c45-4fa7-aec3-05652eb7b88f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc3a91f-baf9-4bd9-a65b-88190059bed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0c5871-e9ed-4570-b2f0-47f2044cb3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357c9a63-6f0f-4776-8fc9-25c6f2054af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdb314b-19d8-455b-afa8-14387218df49",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8968cc2a-a3fa-4732-b7c5-e5ad069418c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c3b76bd-55da-4f59-bc39-865ccfd2d6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdddc26-0e50-4eb2-9d02-88db30fc374c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe83829-11b9-40b9-b94e-e6763c695468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05176a39-f5fe-4f7d-9d68-bd91137f7ca3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec89e263-2e9a-4a4a-bdcd-3be5d55e221c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4867874a-04ca-44fa-bd4c-ddb4691918eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfd77b1-a6dc-4f2f-8ce7-6d3f0616edc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c4bddf-b1c5-42a0-91a0-d544c4e1e6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562aedeb-d580-4be8-aa09-aec613da7490",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d777ae09-f4d2-4b29-a5ff-dcd43d726530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1e8ae6-684a-47fb-8b07-1a6dd4d352eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5b1da1-835f-4026-89ac-7ce30ac99c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5d0ec9-5fd3-4154-a092-41962f8287dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17fa70e-35dd-45f6-b35f-4f18327b9d40",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ffc5f2-f735-4d86-80f2-86a7d414c641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5db5e92f-011e-4ce4-af19-aab8ac53ece3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98a9a36-b832-4f45-867f-179556b74936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7900533-3e25-42cb-a7c1-5547879e8514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd781ea-aa5a-41ff-9412-9c59d8e25fb1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13325f2-bd0b-4540-ac0e-057eeb4539f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0051b640-e59e-4fcb-93c0-94cc7b3a2342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a49b76-88c2-4019-8ec2-c54d80a7c839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b71c64-89b3-4cbf-9b5e-74eb277ac697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeadd622-d41a-44f2-9430-b6071eea1f7b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba32ce4c-82cf-4eef-9f4e-140c87e6515f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a108156-4d19-4e3d-bfeb-2f923593fd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5acecd5-94cc-48bb-a11c-e02a721525e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51dd7cf-853d-4732-900a-8ff022db93ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70ce835-ea11-47f0-9d3b-0e3c0597f200",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d858e192-e125-4b5e-8e1f-411187298fad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f4ce271-9d9d-42f7-ba3c-f0b63da5ff43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f6ce28-5ea9-4332-979c-f9fd98728238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20545bfb-b56b-400f-ad94-c1aecdfb22ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d879ca95-b98f-43da-a1cb-de831b6b09fd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e133454b-a42a-42d4-8bbb-8e0d0f8179fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78439f06-c4a6-4dd6-9334-8510c675b36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4775dd1-9079-443a-b2b5-95454f9e62a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a86324-84d2-4779-b9f7-81fff923ffa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97055f75-68c0-4af1-9182-95b49090e2b3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5743b87-b5b5-4a00-8516-cf6b6e4107fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41686019-8bc4-4a23-867d-7ec561901b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60db9591-117d-4ad5-9146-d41bb16c5e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dee4a59-a102-4295-9acb-fdaf4d715f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba9771-0a12-4a06-adf7-536cfba7c08b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e653460-7e85-4217-b9be-8a8d5902e29c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ee8ac3-d0af-4d4a-ae68-cd4e2f210aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbf7e22-ed5a-4c9d-8689-9907cdfd0da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3791fe79-a634-4648-9811-b814754e9d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eefe43d-115e-4a15-b2f2-d4bf59f574ed",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d6393a-06b6-4cc2-97be-962a1a51149a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41dd68bc-16e6-4bf7-b58f-124514020e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ea9e93-f024-4e3b-ab12-ccde540d68ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063484f8-5f76-4107-b443-b37a6bab3a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daa7b04-c936-4582-90ec-33f65bdbb2ff",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6c715b-0941-41f6-b876-73a4894d6b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b93830-a130-49d6-bfb4-ea168e650974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac94031-31e9-46bf-871a-781c310f5c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e00189-d0a4-4296-b811-14ab1363b530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcb47f4-38a9-40ee-90d7-62d5242ce9a4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df74d39-9b49-41e5-80e4-e4eab79c7ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1b11cf-b618-4d6e-9c31-624755c2980a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636b5e7f-db6c-4df8-884b-dc24f9474e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2930a44e-0d06-4712-8044-662133189caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3f73e2-b9d1-4361-857a-9b001d9a9f91",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25d16c9-ddf4-4442-a019-08608385207e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b6e19e-7d6a-46d1-9ca8-8ee99e31b1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4688d0b-ec4d-41da-b956-e3eff2134330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc07cf4-508e-4619-ba29-e38f6159e35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e18d080-0b20-457c-b468-14c94b227108",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4013519b-a894-4197-9bb4-e30d625a91fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1f618e-f18e-4ddf-91e2-79678b19b24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bc3d6b-e5fa-4e22-bbad-dafa95ba4160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2610a7f9-9bf7-403c-8ea6-1f45c0ebd9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b384dd-58c8-453a-b4bf-9652ed928815",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9ac1ed-73dd-43ad-9595-71b4906d028b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4bf4e6d-a3f9-41b1-9aeb-70722d068926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e8a3ba-e2a7-41cb-9557-5e49534eccc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb43567f-f629-4425-8483-59e22798066d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8eb8810-350b-4095-b6ac-18fe3f580202",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a406e7a-2e77-42ce-921f-59ac623547b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b044c4-b9a7-4623-b462-a3f34a98939b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95066917-bd39-4cb0-bcc4-64f8f48e6831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d199404b-a72a-4233-944e-d8ce0fd2a788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144274d8-f244-4365-84e3-8fc9f952470f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deccca7-3df1-4a79-b439-9f63a750bae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4325212-579b-4e02-817e-f5ed74f44e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8fc30e-20ee-438b-b442-d4199fdc9fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d074f8-ca3b-4ec9-90a8-9a8e2748ee3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39853d25-3253-4f6b-8837-f28e5ba87e8c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e33d1e4-8e77-42c9-a9c0-062c238c68f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f12bf61-a61c-4350-9d84-9f420498910e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f47a469-3d48-4cf9-82ab-a1b262a745a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd5d28b-29de-49d6-aa13-856404ce69c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8bc6b6-8efd-490b-aa8c-8459c0ddf1b1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed11ded-1c27-447b-9821-59274018548d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c26e87b-8b4e-4eb7-a97f-0188dd240dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffc52fa-1d9e-4efa-a60d-e1a09ce9eb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fafa7cf-182c-4930-be7e-7bf5fd7172d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49ce8a4-f4da-4047-b467-015628e4c2ad",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8eb381-1ac0-4d21-8cd9-6aac885c065f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81cc509-792f-4e11-bac0-b50aeca9e539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e514f14-2b77-4a57-8f7f-81486a96ddab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01eab91-0562-4b1f-8d67-3538fb134d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f373b9a-1e20-4539-ad3f-33a4f4215b5b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57c3cc3-d07a-4bd8-b8fb-214c6597ee0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6af6bd0-3135-468b-a23c-08e205fa7426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db53fc-a9ba-4a2f-ae84-45f01d9f161b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a3b00c-36ee-493d-ba67-971f782a9e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af912df-0166-456d-8564-e35ad76d6c60",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde5f456-1020-4d33-885e-e5da66606bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b872d63-9146-45d6-820a-9598b52501cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846ffc05-578f-4196-87ee-c9b42b788bc8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7d3a99-94bd-4b83-93d1-a787b6e34783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a795762-6f0a-4834-9aed-3d101c11cc70",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40157a73-9ed0-4f10-a113-fd834020d602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913bcd3b-5e71-4974-90b5-654e1bf7391b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbbc04c-bb46-4a7c-bb51-14edb5fd67d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ce6090-2f74-4d60-be11-e9868778e972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545ebf23-758c-4ff3-ac33-f62b3183646e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c211fa3e-2ac3-4801-af53-20e3c8132bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01887f3-e5f2-4694-be51-3f576556f7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4fcbbb-01c5-423d-b244-2a4be1116a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b5345d-cbf4-4a59-8a73-71ab631cfdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed92ec25-9d8a-41e6-a63b-56fb159b45f0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1fe1e9-2e81-4116-9e7c-f8637e27f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06957825-346e-4635-991a-58155d21a057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28053954-9850-437d-80a0-0a4dc02e3da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75051324-fb89-42cc-9b42-165abc069246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc127e5-b7ab-4395-b232-1354ef3887cb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb0889c-892e-4866-8900-352c5137a81e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b725880-2c55-4c62-b8a6-aa8076ede46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d80fb95-3731-4902-8b3b-4ee58031cd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ecaea2-f750-4ed6-bf82-e7263b478aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd28e5ae-f59c-4f0a-a24c-dabe50ea0505",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1347d1-ac91-46a0-ba05-f44401e4a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf44effe-7a0d-4842-bc67-81951b2584a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccca84f-d516-438b-8b53-4df26c16b411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d2482e-20c1-4b1a-a096-297ba556f0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b737ea-1218-4f8a-a707-008fdf61241d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471ab8c4-c836-4143-86ff-41be4998e142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e60410f-5df3-4346-a166-45bc1dd23e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e612eca8-c910-473b-96a6-442f8a811e73",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09e53cb-52e8-43d0-83a6-ba14092c607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f4ecf1-fdf7-49cb-9d12-2fb16581a988",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47582874-30dc-43a2-adb7-c31e9a0f8c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecbee8b-73e8-4951-9a29-b0d6cb5713e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fc166a-c1c8-449b-91d3-99366aa4e4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d159853-3888-4469-a368-6f7e2a2294bb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d05ec45-2c65-44c8-a42f-57a3686dd55d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c00912d-1b56-40b8-99ae-a2b8d8d1da97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4ebf2fb-052a-4a86-b631-6d9799e3c5b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "196ef4e7-b681-4832-9b67-005bf7eb9b35"
                    }
                  }
                ]
              },
              {
                "id": "163947cb-b2d6-4662-8ab7-fcc54df09455",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f16115e6-d226-44a6-ac3c-169b976ef1ea",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f724d7f-83cc-4828-ae0a-fd1900d172ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a710be59-8d24-4b96-b89c-075072b20125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facf0ffc-d637-486a-b452-856117a63b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66204fc4-1c5a-4442-ad63-4e9617badcea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef5d15e9-a1b3-4bff-9268-ad977d57b74f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d75485a-69fd-4ec5-b72b-1fd2963f2e1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2a94049-0aec-4133-af8a-d48b1be97123",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d28bc4ae-4cee-481b-b53d-0b63ed3ce076"
                    }
                  }
                ]
              },
              {
                "id": "362eab3e-ceb7-44db-8c75-604c676ae898",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b402c213-4977-466e-b676-afa6e4656aaf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd46514e-8db0-4d08-a779-ed6639935370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9dc4b04d-f7cb-4af7-9b1e-fcdbb75ce410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13408329-3fdb-4241-ade2-64d136c5515b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d73b80-8557-4cc6-b5cf-75bf47e48e03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7b9be353-ef76-4d15-9fd9-f4c6d8de7b49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ece49cc6-5225-4c5a-bf11-c3d2140cabef",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d5d13bd-382b-44b3-840a-433a5802c7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ba4d7e8b-05b4-418a-ab0f-8bd7d404e89a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33e6d0b0-68d1-4891-8616-3221f797e2f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33a8e10a-0938-4343-9a4d-1beb67f82a83"
                    }
                  }
                ]
              },
              {
                "id": "08f1ddca-091b-4896-8b52-a4335bdc80ed",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a13430a-7e14-4052-802d-b72b360fd6fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "856100b2-f0b8-4b51-baeb-951a6d819472"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a805de9-575c-401a-98a8-c58a6eb2e188",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7299a2d9-2ed6-46e0-b936-59f6e6e4ecea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb4d4084-c190-4f72-be53-e879c6d27946",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c9f88f54-d17c-475b-8b8e-4734f114d9c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd820b9a-edc9-4afe-803f-a5310b6fa647",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f55dc98-cd0f-43d6-be26-9b54fa4dce20"
            }
          }
        ]
      },
      {
        "id": "26c415af-0e9f-4e8e-ad4d-9151e8bb3b43",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c665653-ca0f-45e8-a158-115baa2bcf61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bdb05304-4332-4b10-8d32-ace8521612b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82ac5ae9-c172-4bda-9c4b-24a2e5140433",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4ee304-eb2b-4ede-82f2-1193422cbced",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "128a7836-07f5-4955-9035-43907437b866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869aad45-bb2c-4b88-8b27-4c34f010d6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "211c2687-8c32-435b-869c-22190436f6d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77d23ea7-9f54-4a08-813f-6a427344a262",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdf35ffe-75d9-4ad0-b481-bc8215284a78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72bd9eb5-054d-47c2-82e8-94002952e030",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca0a842a-8247-4de3-8b0c-f864e3039172"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b5829b-7b65-43f3-a2c0-baeb60d7a580",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ffa50af6-745e-492e-b852-9119802e5ecd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9180bfbe-e053-4b2b-a8f7-78001c07f527",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0726ae57-204d-4930-99e7-c0324e456165"
            }
          }
        ]
      },
      {
        "id": "ddef767f-fcc1-4a42-b62d-5a6e38716c62",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eea6bb79-0e21-4999-9f9d-bd3f80f7054a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67474bd2-f5a5-40fb-8760-eb4131b8ddcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5d0748a-47e5-4ba9-ab5a-63ee49c605e8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ab85aa-9959-43cc-8950-1f5215ceb3a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad158e67-3a01-4f16-80ee-db72b44ec3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85129212-7d12-407d-9f76-09117b3cb8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fc24646-c738-4ee7-bad1-cfb1dc51f73b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "368452b8-f29d-48e5-8dfa-44369c11d89a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76e933fd-3c28-453f-9972-b10792c5134a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "602bafe7-c901-4b2b-b9af-d188a992ec8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdd8f9f0-4f30-48e0-9d72-095199a076b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d44e6ae4-0d3f-4476-ac50-79d5debdd665",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d767425-9953-49e5-ab24-4734092bcaef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d830a62-c6af-4e05-aa3a-9e5a8042cc6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "022af5f3-d9f0-4ae2-b7d6-e1a7dcebd718"
            }
          }
        ]
      },
      {
        "id": "e797a84a-7e0a-45db-8916-ac716f349bec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "03c5f426-87db-45f0-83c8-5ea03513b25d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba73b2f0-9f75-4783-a9c3-8afb7099ab2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2e7a87c-7016-497e-9bce-6234c5de9c32",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eea055d-9efd-40d5-a747-1fe4fb69fc03",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a26b7d8e-3097-4666-8474-1db9026af020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d75cce8-07b7-4ced-8353-bcba65f3c8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2c31f0c-222b-40e4-8970-fe56b5396d74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "194c1834-28c4-4ca9-9075-62db84061e1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c84483c7-183a-4073-9974-1aa573f83a78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c05ecd42-2e7c-4e41-bf7a-884709bb0836",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aacf81fc-c1d1-42f7-9f26-e542f2e0b137"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d29de1ee-6b90-48a0-adec-5a78614e5bbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4e7aead-ead2-4983-944d-6a823819c5a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe0426f2-3788-48e0-b1c5-d8f678889269",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8709ea40-9296-4faf-a0dc-33054a9ce44a"
            }
          }
        ]
      },
      {
        "id": "c4e37319-637d-4d0d-b9ea-a7a0bef0697b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cf52099-b6b1-4933-abe7-880de8368490",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec2ac96-7536-4613-82c9-4b472baa629a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "06d94b0d-dcdf-4c4f-8ab6-d229fee6534a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62192a8b-b0f2-485e-a76e-6fd0059f4883",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bff07268-c948-40e7-934a-98bd441839b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.2035087719298,
      "responseMin": 20,
      "responseMax": 633,
      "responseSd": 77.05587392916121,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703550872971,
      "completed": 1703550911910
    },
    "executions": [
      {
        "id": "3bb8e71a-2b84-4289-8769-dab021b9c47e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c955a859-2268-49fa-bcec-746eec467d79",
          "httpRequestId": "9b28efe0-e581-419e-8410-b9aa1a93a8fa"
        },
        "item": {
          "id": "3bb8e71a-2b84-4289-8769-dab021b9c47e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0cdb09f6-bb03-4e5f-9bc0-3fca75975cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 0
        }
      },
      {
        "id": "ee845c52-d727-4a95-ac49-03835f8cfe04",
        "cursor": {
          "ref": "a7065596-d34a-4d3d-a223-608fd6a95f95",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "112e66ef-4dfc-4148-a8e4-5d85321282ec"
        },
        "item": {
          "id": "ee845c52-d727-4a95-ac49-03835f8cfe04",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dcb6a806-df06-4b04-9dbf-7288528774a6",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "a80bfcde-f06d-4520-ac0a-dbf1c3cc95d3",
        "cursor": {
          "ref": "0df1060e-d38f-465d-8947-8bc1a13dc110",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a1cadb33-60d3-4d8d-8e77-067dd1482a15"
        },
        "item": {
          "id": "a80bfcde-f06d-4520-ac0a-dbf1c3cc95d3",
          "name": "did_json"
        },
        "response": {
          "id": "caf14151-b4c0-4af3-af55-555377eefc60",
          "status": "OK",
          "code": 200,
          "responseTime": 400,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18724a57-3b6f-4a8c-b9cb-fda267995a9e",
        "cursor": {
          "ref": "293e398e-2965-4385-acc5-25a87bb6cf3a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f8dccd9-6117-4b75-b5bb-45a5b1af4c83"
        },
        "item": {
          "id": "18724a57-3b6f-4a8c-b9cb-fda267995a9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf9760f6-67f8-4864-99c6-5da9b03de774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18724a57-3b6f-4a8c-b9cb-fda267995a9e",
        "cursor": {
          "ref": "293e398e-2965-4385-acc5-25a87bb6cf3a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f8dccd9-6117-4b75-b5bb-45a5b1af4c83"
        },
        "item": {
          "id": "18724a57-3b6f-4a8c-b9cb-fda267995a9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf9760f6-67f8-4864-99c6-5da9b03de774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e1f234-41e0-4599-a7c8-1a0a5419180e",
        "cursor": {
          "ref": "48d6ede0-f294-4a16-9b4f-e6b5100ef092",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2fa487fe-a921-455c-a659-f6496b7b68f8"
        },
        "item": {
          "id": "a4e1f234-41e0-4599-a7c8-1a0a5419180e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "352c2756-438a-49a1-b634-85c2bcc4f42d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 132,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bae1d3-cece-4e8c-87ff-629772e7f9a9",
        "cursor": {
          "ref": "55c8cf84-5670-4bb5-b23f-c87324b3bc31",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f201cfd-d4c7-4741-bbb3-3020c050693f"
        },
        "item": {
          "id": "00bae1d3-cece-4e8c-87ff-629772e7f9a9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5af0a559-1805-47d0-a3c4-2d9df3a7a102",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4858787-b87a-4019-ad49-90e980c0c278",
        "cursor": {
          "ref": "78daa751-0f59-475a-9f38-c924adf67404",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a333e35e-83df-466a-8777-8de02af7065c"
        },
        "item": {
          "id": "d4858787-b87a-4019-ad49-90e980c0c278",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f7d62c10-ca4f-4e76-9465-3b304b682836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2add2517-c52b-4dcd-ace3-32e806136aa3",
        "cursor": {
          "ref": "40f81c1d-fd87-40b8-9122-06ae1aff2f21",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2aad55fe-280f-4aaf-804f-2dc4532ff21c"
        },
        "item": {
          "id": "2add2517-c52b-4dcd-ace3-32e806136aa3",
          "name": "identifiers"
        },
        "response": {
          "id": "8a138000-e562-44d0-86c0-53a2a6271e06",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5816876-1051-4c03-9aaa-1c79458472b8",
        "cursor": {
          "ref": "74d6b093-7b99-4f4e-a807-83c351618005",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ce695009-e59c-41e5-b2f8-3ef45c6c55f6"
        },
        "item": {
          "id": "a5816876-1051-4c03-9aaa-1c79458472b8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "56d6828b-2bd0-4cd3-84b3-49c849abc7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba16b39f-33da-4f43-9719-8680e84e6315",
        "cursor": {
          "ref": "78cae242-b66d-43b6-9b1c-dfcfe1cec981",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "177e3154-bc2e-4bf1-9328-894a78e5eb55"
        },
        "item": {
          "id": "ba16b39f-33da-4f43-9719-8680e84e6315",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "42061e67-7335-4987-82d0-d99b53fbc11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5172cef-7426-4541-b95b-8ca838f3f091",
        "cursor": {
          "ref": "c7de7d78-c18e-48ba-9123-b808559c8dbd",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ebbe4401-5244-4703-ac8c-77a5ee2e6bec"
        },
        "item": {
          "id": "d5172cef-7426-4541-b95b-8ca838f3f091",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "664e87da-e646-48b2-80b7-a9208577671a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ce12f7-bd52-4c20-a18f-55231fb5a075",
        "cursor": {
          "ref": "f512d5b6-53e8-4dcf-9ee2-c8abd0535c16",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5cc24b97-803e-41b0-bfd2-20dcf5c3a241"
        },
        "item": {
          "id": "10ce12f7-bd52-4c20-a18f-55231fb5a075",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "34461842-a6f7-4db5-b484-68c639984831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e9193f-ded8-4993-bf8a-37f5790d7365",
        "cursor": {
          "ref": "58f73818-61db-46c1-a849-08156a38cf33",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e72e7b23-1f3c-4f83-93fe-cddd020f9afd"
        },
        "item": {
          "id": "85e9193f-ded8-4993-bf8a-37f5790d7365",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7edb209c-a000-4104-b7c1-04d66a4916ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f2b596-f624-4a92-9034-97c6580c253e",
        "cursor": {
          "ref": "54c3870a-6858-4068-9640-6d8988acb832",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3226bffc-21d2-4d74-9ebe-b31e3260f443"
        },
        "item": {
          "id": "52f2b596-f624-4a92-9034-97c6580c253e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a970de2b-1829-4380-974d-3278cb5dfc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333d37a4-1b0a-4688-98a6-7629e79c8057",
        "cursor": {
          "ref": "197f445e-221e-46bb-855d-15b551e6f06c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "271290c4-794f-4bfa-9d3d-379a7723449e"
        },
        "item": {
          "id": "333d37a4-1b0a-4688-98a6-7629e79c8057",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad49fe02-94ad-4c90-8c3f-7c44412cdd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cb06e7-1bd2-4353-b0e4-4fd23a68603e",
        "cursor": {
          "ref": "8f8d56c4-eca3-4c02-b273-f4580bda631f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3f8b504c-7cc4-410b-92cd-9dbbd7371bd6"
        },
        "item": {
          "id": "26cb06e7-1bd2-4353-b0e4-4fd23a68603e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8607a293-4f1b-452a-af9d-ea723b4948b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d6e1ca-dabd-4335-a40c-11ffd7f22270",
        "cursor": {
          "ref": "9297416d-a700-4a82-b867-7ba6dd6f5297",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5140d82e-b6e1-4a85-a612-28f0a5186814"
        },
        "item": {
          "id": "69d6e1ca-dabd-4335-a40c-11ffd7f22270",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7d8e43be-6502-4bab-b541-62b7b4b991e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fd6923-1241-411c-b26c-68c592a602e1",
        "cursor": {
          "ref": "23606868-5ab8-44df-9108-b274115cb9d9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c04e8da0-bfd4-4125-803c-628b63a33d9e"
        },
        "item": {
          "id": "d4fd6923-1241-411c-b26c-68c592a602e1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "94bce525-8bca-444f-92bb-b2c94de76021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ca200a-3844-4613-a2a5-3442f2cdb196",
        "cursor": {
          "ref": "c39f6df8-8e3c-4637-b5c1-69491ba10b89",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ad2f772e-cf18-426d-b5b1-96ab4ff7b3c9"
        },
        "item": {
          "id": "c0ca200a-3844-4613-a2a5-3442f2cdb196",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7455fb0b-e8f5-4148-b520-120160b3f22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370a7af2-5cdb-4b11-b1d6-3fdebb2c76c7",
        "cursor": {
          "ref": "a9b2528c-bb22-4729-b45c-49107b36634c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8e1886b8-90f8-4390-85c1-6735ca186fd7"
        },
        "item": {
          "id": "370a7af2-5cdb-4b11-b1d6-3fdebb2c76c7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f8c8dd0c-e554-493e-afc7-563905b14a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953046a3-0979-4484-9577-3cd0143c0853",
        "cursor": {
          "ref": "bf248e25-6b71-4f11-ba7c-c329d40f353c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dc5e9f6b-f5c4-4eb3-87d8-98a0833daee2"
        },
        "item": {
          "id": "953046a3-0979-4484-9577-3cd0143c0853",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "11b20bf4-593b-4445-9680-f87b4625d4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eacf466-49e9-425d-9144-8c02fd14712d",
        "cursor": {
          "ref": "d37295ae-4116-428d-8773-b5b4a2e1edd4",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "64703b95-a5ee-42a5-967f-c92d7a67199b"
        },
        "item": {
          "id": "7eacf466-49e9-425d-9144-8c02fd14712d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "db218a70-eda1-4b61-992c-6f6096b611fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2d058a-795e-485d-b445-3841c18e42a5",
        "cursor": {
          "ref": "b220c005-11d6-4f11-b290-684f9000c9aa",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "774245d6-8037-4604-adde-72922916c41a"
        },
        "item": {
          "id": "4e2d058a-795e-485d-b445-3841c18e42a5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "13d964e2-f7a0-4e02-80c6-8c93e4414d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a86057-3f49-4eb7-82b5-8c5b39a5a728",
        "cursor": {
          "ref": "9e5c9f8d-354e-418a-a873-bda416e5a141",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d4af3fb3-35cd-46f2-8cd4-e3d125b54442"
        },
        "item": {
          "id": "64a86057-3f49-4eb7-82b5-8c5b39a5a728",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "62d32ba8-b2ce-434d-b1eb-f2d9c752a1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53c1048-f3c1-4034-8c9f-0e89f5c8b015",
        "cursor": {
          "ref": "a8b60c7b-c833-4fd8-8195-29b7f0e0460e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4d59c17a-9083-453f-9088-29325f38857d"
        },
        "item": {
          "id": "c53c1048-f3c1-4034-8c9f-0e89f5c8b015",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "95bdec16-bebe-4929-92fd-b075aa02592c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de87940-5e60-4764-bf28-0b73383cbfd2",
        "cursor": {
          "ref": "8542b50b-3ce1-4169-a5a6-7aa0259ab049",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "347ce640-12bb-4cc7-a75c-361874e322e6"
        },
        "item": {
          "id": "4de87940-5e60-4764-bf28-0b73383cbfd2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "19b9ba61-5e8e-44e1-abec-1840d9e69365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a84ed7-5fb0-47c6-bb9c-a47e79298b73",
        "cursor": {
          "ref": "1d53b240-d821-4889-a7d8-a8b2690856cd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b0acade1-2eed-4d1e-a296-d67ac6bc2c7e"
        },
        "item": {
          "id": "c2a84ed7-5fb0-47c6-bb9c-a47e79298b73",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a4c5a759-400d-4fac-b35e-3ffa78489991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ded9ab4-f103-461d-a02e-fe4eca3b8ccb",
        "cursor": {
          "ref": "1ac452fb-7baa-48bb-be87-633d3176a730",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "10d7afe8-5fa1-4617-98df-5540b6f75464"
        },
        "item": {
          "id": "7ded9ab4-f103-461d-a02e-fe4eca3b8ccb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "16bc8579-7d8a-4021-9c2c-8d5d40168783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854fe092-e2e0-42e7-8178-ffbe8735419a",
        "cursor": {
          "ref": "38fde6b1-1f93-413f-854e-852441b658d4",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fe1e33a8-1546-405f-8d45-8a36fc5a6c3b"
        },
        "item": {
          "id": "854fe092-e2e0-42e7-8178-ffbe8735419a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d6e19f85-3026-40de-b8a0-3edae70f8c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb041fd8-08a7-4cac-b3b7-5a2f2fba9686",
        "cursor": {
          "ref": "bf1b763e-1af6-4665-8952-124c60563fb9",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9b4c796d-486a-485d-b9e2-3db771571079"
        },
        "item": {
          "id": "cb041fd8-08a7-4cac-b3b7-5a2f2fba9686",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5b188a8-aa66-409f-8de2-92848071995f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984706a7-cf83-4efc-acb1-1a7ae7521f35",
        "cursor": {
          "ref": "42f12188-fda3-4d61-ae0a-ef7e616799ba",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "81c3118f-66a2-49ba-a0a0-a1234a1a7211"
        },
        "item": {
          "id": "984706a7-cf83-4efc-acb1-1a7ae7521f35",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7f3795da-bdc4-43f1-b1db-9f7ee914af88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f937aa1-9f13-4a0f-ba57-097d16e11850",
        "cursor": {
          "ref": "f2f59c90-0134-4c6e-b740-d35d35866df6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d45f2151-f69b-46b1-b01b-74d6d5f4dc64"
        },
        "item": {
          "id": "6f937aa1-9f13-4a0f-ba57-097d16e11850",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c7f83e28-f7be-4d29-8eaf-dcfbb97cc14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9001e38-a5f1-4cdb-8d2a-1a9e4342acb5",
        "cursor": {
          "ref": "ff3807de-a3a1-4bae-95ad-7b310b84addb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5474910b-0c00-4437-b081-d2607744d479"
        },
        "item": {
          "id": "a9001e38-a5f1-4cdb-8d2a-1a9e4342acb5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8303b5bc-df35-4204-9131-6c8cbe1b8960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acbaf85-b809-48f7-9873-4d84d1443b6d",
        "cursor": {
          "ref": "b0379406-0c86-4fb6-ae55-a6a6cceb1fa2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fbb93235-f507-4ff3-b541-9c5d35efbd5b"
        },
        "item": {
          "id": "6acbaf85-b809-48f7-9873-4d84d1443b6d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1c788ef2-5ea1-41ac-87c2-3d6edf4186f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eda6d53-f67e-4ad9-bd4f-9b4faf632ab0",
        "cursor": {
          "ref": "63eb4a97-bb62-4d37-b152-dee1be0f82f7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4fefd6ad-3e77-49f3-b053-fdd7157a0c3d"
        },
        "item": {
          "id": "6eda6d53-f67e-4ad9-bd4f-9b4faf632ab0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "347adb18-c04b-4804-baa5-0dc7055fa9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1268fdb-c372-47d2-b400-c186c41d3a0d",
        "cursor": {
          "ref": "b207d3d2-84cc-49ed-a46b-35dbf0d02691",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "844fb566-4feb-4f8e-98fe-f2130493802e"
        },
        "item": {
          "id": "e1268fdb-c372-47d2-b400-c186c41d3a0d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "42b0b240-6c38-4b4a-bcfc-4e3d91572a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3629a7-b7dd-4d1a-bc36-a52f132afe63",
        "cursor": {
          "ref": "f7e62f56-4184-40ad-8759-149596df4d50",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fddf63f2-5b91-4839-b1e7-4a84026906d8"
        },
        "item": {
          "id": "bc3629a7-b7dd-4d1a-bc36-a52f132afe63",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b992e414-065e-4935-ab87-1f752c701733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0bdde1-fad8-47a5-b69d-738ee43501a8",
        "cursor": {
          "ref": "92657b96-64d3-464d-826a-71a44d5fa0aa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6b84515e-2073-4456-b141-1d5e99584326"
        },
        "item": {
          "id": "9d0bdde1-fad8-47a5-b69d-738ee43501a8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e17d46d5-4323-4a8c-8bac-338c7190a0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110b8460-3631-47a7-a0db-7bac16ef3dd3",
        "cursor": {
          "ref": "387c1c24-cc98-474d-85d3-881111498709",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fd4d5667-5846-4aa0-adc5-f22c411c11cd"
        },
        "item": {
          "id": "110b8460-3631-47a7-a0db-7bac16ef3dd3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3db81972-2a47-405c-adff-0278f67ae031",
          "status": "Created",
          "code": 201,
          "responseTime": 633,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "20587ed5-4041-4c5b-901e-48c54b2f73cc",
        "cursor": {
          "ref": "9d0b4ff5-d000-423f-9c53-ed273a589399",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fed80ce9-9aa2-4b31-a018-018af97455c7"
        },
        "item": {
          "id": "20587ed5-4041-4c5b-901e-48c54b2f73cc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "50bb9b41-efbd-450c-81c3-2e6b1b47d3c6",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3b200472-ac16-4f62-90f5-2b726508941e",
        "cursor": {
          "ref": "2d3df13e-af84-47c7-9959-dc7f39c9cb6e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43eb7328-342c-4ac4-bcc5-cdc4449b0bc1"
        },
        "item": {
          "id": "3b200472-ac16-4f62-90f5-2b726508941e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "58df8b94-60e1-4abb-90dd-3bc28b8ee2c0",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f69d4f76-9e65-401e-a9fd-b54f3ca536dc",
        "cursor": {
          "ref": "babfc5fa-bce9-4b6e-ac4a-5229ac4b8f67",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "be34fbe4-dc24-465d-a6f1-7cbf23bb10d3"
        },
        "item": {
          "id": "f69d4f76-9e65-401e-a9fd-b54f3ca536dc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6dc4d0cc-60cc-4465-80e3-6699c6746e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695824eb-fcdf-4122-ace0-a4faa7bde70f",
        "cursor": {
          "ref": "ef3355e1-3276-4cc6-8154-0acb48d9ef65",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e1baa30e-da54-428c-b675-1146ff00e900"
        },
        "item": {
          "id": "695824eb-fcdf-4122-ace0-a4faa7bde70f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ff93ac62-6ce4-4d80-96f4-d17a3cedb6c9",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "023072fb-485d-4dcd-bac4-c72422973d28",
        "cursor": {
          "ref": "1aafac72-5300-411a-b355-feffafa34fb6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ec2e9b22-8bef-4501-b616-35bf9f18b760"
        },
        "item": {
          "id": "023072fb-485d-4dcd-bac4-c72422973d28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7ba024fd-9a91-46dc-9d4e-a1665b7e25f7",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "93e47466-a141-4c5a-881a-8a3fe6429861",
        "cursor": {
          "ref": "41b0862d-a37b-4ccf-93f7-2344a559597a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "12ed22d6-89c3-44e8-ac06-01b66de437d4"
        },
        "item": {
          "id": "93e47466-a141-4c5a-881a-8a3fe6429861",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "62094507-2d1c-4a7c-8a24-4332f8a77aa3",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1b8dddce-390c-4cbf-8543-8bb847a9102d",
        "cursor": {
          "ref": "ab28a2b8-f02e-4315-8587-2ab1d300b211",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "413c3e04-dde7-49a0-b651-db941f9fa150"
        },
        "item": {
          "id": "1b8dddce-390c-4cbf-8543-8bb847a9102d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "eadc41f3-e2ce-472e-ade3-f4a5e3bd32c9",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1acb43c4-f7bd-41e1-be70-ac3020808e29",
        "cursor": {
          "ref": "16bfb5bf-0a86-4581-8c43-15d55ace1d1d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f96d3c6-5812-47a4-8122-68a627752746"
        },
        "item": {
          "id": "1acb43c4-f7bd-41e1-be70-ac3020808e29",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cbf8ac96-254d-497e-af0c-009fd8c4f0b5",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f5c694a4-8997-4a05-8565-c9fb6d8382ba",
        "cursor": {
          "ref": "9af90799-873d-453a-9c51-533875d0c7c9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9d7bf940-b28b-450a-9133-571d5660d203"
        },
        "item": {
          "id": "f5c694a4-8997-4a05-8565-c9fb6d8382ba",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e49a4dbe-277a-4479-8cab-533195ab1c23",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e9f31c2e-c03c-4180-8aa1-e440c7755f79",
        "cursor": {
          "ref": "bff13c8a-4a3a-42b8-9d9b-84ad161e29d4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa7e28a9-ac02-416f-a8ee-ab3309395ac3"
        },
        "item": {
          "id": "e9f31c2e-c03c-4180-8aa1-e440c7755f79",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7088d90b-31ce-47df-9418-6048a38cd076",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3fcde053-45db-444d-a7d1-4f19165b8326",
        "cursor": {
          "ref": "30cd3161-40b4-44f8-a35d-f002d80a5a08",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "297b21a6-cf71-4860-8155-f212be71e7dd"
        },
        "item": {
          "id": "3fcde053-45db-444d-a7d1-4f19165b8326",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "793c5758-19f2-4c0a-9b8c-a09bfaa6e1aa",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "74924efb-d27b-480a-8324-340b0602b8f3",
        "cursor": {
          "ref": "c817fe9f-4e93-4f69-85f4-9afd7f645c90",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6acf7765-ce44-4d85-a681-1150182e2e0e"
        },
        "item": {
          "id": "74924efb-d27b-480a-8324-340b0602b8f3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c5d05b4b-445b-49cf-b0a8-234eff2ddabf",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e8ad1118-444f-4821-9627-eb12ab7d224a",
        "cursor": {
          "ref": "94b09fd1-b6d3-44e4-a999-4149152959a0",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6744118f-32a1-4fe7-a13c-fe2c3e105c0d"
        },
        "item": {
          "id": "e8ad1118-444f-4821-9627-eb12ab7d224a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "efd9ee7d-c9db-4401-bd0a-c6792cf959e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455c2d5a-6fbc-414a-81b9-a1187f5a18b3",
        "cursor": {
          "ref": "3ae06974-344f-45b4-9963-e19e4acecf20",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f1f37bfb-f12b-478f-9643-b902f418fa55"
        },
        "item": {
          "id": "455c2d5a-6fbc-414a-81b9-a1187f5a18b3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6a024d5f-8407-422e-a130-29bc282d6b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de45d61-aef9-4bfe-91b4-814a0cc58a33",
        "cursor": {
          "ref": "04e87fd2-cb2d-4c6a-8a65-4d6e889a6796",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a134c7f4-fe59-4898-9c0e-ae4795dafe5e"
        },
        "item": {
          "id": "5de45d61-aef9-4bfe-91b4-814a0cc58a33",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "305fef41-7388-4e79-8605-c72f3e5799e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f594fb0a-65b1-49a4-92e5-6e652235b9d8",
        "cursor": {
          "ref": "88be6ba2-365c-4354-ac8a-03f5a4fd9ac3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "975c6b5f-64ba-480b-a468-14b30f9de009"
        },
        "item": {
          "id": "f594fb0a-65b1-49a4-92e5-6e652235b9d8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "aa742ed7-ab75-4009-9d76-25c6de6da4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7799e48f-8300-4397-8b1a-fbaff928b3d1",
        "cursor": {
          "ref": "b7050f08-79a9-44c4-8fed-11ab8ce5b5f0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "83c93bba-56f6-44b0-963d-bb72268b1c59"
        },
        "item": {
          "id": "7799e48f-8300-4397-8b1a-fbaff928b3d1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9801ff9d-8711-4e68-a26f-ed662bdd5af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a721ecf7-c133-4dfb-8b69-ed1d3aa0af5d",
        "cursor": {
          "ref": "5aefee06-5b9d-4f5e-a3a1-65bf7dd36718",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "831b6dd0-0185-449a-b9c5-4aff30304b48"
        },
        "item": {
          "id": "a721ecf7-c133-4dfb-8b69-ed1d3aa0af5d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e2afd5db-e7d4-416a-ad85-ae9cc44cc0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e47d16f-0aa7-446e-8790-5add9ae561c5",
        "cursor": {
          "ref": "67460688-b838-41f3-bf55-d678695033c0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7d24af26-2485-49f8-aa17-9f0dd00ffdc4"
        },
        "item": {
          "id": "3e47d16f-0aa7-446e-8790-5add9ae561c5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "edfe8bde-511f-4eb2-9ffe-50f282e4781b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b915086b-98ce-472c-807b-0916739a3384",
        "cursor": {
          "ref": "71c03b41-60e3-4713-a1cc-8b1d5fc18ab3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4a748c06-7dc9-43fd-8f99-4ea030c14826"
        },
        "item": {
          "id": "b915086b-98ce-472c-807b-0916739a3384",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "067042a8-17f5-4c89-8c27-19ed275c7599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0443d967-8528-4c5e-ad63-d3a00ec4206c",
        "cursor": {
          "ref": "800f4248-6718-47e9-919f-fb5f3b428aca",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef0a4fdf-7014-4117-91b1-d36beb657737"
        },
        "item": {
          "id": "0443d967-8528-4c5e-ad63-d3a00ec4206c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5c41ee94-598d-4c03-9119-14712c750dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27221b7b-d193-4a12-abd5-510eac2941b6",
        "cursor": {
          "ref": "323cbdd1-9167-42f6-a9ee-c16135c1a139",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "761b5e94-b911-4b9c-91b5-bc7fdfa89125"
        },
        "item": {
          "id": "27221b7b-d193-4a12-abd5-510eac2941b6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "38f5037c-81f0-4727-9992-f302d63700a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42be5b24-2a74-4a19-86e4-ea6b4df5b807",
        "cursor": {
          "ref": "7b255229-411c-4c25-8fa7-27150b487141",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3386485d-0afc-483f-b19d-e98888e8b83d"
        },
        "item": {
          "id": "42be5b24-2a74-4a19-86e4-ea6b4df5b807",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b3fa7b68-f902-44bd-badf-8d9862273cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980ded0f-9ffa-4806-8bd0-69466d32df76",
        "cursor": {
          "ref": "718a291c-236d-4f18-a66d-4678371bc37d",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "644fb9ea-53be-4b51-b070-78310872a224"
        },
        "item": {
          "id": "980ded0f-9ffa-4806-8bd0-69466d32df76",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bd44a37f-9950-478d-add0-29b8f63a19fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb30838-eb9d-4148-9a9a-d2b11a2c7cef",
        "cursor": {
          "ref": "1cd74b50-586f-479a-944c-251e4a5936ae",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3f288225-fc5d-4f65-a863-76a5a0c9ef61"
        },
        "item": {
          "id": "8cb30838-eb9d-4148-9a9a-d2b11a2c7cef",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "780ad865-4208-4437-8937-de3bb4c1d4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5620cd32-bb2d-4753-ba7d-d3d33417dba4",
        "cursor": {
          "ref": "9b165788-d570-4d87-9f82-e50a8c866700",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6f443df9-4ec9-4757-9713-e62f8945c3c1"
        },
        "item": {
          "id": "5620cd32-bb2d-4753-ba7d-d3d33417dba4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cafdca03-d12b-4576-9611-ae3045d094ea",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "172a68d2-bc91-48a6-a1d0-0d1b47ef7f2a",
        "cursor": {
          "ref": "3be96749-73e5-4347-9762-ea35d9205731",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ae25afea-79f4-4646-a2c1-90db5d0be96e"
        },
        "item": {
          "id": "172a68d2-bc91-48a6-a1d0-0d1b47ef7f2a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4787e1b7-85fb-463a-97f2-5ac671b66af6",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "af6b99c7-fb87-4e9a-9e32-ba19e9ac2b8b",
        "cursor": {
          "ref": "b2610b31-11b0-4820-91f4-569ee510e283",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0f37d6dd-f705-408f-a67d-2fdf5c94cb26"
        },
        "item": {
          "id": "af6b99c7-fb87-4e9a-9e32-ba19e9ac2b8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f34cb893-6a2d-4dad-abfd-aa1fe7f26e8f",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "50c30aa6-853e-452c-85f4-f959e29191a3",
        "cursor": {
          "ref": "9567ac2d-611a-4a64-b52f-caa9a03a0349",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9fef7e77-0735-463d-b8eb-523f1e79c6fc"
        },
        "item": {
          "id": "50c30aa6-853e-452c-85f4-f959e29191a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e47a1e76-2b14-4081-9b35-ba7a6014858e",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "79541642-fd19-4c73-be8b-484e0ad6f2c0",
        "cursor": {
          "ref": "7c53af28-1c82-4ab8-a16d-520f281b3098",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2dd8e921-6ef3-42b6-82d3-0eca206b6d66"
        },
        "item": {
          "id": "79541642-fd19-4c73-be8b-484e0ad6f2c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "55bbe837-0612-436d-8a13-d63ac873379e",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4572ffc7-c993-4620-8c24-b64a88af2b5d",
        "cursor": {
          "ref": "dd36ee2a-f888-4a17-aa20-b79042457e85",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d52fbb28-6aca-48cf-bf3f-e19f2960a6e1"
        },
        "item": {
          "id": "4572ffc7-c993-4620-8c24-b64a88af2b5d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c95baf87-9f10-4e73-b43c-b04091e5d324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94a63f2-4b15-4784-a30a-26fb6f68a8ad",
        "cursor": {
          "ref": "bc5cdbf2-8768-4cd5-b5aa-cf6801bbadd1",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d3230c83-84d0-43d8-80e4-e68e586c416d"
        },
        "item": {
          "id": "d94a63f2-4b15-4784-a30a-26fb6f68a8ad",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cfcbd9e8-dc9b-47f2-bcf9-c0289cdf7090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f95f519-7e3f-4e7f-8e36-1a0f89f41700",
        "cursor": {
          "ref": "43b34817-4318-429b-b1b7-f7b993f23651",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "31e7c715-f9f5-4595-94f6-4fea41a8c7b3"
        },
        "item": {
          "id": "0f95f519-7e3f-4e7f-8e36-1a0f89f41700",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "34351e44-c4b0-4d25-9d95-705516d06311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9830995f-7464-4b40-a11b-e6bfaef7a023",
        "cursor": {
          "ref": "43c30327-1a66-488b-9228-6eedccd9d641",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8950b120-4277-424e-b046-dd672d47f2dc"
        },
        "item": {
          "id": "9830995f-7464-4b40-a11b-e6bfaef7a023",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2dbb3c68-f4df-4092-81f0-1a24fb62b3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e85a1e-6ddf-4d59-9eb0-698f578d8dca",
        "cursor": {
          "ref": "05a2f55b-b599-4837-91ff-aca6a54d04b9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "02e039c7-7466-40ff-9210-782f51e4acdb"
        },
        "item": {
          "id": "28e85a1e-6ddf-4d59-9eb0-698f578d8dca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1dcbbf73-500e-4ecf-bffc-da76e1aaa748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3faf21-3f96-46c2-a322-f1e0d11cec88",
        "cursor": {
          "ref": "850f78db-665c-4c22-ace9-35e620171caf",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "23762ad4-7766-4119-b9ac-571b8dec4ec1"
        },
        "item": {
          "id": "0f3faf21-3f96-46c2-a322-f1e0d11cec88",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "87e75ad8-5458-4c25-aa3a-4365831dc9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2357f798-cc67-484e-a669-cd4a00f6ee32",
        "cursor": {
          "ref": "1f55d36b-5f11-4578-98ee-783971e5c0ed",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "01d5a749-749a-412e-a05f-236251470a49"
        },
        "item": {
          "id": "2357f798-cc67-484e-a669-cd4a00f6ee32",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "804d2e6b-2451-4fa1-b51e-c51ddf3527f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1df7004-5272-45e2-8cfb-56485c095068",
        "cursor": {
          "ref": "04b75fc3-9470-45fa-a231-dd13bfc8eeba",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3d4124cf-b445-4bc3-8fa7-740667fec9db"
        },
        "item": {
          "id": "d1df7004-5272-45e2-8cfb-56485c095068",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9d5bf434-88e8-4620-98af-ef1ccdeb59c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d44fd70-8db0-43e2-9012-00fbd38c98b7",
        "cursor": {
          "ref": "31e9f62b-9f0d-4461-93f1-750892154a3a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "536a69ba-7338-40d2-838f-32ceb646f107"
        },
        "item": {
          "id": "3d44fd70-8db0-43e2-9012-00fbd38c98b7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "85c99d60-905c-4d6e-b4ed-c087d1241421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d028a47-557b-485b-9b3d-a67a1b9ea776",
        "cursor": {
          "ref": "a475b9a6-93a8-4b96-a5d9-50140ccc1f42",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "63088a0f-b8ec-4fd3-a81d-0db7fc16a3af"
        },
        "item": {
          "id": "6d028a47-557b-485b-9b3d-a67a1b9ea776",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3038e64e-8113-435a-b77a-c852575a8f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7f7bb9-284d-400a-934a-ab4c24f5f4e6",
        "cursor": {
          "ref": "a4d6dd9e-91ec-4106-8b95-b2281b0c0433",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8c6e0473-f800-4fa4-a4de-9d9cef0ba3b5"
        },
        "item": {
          "id": "3a7f7bb9-284d-400a-934a-ab4c24f5f4e6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9a9d42bf-645c-403e-a3a3-f1f3b2af7d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d137e906-f0c1-4fb1-995d-9310f3580bf5",
        "cursor": {
          "ref": "7b040ad0-f03e-4a52-a7c0-dcfc36935b68",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f9058d85-d8c1-449d-87c9-43d27f0769c7"
        },
        "item": {
          "id": "d137e906-f0c1-4fb1-995d-9310f3580bf5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5a11954a-2479-4f26-b64e-a3c91287a03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e808668-90c7-4ec0-b28d-76cdc36a11b5",
        "cursor": {
          "ref": "3bd216d9-5467-43cc-af50-6e971fb53216",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "85ccb044-4bdb-4db2-81d5-89719f5d8a4d"
        },
        "item": {
          "id": "4e808668-90c7-4ec0-b28d-76cdc36a11b5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e5b8e4a9-027b-472b-ad55-fed43b774522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b97240-fc26-4c74-9de1-b3b4634f8e30",
        "cursor": {
          "ref": "14b65618-943c-4a6b-91f0-3010a7e60646",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bd180458-1f64-4d37-9699-b3a92c272a59"
        },
        "item": {
          "id": "28b97240-fc26-4c74-9de1-b3b4634f8e30",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "37e93afa-b57d-4b19-8d05-9ae4c136f0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9924527f-a0e9-4e30-b890-db15ed26fe0a",
        "cursor": {
          "ref": "0c025b24-1a21-4f71-8a14-6c8dbffe68fc",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bd8d5fad-d5f1-45c7-b2cb-3bb3ec41791d"
        },
        "item": {
          "id": "9924527f-a0e9-4e30-b890-db15ed26fe0a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4273eeaa-858d-41d3-898e-77b836c27a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a032e23-9b66-43c8-ace2-81c544b7b994",
        "cursor": {
          "ref": "1349daab-897a-4181-bfcc-74a95c1331cd",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a8bd9fb8-3ba6-4a42-8045-5ce563c73bd3"
        },
        "item": {
          "id": "1a032e23-9b66-43c8-ace2-81c544b7b994",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6383e7e5-3cc4-44a8-92f7-128e23c13de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc717e3-6d25-4773-ba33-642f40f55573",
        "cursor": {
          "ref": "09fa1ec6-e61e-4c8d-a0db-7a3d34b1cc74",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5958a536-efb2-41aa-903f-bd5b39a3f929"
        },
        "item": {
          "id": "5dc717e3-6d25-4773-ba33-642f40f55573",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ca551f09-f9c7-4f9f-83dd-d333b63ec53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adda53ec-0c8e-4dcb-a7fb-9d36edeb3257",
        "cursor": {
          "ref": "aa329937-6987-402f-9954-87959da376b2",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "19fb9b37-1804-4871-ba22-cc1a381c4186"
        },
        "item": {
          "id": "adda53ec-0c8e-4dcb-a7fb-9d36edeb3257",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b072575e-2d47-4047-91af-1f26494280f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4db32f-8292-413b-afca-18070a46054a",
        "cursor": {
          "ref": "f467eeeb-e71f-4dcf-8555-7a3643d86014",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dc6c033e-4230-4346-9ba1-fb8f8f6c3dc8"
        },
        "item": {
          "id": "ca4db32f-8292-413b-afca-18070a46054a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c1f4145d-6aec-479f-ac5f-a12b8b8ffec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae40b4c-3d97-4f37-a220-2d9d46aadff6",
        "cursor": {
          "ref": "ecf2babb-7ff6-4246-8ae9-2fcd3011c39e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f0790ee0-5b3c-4936-bac1-0d65358cb794"
        },
        "item": {
          "id": "4ae40b4c-3d97-4f37-a220-2d9d46aadff6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a6df3ffd-7257-4220-bc24-6dd36118773d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e586b23-3433-4d6e-bb79-1b6fa538287c",
        "cursor": {
          "ref": "b868b50a-08e6-4d11-906d-37200179d5df",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "28e11b32-2234-454c-9833-557dd2469932"
        },
        "item": {
          "id": "3e586b23-3433-4d6e-bb79-1b6fa538287c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "62d0f1a2-9243-4227-be07-61e06e0faa11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e46da4-8cb0-4d31-8b61-f7aca4b387f1",
        "cursor": {
          "ref": "1126b762-049e-4262-af87-a04e8c4f8cab",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "40cd9a60-7df7-4a79-9b2b-26354ee2f6ac"
        },
        "item": {
          "id": "33e46da4-8cb0-4d31-8b61-f7aca4b387f1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6f790265-c2cc-4c13-9614-f643b44d47fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d9d49e-d160-47ea-80e3-005a7f963a72",
        "cursor": {
          "ref": "576a079a-5ce6-406e-bdd9-32ab82d05b42",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8f3b7533-572e-4a9f-ba8e-00123f0adbbf"
        },
        "item": {
          "id": "07d9d49e-d160-47ea-80e3-005a7f963a72",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9435e066-54a5-4cef-8f39-cc39f29a604b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d354f9e9-46b4-4415-b5fc-4eb227db0265",
        "cursor": {
          "ref": "a7a3a91a-58c1-45d9-b6a3-0b1814b15e0e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2c6968fc-b6be-4577-9aa6-4259889603f6"
        },
        "item": {
          "id": "d354f9e9-46b4-4415-b5fc-4eb227db0265",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "645b2cc3-4daf-48e4-8273-b92f2ee706f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3190bb9-dfc7-4ba0-8c76-d386d923e3b4",
        "cursor": {
          "ref": "727984dd-a5e5-4407-bc24-cbe2004770eb",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "001e1029-6e19-4f9c-81f4-fd399b0dec93"
        },
        "item": {
          "id": "a3190bb9-dfc7-4ba0-8c76-d386d923e3b4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "22528b01-8a40-4844-abe0-d8c9e2712211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375c586a-9f15-4318-b937-1a064d984e4b",
        "cursor": {
          "ref": "050abd1f-980c-440a-a026-6f0b25de4674",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "527d0943-07dd-4497-89bb-57590e644c11"
        },
        "item": {
          "id": "375c586a-9f15-4318-b937-1a064d984e4b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "855f3037-d16d-4c5a-9813-3ab0af3a4103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6c11a2-d5eb-41f8-be27-78b6e5584ea6",
        "cursor": {
          "ref": "f659f7f6-86a3-413c-be20-2db0f2f54f8e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4186f84c-4f68-44c8-a45a-443c0022cefe"
        },
        "item": {
          "id": "7f6c11a2-d5eb-41f8-be27-78b6e5584ea6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c6f5710b-8b1c-4eb2-ba34-9129dc983d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d42dc6d-9205-4354-bcb3-638488cfdf5c",
        "cursor": {
          "ref": "c3f9b1c8-fa08-4a6d-a3f5-5074d8250447",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e24f5a2f-e76e-42d1-aab2-d47a57526a13"
        },
        "item": {
          "id": "1d42dc6d-9205-4354-bcb3-638488cfdf5c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e6a12bf1-c162-49aa-af1e-cb9b144192e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c18555-ffd4-406f-9eab-58937bbfd43d",
        "cursor": {
          "ref": "9f66e634-fb7a-4295-9413-a282212f2ccb",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3baf93e2-e16e-4444-bbdb-1f22edc5414b"
        },
        "item": {
          "id": "c3c18555-ffd4-406f-9eab-58937bbfd43d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "32505ecf-43a4-4c46-941d-72d18e2dd4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f320f52-ebd3-4a3e-b6a7-22d435f21ae7",
        "cursor": {
          "ref": "96a3f971-6585-423c-8d08-a668dfefb15c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9559dc8a-e5a5-4f5c-a1cb-16c53617968f"
        },
        "item": {
          "id": "5f320f52-ebd3-4a3e-b6a7-22d435f21ae7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "57f6b2ab-dd52-4c99-ba2c-7d769a23e84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef9a280-8fb8-4da3-8ffd-e004cb920f8b",
        "cursor": {
          "ref": "e3c9f490-3580-4c1f-bd64-ae2136b16f1c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fa571a0e-7809-43fa-92b1-799d26f9aee5"
        },
        "item": {
          "id": "5ef9a280-8fb8-4da3-8ffd-e004cb920f8b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5e2b3007-067c-4f70-a278-0cf883e0ebc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29308af-30a7-4c13-8217-f748df1cfc4e",
        "cursor": {
          "ref": "f6aa067c-64f6-4dfa-ad60-1753a453ff1c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9a262136-1e71-40d2-8c76-8d115c03ee73"
        },
        "item": {
          "id": "c29308af-30a7-4c13-8217-f748df1cfc4e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f95863d3-ae72-47ff-8fd3-6ac9cc2204e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795b5837-6864-4e71-a615-188225038d64",
        "cursor": {
          "ref": "65e2ae49-dc07-4536-a88d-266bc8e52511",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ac0bad94-da0a-49be-a365-e49183c5b1db"
        },
        "item": {
          "id": "795b5837-6864-4e71-a615-188225038d64",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a5f749b1-5d53-4a2c-a723-01086d8db63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0dbadc01-f75f-443c-9c2d-15a9e131192d",
        "cursor": {
          "ref": "43b7a6cd-b00f-4934-b24b-36eabd5d8930",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "422930f2-9b69-4d9e-a4d1-44c08a2019e5"
        },
        "item": {
          "id": "0dbadc01-f75f-443c-9c2d-15a9e131192d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "69be474c-3d27-4442-bf0d-62be764c86c3",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cee43b-418f-4a97-914f-6a20e82406c3",
        "cursor": {
          "ref": "4141e062-f5b9-449d-9abf-cca5ba51e156",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c34c0779-8865-48ed-bffc-d4075a258292"
        },
        "item": {
          "id": "68cee43b-418f-4a97-914f-6a20e82406c3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dcb4b63d-1bc0-425a-ab37-266a63933a2c",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2003a0e3-f066-4e8f-b1b1-ecd0419ba0aa",
        "cursor": {
          "ref": "ea13b1e8-9aed-43a8-8985-44788c235fc8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0daabcab-174f-470a-ae63-e6d0d61dc3b8"
        },
        "item": {
          "id": "2003a0e3-f066-4e8f-b1b1-ecd0419ba0aa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "334c3d48-80cf-4e09-ae68-9618431c6f0d",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4a8873-ac25-4ddd-a1d5-4234096adffa",
        "cursor": {
          "ref": "a04943f2-3a4a-4c71-8e04-5d55d1d29764",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "493600bd-60f8-4e2c-9b8c-7d1504d91035"
        },
        "item": {
          "id": "ef4a8873-ac25-4ddd-a1d5-4234096adffa",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "08c92605-8c54-43fe-a3c6-d737e48e8e2b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb65ab7b-feac-43bf-a829-111cc7f83677",
        "cursor": {
          "ref": "7c2fd5ce-8289-4e6c-bd7d-157fef642aac",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5fe11191-90f2-4fea-b3b9-cc93caec05d9"
        },
        "item": {
          "id": "cb65ab7b-feac-43bf-a829-111cc7f83677",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "04f5fdb7-4b38-41f5-a97a-1333efbb2cca",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-26T00:34:51.009Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-26T00:34:51.009Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "309e37dd-7ced-4f74-b7e0-805f2ca1a428",
        "cursor": {
          "ref": "e8dd81ed-8008-49b3-bff3-1fa4a3ec4b2c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1aeef831-0087-4d9c-a1ba-7dc7e18c4a68"
        },
        "item": {
          "id": "309e37dd-7ced-4f74-b7e0-805f2ca1a428",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ba20cb12-6aa8-45d2-baeb-330bc827b1d7",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ec56d9-5242-49cd-a84f-02b731815743",
        "cursor": {
          "ref": "226d6245-5445-44a1-92c3-167a0f353645",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "810814ed-222e-42a8-bfc2-e4071598af42"
        },
        "item": {
          "id": "04ec56d9-5242-49cd-a84f-02b731815743",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67133260-7924-4b46-a506-719047f2658a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e3601e-7fac-460a-bf9c-581e7e3f3573",
        "cursor": {
          "ref": "8ac28009-90a8-4ffc-b5c1-68b03eeb2f11",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "de92ce41-3747-4702-94f6-2446f2c63c1b"
        },
        "item": {
          "id": "55e3601e-7fac-460a-bf9c-581e7e3f3573",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "313ffdc3-85be-45d7-bfad-ed32b5cfdcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee76432c-0ce2-440b-a70e-c318a6b8896c",
        "cursor": {
          "ref": "aadd8794-a826-4058-831d-be393b8a18f7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2cb4c695-e682-49fd-8e43-487943cdc43d"
        },
        "item": {
          "id": "ee76432c-0ce2-440b-a70e-c318a6b8896c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4378e35c-dddb-4f21-8ff9-eb52fc4b6fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fb6886-38fa-4a06-9119-6bc58084574d",
        "cursor": {
          "ref": "2b41db87-103c-4fc5-a44f-441c622e6cf0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2de1acf9-e28b-4554-8bfb-a3559f45f4f0"
        },
        "item": {
          "id": "d5fb6886-38fa-4a06-9119-6bc58084574d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "db3be00a-549e-4545-ab8c-fa64b73c96d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1254bd-b00c-47d7-94a1-8bd5a68c59f8",
        "cursor": {
          "ref": "2d46ee94-1114-4b91-98a7-db74f63ffedb",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "489841a1-d7aa-4163-b02d-838a92a36dd9"
        },
        "item": {
          "id": "be1254bd-b00c-47d7-94a1-8bd5a68c59f8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "35273d95-e27e-4ad8-b8ef-4908cf197a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b97b40-b8db-4f2e-b41f-090cc7dcbf1f",
        "cursor": {
          "ref": "2e9f94e3-ad18-4d2e-b967-69dd0b54adbc",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0347b993-518e-4ea7-b045-c90e2c0c7150"
        },
        "item": {
          "id": "59b97b40-b8db-4f2e-b41f-090cc7dcbf1f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8c615723-0d73-4652-b242-19c21c71b956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbc26d9-704e-4ffa-9667-0ebcad3985aa",
        "cursor": {
          "ref": "7874ad29-babc-4d71-8733-299170e89de1",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f1cd1508-a756-405c-a2ca-c043eca6621f"
        },
        "item": {
          "id": "1cbc26d9-704e-4ffa-9667-0ebcad3985aa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1c81c84a-7b4f-49ad-8928-35b55af0febd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064b3c2b-427d-4762-936f-5750d84c0785",
        "cursor": {
          "ref": "ebf46c04-f197-4ec2-8207-62b1ad6e54c0",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0796ff4f-afda-4a72-b20d-32dcdff5d58a"
        },
        "item": {
          "id": "064b3c2b-427d-4762-936f-5750d84c0785",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d6781535-b52f-43fd-ba07-b145f6717bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b461a15d-bf42-47b2-a7dc-2abf2d38c041",
        "cursor": {
          "ref": "4660d4e7-86d3-48a0-9bf9-a40cc92bd8a2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dc3dc661-3cbd-490a-ba9f-82d1c4ed8773"
        },
        "item": {
          "id": "b461a15d-bf42-47b2-a7dc-2abf2d38c041",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d331d317-960f-421a-96c1-dab87ddbd31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8439ace7-736b-4a03-bd8c-3c2dd24f38fc",
        "cursor": {
          "ref": "6b5a3d96-e7aa-4178-9147-9fc2463f16f2",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "921fd58f-cc1a-4fb3-b560-b2f3fa913a0e"
        },
        "item": {
          "id": "8439ace7-736b-4a03-bd8c-3c2dd24f38fc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fbe77e82-f520-4d5b-8cc8-8adf92cc3e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a41485f-12b4-477a-8bd6-c568ce7d4eb0",
        "cursor": {
          "ref": "a390c33d-0832-4359-8a11-382cee2425bc",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "848ebc90-41ef-4cd1-b8a5-4fc49c59d5ce"
        },
        "item": {
          "id": "3a41485f-12b4-477a-8bd6-c568ce7d4eb0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "102cd885-1a51-4369-8483-dd2358294f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aab37bc-a096-4d22-97c3-dc5cff23c78f",
        "cursor": {
          "ref": "ceb23cd2-545f-4808-b97a-00e4dbdf7d00",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "05c1eba0-d7ba-4b0f-ab1b-e4bc37a9638a"
        },
        "item": {
          "id": "5aab37bc-a096-4d22-97c3-dc5cff23c78f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2fb570ff-3561-434d-81f3-81f9d8ef696b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16ca49-252b-4885-a5ea-bf571ab03143",
        "cursor": {
          "ref": "06d6f23c-2401-416e-9780-1ec3965a9bc3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "79341cc3-b134-4e91-924e-8257add64708"
        },
        "item": {
          "id": "6a16ca49-252b-4885-a5ea-bf571ab03143",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d1e0d9a2-191d-408d-86e1-14bc5758d9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13675ec7-089d-4c02-9f2e-35da124d7646",
        "cursor": {
          "ref": "07613c54-0791-46e1-b4a9-fc16124a5bba",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "02f9c9f9-1a3b-4641-a93c-0d72d8112853"
        },
        "item": {
          "id": "13675ec7-089d-4c02-9f2e-35da124d7646",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "621d5d9f-bf3e-4056-82d2-3127a8816de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a481cd13-83d8-4f8a-af51-0d1d19ad976f",
        "cursor": {
          "ref": "274b8db2-f65e-48fe-8619-adb9ff9b9131",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2e355640-44bd-406d-8f08-c3104231978c"
        },
        "item": {
          "id": "a481cd13-83d8-4f8a-af51-0d1d19ad976f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "485fba4d-6068-4579-a2e3-63d5826a241b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15290da1-d274-4f8a-bef4-7fe78c7eebbf",
        "cursor": {
          "ref": "06b202fd-f68e-442b-89b4-030f34688c11",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d912c3ad-4607-4e9c-8339-ae04e33ef1fc"
        },
        "item": {
          "id": "15290da1-d274-4f8a-bef4-7fe78c7eebbf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "74d3d74d-6623-4dad-98ff-d83c726d1fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f74dc3-fb47-410b-8d7d-6d9dffc17ca5",
        "cursor": {
          "ref": "9a9d6238-ee2a-4132-8129-eaf44ee552f1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5723f064-30f7-44d7-bb3e-c873b03f8ec4"
        },
        "item": {
          "id": "05f74dc3-fb47-410b-8d7d-6d9dffc17ca5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c2a83225-308a-4f52-a2e9-6aa2f48cc615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b7d334-2e25-4bd2-987d-2a804e8d60b3",
        "cursor": {
          "ref": "2221ca6d-61fe-4dd4-b143-6f14da805404",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cdfecc65-3b2b-4b1f-b4d9-4c957dd3ff0e"
        },
        "item": {
          "id": "27b7d334-2e25-4bd2-987d-2a804e8d60b3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ec85f74c-eaf3-4fc1-a70c-66829c3b0c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0805b970-0ee1-4a1b-a9cc-4ffc3ed04b72",
        "cursor": {
          "ref": "d521f06e-a467-4d10-8511-c73a95d44e5b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ccbab19a-73e0-40e6-947b-fb1d91e103db"
        },
        "item": {
          "id": "0805b970-0ee1-4a1b-a9cc-4ffc3ed04b72",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "82a45432-f3c5-40b6-a6c7-2be8a7fa7620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d4f0d-3d1b-49f4-b9bc-3b2ec6b608ed",
        "cursor": {
          "ref": "4a023015-61fa-47d5-b017-7f3e51bed30e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f57054a8-0193-4f5d-a05f-4f1d2321ee09"
        },
        "item": {
          "id": "b22d4f0d-3d1b-49f4-b9bc-3b2ec6b608ed",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f049d758-49d0-484b-b0a3-f7f020b33a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f0648c-ae2c-402a-b089-a6e8a904c0c2",
        "cursor": {
          "ref": "045ce303-378d-42b0-81d2-b0704e6906a2",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1864b07c-c8d5-480f-be9b-b177b07d8b81"
        },
        "item": {
          "id": "38f0648c-ae2c-402a-b089-a6e8a904c0c2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fea5ddd-7990-448e-8a8b-f97943ee5b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2231643-cfe5-426f-9cc4-723de3afb03e",
        "cursor": {
          "ref": "c4bd95db-438b-48d6-b7df-37b8f6a0aab1",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cd7137a1-02d7-4cab-973b-0ea3df73acaa"
        },
        "item": {
          "id": "a2231643-cfe5-426f-9cc4-723de3afb03e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "40b0565c-71d4-4844-a9d9-5c9070c9cd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182508b4-ccc5-4926-ae9b-1236337f811b",
        "cursor": {
          "ref": "3157ffea-fe81-4eaf-b4eb-4f6d913bcb76",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "60c77856-41a6-45e5-8119-82188eb9e802"
        },
        "item": {
          "id": "182508b4-ccc5-4926-ae9b-1236337f811b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "80c12e01-d905-42d5-b462-1d72ceab1482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bdf96d-8dc6-4a5a-a246-f5f96fc1fbaa",
        "cursor": {
          "ref": "70c927e6-1956-4c8d-b532-3dd0d91f47e8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "87915ca4-7f1f-4a57-88dc-3080c2f495ff"
        },
        "item": {
          "id": "12bdf96d-8dc6-4a5a-a246-f5f96fc1fbaa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "212e0801-8800-4ef2-a9bc-e02113fe951c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b56836-7288-46ae-a2f1-ce72cff3161d",
        "cursor": {
          "ref": "2dacb58f-9d08-4beb-99e4-552243925e5a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5ad6e804-b97c-457f-bbfb-1f21ee8151fe"
        },
        "item": {
          "id": "99b56836-7288-46ae-a2f1-ce72cff3161d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bff7531f-5fcd-4264-a85d-8ee562821f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da30effe-16b2-4154-8cd2-c3b9f078e059",
        "cursor": {
          "ref": "5b9cead8-250f-4a32-8d5f-ae85d38c4fb2",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a059179f-1099-4f4b-92eb-53f71afdb3eb"
        },
        "item": {
          "id": "da30effe-16b2-4154-8cd2-c3b9f078e059",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a022be23-b6cf-4f65-81fd-0486a337f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683e515e-6615-43b6-9167-48254b0ed1e5",
        "cursor": {
          "ref": "3343cbf4-fff2-42fa-98a7-935fa254c3c9",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6bec6127-4170-4291-9cb8-0a6b55a540b7"
        },
        "item": {
          "id": "683e515e-6615-43b6-9167-48254b0ed1e5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b94d0300-f4ea-497c-8895-e9213492eea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae23ba0-baf5-44b6-8076-2ab26cde11f1",
        "cursor": {
          "ref": "4fa9457a-780d-45be-ada7-e4d4560bae71",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fb38a053-9deb-45e7-86a8-7d318e05d4ce"
        },
        "item": {
          "id": "9ae23ba0-baf5-44b6-8076-2ab26cde11f1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e8e2d121-0714-4ff9-a678-3ab32a5901a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8001e1-a6ab-49cc-9255-72147981a583",
        "cursor": {
          "ref": "04cd0cd5-2984-4e03-8418-ea0997fa959b",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e2756c27-b2e2-42a4-a175-2570bfdb8744"
        },
        "item": {
          "id": "5c8001e1-a6ab-49cc-9255-72147981a583",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "34e43aee-ad1f-459e-bf05-b50b78c47f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa3512a-026a-47b7-9598-ca04e116d96d",
        "cursor": {
          "ref": "283f77e6-bad8-4027-b61b-48fed2d164dc",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aae216e4-1127-4506-955c-cb5ee7b7391b"
        },
        "item": {
          "id": "6aa3512a-026a-47b7-9598-ca04e116d96d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "48c50fca-c047-42b0-8826-59939f30c069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f16fd58-2911-4cad-9dac-e4bae08a23d6",
        "cursor": {
          "ref": "00ffa3a5-98fd-4422-ad4a-76ff5a56234c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9c257e2f-7b6b-4391-81b5-a89c8be95ded"
        },
        "item": {
          "id": "1f16fd58-2911-4cad-9dac-e4bae08a23d6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5b06c0f2-1739-405a-908d-09a3ab88339f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dda81e-22e6-4e7c-bb71-aa7cb22f1adb",
        "cursor": {
          "ref": "754b5ecd-f037-4747-a916-4f9f266a7ed2",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4f59565d-b099-489c-9ec0-9a6c7b645d92"
        },
        "item": {
          "id": "19dda81e-22e6-4e7c-bb71-aa7cb22f1adb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fa8abd22-1e89-4224-b59b-649189f80bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5185989-dce7-4bb6-bc8c-a0d6f6ba2141",
        "cursor": {
          "ref": "ef172c21-145f-418d-945a-c4d7327b3921",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c9472d9d-6d18-4752-a7c7-10bb3ebd9e62"
        },
        "item": {
          "id": "b5185989-dce7-4bb6-bc8c-a0d6f6ba2141",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "387128db-7654-477b-98d4-4ae68e54de8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41fd4c-8866-4971-887a-454e8541e145",
        "cursor": {
          "ref": "3a90a446-d136-42a4-a408-4d6d94517f75",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "48c22bee-9667-4af4-935f-3cd45f4033e6"
        },
        "item": {
          "id": "6c41fd4c-8866-4971-887a-454e8541e145",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e78c9f1-d4ac-48d4-b6f1-c9d2acf93fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2745020-1c1b-4b1d-afa0-ae0f368a0cf2",
        "cursor": {
          "ref": "5042ea28-5559-486f-a65f-c818f854e9e9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "12440a83-d5e7-4fa7-99af-898b65995d79"
        },
        "item": {
          "id": "b2745020-1c1b-4b1d-afa0-ae0f368a0cf2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d02f8ff7-d159-4b23-98ff-d5edbeecef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4e18ca-95f6-4beb-b72a-563c673e726c",
        "cursor": {
          "ref": "211af10e-70a1-4e30-bd8a-9b2b4f2deed2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e9d862cd-a7a5-4355-96e2-ec6b0c5b76a4"
        },
        "item": {
          "id": "ce4e18ca-95f6-4beb-b72a-563c673e726c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9b704111-6269-4b0e-9c3e-a05562ea2504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8091dee8-f2c2-4b04-b08e-ef914347d9b3",
        "cursor": {
          "ref": "73087ec6-7eed-470b-8e31-944b123dfae9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4facf084-1200-487b-ac50-20e5ccf272dc"
        },
        "item": {
          "id": "8091dee8-f2c2-4b04-b08e-ef914347d9b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9fbc281c-5368-4c14-9da0-a2cf4b987f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce78bf9-b750-4f43-8f3f-5e23bfb0ac3b",
        "cursor": {
          "ref": "cf5a2c50-01db-4ce9-9d76-8fdd0e6e0de8",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aced35b5-543d-4312-b1e0-cb084d342189"
        },
        "item": {
          "id": "4ce78bf9-b750-4f43-8f3f-5e23bfb0ac3b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c2b0db79-e574-49c8-9579-00857752372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe880c8-2848-4e11-bab4-7bf863c8611b",
        "cursor": {
          "ref": "06919321-cfef-4430-ab53-1e0e0d16cb36",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "58456fb6-c5a8-4c5f-bfad-7ea9e2f8b615"
        },
        "item": {
          "id": "1fe880c8-2848-4e11-bab4-7bf863c8611b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4ecccee1-e2b7-45ae-8624-12cf568d4a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61224fd0-7e6a-4034-ac78-7c32b8d0ffa3",
        "cursor": {
          "ref": "07840809-5941-473c-be78-c0fc2c4608f5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0a3d9753-9e06-46ae-a173-73ceb72f94d8"
        },
        "item": {
          "id": "61224fd0-7e6a-4034-ac78-7c32b8d0ffa3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c9762da8-496e-420d-a086-3d4b7fb50289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f3e2cb-923d-4c1d-aead-696b2d1a858f",
        "cursor": {
          "ref": "316b9fa2-0bcf-482b-8b36-f5123397cdc6",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "86807cf0-9406-40c3-8fbd-cdff96fc0dec"
        },
        "item": {
          "id": "17f3e2cb-923d-4c1d-aead-696b2d1a858f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "545d21e0-7406-42ba-a06e-840351572d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b93ac9-70de-4439-bf54-475a09fc5c1a",
        "cursor": {
          "ref": "f913cf29-be59-40d7-8d1e-81b2e4a1c96d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6e94a196-1158-4c2d-ab69-fe2b1b180e1a"
        },
        "item": {
          "id": "42b93ac9-70de-4439-bf54-475a09fc5c1a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f02b4146-bd14-4220-9096-f7649c1f58d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62b0770-7dca-4eed-ac49-815d4289b2d4",
        "cursor": {
          "ref": "0353441e-a4f2-42ea-a0a3-865e478c36ce",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ece4236c-6684-4c0b-a220-a5fdba86e8e5"
        },
        "item": {
          "id": "e62b0770-7dca-4eed-ac49-815d4289b2d4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a3f1f106-5a9a-42ec-b04e-562a3a76a011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645360e3-07b4-4274-b90d-e53d38eb9043",
        "cursor": {
          "ref": "18c886bb-cb0d-437f-a13a-707a0a28ef41",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "be2928ad-1582-4cf1-a070-ee547a7d7662"
        },
        "item": {
          "id": "645360e3-07b4-4274-b90d-e53d38eb9043",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f3328096-2baa-4ba7-8406-bd897d70476a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924e9ecb-ad69-4dd4-a5cc-62b758d71c32",
        "cursor": {
          "ref": "fcca50cf-60e2-4418-baa1-233543e6bf5e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d9396ba2-146c-4244-a6f0-b836b9226c7e"
        },
        "item": {
          "id": "924e9ecb-ad69-4dd4-a5cc-62b758d71c32",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "693a1ea2-b2db-4a2a-a579-74632992b6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62beb819-81cf-4369-b3e7-be3321cdee0b",
        "cursor": {
          "ref": "1516444c-75a2-40f0-9be4-6008409cfa42",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8e183018-3481-476a-adef-bc2c777f3d96"
        },
        "item": {
          "id": "62beb819-81cf-4369-b3e7-be3321cdee0b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0d43d4f9-a2f1-40b9-bbc9-b66461c64d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db70a78-8e5c-4a34-bc19-a182d033cdbc",
        "cursor": {
          "ref": "7e075e2d-db06-4a71-8ba2-5ac517edd332",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "82110279-be77-41b3-9dbe-ebbc8f214ab3"
        },
        "item": {
          "id": "8db70a78-8e5c-4a34-bc19-a182d033cdbc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "68d37bb3-8e61-410c-8c36-d85bc9431ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf5b878-cd56-47bb-a5ac-3f342b1ad6ea",
        "cursor": {
          "ref": "8a64476e-1ad3-4c9f-bfe0-26b76a75e9c0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b2f39e73-d8d7-4caf-9353-aba2bebb186e"
        },
        "item": {
          "id": "5cf5b878-cd56-47bb-a5ac-3f342b1ad6ea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8f4bbfad-0551-4810-bebe-a2bd60999a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c29e940-14da-4674-a28e-de03e1b89459",
        "cursor": {
          "ref": "831ea5f0-eadf-4e04-8dcc-f416d3ce0889",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bca35be4-459b-4ed1-96ce-afbf9fc69e50"
        },
        "item": {
          "id": "5c29e940-14da-4674-a28e-de03e1b89459",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0b998010-4bec-4963-9f69-60d4ec4c6a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37efe49f-e1f1-4a93-a831-9b8b109cb1ca",
        "cursor": {
          "ref": "b66524a9-2789-48a9-959d-ea4ecd6433f1",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "61f8a88c-2b22-4937-8d9b-ab23682359df"
        },
        "item": {
          "id": "37efe49f-e1f1-4a93-a831-9b8b109cb1ca",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "539c8b10-08b0-46c3-addb-3cf90f1466ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cbc0aa-3588-439a-8f95-d2ff25cf8919",
        "cursor": {
          "ref": "44011d16-7106-4a86-bdba-ecc142894302",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7e2f4a0c-39d2-49b4-ad85-c37738c5b382"
        },
        "item": {
          "id": "39cbc0aa-3588-439a-8f95-d2ff25cf8919",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4938dd00-e189-43be-9a7b-dfa8ed667651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d151f63d-a322-4fdd-9fc8-2dc980512ddf",
        "cursor": {
          "ref": "7faf42c0-3b42-47dc-b890-def2eda07a9f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "78424165-e7f7-4cd6-8d35-b8a510098041"
        },
        "item": {
          "id": "d151f63d-a322-4fdd-9fc8-2dc980512ddf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ea9fa5f5-6eaf-420e-9a53-3390a3cf2f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dcbcec-ecdc-4f0c-b8b4-dc250abc3bd4",
        "cursor": {
          "ref": "b9e72128-6e00-47d2-957e-54ab959392c6",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "492edcea-8287-4cf1-b73a-fe1714371716"
        },
        "item": {
          "id": "d6dcbcec-ecdc-4f0c-b8b4-dc250abc3bd4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "abc8e38e-8720-4f08-b881-ec9d60deeb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c81347e-9d86-48d4-bf61-93799bd9a673",
        "cursor": {
          "ref": "e307f400-89af-4f94-be3f-310ff44cec12",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c3f23f4b-3364-436e-92cb-fe9b17e4902a"
        },
        "item": {
          "id": "0c81347e-9d86-48d4-bf61-93799bd9a673",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b56f40cb-cae7-497a-8e66-86b8eeb17a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3460202-752e-4d9e-aecd-af0fdba6bcdd",
        "cursor": {
          "ref": "6b085e19-d7c1-4e66-ac2f-1b696a7e569f",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "40e63fde-6b1a-497c-9dd7-8f4cc32aab57"
        },
        "item": {
          "id": "c3460202-752e-4d9e-aecd-af0fdba6bcdd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7f090749-ead1-4212-93cc-68e3d622f73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae9e73-43f7-4ba4-8b6b-2805a52034e5",
        "cursor": {
          "ref": "ef3a30df-98de-4a1f-a9db-ed31b08336a2",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "34a9f61d-90cf-49e5-81f8-b9963b993f70"
        },
        "item": {
          "id": "e3ae9e73-43f7-4ba4-8b6b-2805a52034e5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8406e720-ee3b-47e7-81c9-d0f94e0fff66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa48337f-0d71-4784-bdad-914f004e30fa",
        "cursor": {
          "ref": "8bc3576a-0b7d-44f7-9c4b-372cd3778156",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "556d1a23-e13a-4a40-a343-fbc00d929813"
        },
        "item": {
          "id": "fa48337f-0d71-4784-bdad-914f004e30fa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8f528ecb-d005-4acd-9908-166eaf38bf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5723a592-e9d9-48a1-94e7-7bf7069e7f6f",
        "cursor": {
          "ref": "cd2d771c-3abc-4dda-ac2c-5ecce14ccb69",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f08c3473-e37d-48fc-9e14-3c57ca300eaa"
        },
        "item": {
          "id": "5723a592-e9d9-48a1-94e7-7bf7069e7f6f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "63bb5e2d-ce19-4202-a10f-67884b560717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4117364e-1491-430c-8afc-f3ffed2263d2",
        "cursor": {
          "ref": "521ba8b5-ece4-436a-b98c-9698e60ae2ae",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "52ec6eb4-32ee-415a-9b93-9637a823cf1e"
        },
        "item": {
          "id": "4117364e-1491-430c-8afc-f3ffed2263d2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18979685-792c-4e3a-8d0a-cfb4d177b679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6e189d-4514-4a0e-923f-96087064c721",
        "cursor": {
          "ref": "c2c90d63-16e5-491b-b8cd-5a4e1556170c",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f8d00a77-61c9-4486-a942-6d874feee5ba"
        },
        "item": {
          "id": "fa6e189d-4514-4a0e-923f-96087064c721",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6151fa5b-2827-4793-8ce6-1d495937c016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9044f8af-d77c-4180-b3bd-eca3c4dc48e0",
        "cursor": {
          "ref": "6fc6df55-295a-4c9b-96a9-3b11ba9bf0d2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1a7a1a9e-8695-412d-9091-8624f2097150"
        },
        "item": {
          "id": "9044f8af-d77c-4180-b3bd-eca3c4dc48e0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "725f681b-35ae-4ed0-958a-857949f1a972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0496c6-4c8b-4476-904d-f147fad80607",
        "cursor": {
          "ref": "935ed7a1-6c06-4b4f-8d96-4a89c6ad90f4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6024696e-0c41-4730-9b4d-bb340314ae10"
        },
        "item": {
          "id": "0f0496c6-4c8b-4476-904d-f147fad80607",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "096e929c-414e-4fed-a4f1-b9d6ae75d21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2e5eae-877a-4d40-ae0c-13c32aa73656",
        "cursor": {
          "ref": "66966a1a-31f8-435f-9e20-9e02eb843414",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9fe1efb2-519b-45a3-af06-448681142dfb"
        },
        "item": {
          "id": "2a2e5eae-877a-4d40-ae0c-13c32aa73656",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "380ee626-ef74-4039-86d6-a6b54aefae38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53d7492-1807-4c8e-b758-953da8bacbf0",
        "cursor": {
          "ref": "e3b29c43-ba5a-4d22-a9b5-c6767b72b2f1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "219e0657-2c43-4155-b4bd-b7dae0b9310f"
        },
        "item": {
          "id": "b53d7492-1807-4c8e-b758-953da8bacbf0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "531153f9-e5f7-4bcd-be8c-1bd35f100e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c988708-4ec7-40aa-8439-43cf56b78373",
        "cursor": {
          "ref": "a35e52dc-6f6c-4328-a465-24a6a47754c3",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b9f415d9-f2a7-49c2-9354-26fd9a743c6b"
        },
        "item": {
          "id": "4c988708-4ec7-40aa-8439-43cf56b78373",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "02607143-8553-40af-b2c6-6b5c75ee64e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6208efb-58d3-4225-94e0-ba6611cf03ab",
        "cursor": {
          "ref": "c976c098-63e9-4757-b950-c011512c7949",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bdff721d-a719-45c5-aae4-8b44955b0403"
        },
        "item": {
          "id": "b6208efb-58d3-4225-94e0-ba6611cf03ab",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b0bb9eac-59e9-4560-81d2-2d83b7e18d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154c03b4-24b4-4d7f-9fc0-8b24c7abb22f",
        "cursor": {
          "ref": "b84b520f-f390-4ecd-9065-cee8cb9e0b52",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "10ebf891-2ca5-4b47-aaef-fbf0c989d37a"
        },
        "item": {
          "id": "154c03b4-24b4-4d7f-9fc0-8b24c7abb22f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cff61540-803c-4fc9-9f94-586b855cdf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda6cfed-f592-4010-bace-4a9e3b90cbcc",
        "cursor": {
          "ref": "12a646c7-25f4-470b-986f-e86ff0aef26d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a1f47996-ce0c-4ccf-8bbe-3585b5698282"
        },
        "item": {
          "id": "bda6cfed-f592-4010-bace-4a9e3b90cbcc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e9a887ff-482d-4839-bf15-4301d1c5ce54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036beb43-ca27-443b-b4b4-e728096f8dc0",
        "cursor": {
          "ref": "3ca3e513-41df-49cd-819d-a8604587bb50",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9f5330aa-03ea-4d22-905b-b2812f2179fe"
        },
        "item": {
          "id": "036beb43-ca27-443b-b4b4-e728096f8dc0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "da4b5b90-8328-4d4f-bd4f-97d63f116c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fc2a73-9a18-4844-949a-fa4d9d97980b",
        "cursor": {
          "ref": "eabe39b3-c0e8-43bc-b76a-b9c2e6d1cd49",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "602bc1dc-9335-477d-b913-b2f276a746ea"
        },
        "item": {
          "id": "17fc2a73-9a18-4844-949a-fa4d9d97980b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "875615ea-0f7c-4a44-8825-fed0cf7497f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30563a8e-0aed-4700-8b8b-9fb1ee3838bb",
        "cursor": {
          "ref": "e8a81561-fd28-4e23-a234-9445d6e95bbe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "83832f05-0743-47da-9855-d3114008f151"
        },
        "item": {
          "id": "30563a8e-0aed-4700-8b8b-9fb1ee3838bb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7ae4486f-431a-468e-8b3a-18667d3e2a4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f642a321-5761-419e-8018-d25dc9aeefb1",
        "cursor": {
          "ref": "4ba17921-8062-4f6e-8415-c282826d0c88",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b919454-0f03-4f0a-929b-bb89fe3c018c"
        },
        "item": {
          "id": "f642a321-5761-419e-8018-d25dc9aeefb1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ad384fd-e414-492e-a633-d26016f8d006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42632df4-ea78-470e-89ce-809b110bb8b3",
        "cursor": {
          "ref": "881210cb-6923-41b5-9b6c-6183bccae8c2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ef0ccc57-1561-4da1-908b-761c78d856e3"
        },
        "item": {
          "id": "42632df4-ea78-470e-89ce-809b110bb8b3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2d38c9e3-cc45-404a-aab0-5734ee986644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163c2e12-2082-49de-9f97-876fe2410d02",
        "cursor": {
          "ref": "151f3324-3188-4f1e-bd39-96792e03c0c2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "530f8bd5-18db-4ab6-8000-7a7f0bfdef62"
        },
        "item": {
          "id": "163c2e12-2082-49de-9f97-876fe2410d02",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3352d60a-0c40-4906-99b1-ee6c92d9b02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d56f57-3ef3-4c38-a54f-695236146bdc",
        "cursor": {
          "ref": "b61389b3-b578-465d-859b-feb52453fdba",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a58d862-9bd9-4e55-8552-84248bd357d0"
        },
        "item": {
          "id": "11d56f57-3ef3-4c38-a54f-695236146bdc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd617fb8-1a52-4928-a8d9-5827d30878e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452ae63e-ed10-442a-a455-d23f6fd5be8a",
        "cursor": {
          "ref": "57e28751-fe49-418f-a366-042799afa8d6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "515e6f17-7e12-4234-b5e5-256ec8166831"
        },
        "item": {
          "id": "452ae63e-ed10-442a-a455-d23f6fd5be8a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f290496a-ce9e-42ea-a7bd-6b82ade4b43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7d938f-05af-47e4-b330-75879de35e2a",
        "cursor": {
          "ref": "e1571c2a-8a79-4d55-97f6-4656b9bed71e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8d559737-17e0-47ce-950a-4e0101f65a21"
        },
        "item": {
          "id": "cc7d938f-05af-47e4-b330-75879de35e2a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "21b9ba72-fd47-4367-a96a-3e3304d2307a",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "47b4136a-b212-408b-80b1-b77851cebcf4",
        "cursor": {
          "ref": "495d4e76-018b-428f-bbad-3ff040df65ba",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c3c3c97a-5d48-47da-99d8-4746e9f89a1d"
        },
        "item": {
          "id": "47b4136a-b212-408b-80b1-b77851cebcf4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "06b8e98d-d325-4f97-bd16-32db73d4c705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6cb4ff-7aed-49ea-b3ec-e4b4dcd0934e",
        "cursor": {
          "ref": "f1cc133b-42cc-48cc-8bbe-7d4a26374e63",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d318fa29-13fc-4107-adb0-7133d60ded89"
        },
        "item": {
          "id": "6f6cb4ff-7aed-49ea-b3ec-e4b4dcd0934e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7addd592-e544-49fa-a8c1-f2ecf145857f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26dd5c3-6195-4648-b509-6de2609986e3",
        "cursor": {
          "ref": "22018ae7-44d8-4113-b722-e1851ad67837",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5092371e-8a38-4e75-affc-40a51f494502"
        },
        "item": {
          "id": "f26dd5c3-6195-4648-b509-6de2609986e3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1050c3ed-69ce-49f5-8b0e-ed53c8ea99c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51637867-9138-4c16-8dfd-e5d74642c231",
        "cursor": {
          "ref": "b8f841c0-3c68-43d0-9910-8c92e96bd2b0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1472fba4-fdb3-4a34-8ae1-61fcd6bf1019"
        },
        "item": {
          "id": "51637867-9138-4c16-8dfd-e5d74642c231",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7490fe33-b99d-4e75-809c-d0498f646090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10fe4f0-443e-4795-8bc1-ed266b6b7cad",
        "cursor": {
          "ref": "e13f1ca9-f085-46f3-819c-810cce6aa0bb",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dc098aea-a7e2-4ab6-81d0-4cc9a3ecc29b"
        },
        "item": {
          "id": "a10fe4f0-443e-4795-8bc1-ed266b6b7cad",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ea830e2c-51ea-44c6-9d58-bbae9a58e196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a208ce46-83c3-47ad-98eb-d802bf31a810",
        "cursor": {
          "ref": "fcced16f-f0b9-4dea-818f-95d1ea7b1d0c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f462ac28-3ede-4aa8-8862-72496af0909c"
        },
        "item": {
          "id": "a208ce46-83c3-47ad-98eb-d802bf31a810",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "094271a6-3fa8-458c-81ae-c7f489afbab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b643be59-1988-42a7-8bb1-f6a7360eedca",
        "cursor": {
          "ref": "3a785cc8-7aa0-41c1-a0d5-327648f48107",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "143c2a51-6ea4-4219-8356-e63a0b16fc14"
        },
        "item": {
          "id": "b643be59-1988-42a7-8bb1-f6a7360eedca",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d3ccd053-66e7-4c17-866b-3660a85f9e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4424c9ab-f141-4a1b-9939-dd32a0c89098",
        "cursor": {
          "ref": "5d8c53f3-0244-4da9-9c48-494810631989",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "112693c3-6103-4f53-903b-f0cd55bfc81e"
        },
        "item": {
          "id": "4424c9ab-f141-4a1b-9939-dd32a0c89098",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3624aa99-07c7-468e-b8bf-1a02df84b860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8af4de-e06c-4c75-82ec-0cc74ee05e9c",
        "cursor": {
          "ref": "4cba9eb4-6563-4b40-9c6d-da82d3d2a9f5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "057999ca-6d64-4632-a798-35b601999eac"
        },
        "item": {
          "id": "0a8af4de-e06c-4c75-82ec-0cc74ee05e9c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9e66c72b-dc68-409b-a7ac-06ec261e4ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22fe7c2-5fb3-41da-a984-1204c322ab11",
        "cursor": {
          "ref": "1023933d-da5d-47e0-9ba0-9d69ed834a3d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8313542d-04fe-4a8f-b33f-03672bac01c3"
        },
        "item": {
          "id": "e22fe7c2-5fb3-41da-a984-1204c322ab11",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ae20b34d-272f-4ae0-9b17-a03d6a620735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418ba718-bddf-45b4-a863-aed660e77022",
        "cursor": {
          "ref": "9537a827-44f4-4491-b105-29d289946b9e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2b7037f0-6c0c-4409-b1e6-5e08d73d00fb"
        },
        "item": {
          "id": "418ba718-bddf-45b4-a863-aed660e77022",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dbbe7747-ef00-4cc6-9de1-ac6ca424e332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365e8723-bc3c-4e2f-b194-811ba1a1d0bc",
        "cursor": {
          "ref": "a222805b-0895-4971-8d12-d62967e4c454",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a82c7a03-adcd-41a0-9783-d19e2d7e2439"
        },
        "item": {
          "id": "365e8723-bc3c-4e2f-b194-811ba1a1d0bc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b5d3b3e1-ae8a-415a-8561-5eb4640e9083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3fd861-6642-49d7-bd09-27ce13d9e254",
        "cursor": {
          "ref": "f64d8107-4e54-41a5-8e48-fadcf6df2c4e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dda91650-0af0-48c0-bad0-7a1f26902c06"
        },
        "item": {
          "id": "dd3fd861-6642-49d7-bd09-27ce13d9e254",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e83caecd-5f2b-4750-b3ea-d57d3ac05053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60501c0-66b7-4d6a-b0e5-843ed9e9a9c6",
        "cursor": {
          "ref": "20b48953-624f-46c7-b2e7-c5da5078d718",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e623e889-ed8b-4e5d-b116-913c7168b23e"
        },
        "item": {
          "id": "c60501c0-66b7-4d6a-b0e5-843ed9e9a9c6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "09e55b80-9608-4958-8e1a-cab6adc62c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647c4978-8cb6-47fa-a1d6-507920186c0c",
        "cursor": {
          "ref": "a2a00272-f7ef-4849-b758-39fd87479492",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f2500db1-381e-4a78-bef3-53a6e74a027b"
        },
        "item": {
          "id": "647c4978-8cb6-47fa-a1d6-507920186c0c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4991f01f-125d-475e-bf29-a1d6074c9852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4caa22a-b7a5-4f9c-991b-673eb0c84755",
        "cursor": {
          "ref": "4790d866-b36b-4b49-bfbb-d09bdb5b5413",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1233e144-bd19-4e66-b87d-34f06602599e"
        },
        "item": {
          "id": "d4caa22a-b7a5-4f9c-991b-673eb0c84755",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "78cd330b-843b-44b8-a0cc-8f8513be3e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d534b5bf-4f8b-4e49-b36f-d31c460a8751",
        "cursor": {
          "ref": "8e5e8cca-6125-4567-b556-8cf72400184c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "10350565-da49-48a3-89b7-92f0cade5624"
        },
        "item": {
          "id": "d534b5bf-4f8b-4e49-b36f-d31c460a8751",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "71cd8973-7bed-4641-a1fa-1eb2c3570418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a850058c-c7ac-48fd-adcd-cac53287b4c2",
        "cursor": {
          "ref": "58284ca8-dfd9-451e-b9f7-e389fcf88b0c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5ce7be84-2883-4008-aff3-7d6000a36946"
        },
        "item": {
          "id": "a850058c-c7ac-48fd-adcd-cac53287b4c2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "35230bea-8d5e-4e59-be11-474eeff75ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451902a9-974e-43d1-b7fb-092bcaeaf499",
        "cursor": {
          "ref": "e047bb8a-2c71-414c-8a64-d2e98312b364",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1d8284aa-357c-4f95-a939-a57fa168e787"
        },
        "item": {
          "id": "451902a9-974e-43d1-b7fb-092bcaeaf499",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c48b8034-96da-44a0-b36b-8891bc79f0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfee5cb-b3c5-4c6f-9669-ddd7d54d7939",
        "cursor": {
          "ref": "32404a7f-b871-4f44-9692-1b00df4b5cd3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a6814d9b-1baf-4776-aeb6-c95756a4cc13"
        },
        "item": {
          "id": "7bfee5cb-b3c5-4c6f-9669-ddd7d54d7939",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b1da8fae-f95b-4aa7-b62a-d393c594ffe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a37e82e-85fc-4b1c-a807-48083c34839f",
        "cursor": {
          "ref": "0d70e0bc-e73b-4838-9ba0-2cda9b25dcad",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "50e145ac-5d9c-4fda-bb9d-f2ff67bc37a3"
        },
        "item": {
          "id": "0a37e82e-85fc-4b1c-a807-48083c34839f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da1cd5ec-c3e2-48e9-87e8-ae5f38ccb7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7413609-3a95-471a-8a17-6c3f13aad7eb",
        "cursor": {
          "ref": "48d38c88-d295-46ae-816f-02d2abe5681a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4901c991-9101-41fc-8986-961e93afc127"
        },
        "item": {
          "id": "c7413609-3a95-471a-8a17-6c3f13aad7eb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2783770c-d1e6-416c-b4c2-81cefc3d3745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c23cce-5572-44f7-a19d-aabfdddd9ee3",
        "cursor": {
          "ref": "9dd04752-a4fa-4eb2-bdc7-741c21c59e20",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "10da7dab-a816-4cdb-a982-1f7702bbfe53"
        },
        "item": {
          "id": "b7c23cce-5572-44f7-a19d-aabfdddd9ee3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8cba1af7-1a10-4620-9c01-dd0d54e48a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49137ac6-613d-4a0f-8451-7b8cde4ce702",
        "cursor": {
          "ref": "a3ced126-d8c4-401e-bd35-7e9c160fcd96",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fe5e1c68-a13a-40c9-87d6-bd5398fa4df6"
        },
        "item": {
          "id": "49137ac6-613d-4a0f-8451-7b8cde4ce702",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bf4a9f73-6165-4a04-9cfa-b679f22b6f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa3cdb2-ada7-4184-a3a4-94feb317196f",
        "cursor": {
          "ref": "5a00e2f7-d844-4826-8ce3-345e15e499f9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "32b61bda-f943-42e1-bd0a-a2f778ab13b9"
        },
        "item": {
          "id": "4fa3cdb2-ada7-4184-a3a4-94feb317196f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "53170962-354b-4368-8db6-403e9b346b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183ae4cc-1e2e-4060-8419-ca54e8df9c2f",
        "cursor": {
          "ref": "413fabce-cfb3-4fce-b1ef-af6211abb943",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "90debf17-1686-4517-b3d0-75b19d6ceb3a"
        },
        "item": {
          "id": "183ae4cc-1e2e-4060-8419-ca54e8df9c2f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2b2b5fbc-094b-490b-b2b7-86ba8fba5870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4109d4fa-a9eb-445f-88ab-5a0553a5d634",
        "cursor": {
          "ref": "125c9078-6f61-43fa-8d6b-297b29ad84ee",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e031c870-a0db-4616-855e-f762e32fba24"
        },
        "item": {
          "id": "4109d4fa-a9eb-445f-88ab-5a0553a5d634",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "91a47060-b215-4c2f-8973-b423fb42a618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd615b0-1506-4cc7-952d-88544778f222",
        "cursor": {
          "ref": "a84a9b31-4e80-48ec-a159-63bf7f397b39",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c9f3d4c1-8455-403d-b28c-39b2d75ceccd"
        },
        "item": {
          "id": "ccd615b0-1506-4cc7-952d-88544778f222",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b0e096cb-64e5-4e4d-8deb-76123a3cf958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2494fe7e-ae91-44b4-a75c-2ef6711323a7",
        "cursor": {
          "ref": "c3647a7b-65ce-4f54-9503-f895cfaf70bc",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ecbeedc0-5a2d-463c-be39-5345a4cde568"
        },
        "item": {
          "id": "2494fe7e-ae91-44b4-a75c-2ef6711323a7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "443f03fc-f66c-4619-b677-411931decb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79e7b7e-38a0-4086-a126-aad988fab681",
        "cursor": {
          "ref": "3b22c915-5a44-4b83-8705-4b4cf5d10dcf",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c5ff57c1-0e67-4f17-bc4b-75af53fae691"
        },
        "item": {
          "id": "d79e7b7e-38a0-4086-a126-aad988fab681",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "49a46f29-3611-435d-ae94-8eead5455a10",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "076035e4-7bee-4d33-af47-d200d463eb3a",
        "cursor": {
          "ref": "396c0c53-9f5c-4b30-b927-393b6fca6e8a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3b89176e-dafc-4bad-9569-433486919fb0"
        },
        "item": {
          "id": "076035e4-7bee-4d33-af47-d200d463eb3a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2582fb54-ce26-4363-9505-3c9f0df16857",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5843779a-1509-4877-b65e-7a747e65ca98",
        "cursor": {
          "ref": "5ee9a1a0-84be-422e-900b-60732b94eca8",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "504c8802-ee4d-4eaa-9f5d-9e4c5e79bf2c"
        },
        "item": {
          "id": "5843779a-1509-4877-b65e-7a747e65ca98",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d5585857-0b2d-4af5-92e8-a5a6a0405c07",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1688a40e-ca32-4e1f-86b8-ff2cf063e619",
        "cursor": {
          "ref": "ccd5f541-92e9-4f49-bb38-5b6731017299",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f6792d81-5eab-4eba-8f7c-8b84a4b0841b"
        },
        "item": {
          "id": "1688a40e-ca32-4e1f-86b8-ff2cf063e619",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9d9eceeb-e757-422a-b1e1-53f0aa7f3b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05b59aa-d29a-4d44-bc8a-fbdd8db98b35",
        "cursor": {
          "ref": "8356551e-9d5c-46ff-bdc8-f60ee452d52c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c83249b7-19f7-4f83-9a1a-6b1c026e5b2f"
        },
        "item": {
          "id": "e05b59aa-d29a-4d44-bc8a-fbdd8db98b35",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "77727a39-600e-41d5-adc5-c203d9c9236a",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2e6cd05b-dfc7-416b-94f8-f832541ad0bf",
        "cursor": {
          "ref": "3ee54b0f-d47f-46fe-b017-c935a7ea4917",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cdb7e1d1-95f4-4a96-a2eb-7a14f5b230a5"
        },
        "item": {
          "id": "2e6cd05b-dfc7-416b-94f8-f832541ad0bf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2c701e58-3acc-4467-bc8d-81787c8e5907",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1510ee56-84e1-4eaa-9c5d-db745b4c1383",
        "cursor": {
          "ref": "7e17303e-8688-474d-afc4-60f2662d72ad",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b8d2bd30-42e6-472a-816f-0f4b4063b762"
        },
        "item": {
          "id": "1510ee56-84e1-4eaa-9c5d-db745b4c1383",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c47f4cab-e3a2-4fef-bfc6-7469b2cdacb9",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "deb465dc-23bf-4c76-b3dd-cd958de26ce8",
        "cursor": {
          "ref": "8aeecfcf-1dac-4319-ae09-4e1f2ba1289d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e693bd7e-4c5c-4027-a37e-2c18033d39d7"
        },
        "item": {
          "id": "deb465dc-23bf-4c76-b3dd-cd958de26ce8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "60147f7a-85e1-4884-b4e3-0851a2d7d180",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "94e8caa5-4d16-4d42-87da-0a8f2cb832e7",
        "cursor": {
          "ref": "2c548cf6-7474-46c7-8b1b-3593e6ae8c0e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "545de287-5700-400b-adc2-9d8eff58a655"
        },
        "item": {
          "id": "94e8caa5-4d16-4d42-87da-0a8f2cb832e7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0183c8dd-6bbe-4fe3-a4c0-ef3010f2cf3d",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e6528f6e-1441-44fb-8f7c-f38531e10e5c",
        "cursor": {
          "ref": "715f6457-f157-4dc0-be55-09c96023e269",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e7ceaeed-ace7-4aff-9bf2-cd6521f10f8c"
        },
        "item": {
          "id": "e6528f6e-1441-44fb-8f7c-f38531e10e5c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "32fc874f-71d3-4613-9444-8abb8873a70d",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3bf559ef-57db-4818-9e84-380c844e5514",
        "cursor": {
          "ref": "5a52282d-acc2-49f9-8367-142ba964f648",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "176b6d3f-e587-43a6-8d3d-98c87c7d01b4"
        },
        "item": {
          "id": "3bf559ef-57db-4818-9e84-380c844e5514",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "02a814e0-33bc-4d21-a048-80be6fce4a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1177dd-6ffe-4062-901b-b3e02843f3d5",
        "cursor": {
          "ref": "73de5411-c288-4947-bf66-17492289950a",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9f87b8b1-b53b-4a5f-9c67-1d61d3369043"
        },
        "item": {
          "id": "3f1177dd-6ffe-4062-901b-b3e02843f3d5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e270af5e-1f6b-4578-8737-840a2c0b02ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f9137-0ab6-46a4-9a92-4ac55d8ca81c",
        "cursor": {
          "ref": "8142a2fb-0aa9-4937-a54d-f5fa6708aef5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ac627b4a-181f-4547-a886-4959560fef09"
        },
        "item": {
          "id": "9e0f9137-0ab6-46a4-9a92-4ac55d8ca81c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9502678b-49e5-40cd-8653-b41e8ebde44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0d98f7-c398-4b4a-9f87-c748531e73bb",
        "cursor": {
          "ref": "a7e9b9de-059f-4457-b37a-7cb5d156b53a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "03ad3901-eb6a-41c9-8371-f08db6ba93a9"
        },
        "item": {
          "id": "9c0d98f7-c398-4b4a-9f87-c748531e73bb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "29cffe5f-6bdc-433a-bf95-b22aa8a1fff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d144d534-8f6b-4885-a7b6-a94f68bd95f7",
        "cursor": {
          "ref": "0ec3a231-17b0-4a7a-872b-56e580de8dfd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "596aa01c-6d09-47bf-aa62-b6c2e2cb8494"
        },
        "item": {
          "id": "d144d534-8f6b-4885-a7b6-a94f68bd95f7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "607c26d6-e187-4d71-9c81-e74bc1ece8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ea3e91-f87c-4f63-9d48-24b875c0da68",
        "cursor": {
          "ref": "5a85ccd4-9153-4d64-a893-a0b86590108d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c8fb0292-beab-4a01-9f12-5af6787c63e5"
        },
        "item": {
          "id": "65ea3e91-f87c-4f63-9d48-24b875c0da68",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7dbc96e9-df9f-40b8-84a8-530dd2804360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729455b7-04b1-4626-9c25-ebec8a3a02ad",
        "cursor": {
          "ref": "cb1256a7-b885-4f3f-af78-a8f11fd0c957",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f793eb2d-490e-4500-b8f1-7cf9010d933b"
        },
        "item": {
          "id": "729455b7-04b1-4626-9c25-ebec8a3a02ad",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "234845ca-50f4-4073-a0bb-ada7b17400a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810d5d15-21bc-4284-864c-13cd54285d32",
        "cursor": {
          "ref": "9e151ecb-5606-440c-b809-0f2b0bba12ec",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "236d5b47-1fcc-4395-b15c-54f7267e2f1d"
        },
        "item": {
          "id": "810d5d15-21bc-4284-864c-13cd54285d32",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b313e4c5-46ea-43ad-ac1d-5de2c35cc6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ec420f-dc0f-4d66-85d4-1043963d341e",
        "cursor": {
          "ref": "44407367-6551-4dae-bfee-f7ed74dc1b18",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "33ce0ec7-af56-46d2-8aee-1849f344b904"
        },
        "item": {
          "id": "91ec420f-dc0f-4d66-85d4-1043963d341e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "26b66421-1c6b-47c6-9c28-0eebb2c1f893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d52968-c33b-4d5a-a142-7a93be24530a",
        "cursor": {
          "ref": "e47328aa-ef21-462e-9fd5-41df83e7e699",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "920ab9df-429d-4eeb-b2dd-322f4f3c13c5"
        },
        "item": {
          "id": "86d52968-c33b-4d5a-a142-7a93be24530a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3d57c865-132c-40c0-bbe9-9d0fc8e1b150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a777eb-05f0-4c7b-8084-923ac3b4e42f",
        "cursor": {
          "ref": "8fd8670a-6a76-4928-8c78-b73a73b08b5a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "46c776a9-6f55-4c82-aeac-0c641f54c464"
        },
        "item": {
          "id": "41a777eb-05f0-4c7b-8084-923ac3b4e42f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "35d5150a-34fe-49bb-bf5b-958000e62a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a76e20-f908-4e83-a5ad-59372fceaa70",
        "cursor": {
          "ref": "f2efcb04-f34f-46d1-9068-f2d0a3bfb3d6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0686a8a8-3d09-47d9-8586-44d313edd5f3"
        },
        "item": {
          "id": "54a76e20-f908-4e83-a5ad-59372fceaa70",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "051fc893-665f-4144-9f2b-973eba26d180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91300a3-a0eb-4e34-bbba-1a998be39ef4",
        "cursor": {
          "ref": "b241dd54-332f-44dd-9d91-b6666ebfe9c7",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "36404fbc-79e8-421d-b906-81ea6cf45f1a"
        },
        "item": {
          "id": "c91300a3-a0eb-4e34-bbba-1a998be39ef4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4282824f-5d1e-4771-9046-e62c2ab73b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961857df-60df-431d-b717-a32945a2dc7d",
        "cursor": {
          "ref": "1e978072-5df9-41e1-a001-643df752d1c6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a6d9b394-a4f3-4748-a583-53c869cb317c"
        },
        "item": {
          "id": "961857df-60df-431d-b717-a32945a2dc7d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "540be91c-3d44-4eee-9627-3cd5d9eaece7",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9d7a98fc-557c-4c78-8361-159fe03669f7",
        "cursor": {
          "ref": "75b15d0f-01a1-431d-a14a-83dae37bd719",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2fc140c3-ea51-4b97-91a5-f3ca9a6370c8"
        },
        "item": {
          "id": "9d7a98fc-557c-4c78-8361-159fe03669f7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "848c7685-2048-441d-902d-04b9f5237f1c",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6b9b2cdf-4610-4c05-8f42-564670f44a27",
        "cursor": {
          "ref": "e7176c89-c4df-4263-bfbb-dc111874deb9",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4fe2fd57-3160-46ed-82a6-377345712ae8"
        },
        "item": {
          "id": "6b9b2cdf-4610-4c05-8f42-564670f44a27",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b9ca4106-2d0c-42fc-bfac-9fdbe7d91ef0",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "641324f2-48e6-411f-89ea-eda382af25a7",
        "cursor": {
          "ref": "8891d283-fd67-408e-84b7-c7ff6cd8468a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b3d99766-3953-46f7-bcb7-793859ba1df2"
        },
        "item": {
          "id": "641324f2-48e6-411f-89ea-eda382af25a7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a56b8d77-a26c-4b8c-9b7f-f50720a5b84c",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b7b98569-bfc1-4b33-aa9f-d2275eb9e3c0",
        "cursor": {
          "ref": "dd03f3e6-9423-4dcc-ba0a-b90157d4af7b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8e8c8a95-580c-491b-b23d-dd2fd2705e4a"
        },
        "item": {
          "id": "b7b98569-bfc1-4b33-aa9f-d2275eb9e3c0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fdb31f95-7f57-4bc7-86b0-7ab9e91934f7",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d4b70ea3-04a4-4534-95f0-7b58bf92aa3c",
        "cursor": {
          "ref": "d9550383-27c1-4f10-b608-fd83b7d07052",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f71314e8-3cd8-4719-9134-a4bcdb77e33b"
        },
        "item": {
          "id": "d4b70ea3-04a4-4534-95f0-7b58bf92aa3c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "89f353c9-1123-44b1-a9c0-ac8ec072c69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc01963-90e0-4402-95b1-08460da15538",
        "cursor": {
          "ref": "df00530f-fc70-4a21-bc1a-4edc0541e981",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d268761c-e0c7-43f2-94b4-ad3d9f2c9b7c"
        },
        "item": {
          "id": "afc01963-90e0-4402-95b1-08460da15538",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8b28af62-1982-4bbc-aa12-1e84286004b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d871a6b9-9aab-4013-b86e-d84b2c2ae4f5",
        "cursor": {
          "ref": "ef4e01dd-7bf5-4587-b417-66a3f6346de9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2c021c5f-ca9d-4426-9258-749c13712e3a"
        },
        "item": {
          "id": "d871a6b9-9aab-4013-b86e-d84b2c2ae4f5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d04c1b5a-3113-4bc9-ac19-a82083661ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bc81c2-dae2-4872-8332-ef13ea63cc4b",
        "cursor": {
          "ref": "ce6b60a8-1791-43f8-8549-c4e9592e5484",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ef26f7db-46d6-4695-901b-a66b81f64dfe"
        },
        "item": {
          "id": "b9bc81c2-dae2-4872-8332-ef13ea63cc4b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a1016469-3d28-49bb-a2d3-73ef53c320f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdb314b-19d8-455b-afa8-14387218df49",
        "cursor": {
          "ref": "d88eff08-ecbf-49fb-a1bb-3ca38dc1d4da",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "715a27af-c8e0-45b6-b996-8f22e7bec172"
        },
        "item": {
          "id": "efdb314b-19d8-455b-afa8-14387218df49",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "000e2c01-0401-4279-b151-b5b9d678c755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05176a39-f5fe-4f7d-9d68-bd91137f7ca3",
        "cursor": {
          "ref": "3762573a-e7cd-409a-a9a7-a75f0deaa15b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8941c493-e7ce-455d-99ca-32bc88108983"
        },
        "item": {
          "id": "05176a39-f5fe-4f7d-9d68-bd91137f7ca3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f714d2d-d501-4479-ae57-5c2c26f0246e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562aedeb-d580-4be8-aa09-aec613da7490",
        "cursor": {
          "ref": "bb1f5369-5786-412b-a33b-6ef84df189a0",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43e1d4de-3470-400d-a6b1-6d6821116329"
        },
        "item": {
          "id": "562aedeb-d580-4be8-aa09-aec613da7490",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5e5ffdb8-4902-49d0-bc96-1ce7f500ce6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17fa70e-35dd-45f6-b35f-4f18327b9d40",
        "cursor": {
          "ref": "8770844e-f745-4ebc-994f-dc566f53f70a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "534c389e-9f05-40b1-9768-8d6d37e49996"
        },
        "item": {
          "id": "b17fa70e-35dd-45f6-b35f-4f18327b9d40",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4e8ef306-44b2-4e47-9e2c-075c5b0e9204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd781ea-aa5a-41ff-9412-9c59d8e25fb1",
        "cursor": {
          "ref": "6f1b3d70-9019-4f47-a799-812c906ebbba",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "19c8c3fe-dd22-4d99-9ff0-1b733551b9a6"
        },
        "item": {
          "id": "1cd781ea-aa5a-41ff-9412-9c59d8e25fb1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "06f69805-a536-4dc8-b7fc-f481592c18b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeadd622-d41a-44f2-9430-b6071eea1f7b",
        "cursor": {
          "ref": "3e6c3c12-029d-4d74-b3a2-ea565aa7aa03",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "28a8011d-e884-49b5-b7fa-a6395670c6e2"
        },
        "item": {
          "id": "eeadd622-d41a-44f2-9430-b6071eea1f7b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3a09c14f-5855-4c4f-8765-b736d52baa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70ce835-ea11-47f0-9d3b-0e3c0597f200",
        "cursor": {
          "ref": "97c3083b-cf83-4323-99e6-33200ad7553f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "97e8c098-ab6c-4537-9aa6-2ffa40a93a9d"
        },
        "item": {
          "id": "d70ce835-ea11-47f0-9d3b-0e3c0597f200",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a15a6626-abff-4563-8483-67a4d431f1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d879ca95-b98f-43da-a1cb-de831b6b09fd",
        "cursor": {
          "ref": "9f820c95-366d-4016-bfe8-839b89384712",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "032242fc-d876-4d0f-86e5-a22fe6c2a3aa"
        },
        "item": {
          "id": "d879ca95-b98f-43da-a1cb-de831b6b09fd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b4dbe16-c9ad-4a9f-8322-7b54794e18b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97055f75-68c0-4af1-9182-95b49090e2b3",
        "cursor": {
          "ref": "3e33a484-b42a-4203-869a-7b45bf02dbec",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8879bf56-a253-4557-b145-cc9a022afb07"
        },
        "item": {
          "id": "97055f75-68c0-4af1-9182-95b49090e2b3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "abe3403e-e4d2-43b0-908a-a2cf12307d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ba9771-0a12-4a06-adf7-536cfba7c08b",
        "cursor": {
          "ref": "33127201-532d-4aea-a4f0-a06e8a20d974",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ca6c47a9-5124-4287-b52a-7fadd83b1b69"
        },
        "item": {
          "id": "76ba9771-0a12-4a06-adf7-536cfba7c08b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "056db4f8-22f5-4b7a-9ac2-72c681548bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eefe43d-115e-4a15-b2f2-d4bf59f574ed",
        "cursor": {
          "ref": "09b34e2a-9525-4b8f-bd83-965fc985c7dd",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "eaa8c5bf-3b82-4bcf-ae8c-5881ab6444bc"
        },
        "item": {
          "id": "5eefe43d-115e-4a15-b2f2-d4bf59f574ed",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d06708fd-a837-4f58-aedc-f2f2d2d6d77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daa7b04-c936-4582-90ec-33f65bdbb2ff",
        "cursor": {
          "ref": "e176ea04-5097-4af2-87e7-f767e80f763f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c833d6c3-d46a-4aff-95f7-63f1ba0a0a7b"
        },
        "item": {
          "id": "2daa7b04-c936-4582-90ec-33f65bdbb2ff",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fa51ceb1-8515-42fd-a7d9-a4ea9d35159c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcb47f4-38a9-40ee-90d7-62d5242ce9a4",
        "cursor": {
          "ref": "74893af5-4a17-4795-938d-8857a826b3b9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2bcfdd05-53c1-4928-b6de-d4e078acbef2"
        },
        "item": {
          "id": "3dcb47f4-38a9-40ee-90d7-62d5242ce9a4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bf7cb89e-f47f-405d-b747-4929a0870c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3f73e2-b9d1-4361-857a-9b001d9a9f91",
        "cursor": {
          "ref": "68ebb31a-cc42-4416-bab3-0b0f06e36730",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "17a7d7da-d77b-4c8f-ac4d-19134c74a8ce"
        },
        "item": {
          "id": "dc3f73e2-b9d1-4361-857a-9b001d9a9f91",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "03beaef2-73a4-47f0-8eda-dd35ed2ff59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e18d080-0b20-457c-b468-14c94b227108",
        "cursor": {
          "ref": "25ecbb1e-a513-49a3-aab3-c9856e8ae291",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "17f6e9f6-6e56-4f95-9876-6efeda628668"
        },
        "item": {
          "id": "7e18d080-0b20-457c-b468-14c94b227108",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "15fc459b-ee01-44be-a852-97fbdd970401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b384dd-58c8-453a-b4bf-9652ed928815",
        "cursor": {
          "ref": "6efc8728-66a9-49f4-9c5e-ad0ab83a5afb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f24f9362-c011-46af-b08b-3a41ebce0530"
        },
        "item": {
          "id": "a4b384dd-58c8-453a-b4bf-9652ed928815",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4f8f045b-f043-48c4-95f7-70537c52fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8eb8810-350b-4095-b6ac-18fe3f580202",
        "cursor": {
          "ref": "bd647bae-3082-4b88-a862-98cd9e88cdd2",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3cf9ba1c-302d-4263-868f-c3c3a7f01150"
        },
        "item": {
          "id": "c8eb8810-350b-4095-b6ac-18fe3f580202",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a3096e16-f8db-47ca-a1d5-c587f9cdd9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144274d8-f244-4365-84e3-8fc9f952470f",
        "cursor": {
          "ref": "d3e89c69-66f1-4e4a-8688-7da7078cfd76",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e32ec35c-a30d-4507-97e2-2a2bbedad4bf"
        },
        "item": {
          "id": "144274d8-f244-4365-84e3-8fc9f952470f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "482a77ff-fddf-4e2b-b5c1-3c0db47480e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39853d25-3253-4f6b-8837-f28e5ba87e8c",
        "cursor": {
          "ref": "edf7112d-fbd0-469f-b8c9-69eebc1d9ecc",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d76acecb-e53c-4c74-8e96-98ed59263597"
        },
        "item": {
          "id": "39853d25-3253-4f6b-8837-f28e5ba87e8c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "52bc71cf-70db-4ea4-95f4-c3a80cc20ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8bc6b6-8efd-490b-aa8c-8459c0ddf1b1",
        "cursor": {
          "ref": "a468719d-bd31-494f-ab04-409658eace5f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "14a8cf93-d440-47a4-8811-df895711978d"
        },
        "item": {
          "id": "ee8bc6b6-8efd-490b-aa8c-8459c0ddf1b1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "85affd19-88dd-4a2d-9ce9-86d843b4f688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49ce8a4-f4da-4047-b467-015628e4c2ad",
        "cursor": {
          "ref": "f7f9ff97-ee5d-47d5-ba4a-cb7af403ae3d",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "56f3d327-9f80-41e3-ab14-ae957c5089a5"
        },
        "item": {
          "id": "b49ce8a4-f4da-4047-b467-015628e4c2ad",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c27dbe49-d3fe-4116-a6c8-7dfdbf060336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f373b9a-1e20-4539-ad3f-33a4f4215b5b",
        "cursor": {
          "ref": "77a3f202-b832-4c6b-b6c9-9a41c47998ca",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2b23ae5a-6881-49e8-9c81-590e721773e0"
        },
        "item": {
          "id": "6f373b9a-1e20-4539-ad3f-33a4f4215b5b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9741236a-6d27-4000-9b6d-a26d9246a4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af912df-0166-456d-8564-e35ad76d6c60",
        "cursor": {
          "ref": "89dc3c81-acb1-4eca-ac6a-7d3b9f1985c4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0c85c8a8-69d9-4f50-8481-01079b777567"
        },
        "item": {
          "id": "6af912df-0166-456d-8564-e35ad76d6c60",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dc797365-9d39-47e1-a62e-0a41c158714d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a795762-6f0a-4834-9aed-3d101c11cc70",
        "cursor": {
          "ref": "6aa3c006-c9e2-4412-bc6b-5dffcd2b9dcd",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a8dda4f3-1762-4e70-bc54-03c43e154fdf"
        },
        "item": {
          "id": "7a795762-6f0a-4834-9aed-3d101c11cc70",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3a7429a1-a8fc-4281-9e0a-31d34fe69b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545ebf23-758c-4ff3-ac33-f62b3183646e",
        "cursor": {
          "ref": "5c5cec96-47d5-4b5d-8175-f8661db75a74",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2b748d0f-9a87-448d-b3a2-1fc785a23442"
        },
        "item": {
          "id": "545ebf23-758c-4ff3-ac33-f62b3183646e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "04eb8cbd-721f-4b47-b5a3-af3d5ba7bca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed92ec25-9d8a-41e6-a63b-56fb159b45f0",
        "cursor": {
          "ref": "f25f5237-9323-473a-af2c-ad280eb25ce9",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "599ee4d6-b5d0-410d-8fd8-90611708554b"
        },
        "item": {
          "id": "ed92ec25-9d8a-41e6-a63b-56fb159b45f0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3653a661-ef0a-401e-b5a7-743b1cb2012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc127e5-b7ab-4395-b232-1354ef3887cb",
        "cursor": {
          "ref": "1181107a-7c6d-4a5b-bfe7-9c111d644207",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "affcfce2-b613-4fa7-aa61-e3ba814b9c7e"
        },
        "item": {
          "id": "9cc127e5-b7ab-4395-b232-1354ef3887cb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5a6782ef-7f0e-4267-b535-0a4fb1bd148b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd28e5ae-f59c-4f0a-a24c-dabe50ea0505",
        "cursor": {
          "ref": "02fe4000-cf14-4836-87f7-33d83af0aed8",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "fa751c89-89df-491e-a1dc-888d0b0bb475"
        },
        "item": {
          "id": "fd28e5ae-f59c-4f0a-a24c-dabe50ea0505",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8acf132-ab28-4077-8e52-08816967a96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b737ea-1218-4f8a-a707-008fdf61241d",
        "cursor": {
          "ref": "8725338b-b83c-48e6-9762-c89333519145",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ed0df8ca-a071-40b0-aaf5-4460b181cbc5"
        },
        "item": {
          "id": "54b737ea-1218-4f8a-a707-008fdf61241d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b188cf29-2dfa-40e8-8c09-ae42e34de66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f4ecf1-fdf7-49cb-9d12-2fb16581a988",
        "cursor": {
          "ref": "051af012-b774-46e1-b94a-54e7cbe48a6b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "91cff098-d6bc-4530-b3be-d546b148421f"
        },
        "item": {
          "id": "95f4ecf1-fdf7-49cb-9d12-2fb16581a988",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f75abd58-7be2-424c-b43f-9c932b32463b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16115e6-d226-44a6-ac3c-169b976ef1ea",
        "cursor": {
          "ref": "cd97e29f-37e8-482c-804e-23f2209c4167",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "89b50760-282c-4a94-8a3c-d850f069e1e2"
        },
        "item": {
          "id": "f16115e6-d226-44a6-ac3c-169b976ef1ea",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "861ae66a-e36c-47d9-9774-0f49725d48cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b402c213-4977-466e-b676-afa6e4656aaf",
        "cursor": {
          "ref": "174614f9-b9d1-4c99-b5f1-f22ae6b8c014",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6be32e2e-991b-4e00-96cc-458f3c451712"
        },
        "item": {
          "id": "b402c213-4977-466e-b676-afa6e4656aaf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "17e9d1bf-df70-458e-97f0-6a6be12773a7",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ece49cc6-5225-4c5a-bf11-c3d2140cabef",
        "cursor": {
          "ref": "ec572777-ab9e-4b82-b59b-709710bca7d2",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f723656b-3b79-4512-bf2d-dfa34a74939f"
        },
        "item": {
          "id": "ece49cc6-5225-4c5a-bf11-c3d2140cabef",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aae4776a-bf54-4e6e-89a1-2bf1c077dc72",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f1ddca-091b-4896-8b52-a4335bdc80ed",
        "cursor": {
          "ref": "ec10253b-8fe1-455a-9fc0-ad8e4a70f396",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0df1390a-8180-4c44-b9ec-05d55fbc7ba4"
        },
        "item": {
          "id": "08f1ddca-091b-4896-8b52-a4335bdc80ed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "79279cf5-8e87-4324-bc27-d4519d738549",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ac5ae9-c172-4bda-9c4b-24a2e5140433",
        "cursor": {
          "ref": "baf49296-66bf-4a4a-acb4-c625aab39918",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b5ffc63e-eb91-4af7-b5fb-e9a3d780903a"
        },
        "item": {
          "id": "82ac5ae9-c172-4bda-9c4b-24a2e5140433",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4d40da1d-3c0c-4e31-9922-930d2b4cab1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ac5ae9-c172-4bda-9c4b-24a2e5140433",
        "cursor": {
          "ref": "baf49296-66bf-4a4a-acb4-c625aab39918",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b5ffc63e-eb91-4af7-b5fb-e9a3d780903a"
        },
        "item": {
          "id": "82ac5ae9-c172-4bda-9c4b-24a2e5140433",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4d40da1d-3c0c-4e31-9922-930d2b4cab1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d0748a-47e5-4ba9-ab5a-63ee49c605e8",
        "cursor": {
          "ref": "bfd4a76e-e2d8-4322-a8a8-e94eef6b78ae",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5d0df095-d749-4aad-87d0-faac05315f2b"
        },
        "item": {
          "id": "f5d0748a-47e5-4ba9-ab5a-63ee49c605e8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "77417d8c-a2fb-4f2e-ac4b-99bbe8e15a41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e7a87c-7016-497e-9bce-6234c5de9c32",
        "cursor": {
          "ref": "7694ec80-dac4-4f58-92d4-785ed9a095c9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c6bbb93a-c481-4a41-9495-287784bbccfc"
        },
        "item": {
          "id": "f2e7a87c-7016-497e-9bce-6234c5de9c32",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69a6018d-47a8-4357-98fe-997fcc2b8059",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}