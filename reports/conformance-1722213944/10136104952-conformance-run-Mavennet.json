{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4ad47bfd-daaa-447f-aea4-e8dc60048dfc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6733c2fd-e941-4979-85c2-705ef5a47e4e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15533a69-fbb9-4e55-a053-3892a7de7618",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df2f9926-9b20-4938-95f7-de602676710c"
                }
              }
            ]
          },
          {
            "id": "5f11bf19-50cd-4910-aeec-7762bb3324b0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a0fcc5f-bb57-4b10-a394-b5b06fadba8d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6ff53ada-5097-4c50-8e54-227b4fcf628e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b4e518eb-0657-4f79-9a4b-73663faedd82",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e068696c-b84a-4374-bb71-9c966be1bdb1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db564746-63ff-4635-812e-60335d6a25f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77045b4c-3309-4c1f-97df-4868e353d2db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c344787e-d845-4db0-9088-38b0db6e7543"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fe26adf-d88a-4bc8-bba0-dd6c6169e05e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f660a5b2-6662-425c-ba5f-24438c2fdb1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd071e16-0433-43ae-ae81-e5c1d75aa67f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85b85d2e-be4f-4a52-b1a9-78504a182b68"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "164fe10a-5ae8-4590-a222-18cdd2d37927",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b8b9b334-93d5-42d0-92ef-898cc5387873"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94727248-6318-47e4-ba2f-834e6b69853e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a16294f-4e9a-4ff5-982f-1429652aaf8b"
            }
          }
        ]
      },
      {
        "id": "2713f8f6-5fa2-4a3a-b374-e260e850f246",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5c787bf4-20a5-4a5c-afd2-23847bebf4a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85cd3741-2324-46a3-93f8-7340429136ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5230dca8-b911-4622-9667-fcda3dac1f31",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8ea1a4-5899-4d44-932e-9557cbbbd099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2dc7e44-12bf-4e92-b51e-edb03d76c12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8761d4-966d-48cc-b817-47582819cb5a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59a3d3e-f4c4-40f6-b459-d6737128d40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69ad06e1-da78-4d09-b5b0-777c5ad44b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57932e3-51e5-43f7-b36b-53ed3f0a3a9a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7bcead-01f1-447d-85f9-db6cccdc1359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f1369ac-487e-4394-8ad2-e6c6205f5469"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7bbf26fe-cba1-4002-819a-f8acae0d69ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "278c5a7d-13b3-427e-b7ef-c08e2f66d9e8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3298813-0229-4f48-ba0e-0eea96cfaf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cef963a-0a43-46a6-a451-05ab54b64981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a687ca-7af7-4893-a2a4-ae4e09152d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d893b348-7f08-43fe-8c27-2fd15f4b91cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b120000-8ea8-4e71-87dd-fd316dbe9789",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5f3d38d-e82e-4166-beb0-70c7054b9477",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c362e1d-462b-4017-ad87-fc408dd50f3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e1d1bd5b-e0f0-4d28-9ea6-44cef6b1981f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56630f43-6c7a-435c-b3fa-9f986ab000df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5974df8b-b93a-4351-8b4f-92928163a0ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1a2f7a5-7971-4167-a1e7-94b181120e78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d7444d6-4eb1-4a3a-9898-210008ccd553"
            }
          }
        ]
      },
      {
        "id": "48d0f448-8ced-4ac9-a3bb-0e124689b207",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f58ff660-ef32-48cb-9043-c8cca55cbb07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c7ff1c9-42a2-4510-8b93-0c82647f4254",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "969a34f4-5062-47c7-903a-0cbf6a7df338",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ec8cdc-624c-45f5-991d-979acd711d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbeb0f65-5866-4169-aa58-194c53a8be3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d141b9-7ce8-477d-9a44-81f9554d2dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52bff1d2-5521-4073-9da0-d63ed0d05a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1132daa7-2e3d-4270-b402-edc128251dd0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf83419-d257-4c76-ab8c-68d8b1c0f72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334e0816-7b05-4112-8cd6-28935f5eca75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6693e7-d519-4b56-b226-9073ad30742c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b681677d-65d1-4021-be2f-694b0d2e1af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26c26c3-190c-4cf5-83b5-fc94cc99443e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84b557f-2c54-4c1c-9333-3f2b1797826a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6db8235-e5e8-45da-8057-f727244215b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd10447-dcaa-4b90-a172-54a5f5cca4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0056b494-7fca-4086-818a-b4f35515df45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c578dfc-5762-4c27-b3fd-d53b8a412068",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebd9974-e92a-405b-a1bd-0c21ae490f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2056e09-1476-4567-b6d3-a0f9fa23f43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf0b7b1-8cb1-49fc-975c-92af42b53cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84f2294e-7999-4bfb-b085-aa7c576bc4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323e056b-4082-4b48-b37e-ad279ca46e08",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4047cee9-b159-4f46-b8a4-92790cd33a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0734d295-287e-432d-b72e-70583ac923b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a529313-3798-4c31-911e-b8a6fb07b5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02599062-0bec-49f4-aa64-bc2edc6246f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ceeb40-6d63-42f5-a022-98232564393d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5531e16-855f-4848-ab73-c00c7e6d0558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e466d5-2a9f-432a-a953-15258d087fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2182942d-ce45-4524-998b-c357de47f9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf766a9c-bb86-4a97-8b16-56c23c8fd09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370e0fdf-8ec8-4f42-b930-220836cb7a13",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515fb63f-8e8f-438c-8da8-2f83bc77a32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc15180b-9aad-443c-bb87-a074835d3c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8d526d-80d5-4a3d-a26d-064374a9d215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "714d4df6-0cd4-4302-9c03-424222901ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb801c9-6802-4e0b-8fcc-86cff1a685c2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85648b82-ca95-46a6-9ca8-4533d975055a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6660cfd9-df45-4896-bd77-f08c6765fcac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12105661-5443-4873-af1c-deea4326dcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e980ac5-9467-4a80-9f24-d65dd15b3438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7443cf-82e6-434c-9539-b23116bacc75",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a5ba04-1f3d-47c6-8db7-5a4063e480b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7d9c3b-8e1d-4d55-8182-f35577fc7f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e72586-28f7-4da9-9c1a-ac31f9d1f455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d169ff8f-9ba9-4f1b-921b-a71d2bd96feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a045be05-c731-4755-a0f0-6e3a9b6934a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de44f80-0f18-4e04-aa10-4550a043f4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01a3677-c2c6-45fb-85d3-7be409f7975c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f141d8a-e75b-4c04-a512-6d2aa6f28c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9b2d0fa-c7be-438e-8ef5-3b9b8e0668ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad8605-796f-46a1-b824-c529b5019688",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc6cc8e-0dc1-4141-bd85-337df7ec973b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbddecab-a0a9-4c8e-bc6f-e66f6a679f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b83cc8-6aa0-4c8f-af2a-c4996fd01875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc217d2-cb56-4187-aa10-520801b3cd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf5e520-cec5-4b99-ab9e-b99d58decf19",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7c290f-c490-4584-9903-ab35ab536564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20be342a-f1e0-4ddb-ace4-f3df90ef5e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ed03ff-2ef6-4398-8f4a-cd7be7176893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1d43e89-7515-4fa7-92b1-97e81e67a7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6aaeb0f-b078-4d57-8b29-859fb8dc1c97",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50597b6-d82a-49c4-94cc-42cfb7fef61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3196c294-37a3-48d5-901a-15da68791876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4ec497-b9c0-4454-b7f9-a7c8633ddf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "103b56c2-fd59-47c8-9808-6d1e4692be84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e701c5c-6b24-40b7-a828-6a7695369350",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba22a8c-64ce-4242-9c32-0ed7a304fae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b6b571-2124-45eb-9bf1-a0380c559c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d24e911-8b36-4b98-9b1b-0c3015934b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b4db88b-f1d8-44c8-9e75-7fced3fa3027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c39d02-9e14-46e0-b569-7e55c000cf1c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce474875-b604-49f7-9c5b-7f9888930b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efccb057-94aa-426b-b7d0-7a2939bb9414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e56182-bdd7-4fa5-b9c1-a547f2e5d2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "682debe1-9eaf-402d-96c5-47b39d2df918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a67cef-a171-4724-8fd1-1872a2d47bb7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34424544-74d1-44ec-9cfa-cd94cfa11a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eaafece-0975-45d9-af8a-a72be8841123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018fae88-3a00-4a7e-a75d-cdd48da86f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b478ebf-60f7-40f1-91fa-257c48336a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e0ca3f-ff47-4aa9-863b-ce6195f2792e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfd5ef8-eaaf-491b-9b0d-3ce8e754710f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3b5b8d-0d80-4c13-8308-492709fa8751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdace9d-a425-47d0-b94e-eaf52ef90a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25a8aca0-f484-4da3-a186-a4603f7d0b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21622597-1430-47bf-aee7-7a4d3c7ed535",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa239c8-9098-4927-a1a5-593f232a1c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fe253e-de4a-4f7d-b5e7-49bb81fbfa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789e22e4-0898-4fad-b64e-61a215882ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "62f63b7d-59a6-444c-8ae7-8d38527151bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5f91cc-c60a-4eb4-a2cc-2bff3abedf17",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5e0a82-0b68-41f7-82b6-e32e991b33ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32653842-2a4a-4ce6-8cc0-3303447ef4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0231a70f-efe0-4312-9bb5-b3c84db329e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adcb9aa0-19c1-40e7-9a74-9ccebb3f00b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f150c2f6-236b-4b27-b1dc-77d54cd4b2e0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6997ec-3fa5-4249-a9fb-0e63e3b043f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb641b1-ae99-4ae5-8c1c-147743a442ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00edf6b-f804-48b9-9176-9bdd8fc200a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a2ecdd-593c-41df-a0a6-bea7e0b3f14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed77092-d8ca-45cc-9b01-660188233f5f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7b7974-3e04-4c2c-b946-6cfc8a6e5702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c762fd85-7446-4a89-b098-8810b4d39020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2abe39-5755-41dd-a89e-98d32ed342e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c13a45-5c9b-46c4-9bda-8de525d4b0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f33377-e6ca-452b-93a0-701173a2bf3e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6310ea-76b6-4f3f-8995-13f6fde0bb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9a1219-601b-47ea-9f4f-2fae6f093350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62b8120-e4d5-4b46-8022-ecda1fe81f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0efb02-9242-40bf-9bc6-2a7644ff99c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb94d896-29fb-4b4c-ac34-4081a1ced553",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f9f520-0291-45d7-b6c6-c86971627fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0257ee93-7c13-4299-b348-71cdbaff4238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00363247-8b43-4f4b-a5a6-0b0ea6b309a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "196d441f-377d-4dd6-b52e-02a7ba0988db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b020ab54-5941-4e20-a361-2cd9e999bb87",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80b6523-3b06-4b4b-a09f-f00d7572bbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0cf488f-0fbc-4191-84a5-a28b2b0ee9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a08790-ad01-4759-94da-c61824ddcd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1859cc4d-f41a-4109-a3da-05d8b188f20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc864e04-d8af-42d5-8384-40be7c7e1c1f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ec5040-fbed-4d49-b643-2ff02fef2fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55508d61-0e85-4cac-a6f5-83c4f5d38d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76246a88-fc30-4602-882f-1d392f2d2e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16e37dd-26ec-4ab6-90ea-c7b8d471b673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fced806e-21a6-4f22-a9ff-c879e3e2a425",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd006a9-b17e-4044-b2ba-bbc3ad04b2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2571f455-f929-43a6-b840-17892223376f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edc6d1c-f69c-49d9-8910-a417b620ff0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c71d405-6918-405f-85cc-d0556a6ba959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bd5446-9227-4b8c-b5cc-aefa2978bc33",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4b116b-960c-4091-b361-a0905d1ba028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f48d325-2c92-415c-ad83-cb72064d5b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03a9590-5359-48f6-aad4-0019b72dcc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aefd6951-dfc9-4d0f-9d03-55426b768d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3da722-f4d7-4b70-8bc7-7c7be7248673",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042462e0-1d27-4ff6-b9d9-35a0c4a8372a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea739fb-ac4b-430c-bdf7-6fa77b74b9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09341c4d-7a15-44cd-bcd3-5d9124bc1d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e2d805-6006-45fd-a114-927875fce863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5772156-af7d-40e7-a9ae-afcbce2c01ef",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20027517-b87e-4ecb-846c-41acc52e03f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fe2749-fb8c-4253-8f14-7ca3f065ee4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1aef754-d8a2-454a-bdf2-ad250a0dd104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f357216-0c7f-4691-8096-1e7b959b5b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89dd4e3-66e4-4c5f-b452-be8aefa43638",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3c3ad4-7e4e-494d-bd8d-c3a8de7a3474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97e73a6-59a9-433b-a5bd-04b6f5adcb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e770b8e5-ae32-44c5-a9fe-5c4e18ce6e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08d9bb6-524c-4fbb-8c24-cc4e0d5039a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273406c0-1936-4dcd-bf42-e3d12a5e8d3c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a20cfe-141d-4fee-8a96-1d342769fc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1998712c-246c-460b-a0dd-cf52ad5c1000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41cba4f-cd09-4767-94f4-fad00d7d29e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f84c065f-8d5f-4798-b911-74614d6adb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e287d18f-9277-4797-86fd-a7e8fca0cb45",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4f6f3a-257a-4d98-b59f-d19eb4f18486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c87588-580d-4ed1-869b-c3a49c3a63cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f521b71-7550-4ce6-8c70-b66707247c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64ca7bf1-99f0-4c3c-9fe7-7becb13e6783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e0e9dc-2b59-4517-a2af-70770d743336",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23635bdf-0f7c-4fa6-b5d7-042829b46274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143fdf8a-b347-4f64-b13b-b3ffc6e2823f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15771d0f-3f0e-4025-aec5-3b7e91ee3d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a07cfee-35c6-415f-a0fb-351d6706f43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac22376b-9b05-4014-8108-4b2d62d38ac7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9f223a-a4c0-4393-898f-bc599f10748d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3e5e9d-5c1b-445f-9554-2daea6172fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b241e7e-e059-4b08-afcf-133acf20a864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04b9e0b2-9f9e-4298-b515-a9b9998c5733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc5b87b-5100-4515-8d3e-02b240e62e31",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bf3a39-6b11-4f71-ba00-eee87e9db569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3368fd44-3d2c-45c5-9924-0021958b4307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30468a72-5d97-414c-ae4e-3a029afda6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a22f26-c47e-4051-bec2-4b191ad74ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a8607b-c71c-4fc4-bf27-da98900a9eae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4016ed31-4180-4b4f-8c51-65f37fb8d810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cd170a9-68e8-4b1e-8eb9-98e8bc26a23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d481db-131a-4758-9206-da69eb7fce6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80554b58-d25e-4b55-a85c-ae7ec074fffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cea76b6-7961-46e8-9252-decfec4bcb5d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43405ff-efe7-4fe5-ba2e-8ee9e66bed68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdbf9c5-7174-40e6-b2c7-c910001bfa71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0a7edb-96b2-48bd-bc03-a8624fbdfe1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c23e2e05-c538-4d49-9d7c-f5df56742b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649d5a84-7703-4183-9d4c-50245b722176",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef7772e-d666-4610-a13b-f2bec2560885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87325c59-434a-46b6-b8c8-3481f13d4565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b72c279-58a3-49c2-818d-da88b27638bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "13bac0ad-7543-41ea-8cc3-e8c6434d7b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300e4126-faa9-4345-b22c-7de41c9ba8dc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e3a82c-eb94-4243-aeec-5fa3e23183cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a247a120-900e-49e2-ac16-2a6581059e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f00fb4-3a7d-4ea8-84d6-00ade5b54569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "16fb3252-a1ac-466c-b59a-b731fe7d9eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e369103-1642-4f5f-8f1b-a1b36ec6f957",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ef26c6-2920-4abe-a6e4-6b722b3513dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254e2ecc-592f-4b0a-a14a-e4bf7ccb4e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2a742b-b635-4ab8-bb6b-3474b2fb1952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "893abe00-5f8e-4410-82e8-6eb9ebe059ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ff050c-06e1-401c-a735-e962214af446",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182a7238-c69a-4fbb-b5ed-9c46be094424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c6d725-c5fa-42e5-a9f4-a57c8b307bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96af004-8b67-438c-ab95-7e5fee49c4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "069b0231-fb33-4250-b7e5-9dc46cb3efd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78f6fd3-38c0-4a4c-852f-a7fd1cbfe584",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfc660f-1ebf-47cc-aa55-a8391c27263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce90fe92-124c-4087-b1f5-7032d2df7fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58287b39-03c0-4d14-8cbf-67c15defb218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "826970ea-b47b-4fc0-9029-7eaf382b1aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd68045f-bb2e-46bc-871a-9d5c94fda8aa",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd57ce8-c217-4e66-b236-5555fa64cf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8fd4dc-fb46-4db0-ab08-85e941624328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9336912f-2d69-4de4-bdca-039b7bfdf3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7feecab5-c870-4a00-a3a0-3eb50ca453a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e133a15b-0326-4be4-b3c5-56df3b18de0d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373539ac-a8c4-4b00-ba15-c381d608b445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5789b22f-6f66-4364-828f-9da7821a836c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3788c1aa-86ee-4f59-85b0-658d669c4b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9630861c-3760-4f8d-a31b-2078be6e16fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5fd490-ad6d-4349-a419-4ce29316983f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff678735-2bb9-4bea-b88a-031cabcfded9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46edb8a-3500-4f3b-a4a6-2a5705ae82e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecec234e-d07a-453d-ac07-50e4cc3fc9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e6def2-8cde-4584-8402-516a236ef946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601cc207-1b96-4634-9557-868ef154969c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111c395f-f3cf-4c90-8dad-2366dd53d83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192229c6-3927-423f-9d12-2d312c67d415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc77052-b1d6-472f-80f7-957208772a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8c771b-3866-4536-9520-79d3cc8f12f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c41244c-bfe0-49a1-bf5d-cedff26c0020",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6285901-a82d-4d5f-b6be-b7f1c19515c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7d85d2-d9c0-4a65-8c46-69c66cbe8eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e454f08b-9e86-4076-a70a-dec51db27f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba50450-576c-40e1-968b-22973127d815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb23425-0c74-4bf2-88f5-fe68485ba83c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416d488f-13b4-4cad-9ad6-3217e095f067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5406b0d4-3e15-4a61-b07d-65fc03630fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33a3791-402b-4781-b54a-838c4e3837fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "304a27a0-1a93-4953-b3a5-11d415e84eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be042534-f085-4188-9ac5-652080a785ee",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a775b5-0bd7-45f9-99d7-50f3bae2ce1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16152fb8-fc9c-4ba0-b50e-60f9ab8dae2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab93840-9c29-40c8-8b66-be982cff34f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "047ab627-a989-4988-ae46-52a24b6d19f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d0a417-9aec-4201-8df9-ff5e459702ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d97525-0484-4df3-bad9-cb6e6c423fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714cdb49-595e-40b7-bda6-64db6a5fda4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47420b7e-7e33-4d01-85ad-c611f99a12ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6feadd3f-a9f7-4737-804a-1cd2386ef8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc1daca-cfa7-4a0b-99c4-91093cb43ff0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa287364-6ceb-4dd6-9d93-c2b93b01e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f9b785-d062-425b-a14e-58aafee3cd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76997262-082d-46e1-bee3-c9473a2dd201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "62d2eef9-53e1-4bf2-85c0-917b751b890e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0055c86-ecfb-490e-8d35-3a195637f8c4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96205c4-6ad3-4ddf-a609-36940a3993cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf7586a-147f-4a39-9fab-56cfd2238c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa732be0-f06f-42ac-8da2-e5c35bffe3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49be4cb-0692-4c4b-be20-cfa33a2ba4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176ee8eb-e5d2-4ae5-874d-d7e3fbabf667",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dad2017-d06d-4cab-9834-112808170ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf49685-0ee7-43a3-a195-e3fdc3b42992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0da5c8-1843-48c6-b85b-ab0a62ea1600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db40802-c8de-49be-b411-119f9f75c7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6784bec4-5940-4bbd-81e1-4ae7457fb798",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9746a-94b0-4337-bbe1-44381545db72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c877de-e816-437f-ae0c-63d54c330140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d3aece-8760-43b5-8efe-2e95b7aeced2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "676fc8e7-7bc3-4a58-8d9b-b488497e7c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a44249c-ad1d-43be-9165-c6e350b1bc75",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5413e0-6e5c-466b-8286-28a86da367e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d048de-314a-4e8c-b630-ca50a548ee2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b512bec-1a33-463f-a26f-8b33df19d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2d330e-3961-4f2f-a9bc-114c313f5049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bd6846-9a95-49bd-a6cf-3c359821bae8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aabd332-7256-4b05-8c00-064cf921b915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa1cc08-7e0d-4e1c-bee2-c255ca8d1254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadd1c52-c644-47c7-8730-baba93ba1dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "42a622b8-72e4-4776-96c8-268a54c49579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24102245-56be-4b90-b62b-b1fd2fb8a874",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e4dadb-51d3-4e45-b47f-67e1084b1c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85943c68-e33d-4c58-b225-ffb066a70f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daddeb1f-f7ad-4127-a91e-dbecd36aa6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5ce889-eee0-4c9f-9c81-8cba4ab7c7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7e7867-c94a-48e7-b199-8884d8ea7953",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7ae846-e52b-4669-805f-38e565f08b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c3fd3d-3ccb-4fe0-bd3e-c6f55043e59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d94d876-347a-48a6-89b7-aa24d31b9278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cf3e2e-896f-47af-8b68-a43fe9e1969c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7425f104-ab65-4959-840e-54ee13cd68b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300c3d2e-4668-43b0-ac95-91b215101182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289e4313-de70-4c1a-afe1-82b765cde014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e890f138-0ffc-4942-8aaf-78f35eb7c8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4683ddd-677e-44d6-82bb-d04315eac788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffab785-0fbe-42b2-8bb6-e06b3b9420ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe38283a-a6cc-40e6-b840-21339f263d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c731b4e-8b1a-4137-a8e1-e214d5051d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39074646-7b84-4789-8b12-0513bb802ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa8fefe-4f6a-4246-93a2-063d51bfdf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5336577c-999e-4679-ac41-ecb92442d0d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8118531e-a703-4553-a2f6-da71071206bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8837ec1e-d886-417a-9485-e061b2700c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c19cf5-4628-44ae-b796-3a09f71c56d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fff7822-7143-4fa5-8c37-12269a4f0ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2223ad79-8dda-48b3-a0d7-3de77142e817",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f579f56-c06b-4460-9c7c-5c6d1780e0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4fda7e-4fba-48f5-9545-72b7a1b3d9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11385f87-d02f-4d94-b221-741621146207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1a28e9-297f-4e44-ad63-ebdf5141e7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4983901e-5bef-4249-a593-53e5d49a9c9a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f0e0a8-77e7-497c-916a-d7e5070e29d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f27767-a622-4e0b-ac27-073026240abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcc73c1-0230-40e6-997e-df700f059a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ccdb76-d6d4-46a0-b8ed-ac0f9d1e7d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cf41ca-9f34-436c-b82d-1b15188fa80b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8558b6c-78c8-491d-a21a-a9b1542c326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5259068e-75cd-4da7-8786-0ab83066f45a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aade3244-54ba-4d5c-8e3f-8dec33ebfa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5e9434-3696-477e-8578-5bf149edf285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dc04b1-971f-4534-9fd1-58a0eb474493",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae29a08a-c637-4d7d-8952-731adea0f8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d6aee8-8129-445a-a9d5-ea50e2a9a285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72170dd-1800-4a09-b138-aa71ccab76c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d64e26b-d1a8-4ce5-9dbc-f27c79b08c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad4e18a-73fe-46f9-8834-249f5acaeef1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858e8bad-2be9-4117-a14a-0e25761790db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d1703c-5373-4251-bf32-24f57076af04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f538b1-cd4b-4c66-a639-9c085fb22920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "251ea16d-c9ca-409d-899b-7c5c5492e701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61198af-84b4-4f3d-a06e-0b1d43ecdf7b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9114b32-fb02-42dc-9bf0-fb7bb0b2938c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15b2a0c-b996-4a79-971a-3cbc22f4723e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07eae7d5-d27b-45d8-a4fe-a2387bf42562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c11638-3a0f-4571-bd54-96240f39dd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0900cb2b-c825-42bf-9fba-0b0fa2012ecd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3c4f10-a4a0-40b9-a854-247d4124459f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb3d6f9-fa2d-454d-9191-4df9d5975f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8074fa5b-5aa3-4d05-84f5-f188269b5a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ae664c-3e9a-4773-8bef-8fcc8e3b16f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3328b60a-d7f6-4958-9468-d57a1d0d1760",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728c812b-62c3-443c-887a-e5f937c4e7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9eed84-ba37-4a2e-b3c6-b50261011f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560558e7-5ee2-488d-a80a-cc371a05d8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b57aa6e-474b-478b-b203-d9ef4b5cd781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783f6d0c-0adc-45ce-8b1d-c3de39c5ad92",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cafb99d-197c-4205-8e68-1eb1c7243a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2408ef-e077-4228-a468-3bb5edc4682d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a3975-2bc9-4a99-83a7-a48977c22494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "442dac46-2e6f-4aad-a3ce-fff83a40daf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b59cba-2f0b-474a-af8c-05c72230a15a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c224b5d1-ac2d-4a02-8f54-053a6eb68099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b4857d-3eac-4ed6-8a15-1a2adbddc424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b905e3d4-e657-4060-92b4-63024f08caa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4340c989-b5ce-445b-b7fe-ee8d6ea9ef7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383ac8e7-2df4-45ce-a8d7-fb2f176e8a9a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9c7199-c62f-42ac-9e51-d9e307bab1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00cc83f1-47e8-4ef6-980e-5b50bec2f441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c999383-6fbc-454e-83c9-fcfc60bfb7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4b8aac-b1db-4e90-877e-e860b98a84ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c049c321-f5af-431a-b48b-acc206b0f4c5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50f24de-80d2-4366-aa8e-0583aa79a6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726103ed-89fd-495f-8896-e33ce5b87320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff1d704-6182-43ef-b5f3-10a64bd8dd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "713071e1-b9e8-4a46-81ec-2057556bced0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fb2324-7e21-4f63-81ed-7c4afa1bdfba",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54938252-dd45-4de1-a733-22d857d8d64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50a7101-497b-4bb0-8876-29eca9d6788f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cb2c92-0b41-4c1e-974c-409db410f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd443dc-4e7a-41cb-8a86-2dc0d97a4d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa55164e-437a-4ea2-9f57-d4e4e3a08fd0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54632610-90e2-4e4c-938d-ecadb93190b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12307e5c-0439-466e-a80d-a73aba893861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5baa6bfb-58a3-489f-bea8-d1a976e0041a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad1aa19-09fd-48ce-ab98-72ad8d6a027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923fcd80-75ea-4ed5-aead-0f2fa74b0d00",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e67fe-6275-486d-b0e9-3bf4c39f1a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f938c0d2-688b-48c3-b27e-047e000eb373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6decc54c-e7fb-4ba0-bb87-1b2ff4da9bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06f341be-d0e2-4dea-80d3-6ea194c788ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bf496d-2b81-4e35-b805-a20afcf6f6ba",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eb012c-4324-4422-ae3d-787dc90c2dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176adcf7-1003-4c29-aa71-d421c5fcdcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbcc885-7a59-474c-81e9-669d5aa93691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "154a0b48-1662-4624-972e-9daf37beef55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f711f68-cb22-4742-bffb-305249edf495",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaa8e08-cd6d-4827-94e8-5a71368c5865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103120b7-38eb-4316-839b-7fba09513797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df5a1d0-e29b-4070-b4ee-07c01b8e3a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "854b803d-5437-4fd8-9def-e031192dcc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954a7845-fffa-486c-8c79-07939342eb0f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02646c0d-9e3c-49ed-84d0-686e43918869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8afcbcd-105d-4f75-832d-6060b10b53af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5302a12-e0d0-471a-973c-de914f287a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c435fa46-ce61-4787-a8a1-00d8ab6fd984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441882fd-4012-4f08-b4c3-72ba70466139",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9437101-1871-447a-a26e-26080e5bb1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d221ce2e-dfb8-44b1-bbc1-4cdf14aa1c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052d3bc1-8ca7-48ca-85e4-b8c7a1e5b6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89be20c9-2743-475d-ba83-9308fc3bfa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f405f5c2-32e9-4ff8-97ce-3ace3c8c36a3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a25d668-d0f7-47d1-b257-7f98840733d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eca912a-fc7b-475d-ad08-43cbf3943450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10526a5-36a3-44e0-8b2d-358dd6dac691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46dd7b39-b467-4aef-81e5-489a8b07eccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c9801-d7dd-4773-afcb-bd340b6b8a2c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b5317-ac58-4d37-a6bb-b535df69f98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa2f37b-5e7e-44b6-ad11-c2750dfed950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd70331-a568-4a55-824e-e11ed6951d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6185b44-2332-4c9c-b92d-ea171855d4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6578986d-7600-45cd-a4af-a931ea11a33d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499ab9fc-bdc8-4688-ad03-3b4f98945136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f45657-950a-46e8-8ced-7050eb1ccd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfb4349-b0a0-4667-9640-333b75ff07ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f32293-9c07-4bd5-beef-7a39ac05f394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cdea6c-bfcb-43c1-9519-f5382c02fd54",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb9c1e6-551e-49c1-937c-97b4e816dedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1a98e1-0cfa-4eff-81ff-cccfa74baeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca59dbb-f3bb-48af-a5dd-35ce587aec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0762d69e-5670-4c8f-9d2f-6993133edf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab42fa7d-4b00-47f0-ad44-b64d8d14be8c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f92bbc-6542-42ee-85ac-d2f3dcd31d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416ac7a4-f854-4d0e-ab71-60b99d41f05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd1d215-2597-4e5c-b1e5-fcd92fd23715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a70cae06-5e40-429e-b571-56c6eec7a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c000c8-26d2-41d0-b07f-bfd0dc7ba3ed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e2450e-0052-4c62-a1ef-7a6346d35009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bace19-04d6-47b1-88c9-f969f568e366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dba3a20-a6a3-4008-adec-8dfb6e5a7887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa9b8c4-5a61-4d8a-8d0b-560f01e7bfdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04809406-4611-4204-8abb-c9dedbd62385",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a80a0a2-bc65-4091-9e31-8af623ae3639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be42542f-7947-4012-9748-adbcabd6f801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c3b618-9075-4e4d-8948-4c1694e41140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8989fa-dd9e-4bc3-9aa2-2e837193d994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a3ba6d-08e2-4279-9f11-c4235fc15389",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8389de-4392-41e6-810c-04029270eeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed8b366-35eb-4c4c-aa09-8d43dee9a77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2061d4f4-8a81-44e9-97a1-4d7e432a80c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52c2d4ff-1925-43ce-84c4-19e990ed88f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274620a8-3a21-4bf0-bde2-d01cf78e925a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dde45dc-66b4-420e-998a-95488153397b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67dd9e8-4ecb-4632-9de6-808567fcd3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b5d8b0-0161-46e3-99c6-46c165792530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "83e9599b-2e11-4733-8e0d-b99a02dc2267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7040adaa-0799-4ec1-b718-a17310d66709",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23f6923-e568-4c4b-85f2-0f1de08ea5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be596aac-dc6f-4d70-a5bf-fb76d8bcfb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcaab34-0bff-47be-a06e-37dbf47bc0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f81f124-4424-4fb6-8790-e56e198c6ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e2528b-059a-4765-8e59-18c2f697e073",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfb9a9a-5d92-41eb-9532-432638bdfe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d9f792-9c12-48b5-b128-d2052a3f79c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2946651-eeb9-4955-9527-07e6234c12ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf928f72-9e2f-46ee-b6d1-bacba6ead1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8d0509-bd27-45e4-ae86-e12466b3bd93",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce947f7-4f66-462b-aaa1-28eeda3220bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fbb2e4d4-d33d-4df2-bf3b-87babc9ff5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f55c5bb-834e-40aa-bcd6-8f182f5830c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b183af86-b09d-47b8-859b-40bfc80929d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f2a04dd-02f7-4a3b-bb06-708b348faea2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9be72f6-d78b-408c-876c-9c7898c473c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ef6063-5f3d-4b9c-8885-74d7cc28a5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f083a77d-e6ae-42b7-b7af-bc55a99fe4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafe46c6-9385-4017-8665-f1cd6bfecad8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21c5c863-f234-406d-a9de-4bc164baae9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f4187ea-fcc1-4fe1-a7e6-4d80337df2a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f3f4b23-27af-4f05-911c-bfe34c56aade"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7e66f30-39bf-4ce5-b03d-65c411aaa320",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2922b14-e0dc-4ddc-98eb-cfa2a55c21b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "908b5550-b432-4ff2-8c9e-9041a7b8868d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ca3d05f-f9d2-484f-ab2b-4a2ad101ce5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4cba3ba-fa72-48b4-ba6a-e5aea8e712a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "978bd5f5-8b31-4aab-99a5-adcdd1d4c398"
                }
              }
            ]
          },
          {
            "id": "9fb88e8f-cee6-48d7-8d45-fe29545dd7db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e38e2347-09e8-4c75-a3b2-5b9989f5b9f3",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b736a65d-bbc3-4ebe-ba7c-55157f9977f8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091aac4c-89e2-42f5-b13e-353b06479b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "87516d32-7a21-4ebb-84da-d4e6e0cfdaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6e6f28-b5a0-46ed-bef9-2496712b03cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0b9668-fccc-45e9-80dd-e6250a881e82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc30b81b-051b-4e5d-a327-c07895cef0ba",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fe4c4b4-9436-4504-bf0b-3cf54b563ed1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "666ad4fb-a8c9-4118-8f05-ab813602e8c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4062a8c-f9a7-43d6-91cf-a63c06a36d01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "393b825b-d442-4b69-a7aa-43765c3dd9a4"
                    }
                  }
                ]
              },
              {
                "id": "e5a90276-27da-406b-9708-ee2e14d199e2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8438e908-fc21-4a3a-81e6-9de05d6d93ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a27bde5e-4263-4015-82f9-19bebaf1d55b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a6c4247-a166-4919-bb35-9e0dbbdc01a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9c8f76c-622d-4a49-a91b-726abc3a3bfa"
                    }
                  }
                ]
              },
              {
                "id": "0d10f0de-2972-479d-ba7b-316c9142ce5a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64e2dc6c-b95f-45f4-ad0f-b6cd737ddacc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c2664a5-e57b-4ca6-9433-e8126d45912d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7a96e9d-3269-49b5-9304-860e3d0f32d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b994cbc0-7531-4b38-a7f2-881c38db3fb6"
                    }
                  }
                ]
              },
              {
                "id": "6b708cd5-cd04-4471-9ac4-bcbb3dd5ddcb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f9519f9-a037-4b24-a69f-7701a2f7a7ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc2d0300-b6cb-43f2-902f-155021bd7574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f285b0f-38b6-449a-aa92-3fb8e4ce6f41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "88ae996e-76eb-45fd-bdff-de52e5a59537"
                    }
                  }
                ]
              },
              {
                "id": "d0474616-0baf-4cf4-beb0-f722bc5797e7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8a1b1f5-7322-428d-a6a6-63293bb2677e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfa16a2e-3697-4e3d-ad56-a3977c17b965"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf63487f-45dc-41b9-9a8f-7e4ef43cfd8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2be297b6-1afc-4711-9790-d3a5cd905d07"
                    }
                  }
                ]
              },
              {
                "id": "0f5e49e2-7945-4e07-943f-ab4376afb94a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e370aa-4243-487d-883f-c0783eb98fac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7177974e-412a-4486-b376-3f5f3153ffa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44a73a44-1bb4-4fc9-8f42-243936719a11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c8c56ee-fc4f-47a8-9aff-f110308f7dda"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a67a04fe-7aa4-418f-9fdc-b0efd97e9e3c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28e60a57-433d-49ca-b9fc-743a4972a5b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7baad57c-57c8-4677-bbca-282d4fcf544e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5fd1ab40-0d4e-459c-b188-5e0f038f7133"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99c7343f-63f7-4f98-b878-e5dfb62bc39e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "176cd0b9-7e0a-4da0-9e44-8973bd8e7044"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de51a884-96e8-4790-8e7d-37adee0d3cb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f621f40c-aa4c-469a-96f2-d2fc847ac3d7"
            }
          }
        ]
      },
      {
        "id": "665dad57-4517-4035-9ffa-0ba73179c2e0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "16f8013b-94d9-41b0-a3cc-6602025e6340",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9e28cba-ed92-46d2-a6fa-266810a0a93a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2314934d-9db9-4469-828e-b7c0dd779043",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38d0692-2ba0-49e7-9200-19b1a9aafbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236ffebb-add7-4022-bdf3-fbe64e8d81b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bd1074-cefd-4bf9-adfd-e99d8616f010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c31f6bf-89bd-4413-b58e-3c199751b5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f114abe7-4664-41a4-a85c-c555cccd4893",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed316728-6aa0-434a-8966-5b98aca7a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e996e4d1-5aee-4b3f-8520-5d3752e74bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55236569-ba85-4d8d-9ca6-66f8167dbbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "743ae875-f796-4ab4-9a5f-3aa5f5e729a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09d390e-724c-4523-bad0-b9b235183115",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632a9ce4-0ed5-45a9-b6d8-64d24bfa65d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee8c38b-d139-4582-9c85-061ed0df37de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88557fa-eff3-4c52-80d6-2aa32aa7b33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6473a6-12d5-4f23-997f-f32d9e98351f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ce8c7e-c519-4cfe-bad0-57cb9427b2a4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f461bb9-9cdf-4ddb-85a3-90e224bed03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecbe693-1b83-4c9a-9f38-59ea3c19aacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13547153-804e-4d71-b580-6f1d5192899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2be97e-812d-4040-ad96-537a8b77414d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae52ba6f-8951-48b2-a2db-b9239dab50e9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d994424-c03a-4613-967c-34333176a180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346b516f-0b1d-49c0-8454-67c678436881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fbf786-c965-4c5f-aaf0-46c74e009459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "279a02e6-5e59-4ed0-88b7-a1f34cff5126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db0c3a8-c428-47d2-b13a-a4f111a56af6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d69bd4f-70ce-4198-9d8f-fb13de7f9847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0a1d8d-4675-48ee-810f-bb21ade67906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c62e31-d6a6-4b26-a205-29bb0b223f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edd9b790-969c-4801-9dfe-206bf0d0fb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98f8526-0d90-437d-ab3d-264ddb0d90a4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54680725-75cc-4db9-985f-121679881472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18baf15-064d-4997-8726-2b927b0e2724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a115f9e-1255-4393-b7b9-dc716d5b9b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef59286-469a-462f-a94b-19c234159019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c5e96d-c1c1-4094-916d-736970140278",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf4d124-8d8b-4e64-b969-1920062ccefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19eb2d10-bc15-474b-9da1-cf1f9714affe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f1d24e-67c6-46b4-baf0-388ce1fa9481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5249e6ac-1dee-437c-9c2e-fbefb8bf4506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2961e02a-f16e-46be-9b69-14f013787e57",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0468c676-2d10-4be7-b411-41feb0222d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee711cb-612e-4f9b-9d12-5aed52665da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e306a40-a34b-4b3a-b586-f87fabef6842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0848d9-1349-4503-a02c-d9f93d265f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7f4809-6615-404a-87fa-d6ced178f6d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5138a3-2b6f-4ccc-812d-7a3bea65decb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d534e94-83b9-466a-a057-49216e51253a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82620e6-2040-4094-98d0-af31773e9519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca77bfae-2297-4a13-a964-226a66ba8a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff919f17-3264-4875-8be5-07a4d44cd42e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a882d0-2d9c-4819-8b9b-4efa7f99b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50067058-8c36-4afa-a6a9-ac2ba7500821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffb5be1-480f-4abe-a432-65822f0d494b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8b8344-60a8-4ebf-99b0-d0c4e0d90067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ca4484-78b7-44f1-a33a-b6442371cb06",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1767d14b-b69b-4aed-8cd8-1508082d1b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f52487-fc1a-4ec7-a867-56f9df29fd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc6f473-f7ca-417b-93da-f58ba0345740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e13ccd61-3ed8-4f2c-92e9-73248b766431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a9be0d-d65f-405a-bf44-9e791a5fed45",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c8d5f1-d832-4a6b-af9a-f66ff1132a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a75894e-2727-4bcb-95f0-81f05ce0c129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2abeaa-0c46-4e6d-b543-8bae90745f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d231a8d0-6410-41e0-8d51-57c8bbf07bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6ed11d-8059-48cf-9168-82133ccfba4c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6167c3-e1d2-4242-be9c-ff01039eb09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd38a2d3-7bf4-4e82-9d9c-ba9744781af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6382a8a6-fa8d-4572-80ec-93417903597d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeeb4eb7-c32f-4d74-acc7-062787c4ce17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b482c42f-fd7c-44ec-af38-b42b9bacb9d3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c111a845-87c7-4032-b397-37ca18f56a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f68f7a5-fdc0-4816-bb91-19ef4428b8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2bea31-b4d0-4278-9038-c20488483635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f17714-3951-4373-8482-645e8e402079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d956e3b-eaa4-4d2d-baaf-d0b673f7ce81",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1855a917-beac-473b-9ca6-817798fcea56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac19651-0bf7-490b-99c3-357eaa333883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e982b05-b53b-4e2e-9a06-0448d08cbd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f560ce38-4672-4cfa-ae3f-22eaddaa7469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f48c61-56e6-497b-bb9d-864e73f01c8d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5474999f-6945-4a52-bf6d-3bea8d077adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b437573-ddcf-4a13-8a22-71c528b346e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d86576-08af-43db-9b52-7602beac0720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b206349-a12d-408e-9ada-a0fc06557617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e871d1-2e60-4b22-9bef-555b9dd0ba3f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1729636-06f0-4e22-9145-f440cdfd9f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007d01c5-a420-48b5-acaf-865fcc6bb034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6889675c-7e29-4993-9712-2089fa058635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed608da4-68ce-43a2-8f2a-a1afb918bc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6601754-251b-4278-b74d-0ac49e807404",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06418fc0-36f1-4bef-a7e8-1a1d7dfd5b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e799e9-8c8d-447b-9bea-0fc8752e5e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cb7605-bb98-46a6-94e9-58ed0123d0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05eba91-9558-4ca5-89f9-1705ba377e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047ec901-a864-4e4a-9f07-8833527dce48",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468d6e66-7daa-42c8-880e-2417a919f75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59f73c1-b87a-4a52-878c-e087285691cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e89e87-5b42-4466-8893-cd5a820754c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28d2553c-b908-4d59-a712-a370b8391517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0cfc6-56a2-4da5-ab82-70bd5a246a59",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dd333b-9a9d-4ba9-bd07-16398d525576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a7f122-00a7-4fbe-9575-0ca093b01882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a29104a-ac7a-4a18-b40a-6a42d7b62601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aadc727c-2850-4bc2-87c6-b71aaa0d6208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d4796b-9524-4d38-8354-34ef38a1ac6b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db8bac0-fb62-4c32-b395-030e9705918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eb1389-9f17-44f3-b0a4-addf9660a88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e15bc20-5ce4-4164-9fbc-be0740b86091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2853fb8b-d605-4216-a489-f22a7b220539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f4553a-d695-47bc-b288-1ea32f9d646e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0d219b-a281-42c3-8666-15a8b136671f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0151b9a2-064c-42dd-b35a-66e1f4925760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33e23f0-bb98-4a93-8ca9-518e4ceeae22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24537b82-7a20-4491-b059-27490be11b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a1e3ba-28bb-4d1a-9b06-161ca14e9615",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c986b50-1042-4e44-b9dc-9b60afeab2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9534e78-f9c2-4b9b-a926-f1162b2f1fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1686478-0e4e-47b3-abf8-cd104dc572f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da37e707-f60d-4cc2-9978-f4a8b5d96874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f58a77b-213c-4683-a6e3-3f4335867442",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192183cc-b222-40c2-8394-8c95e8fc78df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304403f0-fde6-4428-8b37-f67e50ef9898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d49001-020a-4da8-9748-b2b2ef960f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ca9659-3549-4deb-9c8a-437de7e2e5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38530d1-497d-4a35-bb4c-de5544f5b529",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c42f91-403b-4c47-b5d6-b3a6f01dde26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ab5e25-ee58-4fc0-ac6c-0fe9cb009dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df4eef9-3020-4588-b25b-d1e883576f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d5446d-62be-4561-8542-d0df51257024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb46798-1b4a-42c4-816d-16203f46b396",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd023e00-2e4c-4fb1-b5df-4cbe8e72b9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a22bc5-600c-41c4-a85f-bde01f44057a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c34bcc4-af81-4727-bd54-b3cd2d9ec59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7224c19f-b8ce-47ee-ac02-c5c0c5a25300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35952ced-fb61-4cc9-9db3-0ec8ebe44c2d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc0172d-f888-4e33-ae42-0ec94efccc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78a48e7-1903-48a3-87b2-11d2eaef8603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385a2f45-37dc-487e-a1d5-e95ef8602aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "341e631c-c1cd-41d8-a6db-45a1bf29c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbb5e51-2312-4680-a422-c7209f9afa86",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afdca6c-da4d-49db-b7a7-48513aee534b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c9ed54-4f79-49bc-8d1b-52e4b49d1b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b23ac3e-4842-475b-883e-3cc45e2dac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9682e70f-badd-4343-8425-c97ff0f4b67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf8913-3e78-4bb9-8b12-517682a22e61",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53439f7-d35a-4491-8ef1-915e0b434d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d88e1be-ca5a-4d5c-8e39-8ae60f413168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea2f4c8-99eb-4df7-8181-b74ab8b94f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "178eee6f-68ea-4d33-9b34-a080b7cccb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57975dcd-536b-4e22-a22c-1fbeb688830a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be616f5-4e56-4b2d-b8c5-7b4eb2fc5836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d310e72-eec1-4b52-a315-8203bbba21a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8b5268-3ad7-4f01-8c52-e6c80c6180f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38f4308-83e5-4e52-8a52-d367641448d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a3f86f-6e3b-431f-a215-960a2c37473d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88099271-6436-4bad-bf44-24a2e6e86881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ab7a76-ddad-4d7a-8f5b-54f0c090e223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139a772c-959f-4549-8b84-5d7cadef897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3488eaa-fca1-44c9-b8b5-ed4d2e13a7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f2a392-c98b-4510-9bfe-e1bee6c20cca",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77345c-e140-495c-b040-8f16890c786b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376f1ad6-dcc3-4434-98c8-95f6e8915091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac400393-fb20-4e26-909e-d841a27c6a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49063874-91b9-4eed-a1e1-a34b82f0a122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a19601-7bd7-41c3-b684-8401138a3988",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324eafdc-7067-4e8a-b0d1-f3f3e69d1f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344decbc-6da1-40f9-aaf4-4462b77a41c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa47fde5-3113-42f2-a452-287b6a869f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36d8a596-9e62-45e6-967a-eb76ac1d9de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3155e5fa-df52-4e73-b129-7f86b343c9ed",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bcb3db-f3f6-4596-909b-9e2d695deccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68329555-77a5-45cd-b98f-44ae7f0ceb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4cbbcc-09ca-47e4-909d-bc7dcf863b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a93f92f-1d85-4674-a7bb-42404d4f2274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d131cf8-6c34-4eca-bee8-71f099ffd1b0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d48d0d-2438-4d5b-943c-d6637e49cdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789ca9a6-2bb9-402c-9cb2-473702b454e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84953058-814a-44ce-b495-0c12626346f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa98820-1e55-47d4-9698-92a1b4cad4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5251cb-d43f-47c0-ab45-c243f464a6c5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4043ee0-59b8-4f0f-b37a-e2a56f4bb13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97cdf91c-9026-4906-80ea-ca4538256569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6de4d21-0900-468e-890e-e7d515762b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d9b5f5-c57a-4be2-b692-6bbb28b3d990"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1df635c7-8bab-449e-a480-29cae3bf8326",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fa40c2e-441b-4158-8e09-4a8bf99c2d6a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445ea5af-3726-49e6-965c-49a549d0e7a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8c9280-8cbc-4d34-97bc-5239a035e60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4aab2c-a71a-47b7-a2e1-d9615d979777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29f443c3-8d6e-49c4-88db-fce35941a27b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "278f56dc-4742-4e07-b86d-7275e89d6511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "617ec1bd-e170-47f1-80b3-ac6399794a28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2d44c23-ce4b-4913-a0df-a1e4df37e4f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5dc7839-7b35-4768-b915-abf77e7056a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d48495-8802-4961-a8e0-62563b3010ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7139e820-9869-45eb-83ef-9b618f779258"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a710a69-7f89-4487-b1cf-ef2cb2c8c76d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed3f475d-22de-4f20-8fcc-2bcdc8ed4b86"
            }
          }
        ]
      },
      {
        "id": "0fe05c27-8f4b-4ef7-b8d0-7cf75fac923b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "99ecc2c3-9a5e-43e4-a05a-91d9104558ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c1582fb-ddbf-4c20-a104-5a126adb7d85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a8588114-aec7-4325-a4ee-395ea7e7c830",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d71382-07b4-4da0-8c41-22ce10871bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c76307a-c705-442e-b061-9b7c54761d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b008b0c3-10c1-4ed9-ab15-4b59c5749b33",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79479bcb-6777-434e-a297-1edade161c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6465947b-710a-4c54-a71b-05ad2398bcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e884d9eb-1238-4015-b103-462982ee5967",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb23d000-c9ef-4814-9bd1-62ae500f3152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5d9835-f12e-4cc4-9679-5e346510ead9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e84f43d-4bf4-4f7b-be61-b80246012b31",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775fb8db-758f-4042-8f21-46c137a8de7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f06581-05de-4da0-b6d5-e0e315deacf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f76b7b-d97d-45ad-80fe-d1ca4efa06c8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe30ac0-73f3-4759-baba-2631f3087019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65cd10b-e452-4c16-935c-a1a316eacea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3303752e-90f4-4b60-9324-149b3a946d13",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b57e6e2-6ef5-4dc6-b248-13f67bef55ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16f2209-2da3-4d81-9e73-7db532a8a49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47830f1b-a557-494e-bf17-11ba7b792fbd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6ce138-e6fd-4295-9da5-cef3a566ab87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e53864e-0f02-4ecf-b725-73684a58bb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168673a4-8b14-441d-8f08-20d92e891367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e57df1-4588-4fa0-a43c-f9d3361f9f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa8fa82-3ee2-46f3-ba9d-71620fb66240",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fd8bf9-0d2b-4741-8bee-089805f22192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f8b26f-1faf-4a56-86d5-6daf9acb2b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cf270a-f38f-473e-afb0-780f477dd23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618758a4-2c54-4492-99fd-2fc967118844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd35f32a-b591-4bbf-9ced-d39fb1f87709",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e990906-1fc8-4556-b4ff-70899ab92dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc91f599-5d89-42c1-85ab-82d201898414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da343e5d-155f-42b1-ae5e-e88a20b70872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee000115-632c-44f9-aa63-91539295c399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951b3b35-b19f-4deb-a8cc-4dbb1a414c77",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db76464-0671-46ea-bb36-b93c81459b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292c3603-39f2-4d2c-b3e9-17231079752a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3335cf7-5be3-4744-861d-0b9930a6893e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45afd3f5-23f0-4de5-81f8-008a8b299d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567641f5-71b7-4465-b585-c51623b6b71c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cf77c2-8baf-4715-af79-2a754d30d909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d3c73b-0ede-455e-8706-fdf82b22207e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c60b851-e705-49d5-a57e-3bd90d6e1cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb060d1b-98bc-4c8b-b455-256b6db74928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4472c8f-381b-4b62-8db4-aa9aa3bfb711",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aa4611-ceb3-41b4-9111-c61fcf0870fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dd607e-fa69-4996-aa7b-92a1ea81c36a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c57bb6d-eb16-4c07-93bc-857b6a352987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2107be-9bbb-490f-9342-335623561425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb45e50b-18d2-484c-9b58-05f2568a228d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c53942-98e5-4610-9908-f50a87837a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fe96f78-d107-4a79-8f02-2e8b78b62c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109b3e32-bdab-44f0-a615-29957ddda987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4a3e7f-dcea-40e0-88b5-c0ee270ad7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a37514-2358-426e-805e-b94a771b7ed1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1ec2bf-09fc-4c0c-ae22-862c93cf6a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "876cabfe-ca2e-49de-8329-baee350d25f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34df0e0e-ba81-4c41-bcd7-9a8f27cda27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5110df5-84d3-4098-bb61-34d2bbf93cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae1e1bd-9a52-449d-b92c-1c73fa6c7c0e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153a1c69-0d3a-4ae4-84e4-97e18bb860ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "050b54b6-3e02-492a-8052-21ddf002996d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2caa846-d940-4e43-b6e9-f97f2b6bc926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab274b3-0e91-4d58-a563-0536d5462a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7425331-a6d0-484e-a111-5b4eb8c1e042",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f721470c-2c03-45b9-a50e-e78dbb987b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23294977-e43c-4f80-87bd-7cc25b0aecd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f580f333-80a6-4c42-93e2-9cd3f079c284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44aa745-31bb-44a3-b19f-14b9c98907a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0512de-0a7b-4a58-b97a-39626fd0d4ce",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c734c54f-151e-4394-a182-76c323a962dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1cbee8-c502-43ae-9447-bfef4122f2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ebadd7-d4ab-4e8c-907b-70587d4fb7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147f51c8-818a-4be0-b000-469459b26cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c319069b-e056-4b3d-afdf-b0a355ce7c74",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af2548b-af06-42be-aefc-166682ebf857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa3ea9a-c58d-4af9-9622-da1c07861e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5645fd8-54d2-4483-8a4e-45a2816b828c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0d942b-1550-49dc-bab2-2dad8a2bd495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687c35a5-ffff-4f5d-9a5e-f1ea8ab1d9a4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330dc182-ec93-4fe9-b1a1-6aed6bf80d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe1d806-7852-4669-8c3a-fabc7301c3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9254f26-e4ea-436c-9724-c7db397ee726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b4de17-439b-4ffa-97bc-5c9736a045ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15672cd6-c0b5-4945-8394-9132ba633450",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63478c8-0ec0-486d-a030-f67c60b1df57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1396db3-8dac-438e-a722-a9d245fc5ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e659ae-8fd5-497d-b7a8-cba6478dd8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46a19b1-ac00-4faf-bd12-6c1c9ffccb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd76f15-1127-4c00-870c-228c6208fb83",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6752bbb-6679-4d39-988e-04359730ecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cf34e7-384c-4ce9-9922-14bf2ace37a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce6b78a-79c2-4f4b-b2b1-95dbfbaf79f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5055b31d-39b7-4e3a-aa4c-cf88ce998c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b2b393-225e-4359-b200-75f8a79a81fd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dccd15f-6af8-4519-b5ce-2db043544197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15adb19-858e-4cb0-9dce-154e73314693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bcc834-71ef-4cfb-8d62-d3deeda1a0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103363b2-6dce-460a-a447-56a2b57103fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838180a7-5156-4803-bd72-80176cbc782b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8878a17-4e80-4a70-8f1a-d99ff13e0003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f908301f-6d13-450f-ae87-5a0a829bf0e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35985fc6-5eac-47ab-8ba4-9915619383eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f0ee84-3cd7-47e2-a156-3e21f29c9463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7366f5ed-4f99-42de-821c-bf519c2ef177",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932d789f-ea06-46d9-b290-7c541cb5d674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f0914a-3df6-49e0-9f9f-d889096e9732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a04eb50-f1e2-4a15-97eb-19068352a9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c241efcb-78ec-46e7-859d-30e23e19a4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f187a9c0-e852-4c13-996e-86218d2ee7ee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299ac874-a789-4cac-9662-186df9731cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "050c82ff-4a1c-4be4-be9a-3a3f5cfb650b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c0e82d-d041-46e2-8141-725449f0d8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9393b14b-c747-443e-8e26-884233c73596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b7ec11-5baf-480a-b81c-c46b49ec4dd9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65ce770-4d76-42b1-9b16-ff3ac85be0ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55bd59f2-6fa3-409c-abf9-1b466d81e230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb24f358-051b-4e45-8747-fee8c2a3c10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b225178d-eb77-4c9f-8dda-a676f1215cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1139c80-ef9a-4c03-8163-eeb650647677",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f7cc06-7712-4c99-b783-d289eeacf81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "736e3795-3c63-44c1-8ed5-99f65bafb46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d16e77-8a50-43e8-b040-2bbb90aa0d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ec5685-4356-46ef-a075-e6e404bedb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40af7b1-b1ca-4766-a9ce-7ade153c37cf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c7e115-6201-4299-8faa-cc08ffb234ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ffda74-f60a-496c-ada2-685b26d97c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3718aea8-6619-4fe1-b78a-d0b3c74b430c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f935ca4-fcde-4ed6-bfb2-6606cbaf4841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e534858-af6e-4989-8482-3bf0e7170eb8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04814304-e561-4f77-b165-bdbd4d026644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c603280-4249-416d-9fe9-10ba714555ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2a5a2a-a643-439d-970b-a9de134840be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9399e67a-bb14-43dd-884f-bc4cd02549b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e45b1-5605-47b2-b280-49358d92b30c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff0a171-4b2a-4517-8511-0c40eec7d29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52977be8-2cd2-494c-b506-9c6047fc9ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4db097-b462-46af-9df8-45bd88cd6a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ad3fa6-b250-4009-9924-3f5ebcb839db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211e0d6e-5f61-4238-aab2-aa3e6887d142",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f5a905-9d4c-4c3b-8291-7da8285cf414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18149484-9831-4dc1-80d1-047cb0f6aa3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60df6414-0580-4eaf-b099-e52362e5f766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3051914d-fc18-4be9-a1b1-8eb900a67062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0339e40-f83d-4654-8310-212ed6bac6b6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7700de4c-300b-4064-acdd-0f30d05245bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "607af758-c133-4fa0-819c-d4eae662e4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdfd134-959f-4c2c-ba46-1fa0ff39dbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4e44c3-b5a6-47e9-93e8-8c7f60b9940d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352b3a10-0798-417d-818d-288c3a8e528f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf94f786-2f49-401d-9443-7e7849731407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a1d81d-1e88-493f-a3e3-94de02a52fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f3555e-7f6f-4f15-8e47-3753354b962b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebe1cac-abe8-4577-af39-12e5b7143959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d628e5d-e315-473b-b9a7-26b7d81f6dd2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590ae139-e765-40c8-9466-73e2efa9a50b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc109118-ead3-40b8-b96c-2a9276ec96f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ab1c6b-bd92-4e15-a9f6-342210a4d514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4227b789-e74b-4771-8606-97d37ce5ec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc51a81d-75e5-44d7-84e1-7d525a8e5de9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bc48c0-7200-4360-8e11-65f368b631be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8527c6-fbe2-4c75-84b9-0b487520d695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3936f2c-fa3a-4369-9766-8a0fcc18922a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0b0bd6-b97f-4fcf-8ffb-20c536c7b08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3844e1-007c-4307-b40d-e0592ccef019",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87135e37-c8ec-42d3-9501-9a4f86a44c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1128916b-0cc4-4299-859d-7c2d57e91f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9a898d-5632-44f7-b339-1d735ce34046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14bd3d8e-7df0-488f-9097-fa31a31124f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb1228c-0fd1-4c8c-918a-5c2ded8c2e8f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb939b0-010d-4147-95ab-38753a84fb5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb058882-4d54-4e17-b473-da939529b88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be51c2a5-c5c8-415a-a82b-32ff0f7724b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996ef232-b0cd-4326-a1b9-edcfe8ba0fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1c5334-377f-4e69-977e-de40b25fc00b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f260a1-e91c-43b3-acec-a9916cfb4c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2784984e-1b86-4277-9510-055d22f53775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba305ba2-fc2b-4295-87d7-4fd57e1ff2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2a9d90-a111-4bdc-a5c1-803d077bb2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9793f140-5721-4f40-857f-4e518fc8c937",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaadb122-62c4-476f-a490-788cdfe9275f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d1c3d6-d316-4fd1-81a1-6af5a15cab15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e0a78b-79c5-41c3-95f3-c28ada05c0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66f0113-6818-4feb-b4b9-6cd6de39ad6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f04a43-3caf-49c9-a6fb-712fb92972d0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b03c652-c2f6-42da-bb65-db22314e670a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38903dc-85e1-4a9c-a748-e0a73251ff3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83afed9-c54b-4a6a-9c1b-50b49afe9cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad88efdf-4c8a-4adf-a526-7f0bb9813c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd6d417-ee46-4497-9c2a-62d61379cf5d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9961d5-3dbb-4761-a1a8-35244d148b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7121102d-1b2b-478d-80ca-528ceba98faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3681138-2cc0-4b0c-bfa5-4210a8363e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c9d6e6-e9de-4c32-a282-af9f5f0a3b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d819167-61b1-47aa-aed5-fdb472cded57",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8677326-9e5f-4ef5-a912-cfe138dcf670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767a7965-a484-4cb9-abb7-f75f3233cfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fedc889-c44c-4ab5-abfc-2036c616af7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a37bf68-8236-4e70-b46a-bd9ae6c44016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144a7439-2634-4629-816d-0f6494b9a017",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4831af2-9e2f-41b8-928e-480ddd9f7169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2fa788-7382-47d7-bbd6-b89f77a88ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a419fe-ef27-4e2f-a813-729e5e6d253b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11697379-161f-4e12-b93d-b07ffd021bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a706871-1843-4ffc-87f2-68aee9b455ae",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf4c30f-8471-4fe4-9fbc-c6bedd5be9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e64235f-9285-4be3-be1a-90541586ef4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c39bc2-2f50-4c63-9681-9d1d6d5b81e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bfeac1-90f7-41fd-9552-e7a2447a73be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ffa9b-85b7-4425-809e-9341fa0ab51a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9b8ae4-33a7-471e-accb-2903d3aba460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e62d1bc-667e-4bf7-a0b4-3302649a0cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a3441b-22f8-41ce-98a5-35b014315a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923537bd-0ade-4610-9797-bf2113409d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906596e1-8d07-43d9-8db4-b8ba575c756a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211bc211-dece-4777-b53c-22e4b66be6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321fef58-b1a3-462a-afc4-79acdd9889ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd4b735-5de1-4938-8b1a-b33152a44d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c08c738-c952-42cb-856b-19f7743a9d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f950eb0-60a8-411a-87bb-c5b929d0c80a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55da4472-324e-454c-8a44-2251917a6977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb204a6-9cc0-463c-ad5d-470e282eaefb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468e56ac-932f-4f65-8056-d6b096a4443a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cc6fd8-32bb-485e-be6d-3a71c5e5812c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e0d310-1087-4db4-99cc-21143bb09646",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6490eace-f7dc-4470-97bb-51924ce5b4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9b911c-174e-4730-82ae-066933cc278f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2867ef-fc70-4266-9cfd-222a9ba4b0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b6174-1676-4335-8580-b1960e8038cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a623f250-24ac-4592-b904-d2852207c25e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876e2125-7349-4acf-b1db-d62b023eff30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d094c08f-30e2-406a-a282-260cab06352e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f27d6e-bf77-4d37-baf4-5ef6d642d983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46af1a2b-b964-4331-8bb6-014125bdb8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1105958b-9440-4b41-aa32-9125b5c61ffe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096c9015-9f15-42b8-b871-00c7c11c6963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f92052-dc75-4c32-82d2-43e2bda3fcb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0fb01f-0fb0-4d42-81dc-f47921be9dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968c12f3-c208-4c14-848c-7d771dbb0656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ed6d8e-3fdb-423a-954d-39575c152c81",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebbd26e-bd8d-42e2-a31d-4c8681c348aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e82a99c-4923-4fe4-bb0c-7bef01faa9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1676f1-d3d7-4ecb-9e0a-821ceb7001c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fafbd0-1103-479e-bfb0-fa5627d3f8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6437db0f-3e33-4fd6-8ad4-241f2891116c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21986026-e182-4029-9ae8-d8d426b1890d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd99586-ab75-4d86-ada0-f5a2bf701a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eebd3a4-894b-4352-9e1a-d61f7f5e9b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a2145c-4f94-4d04-9a14-22e996605db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa7d582-dff7-4ab6-9bc8-254b58bb1a54",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af452d90-6bbb-4314-97cd-cb342cc961ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786a9995-196d-485f-b8de-8c7657254f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8869e3-ab6d-4ca1-b544-8298ae7ce3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6a8b7c-ffbe-4ab7-8eef-7f17b74425e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0caa86-6fee-4ddb-a26b-3282b7cfd0b0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0701d573-0d75-4d5a-b43d-ab62a6a97f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc42c1e-746e-4ea4-bcd1-29b85bb0c716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d3086f-b80c-4556-833c-eec8dbaf9f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecd9a3a-202c-4d39-add1-7620ed8c29a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f460d0-761e-429c-94d4-8ea48a5ffb23",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a24b6c-2021-4b1e-a961-0d47785b471c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff032617-4bb1-40e9-9476-5c3d8c0949e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5eebbba-c1a9-4898-a73a-49f2ab20cd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc8e044-655c-433f-85e8-d23dae327d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985e927d-5be4-43f9-b542-c02d3dce6587",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467dca29-67bf-47fd-aac6-7ce5e4ec715b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e82f2de-e663-45e5-bcb5-9e2ae324e14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408fcc8f-c458-439a-96aa-8fda82b09b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d68aec6-d0cc-421a-84c4-2a53b17a86fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ecf58a-e09f-48b5-a628-36dac0b719eb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb8c2ce-cdcb-4dfe-97fe-bd02bbb90dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11162489-36a0-4e36-a4e0-353fc61f6bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cedb4a0-f74b-4890-8e25-5ea02b3b9379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29abbf42-f952-4013-b717-3c2648b785b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfca117c-7b26-42d4-883b-a7fbf855a86e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f885b15f-1015-448a-84f9-c873fe24e8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33651d5-b396-48fd-b923-67499ed37143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04139cdf-5905-4f20-91ee-f49e71be1d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925d76dc-5da8-4577-b4dc-4d507bd2dc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4186183-8262-425f-8bba-a1de8070606b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e519b5-f8c0-4c43-880a-ec24aaf228cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7bcf8c-b0bb-4adc-9281-57cf64211de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9de3cc-f35c-4e0b-9a5a-4f1419eca427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e114baa7-8509-4117-8807-9b3172f7c051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506538ea-293b-4a24-876f-3be6576c9d70",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f2e0d4-666e-4ffe-86f6-b4cb6e893f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb52835-21dc-4a6e-8738-941385b7db12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abb0f73-4713-4251-9c70-7caa7f68b424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbba02e-a776-42b8-9bd7-59fdd4675be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d43e39e-0744-4c2c-93d5-e1d9cfa8460b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa32728e-647d-4c66-9004-7c00ccdee49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea5e860-0ed6-4fe4-bf6a-c2dbf68ee93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0c8617-f8fa-4050-9328-10d1b6e18f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a29dd2b-965d-458d-abea-056dbc15c9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c26011a-1e0d-43e8-875e-0ba8e78a4242",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a027d95c-0e1f-4048-a0ec-ee0c161d0039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae547ef-237c-4f82-ace2-e035a67a566b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d795d1b-17a6-4e92-ab00-4a4f0cf0b4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d058538d-5202-4083-b127-1de842cfab34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7d653c-6122-4328-a459-496b820afd2d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b452e6-6642-4eff-862a-06db9732596a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e1b19e-3044-44c3-8732-3d9c610d9690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2eaaa2-22bd-42ef-929e-bab9a9921b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db003080-d865-4614-b29e-93bba98d5265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad304d08-5c24-4d1e-8e72-6100f64a952e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071451e8-5c98-4e1d-a50a-39d39966dbdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cc9c00-2b56-44f9-b922-53f070d0a3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4432dd80-35c9-4202-9471-f4827ef18924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fef05a7-22a9-4412-b51a-8dcd03017ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a13cf08-1279-41a2-b44f-21c429257317",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6c442f-2241-431d-8f5f-0a3790771da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e4fdc6-2010-409f-af60-37c89ef3b899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5937f6-caef-434d-8853-a581aa17d675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf18e3cc-a1e0-443b-bb8f-35f111144492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9361c0-1568-4dc8-95a6-146545a805c5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff2adf5-4fc4-43f2-b854-219b2fc700d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771141b6-24c9-4079-af03-f7f137c20878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f49f167-f1c5-45fd-bad3-2993903864a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05ec964-e7ae-4aa0-904f-b17096ae5df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56fe944-f8cf-4569-aab7-2c38840f1e8b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c866d629-aa78-42be-ac7e-333e647e0c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b600dbfe-b3b8-4763-a629-3d6b2c486b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c8eabf-ac0b-4bec-ac40-838da21d4c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f51ca8e-6d5a-468e-8144-0a37109d189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff05f44-6e18-4bcb-a588-2699ad68c4a8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7502e84f-1672-4838-b742-e07affd3f8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51f39948-1ef5-461e-9faf-f4ace256397f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d134f01a-3e46-47b3-9bee-d76f11426f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b6fe59-0399-4e48-b578-887e4a86761c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87f9092-52e7-4a2b-95ac-230e01e58e3f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414522ab-5861-4efc-b777-094337f1ea4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d82b5f1-5515-4457-b78a-6957ecd699a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c18a14-c541-4fdb-bf07-7046f1f4c4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c376059c-b298-4654-b065-d60ba328ddde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a59d0f-cd06-4649-8543-615394472627",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175c2d18-2ece-4685-8754-8fad00ab8848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdda85d8-dd98-40d2-848d-463206d7ed43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89bac01-f2d1-4e45-bfbb-5178d158cf37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa00995-717d-496c-99d7-a04b36c4fe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06541405-9748-4e84-a140-168e6656eb7e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653731f9-a0ed-4219-96b5-4c7f88d2165e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0ae4e8-4b30-4173-80aa-de71e8d37d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75d75fa-48da-4eae-acde-f1108ee0c8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b1365d-83d2-49ee-9d36-b46b325b55fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18a13cd-2547-49b0-a0e5-17d863b9e7dd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7224fd4b-5d70-4f09-9bd7-f98e64bee368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "320dfcd1-43f1-407e-abe9-804acf2dc9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983a608b-55f3-4622-8652-34ff8ae6ef29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1079678b-1ff6-404c-82ef-8d3f9324f2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c246bf-7e82-4e72-977f-b1be344efe2a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2541abe3-0d15-4209-ad04-0fc538d90c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa567b38-3c70-4b1b-b53c-a8e40ea10f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ca5fb8-200f-4d02-a52f-7d1decfe075b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559718fb-ab53-4641-8dc4-691e45732834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bb6ae2-deb6-427a-a69a-0d39472f81f0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db278df-71ed-4f92-a277-f16b65efdc9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b8fbdcb-8cab-48c9-ac7a-db3c63244d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f22cc9-e20f-42ec-bcf2-fe35bde42510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8555a5b-a906-4f6b-a20d-a9028c1ce1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238ce488-3a58-41ed-9f6a-301b4e2096d4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4f4669-6289-4389-bb48-6bfad74b8b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08471eaf-89d1-4025-a805-a1d0c5011fc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35675ed7-00f1-45cf-8cae-9016aa2b9db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7781c2-8fe4-4a53-b740-5b5beab24e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3eaacf-a72e-4ca9-9303-0b520609d74d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a477078a-970f-4ac3-977d-7772cbd4c987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c22bae4d-a484-4c84-8a15-3226646863d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ec2bed-83ae-4e26-9789-4c97b6a9f303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67b3a84-c8b3-4afb-bee3-f550f4283869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d797945-891c-446d-b484-689953be348c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c113876a-87d0-4a5c-9b29-8c5227ca79f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98657782-5467-4700-81c7-7a90ff62b7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c484b5-2331-4174-8159-68f208a54813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c3278c-657d-4fe4-90d4-f99ce18e11c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec80f7a-5ab2-4242-ab0d-3044d1e3e295",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e418981-4f21-43c0-91b5-ddc83953b1ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd2b5fb-c54c-4c30-9e9c-f2ffdef6ff97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7721ae39-57e7-4431-ad00-4e1c3a23d64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7c3781-6530-4ad5-b664-0543b27844a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be664d24-3bba-4523-bb57-c94304844ccb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5239f6b3-cdda-46b6-b6f2-ebaf52d14fbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593228b0-d12c-44de-99d7-19c1d03d871a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2a2a41-98fc-47ca-bab4-20a8dbb2fc8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67da777-25e2-4502-b45e-024707f58a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6eec3c0-29d9-4302-b4d4-1729d973b20c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca36a685-44aa-4426-8436-7bff4b8936ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5634fa3-4c5a-4cf6-b7f1-8f15840463dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcca461-3950-4e10-bd8b-01b833524f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0452b3e3-153d-4b6b-8e33-80dc812c6a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb1215b-5a7d-4ac3-a6f4-ed64ee5f1655",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc674de-9b4f-420d-b73a-aa19ff2873cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf20ce6-f491-4bd3-be6d-dbc88b520a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a192cbe9-8d87-4f61-83cc-25d40253c342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c5146e-4164-42e9-9474-c5ab8d2ad162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc591613-f64d-47f1-8d9e-ae6c0667d036",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26537f11-43dd-45a9-92b3-070fa23ac7c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbd35339-66f2-48d2-b419-ae60aa8d2354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20768b89-d554-4fb1-9d3e-a651122b4994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094cce07-2fae-4e90-a5ce-578f2e9e58da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bee2dfd-17ca-418e-afd1-9fd9322b4809",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866123f9-6981-471c-bbb4-1dfaf1e6e15b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "249ad4e9-95fb-43f4-9a66-4cd18120b501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1787fad3-a8f3-41ea-a286-f33ac7f77a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d05c7c-48cd-4aa4-9f4d-d2209f72f037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473c341f-fa4d-491a-9b2e-cc875d6b3b1a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62830d6a-c0a8-4209-8962-a65bbb449ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "114a036b-2a08-4c4f-990c-2c454ab47745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ff36f9-038b-4b66-9234-9f91410fd406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8722ce1-4482-4bb1-92c7-be66aea46176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929ec4b3-aef1-4a53-b464-7b2df8c7bec2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0911b9de-a5ab-4f42-849d-e94baf2b78fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830832f7-4795-4d81-a490-2d34debeac18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb52c84-a301-4f67-b904-75f53220e8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ce92d9-abe0-4544-8577-9ca7fd934548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ae90f3-c8c1-4454-82f5-84e84c9a25c4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4dd23c-a5e2-46ab-8f9d-54888dc9a200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a7842f-fe29-46e9-a2f0-27326155a307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7761c09-df48-48f2-81a4-a22666231d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50f5134-b848-4787-827f-37ce9dbad651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3edd3f9-5f87-4c48-a5e8-6ae1cb423c45",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d01d590-f47f-4eaa-a0c3-aa613a90fdd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e603a1f-98ab-4212-8e60-1e6063e89bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d21f78-1a46-4237-a7af-6492dd428d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27e3b64-e93e-4850-8326-c3d2370f5513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d70017-1a8f-4e40-a616-e5cb0b36bd69",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5e3afd-6d55-4f4f-a86f-96f63a474503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab9137e7-994d-4ca3-853f-d85cd3d895a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0854261-9a32-4f6b-802e-fb5be24ee73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdbd581-f70f-4ba0-9a2f-c6bdfeb2158b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2f87af-cfbb-494f-8c33-8f636b93d9d9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1fbdc9-d8aa-4d22-a80d-d4d200583404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3dad58d-0ab8-4c86-a75b-4928b5bfdf83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06e2664-25cc-4131-96ab-c9598852e526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c625a589-3e6d-4283-9c29-8f2d19ced44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0a039e-ab14-4a45-a533-4f8add582409",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dc16a8-914d-4288-b344-3007e14c6756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea785b5d-4e71-4a70-bca6-2546aab895ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfec78e4-9b50-493e-8e64-587116b42228",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b4ed73-42a2-4fcb-bae1-71b0c710f53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21b91f9-6def-46a3-9e4f-0528b9433727",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c024e383-b684-4946-b94b-0099078b73ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d0a709-75b8-4fe5-a8d2-7f065b8ce62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31067baf-f45d-4e8a-ad69-b6d8da1ddecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e05f434-8770-4684-a209-6b806ef9f016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714e6266-1dc8-4ec8-916f-b5050fb8b010",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c22058-5f8c-4bdf-ba61-ffb1cdabbb4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dce8855-b72f-4908-9000-d910e2fb3b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb96dd67-b619-491a-8efc-4c8f91fa3596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86476c31-9899-427a-9229-e25eec2d41f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c4a124-507f-4f07-9484-673d7cdcd454",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1765d9a-11c9-4af0-80ac-d0e9f43d5c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc5f873-3fd7-44dc-bbad-19ea615d1d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5948a1e-f780-4d8c-91b8-a977aa90a9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786b313a-9a26-46e9-9846-d41d8ed3a439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2ae16f-8d46-4da8-80c7-075113855265",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a61848b-8a04-4b6b-b585-d399d0fc3f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6318ca21-5167-424c-81ef-0bb146d17cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4253d62-c7d3-4a24-9028-4c45555cf632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d0bf3d-f92f-4b6f-8817-2ec9c36e18d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b26661-9b4f-4c2b-80f6-c113c9370813",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b80be1-4f0d-49e9-8276-8b1d0740af6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ed82804-f204-4df0-b9cd-dade9757098f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25803bbe-d568-4e4d-9d83-b99ceac7605f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510c2d84-7b21-4aeb-ad6e-baf0520b45c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf2cb64-d334-45d9-9b1f-ef1fcb5c2d34",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c8a01d-aaa4-4d6d-a516-f468f812bbbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4074a128-7714-43c7-b17b-8e24cd3692f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26892b2b-ecde-4635-a650-7e8521f88cda",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9754a0da-4f89-40d1-9dd9-dcfe5ded54f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385de8fc-d51e-4a9a-b1b7-083640daf782",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e14efaa-113d-49db-94d2-eed0e5b054f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553003ab-d0a8-44a9-98d8-39144e61a3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904bfdf0-75b6-4296-8704-f4bb207b6f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebed065-1b0b-4806-a374-82329517eada"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "227f7cde-d6b5-4c0f-ac06-5734c4a34c85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84941087-fc38-4ba1-9e93-bdd7e48e0294"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b3baa30-eb84-4fe1-9a81-66235c4ae138",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "547b17e8-6d5d-4ddc-b6f7-7679aa22a9c0"
                    }
                  }
                ]
              },
              {
                "id": "31a2f48c-c66c-4c5c-9eb1-a031d6abfae9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e3fe346-fa50-4357-a70b-d5c0038b9acf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc27c448-77d9-4ca3-8c8f-a33df33d2fff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81922ed1-8fb6-4735-8d3a-a2455d091225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c30a25-5adc-4cfc-93ae-90e0ec537b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed4e1f5d-1104-4556-8815-179d30bf0948"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40a78718-550e-4aa7-8cd1-64b0efbde6f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4f208bf-e53e-4b4f-8c3c-f4347070594c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d94c741-eaf7-45a6-adfb-327919a5159c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2128665a-2c5b-47a3-bd0e-f55d4893c786"
                    }
                  }
                ]
              },
              {
                "id": "4bf7fc49-a514-4f73-9d1f-eb5f4e76e3c2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8c87ece0-14e6-430b-9ba5-5979cac796a5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcfaea9-0965-4612-afe9-25bbc436bc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "35bd62a9-961c-4641-ac61-e6ee7ab12b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539cddc2-aa16-40ed-90f9-27d5df837c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935b7681-84ef-4ff3-87fe-d56645cefbc5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d333e3b-69f1-4a08-9239-0598765cd1d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00a8c23f-feb6-44ed-9cb1-9947c817fa3e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ce42fbb-589a-4bea-a8bf-b9298e99b9f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bc88db81-40d8-4224-9873-9642c06c7ead"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "483ca79a-ce4e-4172-8bd5-581e41666adf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "936f0120-9a5c-4fe5-8994-459e1d0d15cc"
                    }
                  }
                ]
              },
              {
                "id": "e9f218f1-0d53-4dc7-b4d7-e580ecf6df8e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21638b57-5d16-4d88-99c7-aabe85a586ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4dc4036c-af32-4d1b-8b4f-61645c7b3d5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee964846-dbfe-46be-bbf8-faa8b4e8df87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3041e93f-bf87-47bc-b387-639e62133200"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac466f5f-34f0-41ad-8c8d-417cd90c4186",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6b5dff50-0445-4381-851b-ca692e4e966c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a322e7cd-73b6-4bd1-b466-4e2fb75b4163",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05b2ade4-8117-4d31-9ca5-aa664b9d55d7"
            }
          }
        ]
      },
      {
        "id": "3789b54e-e9dc-4fc8-ae37-9e77befdb6b1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "14415940-e35f-43f8-880b-f17814bd095b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eaea8924-35b3-4106-be56-05845e504432",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "735b537a-6bde-4273-b4a0-49101aa3bb49",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a4dd6-2b14-459d-8ab2-74c13ebfa66b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5035717b-8a09-48b7-bf96-4668c8021ec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda430dd-ae69-4d73-86cf-39fc062a2ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c54f75a-b202-4d1b-8df6-994e857707c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e9e6adb-21c5-49e1-b05a-3a9cf8139d69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab157b1-cafe-484d-bf50-a12eea173261"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b8ddc06-6dec-4acd-9eb0-45e1fcf13cf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c3fe2a9-ab96-49f5-8917-bd53d23447c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0f1c273-ba49-480a-bd46-a04f8465330f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3e9a0769-4f03-4a11-bdc8-1cac73887cf3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c882bbf7-aea8-45eb-b788-e85edc630a96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ced9736-e51e-4d32-856f-1cd493f42ffe"
            }
          }
        ]
      },
      {
        "id": "c2d9b4a1-7745-4564-a126-a6ccb439c1e9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "10ad8133-aa11-4c69-92b0-852e0bf4b66d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41fe5adb-eae3-4b56-8874-456de7b227e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7899b36-fc6f-46c3-9b1f-50b6cf87b381",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef54c72-b042-428a-91aa-dedb75a75224",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1896d2e6-6cd5-490b-a287-0302803d68b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b419ca00-56b8-4c46-a102-09934a03599a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fa2275e-33e3-4e13-a509-b20b098b1882"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85fdbe0e-cec9-4ea7-bb7e-2046cb06fb9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "423db851-7518-4cd5-8aef-92edae881d2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf3476e-2f4c-4d3a-9d18-458dcce23fe1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8d428c9-14f5-4dfb-84f8-09419523a7f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81bd4a90-0873-4d72-811e-38aae4a69c49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b011160a-bdf8-4b29-940c-13bb37640d15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "807d0d2e-e79b-44f6-89d6-77b3d8d3b47b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83d8b0de-3dcf-4a4c-bc14-d867e3400c50"
            }
          }
        ]
      },
      {
        "id": "6893b220-3019-4f7d-9af2-b218a6fc9094",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7d69f165-6a2e-405b-b9c6-47f4e3384c52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6393800-aef1-4c96-8178-e2105bb441e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85ae3295-5c69-4110-a200-cd8fa8e547a4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b95720-1818-4146-a944-7bdc5fa34b85",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20652139-e65b-4018-bdb7-334ee2ab3672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6ba9f9-c00b-4978-b5b6-9409fc58e09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed2ab059-8e1f-44a0-8e67-cb1f3b6cceb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adc54ae7-4569-4cb5-a761-6e48e0ceb916",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c263bd77-3f57-4d4e-8bc6-bfbea421a64c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99b64ccc-3397-49dc-9539-13a4c5dcc794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6c67a45-f606-4422-9d63-d38512a61f03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54305ad3-cb2f-438a-a718-d74a78ba31a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13df61bb-593d-499b-b8c2-cd2da47e738b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b6e29cc-22c8-4a0b-9301-688785139d43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "312722ff-232a-4774-a181-88e107422ed6"
            }
          }
        ]
      },
      {
        "id": "fdca25f7-7a55-4a22-8519-bc964325f0d3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41704ea0-02bb-4d3e-8228-57dd69766fa9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71e938ed-cd00-4ba6-87aa-0ceffa773f5b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "18c54f96-a689-4610-97ed-cdc5860a225b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6866c1d9-4f22-4f28-b0a0-4152c38f5d49",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2c37732-17bd-4434-ae13-9d264c14ae68",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 108.56349206349206,
      "responseMin": 4,
      "responseMax": 767,
      "responseSd": 80.61952538634655,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722213684109,
      "completed": 1722213720017
    },
    "executions": [
      {
        "id": "6733c2fd-e941-4979-85c2-705ef5a47e4e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "de41d76a-1e52-454c-9d8c-36d51a9726cd",
          "httpRequestId": "a49e527b-0666-44ef-8f86-0d9d3d00f5da"
        },
        "item": {
          "id": "6733c2fd-e941-4979-85c2-705ef5a47e4e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "189f5b28-b728-4195-a76b-65ca7ef0d147",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "5f11bf19-50cd-4910-aeec-7762bb3324b0",
        "cursor": {
          "ref": "5db1f61e-cb49-4869-95cc-a81f2657d776",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0212c45e-5aba-475d-b023-176b78482fc3"
        },
        "item": {
          "id": "5f11bf19-50cd-4910-aeec-7762bb3324b0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cdcc29cb-fd45-4fe0-8dfe-4490920b5b1e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 0
        }
      },
      {
        "id": "db564746-63ff-4635-812e-60335d6a25f3",
        "cursor": {
          "ref": "529a9090-4040-48bb-bb87-16886481d1cf",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "31ec0cef-1eb1-4c04-bf9b-f3f4ab13761c"
        },
        "item": {
          "id": "db564746-63ff-4635-812e-60335d6a25f3",
          "name": "did_json"
        },
        "response": {
          "id": "1446c3d6-82c2-475c-9bae-c0920f3fce61",
          "status": "OK",
          "code": 200,
          "responseTime": 348,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5230dca8-b911-4622-9667-fcda3dac1f31",
        "cursor": {
          "ref": "1a9e9ace-f08f-4308-91d7-3280bec248b7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d793c2b-b93f-4e74-ba0b-9e704be0af03"
        },
        "item": {
          "id": "5230dca8-b911-4622-9667-fcda3dac1f31",
          "name": "did:invalid"
        },
        "response": {
          "id": "5cb840ca-42fe-4b7b-bfe5-a93c5081f71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5230dca8-b911-4622-9667-fcda3dac1f31",
        "cursor": {
          "ref": "1a9e9ace-f08f-4308-91d7-3280bec248b7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d793c2b-b93f-4e74-ba0b-9e704be0af03"
        },
        "item": {
          "id": "5230dca8-b911-4622-9667-fcda3dac1f31",
          "name": "did:invalid"
        },
        "response": {
          "id": "5cb840ca-42fe-4b7b-bfe5-a93c5081f71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8761d4-966d-48cc-b817-47582819cb5a",
        "cursor": {
          "ref": "ffa1c71e-642c-49d3-91da-3e283335dbe3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eff00107-e47f-458f-b575-8e9c1aca0d6a"
        },
        "item": {
          "id": "5e8761d4-966d-48cc-b817-47582819cb5a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c6ef1552-968b-4ed0-adff-5d9a8e705459",
          "status": "Not Found",
          "code": 404,
          "responseTime": 137,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57932e3-51e5-43f7-b36b-53ed3f0a3a9a",
        "cursor": {
          "ref": "b0f7e2c6-cbf2-4d7e-8408-96ecb80051f2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "344a4244-c55c-46c1-ac0c-72d345825828"
        },
        "item": {
          "id": "b57932e3-51e5-43f7-b36b-53ed3f0a3a9a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "51072662-023f-4511-859e-1ed69bc11b02",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c5a7d-13b3-427e-b7ef-c08e2f66d9e8",
        "cursor": {
          "ref": "4162f17b-f1dc-4c1d-921d-06b126360884",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dea9a196-e33c-489a-8225-cc22f514f0ef"
        },
        "item": {
          "id": "278c5a7d-13b3-427e-b7ef-c08e2f66d9e8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4c7aea71-5af1-4a6f-8c34-73c09c078e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f3d38d-e82e-4166-beb0-70c7054b9477",
        "cursor": {
          "ref": "3cda6be1-8f78-4e4b-8572-ab17dc79814d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b00be6f9-6ad4-43f3-b67e-35cd9ef5dca7"
        },
        "item": {
          "id": "a5f3d38d-e82e-4166-beb0-70c7054b9477",
          "name": "identifiers"
        },
        "response": {
          "id": "a0bef2a6-2876-4fca-a150-825089fff3ef",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969a34f4-5062-47c7-903a-0cbf6a7df338",
        "cursor": {
          "ref": "5ba310a4-4f16-4e40-b1df-7f7ebb26b141",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "767d671b-b91c-4191-a99c-6c987c050ea9"
        },
        "item": {
          "id": "969a34f4-5062-47c7-903a-0cbf6a7df338",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0476f580-4a8f-4654-b296-502bfce61a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "1132daa7-2e3d-4270-b402-edc128251dd0",
        "cursor": {
          "ref": "492c375a-2475-4a0c-bfcc-51b72296fc15",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ff211ad4-a786-4a94-9154-4575374e32b9"
        },
        "item": {
          "id": "1132daa7-2e3d-4270-b402-edc128251dd0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5eed2bb4-01a2-4662-b6ea-f66509d41d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c26c26c3-190c-4cf5-83b5-fc94cc99443e",
        "cursor": {
          "ref": "ea0a3d34-8346-4ab2-b95d-ae387ce4dac4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "707635cf-14aa-4b0f-ad84-ce7b846fb735"
        },
        "item": {
          "id": "c26c26c3-190c-4cf5-83b5-fc94cc99443e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "85b66812-deb1-48a4-a224-fbd77fe236c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "4c578dfc-5762-4c27-b3fd-d53b8a412068",
        "cursor": {
          "ref": "b771f886-5605-4856-aaf9-fe67d8d37b8f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c92a2236-43ff-48d3-80f3-9e8ea3700caa"
        },
        "item": {
          "id": "4c578dfc-5762-4c27-b3fd-d53b8a412068",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "edab213d-5719-4097-9715-426649932d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "323e056b-4082-4b48-b37e-ad279ca46e08",
        "cursor": {
          "ref": "8a1fd2b7-4e83-4b79-b1f8-17cc5080fa40",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2020cdcf-b85e-4a67-8651-22e564e1844f"
        },
        "item": {
          "id": "323e056b-4082-4b48-b37e-ad279ca46e08",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cdf3d6f4-5080-47bf-b433-22e0c28c5732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "a8ceeb40-6d63-42f5-a022-98232564393d",
        "cursor": {
          "ref": "141e5e9b-2cef-49fe-bec6-2e8fcc830f97",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "678b10af-1929-4ba7-93d5-76f7dc6bb84d"
        },
        "item": {
          "id": "a8ceeb40-6d63-42f5-a022-98232564393d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "197512a1-2f71-41aa-9720-15239fbb6958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "370e0fdf-8ec8-4f42-b930-220836cb7a13",
        "cursor": {
          "ref": "d32f52cf-88f3-4fbb-bb31-5c3c272d7d46",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d36beff0-396c-46ff-9958-5fcccf4314ee"
        },
        "item": {
          "id": "370e0fdf-8ec8-4f42-b930-220836cb7a13",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5f841feb-5d47-4246-abc5-52ba269f8f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "4eb801c9-6802-4e0b-8fcc-86cff1a685c2",
        "cursor": {
          "ref": "abc75d2d-62f9-4ee7-bbab-58412f306b8b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "acddfc17-e9f7-422c-bd46-26e81e73be94"
        },
        "item": {
          "id": "4eb801c9-6802-4e0b-8fcc-86cff1a685c2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f306afc5-c067-4288-bd14-6bd21289d08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1f7443cf-82e6-434c-9539-b23116bacc75",
        "cursor": {
          "ref": "4c42564e-fdd1-4ce3-b067-15227b80709c",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c1fafdfc-58ca-4ef7-97cb-f23984453a1f"
        },
        "item": {
          "id": "1f7443cf-82e6-434c-9539-b23116bacc75",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a9e8ea12-4d6c-406e-8bc8-dac8bd675f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a045be05-c731-4755-a0f0-6e3a9b6934a4",
        "cursor": {
          "ref": "b107f09d-ac2c-4f7d-80d9-ccf009ce83d5",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "880d08f1-2a29-49dd-be55-79d3d9654770"
        },
        "item": {
          "id": "a045be05-c731-4755-a0f0-6e3a9b6934a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d922f6e9-4542-4d1b-9b54-de4dcbcb2415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "3bad8605-796f-46a1-b824-c529b5019688",
        "cursor": {
          "ref": "5b0507ac-320f-449b-9182-a3511ac64585",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b9841ae9-152d-4073-ab5b-04b166a3b290"
        },
        "item": {
          "id": "3bad8605-796f-46a1-b824-c529b5019688",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "75aef91f-1eca-435e-8036-28fd74240783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "abf5e520-cec5-4b99-ab9e-b99d58decf19",
        "cursor": {
          "ref": "77772581-a8de-484e-9640-966105dd346c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "30912583-33ec-4917-bd53-64e14e55b429"
        },
        "item": {
          "id": "abf5e520-cec5-4b99-ab9e-b99d58decf19",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8df650b9-d6ac-4620-8c09-c9ec2f583727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e6aaeb0f-b078-4d57-8b29-859fb8dc1c97",
        "cursor": {
          "ref": "60a0634b-64ff-40ee-a7da-3b0cd524ef82",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7cef9524-d7c7-4efd-961a-f4e4e21ef512"
        },
        "item": {
          "id": "e6aaeb0f-b078-4d57-8b29-859fb8dc1c97",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8151171f-0634-48b9-ab20-f50f749e1433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5e701c5c-6b24-40b7-a828-6a7695369350",
        "cursor": {
          "ref": "2c7f947a-64f4-4c52-a1ef-e98c7765093e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3675cc59-21ac-4187-8dea-576dc6dc76f4"
        },
        "item": {
          "id": "5e701c5c-6b24-40b7-a828-6a7695369350",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0da48058-7aaa-426a-884c-c7c8266807d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "58c39d02-9e14-46e0-b569-7e55c000cf1c",
        "cursor": {
          "ref": "642371a5-4fce-43a6-8a5c-48ec9c0d5c0b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9c89ac13-705f-4aa8-829f-c40c9e031f20"
        },
        "item": {
          "id": "58c39d02-9e14-46e0-b569-7e55c000cf1c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f252514b-5ca9-4805-a79a-580206d6eaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "63a67cef-a171-4724-8fd1-1872a2d47bb7",
        "cursor": {
          "ref": "849ae755-ab9c-4f29-9916-91b3ec5784aa",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "939fc819-9236-44ba-8630-ba1ec141d45d"
        },
        "item": {
          "id": "63a67cef-a171-4724-8fd1-1872a2d47bb7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "274ff449-b721-453a-ae34-d8570e44d5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "65e0ca3f-ff47-4aa9-863b-ce6195f2792e",
        "cursor": {
          "ref": "7d84e579-6a53-4fd1-8039-01e55e1a7382",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "84342e50-2fe4-41fc-aec7-549290d9dbce"
        },
        "item": {
          "id": "65e0ca3f-ff47-4aa9-863b-ce6195f2792e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fb5a3117-89fc-4352-8690-de1550a24759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "21622597-1430-47bf-aee7-7a4d3c7ed535",
        "cursor": {
          "ref": "272dac03-0118-470c-a701-5086fd8d32da",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7dd12c4c-0409-4bf5-a612-68764a46435b"
        },
        "item": {
          "id": "21622597-1430-47bf-aee7-7a4d3c7ed535",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "aff73b83-f1b9-4888-a6bf-4d032efde83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4e5f91cc-c60a-4eb4-a2cc-2bff3abedf17",
        "cursor": {
          "ref": "63528768-a17e-4f1d-b527-dbb05024829a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "203b4853-8d5e-42d0-b023-60f839e06ce1"
        },
        "item": {
          "id": "4e5f91cc-c60a-4eb4-a2cc-2bff3abedf17",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "56d8e09a-a33a-47e9-8fe7-534a47499a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f150c2f6-236b-4b27-b1dc-77d54cd4b2e0",
        "cursor": {
          "ref": "3f36cbf5-2c0e-454c-86c4-1433924eb390",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "796b7481-8390-4faf-bea2-428af4441049"
        },
        "item": {
          "id": "f150c2f6-236b-4b27-b1dc-77d54cd4b2e0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0a24a742-57a3-4c55-990b-9a0dbb50e551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "8ed77092-d8ca-45cc-9b01-660188233f5f",
        "cursor": {
          "ref": "a866c7b2-5af1-4c54-88e0-c6765328dba4",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "68b2d605-2c77-437e-b16d-69b331ee8f59"
        },
        "item": {
          "id": "8ed77092-d8ca-45cc-9b01-660188233f5f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "95f55ffc-99eb-4061-bb7b-e63db7ac41d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "98f33377-e6ca-452b-93a0-701173a2bf3e",
        "cursor": {
          "ref": "389cc2fe-aab8-4b22-83f8-ea8564d36279",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65dfab3e-ca95-4167-8701-e6ecdaea5962"
        },
        "item": {
          "id": "98f33377-e6ca-452b-93a0-701173a2bf3e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "893c846f-e223-4a73-b7fb-c66a8e0fdd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "fb94d896-29fb-4b4c-ac34-4081a1ced553",
        "cursor": {
          "ref": "a6e20c6c-fd87-43a5-b71a-d0e4c6cff2d3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "36d2a798-1cbd-412f-ae24-c26a70dcb00c"
        },
        "item": {
          "id": "fb94d896-29fb-4b4c-ac34-4081a1ced553",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7e34b19c-bff0-4ac4-a776-82219abe97e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b020ab54-5941-4e20-a361-2cd9e999bb87",
        "cursor": {
          "ref": "7e71d777-2ef3-42c8-b3b1-64f9a638fdf8",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5688abd9-b4de-4b38-b0e6-f30083b092b3"
        },
        "item": {
          "id": "b020ab54-5941-4e20-a361-2cd9e999bb87",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "56cb3b1b-7ebc-44a5-bed8-d671784365dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "dc864e04-d8af-42d5-8384-40be7c7e1c1f",
        "cursor": {
          "ref": "2e8ceba0-e7af-481d-aa9d-9fba96ec7680",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "44a7dce7-abcf-4eef-b37f-0350a23ecd88"
        },
        "item": {
          "id": "dc864e04-d8af-42d5-8384-40be7c7e1c1f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9d89c908-6a9f-4262-8c5f-76f2a03f10b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "fced806e-21a6-4f22-a9ff-c879e3e2a425",
        "cursor": {
          "ref": "960c9726-a376-44da-ae3b-cd86fff9da3a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ca426bcf-5dad-4520-bd04-3996a32e70bb"
        },
        "item": {
          "id": "fced806e-21a6-4f22-a9ff-c879e3e2a425",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "898daf8c-d84a-4296-ace2-6e4b5997c5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f9bd5446-9227-4b8c-b5cc-aefa2978bc33",
        "cursor": {
          "ref": "b62195a5-abf6-4ede-ac5f-4e4e48aa0fc1",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "32ea2cbf-39d1-4528-adad-6d0261ff140c"
        },
        "item": {
          "id": "f9bd5446-9227-4b8c-b5cc-aefa2978bc33",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "723227aa-1f17-42b3-b03c-605d0197224d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1f3da722-f4d7-4b70-8bc7-7c7be7248673",
        "cursor": {
          "ref": "919bdb61-54d7-4764-8ba0-a134adbf1c95",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ec074f8b-fa0f-42d8-b9a5-9ef63ad7530d"
        },
        "item": {
          "id": "1f3da722-f4d7-4b70-8bc7-7c7be7248673",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d95ffb61-2829-4be9-8c08-d51b4b9c730a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "b5772156-af7d-40e7-a9ae-afcbce2c01ef",
        "cursor": {
          "ref": "b13120ec-9b2d-4348-ba7e-aeb7c7bbaf4b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "88533163-d84e-4947-b549-d62a6ca87d1a"
        },
        "item": {
          "id": "b5772156-af7d-40e7-a9ae-afcbce2c01ef",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "45a31631-ae98-432a-9aa8-ae1a4657e4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e89dd4e3-66e4-4c5f-b452-be8aefa43638",
        "cursor": {
          "ref": "338bb0cf-f8ef-4167-99ef-2e739116d8a5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "28e1433b-11bb-4d37-a21b-8ce27857cdb9"
        },
        "item": {
          "id": "e89dd4e3-66e4-4c5f-b452-be8aefa43638",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "35a943a9-3201-4d7a-93d2-d3fa121a0027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "273406c0-1936-4dcd-bf42-e3d12a5e8d3c",
        "cursor": {
          "ref": "c009b3d6-cdbb-4869-bba7-4999d33d533c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6f257afb-a1be-4ec5-bd8f-778381e4627c"
        },
        "item": {
          "id": "273406c0-1936-4dcd-bf42-e3d12a5e8d3c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "25951ab7-bca0-407d-944e-752eaf84f454",
          "status": "Created",
          "code": 201,
          "responseTime": 767,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e287d18f-9277-4797-86fd-a7e8fca0cb45",
        "cursor": {
          "ref": "8fba56a3-fb40-4067-8241-5cfaa6c063bb",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "adba9334-5cc0-4ea3-9a45-707720733185"
        },
        "item": {
          "id": "e287d18f-9277-4797-86fd-a7e8fca0cb45",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1cd4466d-2995-4564-b017-c6a54ea3ce4c",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "31e0e9dc-2b59-4517-a2af-70770d743336",
        "cursor": {
          "ref": "0dd1f5a5-efe0-4ca8-b0fa-2eda1eccb634",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8381099f-d82f-4b91-bcbd-5f4899463885"
        },
        "item": {
          "id": "31e0e9dc-2b59-4517-a2af-70770d743336",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "047e5833-985e-4212-a616-9403ffbb5d59",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ac22376b-9b05-4014-8108-4b2d62d38ac7",
        "cursor": {
          "ref": "d99de52c-c738-4518-8267-5c1c644eb5e8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1a007358-e15b-40a4-aab4-a697b546d18e"
        },
        "item": {
          "id": "ac22376b-9b05-4014-8108-4b2d62d38ac7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5de9a67f-5ad8-43d5-9223-187fbaa50870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7fc5b87b-5100-4515-8d3e-02b240e62e31",
        "cursor": {
          "ref": "4de0ddc4-3e12-47c1-a839-cf28137e4006",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "33ae1cb8-be8e-4a43-a8c2-145aa5641f0a"
        },
        "item": {
          "id": "7fc5b87b-5100-4515-8d3e-02b240e62e31",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "430a68a9-4697-467d-af5b-bf4f9fd27101",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "50a8607b-c71c-4fc4-bf27-da98900a9eae",
        "cursor": {
          "ref": "70ea17bb-dbcd-4ea7-b3d3-25744e175dbb",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "024758a9-1d42-429d-95d7-5184c17517c2"
        },
        "item": {
          "id": "50a8607b-c71c-4fc4-bf27-da98900a9eae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e1fc6d07-4916-4977-8abb-d080b6e79bbd",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3cea76b6-7961-46e8-9252-decfec4bcb5d",
        "cursor": {
          "ref": "1bbb97bf-de58-4167-a860-09f1aded95fd",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7888939a-2b54-4a64-ac99-6ee2e77ac490"
        },
        "item": {
          "id": "3cea76b6-7961-46e8-9252-decfec4bcb5d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c85306a6-99c2-4d64-8abc-5e980d2ef8a0",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "649d5a84-7703-4183-9d4c-50245b722176",
        "cursor": {
          "ref": "990de788-e28c-494c-bdf7-22444f2402b5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0efd820e-8f3c-450b-8d81-a64b15560efc"
        },
        "item": {
          "id": "649d5a84-7703-4183-9d4c-50245b722176",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "618b02d2-bb9b-469c-98f8-36ef686905ff",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "300e4126-faa9-4345-b22c-7de41c9ba8dc",
        "cursor": {
          "ref": "d022aeae-e0de-4df2-99f1-20c145be8671",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aee6de50-bd25-415f-bfa6-15ee104f1409"
        },
        "item": {
          "id": "300e4126-faa9-4345-b22c-7de41c9ba8dc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9789b2f1-a9bb-4361-9127-96275b976d97",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2e369103-1642-4f5f-8f1b-a1b36ec6f957",
        "cursor": {
          "ref": "df67e71d-4db2-4de8-89f5-06d0ad4cdbfb",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "52aea808-ae2f-4018-9b8c-a5077abe3e9e"
        },
        "item": {
          "id": "2e369103-1642-4f5f-8f1b-a1b36ec6f957",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d577ceae-8fb1-4ae8-80bc-d242563c13c5",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c3ff050c-06e1-401c-a735-e962214af446",
        "cursor": {
          "ref": "4863107c-1233-4908-8a8f-77e73d6fd99b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2950c40b-38e0-457b-84a9-e4e7d36546dd"
        },
        "item": {
          "id": "c3ff050c-06e1-401c-a735-e962214af446",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4ec1a9ee-2990-49fa-8a28-f9d39dde84bf",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d78f6fd3-38c0-4a4c-852f-a7fd1cbfe584",
        "cursor": {
          "ref": "4fa5d342-3128-4451-a7d6-4a02b223d33b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ce36b110-3800-4848-ba88-d5792f4ea9d8"
        },
        "item": {
          "id": "d78f6fd3-38c0-4a4c-852f-a7fd1cbfe584",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b6a2cba9-0410-4025-ac5c-0ebd4201f4ba",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dd68045f-bb2e-46bc-871a-9d5c94fda8aa",
        "cursor": {
          "ref": "384915aa-e4c0-4404-9093-847cd0bc091f",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0f988a50-329e-4444-895d-e031beea720c"
        },
        "item": {
          "id": "dd68045f-bb2e-46bc-871a-9d5c94fda8aa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ab3e50b9-c674-4ab5-86ed-08db400b54af",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e133a15b-0326-4be4-b3c5-56df3b18de0d",
        "cursor": {
          "ref": "77a4a800-a810-45e3-a2e8-ca0fd6b2625b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8aae4ade-7cd5-4f3d-977f-6f67ab0837d7"
        },
        "item": {
          "id": "e133a15b-0326-4be4-b3c5-56df3b18de0d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "570d7424-257c-440e-b098-bc97ca588a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ae5fd490-ad6d-4349-a419-4ce29316983f",
        "cursor": {
          "ref": "463de8e3-40bc-48dd-8eaf-4021a42da4ff",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6a8bdb50-7993-4d4e-b5c5-3e9160d29ac6"
        },
        "item": {
          "id": "ae5fd490-ad6d-4349-a419-4ce29316983f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a7ff637a-fc08-40ef-a4a9-d94b3522807f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "601cc207-1b96-4634-9557-868ef154969c",
        "cursor": {
          "ref": "fed53b82-b2a4-4500-a61a-ec6c7a93b5ea",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0f58fd37-b5e7-4e71-ba87-d8e85bb6263e"
        },
        "item": {
          "id": "601cc207-1b96-4634-9557-868ef154969c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "061ee81c-3e2c-4a84-a1a7-c8dc755314fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "1c41244c-bfe0-49a1-bf5d-cedff26c0020",
        "cursor": {
          "ref": "284c1ccc-55a2-404b-8d53-5cd712d929ff",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1367b9b9-11e0-4180-9782-2e446ac1942d"
        },
        "item": {
          "id": "1c41244c-bfe0-49a1-bf5d-cedff26c0020",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f748aabb-6128-48f2-8d0b-a69aee7ad84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "9fb23425-0c74-4bf2-88f5-fe68485ba83c",
        "cursor": {
          "ref": "a1cfbbcf-8cc8-448d-b3e9-53849d7cc8e5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b02456c7-1e36-4781-9e97-1f0663d8e2af"
        },
        "item": {
          "id": "9fb23425-0c74-4bf2-88f5-fe68485ba83c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c222e7f8-6d54-4213-92c9-7e32564a59b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "be042534-f085-4188-9ac5-652080a785ee",
        "cursor": {
          "ref": "18be035f-0098-4d01-a541-4d8390d8e2b8",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "36b97f49-6ece-488c-abae-c2eb1743d0e6"
        },
        "item": {
          "id": "be042534-f085-4188-9ac5-652080a785ee",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "48960593-52c5-4d55-9d8b-f35bbece1dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c0d0a417-9aec-4201-8df9-ff5e459702ed",
        "cursor": {
          "ref": "2ab3b098-3fc5-4d31-84ec-f5951b4d529c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1a5b8c39-c8a4-47dd-8d01-14e437d44b8f"
        },
        "item": {
          "id": "c0d0a417-9aec-4201-8df9-ff5e459702ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c69852ae-acdd-4cde-87be-5e83c78b25ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "0bc1daca-cfa7-4a0b-99c4-91093cb43ff0",
        "cursor": {
          "ref": "5f6bd61b-d804-481a-8d56-be6707b39b1f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "daf17be3-3dfe-4cd0-ad1e-50c80a82e86a"
        },
        "item": {
          "id": "0bc1daca-cfa7-4a0b-99c4-91093cb43ff0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "18f55881-2484-4062-92b3-523293d82320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "b0055c86-ecfb-490e-8d35-3a195637f8c4",
        "cursor": {
          "ref": "dabcb156-ae2d-4388-af54-4b38ea36b8da",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "841f4170-454c-4c85-bb2a-0ccf9085ee29"
        },
        "item": {
          "id": "b0055c86-ecfb-490e-8d35-3a195637f8c4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a5ff2c60-6a29-4c6f-bbdc-73a5abedb077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "176ee8eb-e5d2-4ae5-874d-d7e3fbabf667",
        "cursor": {
          "ref": "e3859526-3470-4b07-ad89-164febdd1fc9",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "eef0f81c-3de7-4409-ab93-287c6b1c340b"
        },
        "item": {
          "id": "176ee8eb-e5d2-4ae5-874d-d7e3fbabf667",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b3299201-6929-4257-b71c-2690c42b1340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6784bec4-5940-4bbd-81e1-4ae7457fb798",
        "cursor": {
          "ref": "33139fde-e615-4139-a520-5e620f1c39b6",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "62cbe07d-640b-4221-809a-6d69c5476a49"
        },
        "item": {
          "id": "6784bec4-5940-4bbd-81e1-4ae7457fb798",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0cba320e-03fc-477f-81c5-d4caf56c0722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "6a44249c-ad1d-43be-9165-c6e350b1bc75",
        "cursor": {
          "ref": "8bc77890-0a46-4c40-9575-0d7c60676b05",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "05a472a4-583e-4154-8810-9bae01955469"
        },
        "item": {
          "id": "6a44249c-ad1d-43be-9165-c6e350b1bc75",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44196c61-8f44-4b00-a7a4-db193dcdeacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "d6bd6846-9a95-49bd-a6cf-3c359821bae8",
        "cursor": {
          "ref": "4a49c807-ca4a-4868-886c-c9d185f8936a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e2deb18-714b-4294-acc6-22aeb925a3d1"
        },
        "item": {
          "id": "d6bd6846-9a95-49bd-a6cf-3c359821bae8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "04aa231a-a440-4dcf-8949-838a860417f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "24102245-56be-4b90-b62b-b1fd2fb8a874",
        "cursor": {
          "ref": "8f21a8c1-bb41-4d98-be8e-99d63b5756ce",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "310d591e-d0d1-444e-8c3e-149a5c096e03"
        },
        "item": {
          "id": "24102245-56be-4b90-b62b-b1fd2fb8a874",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5af4d6a9-cd2b-4157-9c64-d9f40e428c4d",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4e7e7867-c94a-48e7-b199-8884d8ea7953",
        "cursor": {
          "ref": "84a1fdbb-daed-4313-8ae3-7cdc090ebeae",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "32b21efd-c48e-4045-8639-da2c0968fbc8"
        },
        "item": {
          "id": "4e7e7867-c94a-48e7-b199-8884d8ea7953",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c5f80016-05f5-4f1a-abcf-60a8aca963f8",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7425f104-ab65-4959-840e-54ee13cd68b6",
        "cursor": {
          "ref": "bd77f812-2b66-4d60-b151-13c374632ec9",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dd28dbad-3ced-477e-bffa-b818ecee8306"
        },
        "item": {
          "id": "7425f104-ab65-4959-840e-54ee13cd68b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "26a845ba-aae0-4c90-b590-bfec3229a46d",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5ffab785-0fbe-42b2-8bb6-e06b3b9420ea",
        "cursor": {
          "ref": "2df08c75-ef51-473f-95e4-ce82d37a85db",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "581497cc-7cfc-4313-a842-a7bf835affda"
        },
        "item": {
          "id": "5ffab785-0fbe-42b2-8bb6-e06b3b9420ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "caf13227-df96-4a84-b545-ec7023f63d7a",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5336577c-999e-4679-ac41-ecb92442d0d3",
        "cursor": {
          "ref": "f8aa4738-c689-4d29-8230-d8581bb56b0a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ab57fad2-24f3-4088-892e-a31669306d23"
        },
        "item": {
          "id": "5336577c-999e-4679-ac41-ecb92442d0d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "28019fd2-77a0-4318-83b7-308e870dd388",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2223ad79-8dda-48b3-a0d7-3de77142e817",
        "cursor": {
          "ref": "f94c135b-9982-482a-be37-f37e27d6d84d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a4c849a6-63db-4da3-9381-b8e7dd1164a5"
        },
        "item": {
          "id": "2223ad79-8dda-48b3-a0d7-3de77142e817",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8aa3b4af-26b5-4e18-a8dd-119cf955e8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "4983901e-5bef-4249-a593-53e5d49a9c9a",
        "cursor": {
          "ref": "ad921b0a-d141-4a44-8d69-261c01ae524b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "04d0bd4e-7f11-442e-ae32-0aa068181fde"
        },
        "item": {
          "id": "4983901e-5bef-4249-a593-53e5d49a9c9a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4c71278c-0acb-4d65-a5e9-c4a9b7ddc906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "17cf41ca-9f34-436c-b82d-1b15188fa80b",
        "cursor": {
          "ref": "25578cc4-2b31-40d3-b0e3-b07eca48c13e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5303c1de-0100-49b9-8866-0e68f0249a72"
        },
        "item": {
          "id": "17cf41ca-9f34-436c-b82d-1b15188fa80b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1f338454-03f6-440f-9698-fc36520e6167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "20dc04b1-971f-4534-9fd1-58a0eb474493",
        "cursor": {
          "ref": "e9959ac7-091c-45b2-87f8-117853338f72",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3657ff10-7a28-46cf-951d-624a8e8389cc"
        },
        "item": {
          "id": "20dc04b1-971f-4534-9fd1-58a0eb474493",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e008ee74-f305-4c81-a7e4-22e2f81f0d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5ad4e18a-73fe-46f9-8834-249f5acaeef1",
        "cursor": {
          "ref": "e1f7d9a3-f018-426d-be64-71aa2d45b86b",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6074c4e2-5347-4478-9726-03b3c063a189"
        },
        "item": {
          "id": "5ad4e18a-73fe-46f9-8834-249f5acaeef1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e45e490-2e35-4b78-9219-1959343c70e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "e61198af-84b4-4f3d-a06e-0b1d43ecdf7b",
        "cursor": {
          "ref": "6acdd007-c01a-460d-aaa3-040c444d5abc",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0ca1f6b1-4d6f-48a0-86a7-280e3786f951"
        },
        "item": {
          "id": "e61198af-84b4-4f3d-a06e-0b1d43ecdf7b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b1ba0a86-4502-4eac-a4ae-6d792de4c0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "0900cb2b-c825-42bf-9fba-0b0fa2012ecd",
        "cursor": {
          "ref": "1431107e-f866-4aad-aaf8-52cd9d394687",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "01ab364b-d440-4c73-9647-8924bcaa46dc"
        },
        "item": {
          "id": "0900cb2b-c825-42bf-9fba-0b0fa2012ecd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c33a68e7-aaf3-4fe3-91d8-fae82712493d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "3328b60a-d7f6-4958-9468-d57a1d0d1760",
        "cursor": {
          "ref": "63b56a37-be9c-4a83-b554-c14a9e22c0b4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7e9d55c9-15e0-4160-8043-04cd94fd47fa"
        },
        "item": {
          "id": "3328b60a-d7f6-4958-9468-d57a1d0d1760",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "be6211e5-80de-447c-9b6a-b741fe5aa3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "783f6d0c-0adc-45ce-8b1d-c3de39c5ad92",
        "cursor": {
          "ref": "2ca80a7e-7a72-40d6-ae05-638e63b61e5c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b145d49f-f3a8-4bdf-8f43-b0f995e07e5f"
        },
        "item": {
          "id": "783f6d0c-0adc-45ce-8b1d-c3de39c5ad92",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a2b14008-9c3a-4ee2-895c-5d5923306520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f7b59cba-2f0b-474a-af8c-05c72230a15a",
        "cursor": {
          "ref": "e97abc0e-7f8a-4816-8bbd-8efb9b61b0e9",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d178e975-9166-4854-ac55-71b33c09c6c5"
        },
        "item": {
          "id": "f7b59cba-2f0b-474a-af8c-05c72230a15a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5a551167-4e31-428d-871b-83939e4be20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "383ac8e7-2df4-45ce-a8d7-fb2f176e8a9a",
        "cursor": {
          "ref": "cae44a59-5198-4e4b-9677-2d5a17c69f8c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c20f9adc-d935-4141-8330-32a82cf8f5d1"
        },
        "item": {
          "id": "383ac8e7-2df4-45ce-a8d7-fb2f176e8a9a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "38e24bfd-7498-4489-9226-fc8d81295033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "c049c321-f5af-431a-b48b-acc206b0f4c5",
        "cursor": {
          "ref": "fc3394eb-4ae1-4262-9453-27033928f152",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a4a8517e-e62d-4c09-883b-fe8a513b4a40"
        },
        "item": {
          "id": "c049c321-f5af-431a-b48b-acc206b0f4c5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "740dfa01-8016-41b5-86a7-3ca4c1d97701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "08fb2324-7e21-4f63-81ed-7c4afa1bdfba",
        "cursor": {
          "ref": "c749cbc0-e687-4ded-9092-e712ae89113b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9034d65b-4352-4aac-9220-2e89079fb320"
        },
        "item": {
          "id": "08fb2324-7e21-4f63-81ed-7c4afa1bdfba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4c04ae04-7a84-47b5-a724-8b9ff4f95850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "fa55164e-437a-4ea2-9f57-d4e4e3a08fd0",
        "cursor": {
          "ref": "f70c7b3e-8088-46f0-b5d0-e28754c0142c",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1154f844-86fc-4c23-b963-02074851d70f"
        },
        "item": {
          "id": "fa55164e-437a-4ea2-9f57-d4e4e3a08fd0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b0c300a5-ef97-4885-9323-9e1b65d54b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "923fcd80-75ea-4ed5-aead-0f2fa74b0d00",
        "cursor": {
          "ref": "2118294e-52b3-4715-b659-d3e470b03096",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "322e5561-4999-4021-95b9-2a049ee9a8f8"
        },
        "item": {
          "id": "923fcd80-75ea-4ed5-aead-0f2fa74b0d00",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "73dd170e-0726-41b5-b189-2a75d41800d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "c0bf496d-2b81-4e35-b805-a20afcf6f6ba",
        "cursor": {
          "ref": "a5a05838-3fce-4904-b034-8bc755d7d32f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "130d897d-e29a-46c5-a96c-da5b1616284f"
        },
        "item": {
          "id": "c0bf496d-2b81-4e35-b805-a20afcf6f6ba",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "92278126-b271-422c-bc62-1da2af4268e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5f711f68-cb22-4742-bffb-305249edf495",
        "cursor": {
          "ref": "8a4a97a0-7cca-4311-93e4-6ff3ff38584b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3658f8f6-207a-4638-a50f-961e55ccdc78"
        },
        "item": {
          "id": "5f711f68-cb22-4742-bffb-305249edf495",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d9ff85a5-2bbc-4534-b982-bc4ff2ae07ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "954a7845-fffa-486c-8c79-07939342eb0f",
        "cursor": {
          "ref": "333972cf-054f-410a-b0d5-2a89ddc80c2f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6e9f30ba-94f2-4684-bbae-c2037aad2dd0"
        },
        "item": {
          "id": "954a7845-fffa-486c-8c79-07939342eb0f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b06b87ef-6941-4a94-891e-cc212031c90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "441882fd-4012-4f08-b4c3-72ba70466139",
        "cursor": {
          "ref": "668ea6a1-a4af-4bb2-8107-b17ba31154c9",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8caf30b6-5d59-4b2e-97da-bdb6068e4d1b"
        },
        "item": {
          "id": "441882fd-4012-4f08-b4c3-72ba70466139",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f371006a-d6d9-440b-a228-fe39d3fc040a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f405f5c2-32e9-4ff8-97ce-3ace3c8c36a3",
        "cursor": {
          "ref": "36729a34-48be-4ffc-9f7c-0e99c4d8a713",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cb53bbd8-8644-484f-8a8c-413aa40a33ae"
        },
        "item": {
          "id": "f405f5c2-32e9-4ff8-97ce-3ace3c8c36a3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0be09229-4868-4ab5-972b-4c9896731266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f37c9801-d7dd-4773-afcb-bd340b6b8a2c",
        "cursor": {
          "ref": "196ed962-db47-42e4-b544-432d0001a6a0",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2423326a-f722-4165-9ee7-ee501a96e620"
        },
        "item": {
          "id": "f37c9801-d7dd-4773-afcb-bd340b6b8a2c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8db3cd05-e0ee-4fd9-801e-af2fb919b456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "6578986d-7600-45cd-a4af-a931ea11a33d",
        "cursor": {
          "ref": "4913f8e7-f5b4-4b28-8ee1-962429c99f54",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6e2621c8-058e-4ddd-b795-8a99d2c67f29"
        },
        "item": {
          "id": "6578986d-7600-45cd-a4af-a931ea11a33d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f2047b94-3d4c-46d8-9b01-b11c8e8556f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "81cdea6c-bfcb-43c1-9519-f5382c02fd54",
        "cursor": {
          "ref": "019bae43-a3db-408e-a427-8c28525657a2",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9c3d2e7e-0254-4095-a10b-004afae5eff9"
        },
        "item": {
          "id": "81cdea6c-bfcb-43c1-9519-f5382c02fd54",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ecf24ce0-a676-4033-a68b-68aa9756581f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ab42fa7d-4b00-47f0-ad44-b64d8d14be8c",
        "cursor": {
          "ref": "b0be72af-9a86-4164-92f7-fd6297944592",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "258fe5fa-8bcb-4607-8617-82546cd1a685"
        },
        "item": {
          "id": "ab42fa7d-4b00-47f0-ad44-b64d8d14be8c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b5b43967-ef58-4bd8-aaa4-7e61de960ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "81c000c8-26d2-41d0-b07f-bfd0dc7ba3ed",
        "cursor": {
          "ref": "63c28354-b794-494d-b44b-9d5f17cafb54",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "de28f6e1-a211-46a8-9c54-69fe2e9ea9e1"
        },
        "item": {
          "id": "81c000c8-26d2-41d0-b07f-bfd0dc7ba3ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ed04bcef-2517-4001-bb7e-7e7b057444f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "04809406-4611-4204-8abb-c9dedbd62385",
        "cursor": {
          "ref": "0e23de8e-867c-4fb8-8634-33a5ba3ee5e5",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "77fcea82-8fdb-41e2-ba96-e7d5df9ea868"
        },
        "item": {
          "id": "04809406-4611-4204-8abb-c9dedbd62385",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "432cecff-3b83-41a9-b966-ce262dfcea57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "64a3ba6d-08e2-4279-9f11-c4235fc15389",
        "cursor": {
          "ref": "81f8c287-fd73-4f61-9618-308fd544bc35",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c582d3b6-92df-4afc-bc40-d999fcab636d"
        },
        "item": {
          "id": "64a3ba6d-08e2-4279-9f11-c4235fc15389",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "635d19e9-4e02-4bbf-ae61-349b3186cc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "274620a8-3a21-4bf0-bde2-d01cf78e925a",
        "cursor": {
          "ref": "208c57e7-2619-4d2a-befd-e187be9baa74",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d530bfe-3b5c-4892-bb85-ae16ca777453"
        },
        "item": {
          "id": "274620a8-3a21-4bf0-bde2-d01cf78e925a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7d5a88cc-5373-4cb0-ba28-0e7987cc1d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "7040adaa-0799-4ec1-b718-a17310d66709",
        "cursor": {
          "ref": "0e7ba393-5636-42e3-9852-385edd98f63c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c0cdc785-2208-45d7-a4bc-4fce8069f7ee"
        },
        "item": {
          "id": "7040adaa-0799-4ec1-b718-a17310d66709",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2f64447f-5599-4567-b1c3-898dd5a2351a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "f1e2528b-059a-4765-8e59-18c2f697e073",
        "cursor": {
          "ref": "3972b93f-a4c7-4241-994a-9eb80f9bb41b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "24f09a7b-88a0-4e60-9b5f-817035221ec6"
        },
        "item": {
          "id": "f1e2528b-059a-4765-8e59-18c2f697e073",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0dc9d408-13b7-4f8b-8ebc-dcaef05bfa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "9d8d0509-bd27-45e4-ae86-e12466b3bd93",
        "cursor": {
          "ref": "a3e7644a-ee66-44d3-9628-247dc85e08ac",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ecd10c5a-ca72-482f-9255-279133835439"
        },
        "item": {
          "id": "9d8d0509-bd27-45e4-ae86-e12466b3bd93",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "86b900d3-806b-4da5-8ff9-635e2a3e75d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f9be72f6-d78b-408c-876c-9c7898c473c2",
        "cursor": {
          "ref": "fa1d3e9f-3a51-4771-954f-4a540c843bec",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1b4c15da-f2a0-4dba-81ad-b24186beb261"
        },
        "item": {
          "id": "f9be72f6-d78b-408c-876c-9c7898c473c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c1a17174-8398-4d19-8c74-d181a0b2e53a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b736a65d-bbc3-4ebe-ba7c-55157f9977f8",
        "cursor": {
          "ref": "e91c7a7a-677d-409a-ba84-809e39456bda",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "420a0c70-4454-4221-898e-0c9a10725a21"
        },
        "item": {
          "id": "b736a65d-bbc3-4ebe-ba7c-55157f9977f8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e7b9a80c-0ab4-4826-8ccf-e525c8c4e014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "fc30b81b-051b-4e5d-a327-c07895cef0ba",
        "cursor": {
          "ref": "ea87442b-39cc-4fef-8809-b7cc6662a998",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dedb6cc7-ee49-475f-8de3-f1477beaae7c"
        },
        "item": {
          "id": "fc30b81b-051b-4e5d-a327-c07895cef0ba",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e8ceb72d-9f67-4d05-8164-8df851f4094e",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a90276-27da-406b-9708-ee2e14d199e2",
        "cursor": {
          "ref": "7e8fbc22-9e12-44df-a10e-be41d7433a10",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "89efa1e1-0ffc-406a-982b-91a3f40d94cf"
        },
        "item": {
          "id": "e5a90276-27da-406b-9708-ee2e14d199e2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a0c9041e-ffef-48ee-b881-b1ff856ba0fc",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d10f0de-2972-479d-ba7b-316c9142ce5a",
        "cursor": {
          "ref": "3a8fd63a-0029-469f-a60b-e6d5ac46682d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "379b3b00-07d8-403f-82d7-8c5a13c22601"
        },
        "item": {
          "id": "0d10f0de-2972-479d-ba7b-316c9142ce5a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9ce24b31-ab55-4729-875f-ef6e68c6507f",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b708cd5-cd04-4471-9ac4-bcbb3dd5ddcb",
        "cursor": {
          "ref": "53505264-3425-4e01-bab7-75bf03a78352",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bbc0632a-3d9c-429b-897f-0e07d66eabc9"
        },
        "item": {
          "id": "6b708cd5-cd04-4471-9ac4-bcbb3dd5ddcb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3bc69977-f8f3-43e9-b837-345dfc39bf00",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0474616-0baf-4cf4-beb0-f722bc5797e7",
        "cursor": {
          "ref": "9304bf44-97f3-40b3-a373-21c057780896",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "21d971b2-2d09-458d-aff0-5f26023875ea"
        },
        "item": {
          "id": "d0474616-0baf-4cf4-beb0-f722bc5797e7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "49337f31-59b3-47e9-9feb-87ce1752fe82",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-29T00:41:42.577Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-29T00:41:42.577Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0f5e49e2-7945-4e07-943f-ab4376afb94a",
        "cursor": {
          "ref": "67e0cc79-26aa-41be-a8b2-c71fa421de77",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "594f9fd3-6556-4425-b7c2-4e9d5f9e2d8f"
        },
        "item": {
          "id": "0f5e49e2-7945-4e07-943f-ab4376afb94a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "56ad67ac-e2bc-4612-ad45-c9cacc6782f6",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2314934d-9db9-4469-828e-b7c0dd779043",
        "cursor": {
          "ref": "9ec4e5de-ae0f-4a02-8c88-4ab6ac5b8f2a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8302e7fa-4b42-4794-9fc7-9d406d429d04"
        },
        "item": {
          "id": "2314934d-9db9-4469-828e-b7c0dd779043",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f96bbfb2-9447-4f2c-933c-717ee3e5e51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "f114abe7-4664-41a4-a85c-c555cccd4893",
        "cursor": {
          "ref": "87d3084b-483e-47d4-8e30-c9b0bfa40cf0",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0b9c4697-aaee-4b4b-ac2e-82b3a3286dfd"
        },
        "item": {
          "id": "f114abe7-4664-41a4-a85c-c555cccd4893",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1f1856b7-f973-4f55-ad14-357025e89cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b09d390e-724c-4523-bad0-b9b235183115",
        "cursor": {
          "ref": "368014e5-4b98-4078-abfc-040fe7e4c815",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6e3aae0c-8a28-476b-9650-7df4a9e383d8"
        },
        "item": {
          "id": "b09d390e-724c-4523-bad0-b9b235183115",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f503c2c-903b-42b8-b1dc-8bd159d1b54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "82ce8c7e-c519-4cfe-bad0-57cb9427b2a4",
        "cursor": {
          "ref": "440da599-cd14-48a2-949a-6317876e209a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "19ca7212-cec4-41b1-9d05-1b7774f1bbb8"
        },
        "item": {
          "id": "82ce8c7e-c519-4cfe-bad0-57cb9427b2a4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6e5b22a9-ed5f-4b94-a07c-dcee2dd80478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ae52ba6f-8951-48b2-a2db-b9239dab50e9",
        "cursor": {
          "ref": "1d412cd2-d313-4437-8fdf-26713cd07764",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bceeaef4-bbd8-4ad8-9e85-b74929420f4a"
        },
        "item": {
          "id": "ae52ba6f-8951-48b2-a2db-b9239dab50e9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "300e2e01-673b-417f-8d4c-f20e26e38dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6db0c3a8-c428-47d2-b13a-a4f111a56af6",
        "cursor": {
          "ref": "1b6d06df-babd-4c6d-9586-e930a285367b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "91456ef6-465d-4b1d-8323-3509cd3e95e5"
        },
        "item": {
          "id": "6db0c3a8-c428-47d2-b13a-a4f111a56af6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d89a27ff-d1c1-4d39-b356-b522eb1fcd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d98f8526-0d90-437d-ab3d-264ddb0d90a4",
        "cursor": {
          "ref": "870b2b48-39fe-4744-bbb4-795cf47ca72d",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5d1b055b-f862-4134-9850-f0e2ed9b9726"
        },
        "item": {
          "id": "d98f8526-0d90-437d-ab3d-264ddb0d90a4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d1e051ed-2fbe-491d-a982-d2ed59e782eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "96c5e96d-c1c1-4094-916d-736970140278",
        "cursor": {
          "ref": "3a6531df-6aad-4213-97fe-b60046721f3b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "24adcb99-6f66-4f4a-956b-8fe22a55744a"
        },
        "item": {
          "id": "96c5e96d-c1c1-4094-916d-736970140278",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "57c166d2-d177-4295-a120-aa5320393236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2961e02a-f16e-46be-9b69-14f013787e57",
        "cursor": {
          "ref": "c84d45f0-ff1a-41d9-b727-1784e8f8c9d4",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "41e182db-7e23-4f67-9452-594d118cd7a1"
        },
        "item": {
          "id": "2961e02a-f16e-46be-9b69-14f013787e57",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7e429a05-3c26-4661-b403-29e1724b774a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "fc7f4809-6615-404a-87fa-d6ced178f6d8",
        "cursor": {
          "ref": "91d9aea4-d805-4f8c-be1f-e3b6b7901116",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7586d6ca-0857-4e90-9ef2-4891398a1b0f"
        },
        "item": {
          "id": "fc7f4809-6615-404a-87fa-d6ced178f6d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eef4d87a-c954-4e75-a2fd-49d0988dc935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "ff919f17-3264-4875-8be5-07a4d44cd42e",
        "cursor": {
          "ref": "4141219d-8467-4263-8862-47c397b3bc75",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ec20fe54-d7ed-4629-a2b0-d9db562436e1"
        },
        "item": {
          "id": "ff919f17-3264-4875-8be5-07a4d44cd42e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8639748f-f9fa-44de-a0cb-854be1ac921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "52ca4484-78b7-44f1-a33a-b6442371cb06",
        "cursor": {
          "ref": "aecf57f7-7fe6-4ac9-a1d4-97835b961da4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "adb510f2-c80e-43a5-b8b3-cc2a93ac3775"
        },
        "item": {
          "id": "52ca4484-78b7-44f1-a33a-b6442371cb06",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0cca07b6-93e6-4976-bf0b-9934937523ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "29a9be0d-d65f-405a-bf44-9e791a5fed45",
        "cursor": {
          "ref": "9e1cf946-6180-4958-9a38-ec283daf80e0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d578a901-099d-4d57-a960-d7fb6198e255"
        },
        "item": {
          "id": "29a9be0d-d65f-405a-bf44-9e791a5fed45",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28dba795-40c6-413f-a08d-d72947ecf563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4a6ed11d-8059-48cf-9168-82133ccfba4c",
        "cursor": {
          "ref": "066623b0-3b19-4d08-b6e5-dcf3fab0b40f",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "54a10f16-d8b0-44b6-b781-d414962af29c"
        },
        "item": {
          "id": "4a6ed11d-8059-48cf-9168-82133ccfba4c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "80e2fded-90ef-4383-9b87-d005de7d87ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 118,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b482c42f-fd7c-44ec-af38-b42b9bacb9d3",
        "cursor": {
          "ref": "a86fa870-7a9e-4904-9858-eee62452ab15",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "71ad509a-1d8c-4cde-bb35-1160b560fcd1"
        },
        "item": {
          "id": "b482c42f-fd7c-44ec-af38-b42b9bacb9d3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9216e3d3-8492-41cd-a0bd-9be51b0c1966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6d956e3b-eaa4-4d2d-baaf-d0b673f7ce81",
        "cursor": {
          "ref": "8e2a2863-f75f-4a04-97f5-96a2dfce9911",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "774eaf13-e94e-4948-a54c-f9def4c1ad2d"
        },
        "item": {
          "id": "6d956e3b-eaa4-4d2d-baaf-d0b673f7ce81",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "db303e51-2afe-4bf5-b138-6a92ec0f2bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "75f48c61-56e6-497b-bb9d-864e73f01c8d",
        "cursor": {
          "ref": "af978776-9172-42a0-a8e8-13d67c7b841b",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "90c166d1-e0d5-4b5f-b0eb-8e28db61227a"
        },
        "item": {
          "id": "75f48c61-56e6-497b-bb9d-864e73f01c8d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "392bdedb-12e7-47e3-869c-46c453500a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a3e871d1-2e60-4b22-9bef-555b9dd0ba3f",
        "cursor": {
          "ref": "2402244e-204d-4c13-9cf0-b51257a81b23",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4714cea0-aebf-4778-90d0-31b28606de77"
        },
        "item": {
          "id": "a3e871d1-2e60-4b22-9bef-555b9dd0ba3f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "06c7c2af-c12e-4c77-af10-41024e11b88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f6601754-251b-4278-b74d-0ac49e807404",
        "cursor": {
          "ref": "3b1656bb-30f9-4a44-922a-ba6a6c6def5e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3d56fe49-4cc2-40cb-a39d-e36d1ef0b777"
        },
        "item": {
          "id": "f6601754-251b-4278-b74d-0ac49e807404",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "79cb03a1-b74a-4892-a19f-e77833d7bf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "047ec901-a864-4e4a-9f07-8833527dce48",
        "cursor": {
          "ref": "247f886b-59d2-4d29-a944-49b04fe57d1f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "567cb7f2-d17f-4686-81ec-49185bdf082e"
        },
        "item": {
          "id": "047ec901-a864-4e4a-9f07-8833527dce48",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a736c4b8-9887-44a7-b2df-758bac16e668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "eba0cfc6-56a2-4da5-ab82-70bd5a246a59",
        "cursor": {
          "ref": "62ea856c-2f91-4334-bd54-ec9bd6b045e9",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0a3ed2a4-f1db-4af9-bb0e-c3c6160ea57b"
        },
        "item": {
          "id": "eba0cfc6-56a2-4da5-ab82-70bd5a246a59",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c0608775-84ce-4e78-b7a2-1d77fb40ff6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "64d4796b-9524-4d38-8354-34ef38a1ac6b",
        "cursor": {
          "ref": "3f2b1909-5c2c-4724-813c-051ff90aa5f6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "add9bc76-ecc2-4e0c-b348-49a3b7e26ef7"
        },
        "item": {
          "id": "64d4796b-9524-4d38-8354-34ef38a1ac6b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "97f18c89-e665-4155-92f5-7818e1d0afb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "06f4553a-d695-47bc-b288-1ea32f9d646e",
        "cursor": {
          "ref": "41fb1f1d-26d7-438e-bc9a-3962fcce3d40",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "92c6d184-306f-4cb0-88f9-3144e9a8404b"
        },
        "item": {
          "id": "06f4553a-d695-47bc-b288-1ea32f9d646e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "22b34471-327b-49d2-a79d-3569ba639b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b0a1e3ba-28bb-4d1a-9b06-161ca14e9615",
        "cursor": {
          "ref": "ac32c546-0a91-4656-b7fd-74b5d6eb42e7",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eed1babe-c033-4a9e-9ebe-929dcb1bcea4"
        },
        "item": {
          "id": "b0a1e3ba-28bb-4d1a-9b06-161ca14e9615",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "afea9d0e-4ac3-4b8b-92f4-6b49578b00da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9f58a77b-213c-4683-a6e3-3f4335867442",
        "cursor": {
          "ref": "50206400-4b94-460d-b3d4-40fe62d6e5f0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "64db1178-e936-44c2-84d1-753597a1a94e"
        },
        "item": {
          "id": "9f58a77b-213c-4683-a6e3-3f4335867442",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8a27046e-fffd-4273-a3a1-f789fd03ca6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a38530d1-497d-4a35-bb4c-de5544f5b529",
        "cursor": {
          "ref": "67c800f8-eeeb-4394-9df6-9aed82c8417f",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0af97049-8fb5-48bd-a001-19557a4d8ebb"
        },
        "item": {
          "id": "a38530d1-497d-4a35-bb4c-de5544f5b529",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b352200-cdeb-4627-b064-63a6851c872f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5cb46798-1b4a-42c4-816d-16203f46b396",
        "cursor": {
          "ref": "97a3bdcb-9878-4e1e-bb87-7dd0abd1420a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f974b1df-2ba1-4cc4-91c8-86782ebcfbc7"
        },
        "item": {
          "id": "5cb46798-1b4a-42c4-816d-16203f46b396",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "61d8c382-377e-4074-a46f-a91c238c0780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "35952ced-fb61-4cc9-9db3-0ec8ebe44c2d",
        "cursor": {
          "ref": "8982841b-b442-41b5-8cd0-0d5e41b2b7b6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b8dd5058-6dff-46cc-a92a-5580b3a1b91a"
        },
        "item": {
          "id": "35952ced-fb61-4cc9-9db3-0ec8ebe44c2d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ef3e1856-6fe4-443d-b026-2d60aae325eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9cbb5e51-2312-4680-a422-c7209f9afa86",
        "cursor": {
          "ref": "ea5cc558-1bb3-4a5f-90ff-f8c5f4165709",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d8f93eb5-6f72-4707-93ed-48d79f9953d3"
        },
        "item": {
          "id": "9cbb5e51-2312-4680-a422-c7209f9afa86",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "98e76a9f-22ab-48de-9bb0-b7338c7049f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "87cf8913-3e78-4bb9-8b12-517682a22e61",
        "cursor": {
          "ref": "5ff20133-35d3-478b-bf4e-d6996688f1eb",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "650edba2-4bad-4c1e-9a6a-d6fe5fc51752"
        },
        "item": {
          "id": "87cf8913-3e78-4bb9-8b12-517682a22e61",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2dc5d434-ebe5-4c1e-972b-7a2dd5752ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "57975dcd-536b-4e22-a22c-1fbeb688830a",
        "cursor": {
          "ref": "a0a467e8-fa68-4c50-9eb8-9ce84cc16435",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ed1bc88b-4799-4813-99f1-7c84ad2cc222"
        },
        "item": {
          "id": "57975dcd-536b-4e22-a22c-1fbeb688830a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cfd8c05a-fc3e-411e-adf1-b51042e0f89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b4a3f86f-6e3b-431f-a215-960a2c37473d",
        "cursor": {
          "ref": "163a6666-c407-428d-adc7-a129c4300925",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f54dc48a-f5a6-4f03-8ec2-65bc06865433"
        },
        "item": {
          "id": "b4a3f86f-6e3b-431f-a215-960a2c37473d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4b526a76-4b2f-49b5-95f0-b99397943411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f1f2a392-c98b-4510-9bfe-e1bee6c20cca",
        "cursor": {
          "ref": "c520e84b-920f-469f-9b54-d021ef69fb0c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "608c325c-2efd-4ff1-b1d1-764242ecde19"
        },
        "item": {
          "id": "f1f2a392-c98b-4510-9bfe-e1bee6c20cca",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "119531c4-2655-4683-b8ba-a23688c17d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "27a19601-7bd7-41c3-b684-8401138a3988",
        "cursor": {
          "ref": "f98b2d9f-dd36-4a3b-a446-2ad05bf0ef94",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d9ab7ab-adf9-480d-8ab0-b562b6f69a9a"
        },
        "item": {
          "id": "27a19601-7bd7-41c3-b684-8401138a3988",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "db7613e1-f9b2-4856-a828-eaabaa25b0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3155e5fa-df52-4e73-b129-7f86b343c9ed",
        "cursor": {
          "ref": "235935a8-2f5a-4706-aac1-938d6c066620",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "48e604e3-e620-4bc8-8257-5537940aa6a1"
        },
        "item": {
          "id": "3155e5fa-df52-4e73-b129-7f86b343c9ed",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f5571190-f685-4701-b646-d0654fcba1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9d131cf8-6c34-4eca-bee8-71f099ffd1b0",
        "cursor": {
          "ref": "676d8ddc-ae0f-46c0-bb08-829731b5473d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f7bc36b7-3b2e-48df-aa25-d6572af910ab"
        },
        "item": {
          "id": "9d131cf8-6c34-4eca-bee8-71f099ffd1b0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bc403a73-9c84-474e-a983-477dce8ba8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "7d5251cb-d43f-47c0-ab45-c243f464a6c5",
        "cursor": {
          "ref": "3122fd0a-a693-4880-8dd0-fe5b96c5dacc",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "73b9220e-18d0-43ea-b5d8-d19a951071a3"
        },
        "item": {
          "id": "7d5251cb-d43f-47c0-ab45-c243f464a6c5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fcbf33ab-5642-4d66-b4e2-0148a9745b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "9fa40c2e-441b-4158-8e09-4a8bf99c2d6a",
        "cursor": {
          "ref": "fe8f7d52-e538-498a-9eec-cd20f8a5a624",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d0c32b59-e5f8-42a9-be12-03e927e171c2"
        },
        "item": {
          "id": "9fa40c2e-441b-4158-8e09-4a8bf99c2d6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "750de1d5-a3ef-4498-aa82-aa0f4639eb1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8588114-aec7-4325-a4ee-395ea7e7c830",
        "cursor": {
          "ref": "faeea676-4769-4a54-b3da-0dc302262be9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "764bdccf-2d6f-455e-91af-19beb8e375b6"
        },
        "item": {
          "id": "a8588114-aec7-4325-a4ee-395ea7e7c830",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a8b0735e-41ba-4812-b029-9cd1c48ea4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "b008b0c3-10c1-4ed9-ab15-4b59c5749b33",
        "cursor": {
          "ref": "2d4abb21-91cd-4a50-a9ae-80d443ed2957",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ad122da3-7577-4a24-90a1-dc39a07631ee"
        },
        "item": {
          "id": "b008b0c3-10c1-4ed9-ab15-4b59c5749b33",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1cc87c7a-0f78-4830-a008-5f7375548172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "e884d9eb-1238-4015-b103-462982ee5967",
        "cursor": {
          "ref": "4a975051-25f2-4f76-8092-d5e00431f4c9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f0e009ea-1282-4677-b04c-043961aaf07e"
        },
        "item": {
          "id": "e884d9eb-1238-4015-b103-462982ee5967",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "97ed42e3-0300-4447-936d-1ce659bc29f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "0e84f43d-4bf4-4f7b-be61-b80246012b31",
        "cursor": {
          "ref": "44105dec-d1a4-4145-9ee3-a5d9b974c03a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2ea3f5d2-a9a8-451a-83d2-2e0b1d68438e"
        },
        "item": {
          "id": "0e84f43d-4bf4-4f7b-be61-b80246012b31",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d40b1881-b8e9-4578-b66c-2e73b0e1a4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "99f76b7b-d97d-45ad-80fe-d1ca4efa06c8",
        "cursor": {
          "ref": "2e9d08ed-c0a5-48f3-a042-c8edbd9bb5bb",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a3c68118-8248-4333-94df-729c89954120"
        },
        "item": {
          "id": "99f76b7b-d97d-45ad-80fe-d1ca4efa06c8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2ecbb1cc-c614-47af-9e0c-602fb4b08ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "3303752e-90f4-4b60-9324-149b3a946d13",
        "cursor": {
          "ref": "d81ba500-0dc6-434e-856c-4cb933997eb6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8990fb3b-299f-403f-a625-6daf5de9eaad"
        },
        "item": {
          "id": "3303752e-90f4-4b60-9324-149b3a946d13",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "80724506-d3ff-4791-a93e-5cf6aafcfe7e",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "47830f1b-a557-494e-bf17-11ba7b792fbd",
        "cursor": {
          "ref": "99d56e57-b391-4744-b2d8-c7f949e8ae06",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a2a4d464-1815-441c-a064-8d1e01be0385"
        },
        "item": {
          "id": "47830f1b-a557-494e-bf17-11ba7b792fbd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a79d558d-a380-4d84-9a68-5a995be14309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "9aa8fa82-3ee2-46f3-ba9d-71620fb66240",
        "cursor": {
          "ref": "b551fad5-5d5d-408b-9f9e-8bf73201bfb9",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "964e5ff2-74dc-4928-a053-6abe3a8dca25"
        },
        "item": {
          "id": "9aa8fa82-3ee2-46f3-ba9d-71620fb66240",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "51d7b4d6-fd3c-4444-99cf-a258245318b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "cd35f32a-b591-4bbf-9ced-d39fb1f87709",
        "cursor": {
          "ref": "ed8f0118-83d2-4f2b-b7f2-f2668e6972c4",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9a66dfb8-76c5-4604-894b-2c2a48114025"
        },
        "item": {
          "id": "cd35f32a-b591-4bbf-9ced-d39fb1f87709",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4377c9ad-7a7f-4cc9-bf7d-a9a8e419a1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "951b3b35-b19f-4deb-a8cc-4dbb1a414c77",
        "cursor": {
          "ref": "cc6d9f7a-27aa-4b96-ad5f-6f80b96cd309",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a3b3345c-d6ae-44b4-a6b1-a8439ca7d68b"
        },
        "item": {
          "id": "951b3b35-b19f-4deb-a8cc-4dbb1a414c77",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2b8a0edd-db04-4cbe-af1e-6316da222ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "567641f5-71b7-4465-b585-c51623b6b71c",
        "cursor": {
          "ref": "9afcfffc-4758-418e-bae1-3e6eca1c1c73",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2c79d119-d55d-4922-91fa-13d7213db495"
        },
        "item": {
          "id": "567641f5-71b7-4465-b585-c51623b6b71c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "54922301-2ad3-43f0-bc2b-98bebac182ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "e4472c8f-381b-4b62-8db4-aa9aa3bfb711",
        "cursor": {
          "ref": "ad17e23d-17ec-4887-95a5-832c443d73aa",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c755f535-b75e-49b2-a706-72304f75f905"
        },
        "item": {
          "id": "e4472c8f-381b-4b62-8db4-aa9aa3bfb711",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fcef071a-4d6d-4158-8e58-a24108635896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "eb45e50b-18d2-484c-9b58-05f2568a228d",
        "cursor": {
          "ref": "2fe6d848-d520-413b-a995-34dd23e3a555",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f4f70d6a-4854-448b-828b-6bfd3cb90a90"
        },
        "item": {
          "id": "eb45e50b-18d2-484c-9b58-05f2568a228d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cd37401a-4912-4821-b768-82a72c21f13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "e0a37514-2358-426e-805e-b94a771b7ed1",
        "cursor": {
          "ref": "6aab8c29-1aee-4cfb-890b-2458574f8a5b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "abd82579-0f47-4cc0-81e0-21590356a05f"
        },
        "item": {
          "id": "e0a37514-2358-426e-805e-b94a771b7ed1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a996e70-493f-49c7-9b44-26e859e739d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0ae1e1bd-9a52-449d-b92c-1c73fa6c7c0e",
        "cursor": {
          "ref": "ffdbff6f-3b5a-4834-a696-68f2e4f72dab",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b644d85d-50e9-4c5d-8653-ba0186afb74a"
        },
        "item": {
          "id": "0ae1e1bd-9a52-449d-b92c-1c73fa6c7c0e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7cfb3ae0-8870-4edd-9521-9421ed948f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f7425331-a6d0-484e-a111-5b4eb8c1e042",
        "cursor": {
          "ref": "d66d409a-bcf2-4a4d-b7f4-e15b59b82cbd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5f7d3c78-e6c2-4fa1-accb-c15fa2346c4c"
        },
        "item": {
          "id": "f7425331-a6d0-484e-a111-5b4eb8c1e042",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2ec9305f-df33-4171-b9a2-dce97e455eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "5a0512de-0a7b-4a58-b97a-39626fd0d4ce",
        "cursor": {
          "ref": "5c425788-a6d3-44fc-9806-25394323b048",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d1f658d1-4219-4559-bb9a-5afab3529946"
        },
        "item": {
          "id": "5a0512de-0a7b-4a58-b97a-39626fd0d4ce",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "37dd1903-7395-406e-86f0-d80972fc89a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c319069b-e056-4b3d-afdf-b0a355ce7c74",
        "cursor": {
          "ref": "06063a4f-3096-4c9a-b2df-b03bef98325e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8787412f-0ff4-42c3-a580-b14b51afc3a7"
        },
        "item": {
          "id": "c319069b-e056-4b3d-afdf-b0a355ce7c74",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e42fea98-8f12-4938-b88c-60452ea27b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "687c35a5-ffff-4f5d-9a5e-f1ea8ab1d9a4",
        "cursor": {
          "ref": "56080712-2a6c-4300-bc71-f950efa8e6a2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "55516b58-c3b2-40a9-b423-0cc7f4947c90"
        },
        "item": {
          "id": "687c35a5-ffff-4f5d-9a5e-f1ea8ab1d9a4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cdfaf7a3-68c9-4525-a5a4-7f8a6c9b4ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "15672cd6-c0b5-4945-8394-9132ba633450",
        "cursor": {
          "ref": "a9a9edba-8697-4292-b886-6b5ad56ec800",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2a906500-4a2b-424c-9941-86742fcd1ec4"
        },
        "item": {
          "id": "15672cd6-c0b5-4945-8394-9132ba633450",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "03e34ecd-75ab-4319-b5bb-c72d04de3113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "4cd76f15-1127-4c00-870c-228c6208fb83",
        "cursor": {
          "ref": "84d0f140-75fc-442b-ba4e-90894071af4c",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9f571f8d-a37d-4d20-911f-dc39d0fc1820"
        },
        "item": {
          "id": "4cd76f15-1127-4c00-870c-228c6208fb83",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "36cb3740-b2e7-4a1f-b478-d8c41a774aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f0b2b393-225e-4359-b200-75f8a79a81fd",
        "cursor": {
          "ref": "10196179-4f9a-4f00-99d6-c388b3325f35",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7a227029-997e-4c1a-bd16-f5fe23612834"
        },
        "item": {
          "id": "f0b2b393-225e-4359-b200-75f8a79a81fd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "df9bd10d-1851-4266-a6f9-f3ff7e7f6289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "838180a7-5156-4803-bd72-80176cbc782b",
        "cursor": {
          "ref": "52e8ed74-d66e-40ec-bf04-352c5ce59877",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2e1de765-8a10-4792-8ee6-0d5d842bda04"
        },
        "item": {
          "id": "838180a7-5156-4803-bd72-80176cbc782b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "35bb9e84-8fd0-440c-9434-06316d3796b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7366f5ed-4f99-42de-821c-bf519c2ef177",
        "cursor": {
          "ref": "98ac83ac-d51b-459e-8082-b9ecc0838aac",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c1c293a7-f80d-45b6-a877-ebad31205ad3"
        },
        "item": {
          "id": "7366f5ed-4f99-42de-821c-bf519c2ef177",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2c4a8dfe-befe-4587-95da-b2437ded0ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "f187a9c0-e852-4c13-996e-86218d2ee7ee",
        "cursor": {
          "ref": "e2ee85c2-4302-4344-bcd7-ee8b4cc4b3bb",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "994797d0-58ab-4e1e-836b-2f8fa1b59532"
        },
        "item": {
          "id": "f187a9c0-e852-4c13-996e-86218d2ee7ee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7d96a8ef-78df-47b0-a8d3-9161c0ca1581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "59b7ec11-5baf-480a-b81c-c46b49ec4dd9",
        "cursor": {
          "ref": "98a63e51-93c7-4954-b3ba-4e1cacd24bc7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8eecfd64-f2dd-48a5-946d-b9be1b27ff75"
        },
        "item": {
          "id": "59b7ec11-5baf-480a-b81c-c46b49ec4dd9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ecbe416-6bdb-4350-bcb1-6c9de96aed07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f1139c80-ef9a-4c03-8163-eeb650647677",
        "cursor": {
          "ref": "dc4f487a-2ea7-407e-8e0e-a321a29e295e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ae5fda8a-1741-4e44-bdc5-2214571715af"
        },
        "item": {
          "id": "f1139c80-ef9a-4c03-8163-eeb650647677",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "00a94b70-71e4-4e78-8307-191ec69375d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "b40af7b1-b1ca-4766-a9ce-7ade153c37cf",
        "cursor": {
          "ref": "79eac036-0048-4af2-b7e7-08c6b3d2b0ce",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "defb56b3-f74a-43c0-9e89-12cb054bcf57"
        },
        "item": {
          "id": "b40af7b1-b1ca-4766-a9ce-7ade153c37cf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dde52f5f-4177-4689-95ed-0d7b30583431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5e534858-af6e-4989-8482-3bf0e7170eb8",
        "cursor": {
          "ref": "7b5f7794-ad29-4147-97c8-c415d50df516",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e1d03c80-3da8-45e1-a1d9-1e74a11d5771"
        },
        "item": {
          "id": "5e534858-af6e-4989-8482-3bf0e7170eb8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "61603945-1579-4f1d-918f-aea0b5dcd549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "681e45b1-5605-47b2-b280-49358d92b30c",
        "cursor": {
          "ref": "91a3938a-3830-4bb0-a2a9-2f76f2bd841e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a4aaaa9f-bfec-4508-a072-56bf37588801"
        },
        "item": {
          "id": "681e45b1-5605-47b2-b280-49358d92b30c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6d8ab56-82c1-4e10-bcbf-2ed07f579682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "211e0d6e-5f61-4238-aab2-aa3e6887d142",
        "cursor": {
          "ref": "23e223ae-9882-4153-8e3d-b4fd549aa510",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "71758867-b521-4657-a0b8-592fb7276136"
        },
        "item": {
          "id": "211e0d6e-5f61-4238-aab2-aa3e6887d142",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0820bcb5-bd54-4d58-970a-2b6a9d34169f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a0339e40-f83d-4654-8310-212ed6bac6b6",
        "cursor": {
          "ref": "cc73d409-a712-4eba-a605-b5bdc79af4f4",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "441f2312-8398-4308-97cb-c9c1d4ef230a"
        },
        "item": {
          "id": "a0339e40-f83d-4654-8310-212ed6bac6b6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ea3283b4-4612-4b88-a113-5d03946c3c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "352b3a10-0798-417d-818d-288c3a8e528f",
        "cursor": {
          "ref": "3f63fd43-c0fc-4078-9eca-82b271075abe",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "51c453ba-b1a4-409f-90b4-77f761a6313b"
        },
        "item": {
          "id": "352b3a10-0798-417d-818d-288c3a8e528f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4a6b9c26-e688-4c2e-8e19-424a572bccde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3d628e5d-e315-473b-b9a7-26b7d81f6dd2",
        "cursor": {
          "ref": "301b4dcc-223c-426a-88e9-387e5768ed67",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "23519a17-97e7-4a3d-b3d1-09517bc2d370"
        },
        "item": {
          "id": "3d628e5d-e315-473b-b9a7-26b7d81f6dd2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6777b8bc-9b3b-4f34-95e5-a615a31ffaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "cc51a81d-75e5-44d7-84e1-7d525a8e5de9",
        "cursor": {
          "ref": "42633bed-5737-4371-acc4-81028aba719b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a9406bda-5cb1-4ff5-a1dd-be46038beae7"
        },
        "item": {
          "id": "cc51a81d-75e5-44d7-84e1-7d525a8e5de9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5e021479-5086-4f77-ab87-f03e9fe19609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "ed3844e1-007c-4307-b40d-e0592ccef019",
        "cursor": {
          "ref": "237df7bb-db1f-415a-9df8-56cc6760471e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "32e8fb9a-ecb1-4d5e-81f6-45682dc05647"
        },
        "item": {
          "id": "ed3844e1-007c-4307-b40d-e0592ccef019",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6ed04225-d43d-4839-8105-71d1a7669e63",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "3cb1228c-0fd1-4c8c-918a-5c2ded8c2e8f",
        "cursor": {
          "ref": "745c772f-e223-4384-bc68-8b3d38381eab",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fc1d453e-66e2-43d9-a29b-54310b0032f8"
        },
        "item": {
          "id": "3cb1228c-0fd1-4c8c-918a-5c2ded8c2e8f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5f353882-ac4e-4f77-a03d-493138480667",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1a1c5334-377f-4e69-977e-de40b25fc00b",
        "cursor": {
          "ref": "04d730f8-8a2d-4729-889f-4ce494aab442",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "135c53a1-8c13-478c-9fbf-7030a4d6958e"
        },
        "item": {
          "id": "1a1c5334-377f-4e69-977e-de40b25fc00b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "dad98e83-9ec4-4e5c-afe4-ccdfe4be8fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9793f140-5721-4f40-857f-4e518fc8c937",
        "cursor": {
          "ref": "6415235b-86c5-4119-84f1-952861d27021",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c781e499-1548-455a-8f12-22122a1542ba"
        },
        "item": {
          "id": "9793f140-5721-4f40-857f-4e518fc8c937",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e6bf1420-81b0-4e7f-bec6-aaa0a33701d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "30f04a43-3caf-49c9-a6fb-712fb92972d0",
        "cursor": {
          "ref": "d59db15b-ac1e-4ae6-bcd5-51607bc9d3d6",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a644743-923e-4f31-a590-eca27471914c"
        },
        "item": {
          "id": "30f04a43-3caf-49c9-a6fb-712fb92972d0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1af665af-127e-4cc7-ad14-5026ea95b5f4",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "3dd6d417-ee46-4497-9c2a-62d61379cf5d",
        "cursor": {
          "ref": "94593853-ab15-4ab1-b5a9-5db650d2aa9c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bae31136-ffb0-486a-b111-04dd3c889207"
        },
        "item": {
          "id": "3dd6d417-ee46-4497-9c2a-62d61379cf5d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "363fabb1-6bbd-4555-a2b1-45784608111b",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2d819167-61b1-47aa-aed5-fdb472cded57",
        "cursor": {
          "ref": "f7b82530-4daa-4139-be6c-de3445deb1b1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1667b0d1-d4b2-46f5-a4be-45dd4286e44e"
        },
        "item": {
          "id": "2d819167-61b1-47aa-aed5-fdb472cded57",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2b7565ef-48c0-4aa6-ba88-53fb719bb7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "144a7439-2634-4629-816d-0f6494b9a017",
        "cursor": {
          "ref": "249f8398-328a-4662-8694-89ff433fd4ba",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "49d9c81a-88d4-45c0-be21-44303b25713e"
        },
        "item": {
          "id": "144a7439-2634-4629-816d-0f6494b9a017",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bf43abe7-54f2-45c9-bbea-5b0811808d94",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6a706871-1843-4ffc-87f2-68aee9b455ae",
        "cursor": {
          "ref": "4a12597a-b33a-47a2-9e3a-ae9ae2b309c6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "293ed82d-4d86-4660-8c34-465c7ebf7b23"
        },
        "item": {
          "id": "6a706871-1843-4ffc-87f2-68aee9b455ae",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa08af62-382f-4e1e-90c5-380a81baffca",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b78ffa9b-85b7-4425-809e-9341fa0ab51a",
        "cursor": {
          "ref": "91f563b6-922a-47e2-afdf-e8dccf7222a9",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "07f6cae8-efae-473b-ad55-81a35a661168"
        },
        "item": {
          "id": "b78ffa9b-85b7-4425-809e-9341fa0ab51a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8e75ec85-7e0b-452c-8f6d-1d70f0cbf3cb",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "906596e1-8d07-43d9-8db4-b8ba575c756a",
        "cursor": {
          "ref": "eba1ab7f-e446-4aa7-a3f6-552ed28b9e9b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c623bb8b-8fcb-4f89-9208-c181509e6c9d"
        },
        "item": {
          "id": "906596e1-8d07-43d9-8db4-b8ba575c756a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c6d7c4d6-0afc-4a7f-a70f-3967c4b1790a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "1f950eb0-60a8-411a-87bb-c5b929d0c80a",
        "cursor": {
          "ref": "c73395fd-6651-4703-bf5f-3dab3976d0f8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4ea7a3e5-8f5c-4c9c-bb18-949c69ba527d"
        },
        "item": {
          "id": "1f950eb0-60a8-411a-87bb-c5b929d0c80a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5cf93297-ccb5-4a27-a416-ec58fe8cdf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "f8e0d310-1087-4db4-99cc-21143bb09646",
        "cursor": {
          "ref": "6b276680-536c-48c4-8143-f978102e3417",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3d42cc08-8a7a-476e-9321-7c4fcf706be6"
        },
        "item": {
          "id": "f8e0d310-1087-4db4-99cc-21143bb09646",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7e41276f-7ed6-40dd-a7b5-3415ddfac339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a623f250-24ac-4592-b904-d2852207c25e",
        "cursor": {
          "ref": "8d2850e5-c07d-4809-a102-6d84f8511449",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2ffbd034-2699-4395-95e6-e3eacd1bf927"
        },
        "item": {
          "id": "a623f250-24ac-4592-b904-d2852207c25e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e7e1c467-b14a-4dae-a264-d6570c48fa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "1105958b-9440-4b41-aa32-9125b5c61ffe",
        "cursor": {
          "ref": "9e7eb0e8-f1be-4176-badf-0741b6b522ba",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1c96c1cf-d901-4c2f-b80a-3415b031f46f"
        },
        "item": {
          "id": "1105958b-9440-4b41-aa32-9125b5c61ffe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74aa86a1-8d03-4adb-80fa-5ebb3a32f5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "95ed6d8e-3fdb-423a-954d-39575c152c81",
        "cursor": {
          "ref": "c8f55c8d-d718-4217-bfb7-a6b4f7f7c174",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8340c9e4-c360-4c10-a899-4a8168ed8719"
        },
        "item": {
          "id": "95ed6d8e-3fdb-423a-954d-39575c152c81",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1d32031f-1164-4e77-9634-cf658946ce2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "6437db0f-3e33-4fd6-8ad4-241f2891116c",
        "cursor": {
          "ref": "47b83f73-b9b2-49e6-a2d0-8f5626d7a7cd",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a596909b-cf62-4d15-af43-e0b10efc32e2"
        },
        "item": {
          "id": "6437db0f-3e33-4fd6-8ad4-241f2891116c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "24782f0a-1186-4f40-98cc-93e3ca692148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "6fa7d582-dff7-4ab6-9bc8-254b58bb1a54",
        "cursor": {
          "ref": "647095e8-9946-4099-899f-d8ce6e51c14d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3fe8a8c2-b45e-4a1a-a408-07d21bf46aa8"
        },
        "item": {
          "id": "6fa7d582-dff7-4ab6-9bc8-254b58bb1a54",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "88f8ea0f-18bc-4cca-abb4-0c90b7f6ce0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "3b0caa86-6fee-4ddb-a26b-3282b7cfd0b0",
        "cursor": {
          "ref": "b2b69110-153d-4c29-946a-632c2bab3ef9",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5ce027b1-764b-42c9-bf36-dfd4905f763a"
        },
        "item": {
          "id": "3b0caa86-6fee-4ddb-a26b-3282b7cfd0b0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d78ee966-835c-435f-ba81-da71c34c2ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "68f460d0-761e-429c-94d4-8ea48a5ffb23",
        "cursor": {
          "ref": "096cd9c3-714d-45ed-8496-2fb18cb4e3d7",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5c9221fc-b674-4643-b8f5-d81c260cb572"
        },
        "item": {
          "id": "68f460d0-761e-429c-94d4-8ea48a5ffb23",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b6280910-2563-4d58-91f3-403fae5d4c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "985e927d-5be4-43f9-b542-c02d3dce6587",
        "cursor": {
          "ref": "cf1e2891-30d4-46b2-8604-741a37687fd6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0670c7c4-e2b5-4c35-9b08-f27ef157b843"
        },
        "item": {
          "id": "985e927d-5be4-43f9-b542-c02d3dce6587",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0c39328f-bfdc-4ab8-b822-cc272277f281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "a1ecf58a-e09f-48b5-a628-36dac0b719eb",
        "cursor": {
          "ref": "877a1206-f849-4d04-9c8f-8a350291e8d0",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7e374611-daf9-48d0-af45-32abc94a1344"
        },
        "item": {
          "id": "a1ecf58a-e09f-48b5-a628-36dac0b719eb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d6073416-8958-4675-9b43-ca4e673f4805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "dfca117c-7b26-42d4-883b-a7fbf855a86e",
        "cursor": {
          "ref": "0e58215d-b3fe-4c32-86ed-d8891a608554",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b0dc97ef-2a6d-48ef-bddd-2fc233fe2450"
        },
        "item": {
          "id": "dfca117c-7b26-42d4-883b-a7fbf855a86e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "29d3a416-1201-4ecf-92e8-cb62302ad7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c4186183-8262-425f-8bba-a1de8070606b",
        "cursor": {
          "ref": "4410e76a-d3ea-46f0-a94d-c603c616096d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7c8b085e-7750-4c42-ae30-edf1e1b6a550"
        },
        "item": {
          "id": "c4186183-8262-425f-8bba-a1de8070606b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a206b8f6-0376-401e-9ede-919dac6776d8",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "506538ea-293b-4a24-876f-3be6576c9d70",
        "cursor": {
          "ref": "16910c54-0a56-40c1-ba76-4f95eb9e1caa",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "96523a75-e0cb-4bd3-a8e6-b7b376c71020"
        },
        "item": {
          "id": "506538ea-293b-4a24-876f-3be6576c9d70",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7842b06e-aa78-41b5-96c1-e5622975e507",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7d43e39e-0744-4c2c-93d5-e1d9cfa8460b",
        "cursor": {
          "ref": "9a98431e-f2bf-40c2-b929-212ab9373b76",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3dd139b2-8f62-45ba-9def-94fcd43433b3"
        },
        "item": {
          "id": "7d43e39e-0744-4c2c-93d5-e1d9cfa8460b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e4ae4558-e8d1-4843-a35c-671f069c6497",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2c26011a-1e0d-43e8-875e-0ba8e78a4242",
        "cursor": {
          "ref": "d29dacfd-079b-4285-996a-46454b1b148e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a0136ae0-c31a-42b3-92a8-5d44b65f7196"
        },
        "item": {
          "id": "2c26011a-1e0d-43e8-875e-0ba8e78a4242",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "721de482-8655-4a56-865c-0a3f2558ccfd",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2c7d653c-6122-4328-a459-496b820afd2d",
        "cursor": {
          "ref": "a8799dac-71ec-478c-a578-abb515b163fc",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9f4f1eb4-c569-4528-a597-a3855926474c"
        },
        "item": {
          "id": "2c7d653c-6122-4328-a459-496b820afd2d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a528ca6d-f167-425b-92b0-20d65ccddae3",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ad304d08-5c24-4d1e-8e72-6100f64a952e",
        "cursor": {
          "ref": "0133a5ad-f85a-4424-a0e9-100429f11941",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b57be51f-3f12-4059-bb14-f7115beb0e6c"
        },
        "item": {
          "id": "ad304d08-5c24-4d1e-8e72-6100f64a952e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f490015d-a970-4e04-a7ca-92e81e631857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6a13cf08-1279-41a2-b44f-21c429257317",
        "cursor": {
          "ref": "e10aad9c-f3b1-4433-a93c-414b675af111",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "db7084d6-6675-433e-98d1-420fbb4f4d44"
        },
        "item": {
          "id": "6a13cf08-1279-41a2-b44f-21c429257317",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "db4140ae-b53b-4e25-85f0-52fc35c4072a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ab9361c0-1568-4dc8-95a6-146545a805c5",
        "cursor": {
          "ref": "e0363015-3755-44e3-9f28-6b4925374434",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a9e62632-a6d3-47c3-9873-db0d80b50ed8"
        },
        "item": {
          "id": "ab9361c0-1568-4dc8-95a6-146545a805c5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7114f680-f4bf-4829-8015-57cd0ee7967c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d56fe944-f8cf-4569-aab7-2c38840f1e8b",
        "cursor": {
          "ref": "416ac362-ad01-497d-b1e5-f77f52354c1d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f39abbb2-a584-4eff-a8b8-fa6cf35bf5dd"
        },
        "item": {
          "id": "d56fe944-f8cf-4569-aab7-2c38840f1e8b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d17d471c-4574-42d6-9f3b-164566c35c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "2ff05f44-6e18-4bcb-a588-2699ad68c4a8",
        "cursor": {
          "ref": "7e2b4a57-6ae5-4807-9424-f077e94c1adc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c71d8c3a-5a6c-499f-98ba-147498dbd68b"
        },
        "item": {
          "id": "2ff05f44-6e18-4bcb-a588-2699ad68c4a8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9aa8a7da-8378-471a-a780-59a9c43d071f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d87f9092-52e7-4a2b-95ac-230e01e58e3f",
        "cursor": {
          "ref": "1743821b-b9da-4e51-9b3b-d1aef2c92b38",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8417ec2b-a331-4106-b8a8-a25ad04d71ac"
        },
        "item": {
          "id": "d87f9092-52e7-4a2b-95ac-230e01e58e3f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8842d5ab-736f-42ff-a14c-7c6b9a66eb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "46a59d0f-cd06-4649-8543-615394472627",
        "cursor": {
          "ref": "dd466c77-c9be-4c34-b3e3-287aa737025f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2c6f2429-b625-4eaa-9cb8-952d0c6f14da"
        },
        "item": {
          "id": "46a59d0f-cd06-4649-8543-615394472627",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4e4d1a63-525c-4e7d-bbf0-117fac15a992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "06541405-9748-4e84-a140-168e6656eb7e",
        "cursor": {
          "ref": "727e58f0-65a2-47e5-8471-17603512effe",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8a43fedc-f845-43b6-94c6-ce286a0f5619"
        },
        "item": {
          "id": "06541405-9748-4e84-a140-168e6656eb7e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8849ba96-5eef-4d48-a1e8-f648bc53789f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a18a13cd-2547-49b0-a0e5-17d863b9e7dd",
        "cursor": {
          "ref": "a6b99d2e-a151-4db2-b222-8740ad1a9aad",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "78ce81bd-ee9b-4c55-8605-c6f325f47b0b"
        },
        "item": {
          "id": "a18a13cd-2547-49b0-a0e5-17d863b9e7dd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "90062a84-0a1d-4d71-bc14-07270b904132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "56c246bf-7e82-4e72-977f-b1be344efe2a",
        "cursor": {
          "ref": "dcf244a8-a0a0-4a14-999f-e636d998592a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00ed4b02-e123-4aae-85c7-c4ad860b0eea"
        },
        "item": {
          "id": "56c246bf-7e82-4e72-977f-b1be344efe2a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6e6e2db9-fba9-4278-beeb-23cfd8889342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d6bb6ae2-deb6-427a-a69a-0d39472f81f0",
        "cursor": {
          "ref": "ce53337d-76fc-491b-a72f-4266ebfb6d19",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "03a71747-94bf-42dd-8567-8cc72eaadadd"
        },
        "item": {
          "id": "d6bb6ae2-deb6-427a-a69a-0d39472f81f0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1a1f27e3-7203-4684-9fd1-058f00c45856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "238ce488-3a58-41ed-9f6a-301b4e2096d4",
        "cursor": {
          "ref": "d7a61920-9dc1-4bfb-b594-14dda5f070eb",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d51dafeb-6ac4-4b15-8188-8d2f7d42c50e"
        },
        "item": {
          "id": "238ce488-3a58-41ed-9f6a-301b4e2096d4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5987be30-aa02-4f9a-aeb1-28214848de1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5a3eaacf-a72e-4ca9-9303-0b520609d74d",
        "cursor": {
          "ref": "3d75bfc6-ad53-4d40-bb1e-14fd424e185a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "160aaeb0-e978-4386-ae0a-1faf0ccdf825"
        },
        "item": {
          "id": "5a3eaacf-a72e-4ca9-9303-0b520609d74d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "843477fc-052f-4d4b-8a56-d0f5c6463ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8d797945-891c-446d-b484-689953be348c",
        "cursor": {
          "ref": "ab216986-105f-4302-a927-90db0221e82b",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f778a0fe-ffea-4bd3-a275-2580588d53c2"
        },
        "item": {
          "id": "8d797945-891c-446d-b484-689953be348c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "95eb1705-df25-44bb-bce3-6a713a0343d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1ec80f7a-5ab2-4242-ab0d-3044d1e3e295",
        "cursor": {
          "ref": "fe6676fe-e6e2-41b4-9811-0d554ed0f2b6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1e00aaf7-e4bd-4a0c-b65d-8dbe657800b3"
        },
        "item": {
          "id": "1ec80f7a-5ab2-4242-ab0d-3044d1e3e295",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4bf55101-4340-4008-867d-5bea56c4f72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "be664d24-3bba-4523-bb57-c94304844ccb",
        "cursor": {
          "ref": "61042a43-9dff-4fae-9f73-f9ab8f81a23f",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d977e048-f01e-4fcf-a25a-008be1734a2b"
        },
        "item": {
          "id": "be664d24-3bba-4523-bb57-c94304844ccb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9d7ada40-9b21-4c52-ab87-77e6097fd18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "b6eec3c0-29d9-4302-b4d4-1729d973b20c",
        "cursor": {
          "ref": "bf3291fd-1616-4a4b-937e-db987ef16bab",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "706f6729-f11a-4dea-8f0a-78a8f34c9a35"
        },
        "item": {
          "id": "b6eec3c0-29d9-4302-b4d4-1729d973b20c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0db09a7d-0f0b-4e0f-9232-68e603ea5ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7cb1215b-5a7d-4ac3-a6f4-ed64ee5f1655",
        "cursor": {
          "ref": "9ba8e743-edcb-4634-83ad-c4e091f4c48c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a5deb333-2000-40ee-91e5-c41c10665a21"
        },
        "item": {
          "id": "7cb1215b-5a7d-4ac3-a6f4-ed64ee5f1655",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2ca5ce8a-62d9-47f9-ad53-b50070670d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "dc591613-f64d-47f1-8d9e-ae6c0667d036",
        "cursor": {
          "ref": "e560db43-6b81-4692-94a0-3771c891bddf",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d6918047-a6cf-45f2-bf3d-0a7f826bcefa"
        },
        "item": {
          "id": "dc591613-f64d-47f1-8d9e-ae6c0667d036",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cf3583da-1f73-4577-8335-784356a1bebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8bee2dfd-17ca-418e-afd1-9fd9322b4809",
        "cursor": {
          "ref": "06da7bea-6967-45e3-9ab8-ae059a56757f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "13d831f0-053e-4379-808b-720a8797f4cc"
        },
        "item": {
          "id": "8bee2dfd-17ca-418e-afd1-9fd9322b4809",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3fb98b72-5d36-4121-826e-b46c3c7c4c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "473c341f-fa4d-491a-9b2e-cc875d6b3b1a",
        "cursor": {
          "ref": "129ec433-8c2d-47c0-af56-7de1a646a9ca",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d903f507-478d-4dca-9639-31decc830349"
        },
        "item": {
          "id": "473c341f-fa4d-491a-9b2e-cc875d6b3b1a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d0328708-c969-431e-a5df-097c105b2d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "929ec4b3-aef1-4a53-b464-7b2df8c7bec2",
        "cursor": {
          "ref": "a138a181-ebd1-44de-8d7b-634b3d14752b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aa49edb6-4341-4b4f-8dc4-f666e0149516"
        },
        "item": {
          "id": "929ec4b3-aef1-4a53-b464-7b2df8c7bec2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "29c014af-3c46-4cc8-9e4a-a33e12b5c15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e6ae90f3-c8c1-4454-82f5-84e84c9a25c4",
        "cursor": {
          "ref": "c0fa69ef-265f-4b2e-b742-2b80d6905dcc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3c872488-7d4d-40f0-94bf-ed736eabf7cd"
        },
        "item": {
          "id": "e6ae90f3-c8c1-4454-82f5-84e84c9a25c4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a855be12-8c70-47cc-9d0c-ffa4b624411d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a3edd3f9-5f87-4c48-a5e8-6ae1cb423c45",
        "cursor": {
          "ref": "b8722ede-1218-45d0-b8a8-dd71c872ca61",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dc2c1781-91de-43e9-9ea9-8dcbd0d21b20"
        },
        "item": {
          "id": "a3edd3f9-5f87-4c48-a5e8-6ae1cb423c45",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d3acd532-9071-4255-af62-fcba2bfe1792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f5d70017-1a8f-4e40-a616-e5cb0b36bd69",
        "cursor": {
          "ref": "e5cf4c6b-3c53-40b0-b3ab-41b0f338d170",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "792b8b21-5301-4a87-a0e6-fd585bc6bfef"
        },
        "item": {
          "id": "f5d70017-1a8f-4e40-a616-e5cb0b36bd69",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ec06c5e6-87dc-4356-825f-4901ba7e6c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "be2f87af-cfbb-494f-8c33-8f636b93d9d9",
        "cursor": {
          "ref": "dcadcc14-3a62-4a86-ba73-9f4687208c07",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50c827d6-88f1-45c7-bf3f-91f63a859af4"
        },
        "item": {
          "id": "be2f87af-cfbb-494f-8c33-8f636b93d9d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8f7a6504-36a4-4a89-90cf-a443b2e07d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "5d0a039e-ab14-4a45-a533-4f8add582409",
        "cursor": {
          "ref": "8dcaf270-32ee-4fb7-88c1-a1a4c2f717c8",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "65cce835-f443-470f-8350-d24ed8cc575f"
        },
        "item": {
          "id": "5d0a039e-ab14-4a45-a533-4f8add582409",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e0da6f30-f1e4-4cb7-8ac3-a9eca3568298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "f21b91f9-6def-46a3-9e4f-0528b9433727",
        "cursor": {
          "ref": "86dfb636-2717-4403-8c83-3d4916c4e8ef",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d9e997ed-4208-4391-aa07-ea9174829afa"
        },
        "item": {
          "id": "f21b91f9-6def-46a3-9e4f-0528b9433727",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e789bbf3-1f68-4bb7-a9b1-83987b7f3bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "714e6266-1dc8-4ec8-916f-b5050fb8b010",
        "cursor": {
          "ref": "30672436-d661-4448-aaae-dbe29f0cf210",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b4529535-a777-4692-98c0-fbbca14c5a23"
        },
        "item": {
          "id": "714e6266-1dc8-4ec8-916f-b5050fb8b010",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "43ff0e09-67a4-4427-99cc-114c554c93b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "54c4a124-507f-4f07-9484-673d7cdcd454",
        "cursor": {
          "ref": "f5379cde-39d9-48ed-9892-0236998bf355",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2a1cf134-b543-48fc-a0bd-4cf2ac0a4fa1"
        },
        "item": {
          "id": "54c4a124-507f-4f07-9484-673d7cdcd454",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "af23abed-425a-470c-a738-d22494495231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cd2ae16f-8d46-4da8-80c7-075113855265",
        "cursor": {
          "ref": "f0e5536e-f88e-4b1c-b18f-b627fdfec692",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2cb4338e-e351-464c-8c46-fd7ce67729c2"
        },
        "item": {
          "id": "cd2ae16f-8d46-4da8-80c7-075113855265",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "98cd0884-73f2-49e0-aa7b-e080cf2a5661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "13b26661-9b4f-4c2b-80f6-c113c9370813",
        "cursor": {
          "ref": "5d8808f8-9d19-40db-8d97-e5653f86bf35",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d2d7830c-49e4-4708-8ee3-5c81d1446b0d"
        },
        "item": {
          "id": "13b26661-9b4f-4c2b-80f6-c113c9370813",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "005976a3-e5c4-4bb5-b8e4-d1608f9c03de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "aaf2cb64-d334-45d9-9b1f-ef1fcb5c2d34",
        "cursor": {
          "ref": "3898abd2-b4d1-4c4c-b128-6a6fc285a767",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2eb877ad-f2b7-497f-8a04-d499b8ff5901"
        },
        "item": {
          "id": "aaf2cb64-d334-45d9-9b1f-ef1fcb5c2d34",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "741bd8ec-9720-4c41-bb50-84e2a723f27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "385de8fc-d51e-4a9a-b1b7-083640daf782",
        "cursor": {
          "ref": "9fd2a4a9-5185-408c-8e99-0815b53dc7a2",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e6fb71d5-6897-452d-b6b7-b67747134e5d"
        },
        "item": {
          "id": "385de8fc-d51e-4a9a-b1b7-083640daf782",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "63ac00cb-8584-4737-a0ae-9a78369035a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "9e3fe346-fa50-4357-a70b-d5c0038b9acf",
        "cursor": {
          "ref": "accf44d8-3811-4cee-aadc-6f16de0b0b69",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dcfccd10-4025-4de3-b7dd-bf7c9e72f4f0"
        },
        "item": {
          "id": "9e3fe346-fa50-4357-a70b-d5c0038b9acf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11dc04f4-2087-4fde-914c-18d4e0bbdff7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c87ece0-14e6-430b-9ba5-5979cac796a5",
        "cursor": {
          "ref": "1b6b9c23-56e4-46a7-8612-3a29a5cc510b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a3f0e3f5-8f87-42df-801f-a2e41372304f"
        },
        "item": {
          "id": "8c87ece0-14e6-430b-9ba5-5979cac796a5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2676c234-2247-4316-b14a-4df0d7c70c88",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "00a8c23f-feb6-44ed-9cb1-9947c817fa3e",
        "cursor": {
          "ref": "71897c3a-add4-436e-a7bc-196b02563ee1",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a00d3d3e-0272-459e-a90a-ee1d2da448aa"
        },
        "item": {
          "id": "00a8c23f-feb6-44ed-9cb1-9947c817fa3e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cdb59126-a536-42d5-9e28-8a463cb44318",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f218f1-0d53-4dc7-b4d7-e580ecf6df8e",
        "cursor": {
          "ref": "6cf69cd3-0cef-4f5e-af48-3ae112bef2f6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "de537788-dcc2-4bd7-b841-9da2d708a6d3"
        },
        "item": {
          "id": "e9f218f1-0d53-4dc7-b4d7-e580ecf6df8e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ec608d15-5091-4bf3-8c20-53cf402680a6",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "735b537a-6bde-4273-b4a0-49101aa3bb49",
        "cursor": {
          "ref": "cdc9e07f-b01f-4e09-badf-5453d128735a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b064af4f-41c4-4a1c-978f-4f9a8be2ea41"
        },
        "item": {
          "id": "735b537a-6bde-4273-b4a0-49101aa3bb49",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5d9a4a8d-0a33-401b-b78a-f7b50adf553b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735b537a-6bde-4273-b4a0-49101aa3bb49",
        "cursor": {
          "ref": "cdc9e07f-b01f-4e09-badf-5453d128735a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b064af4f-41c4-4a1c-978f-4f9a8be2ea41"
        },
        "item": {
          "id": "735b537a-6bde-4273-b4a0-49101aa3bb49",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5d9a4a8d-0a33-401b-b78a-f7b50adf553b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7899b36-fc6f-46c3-9b1f-50b6cf87b381",
        "cursor": {
          "ref": "b985abc8-aca2-401a-b328-0d9187f11a52",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a409446d-9927-45e9-bd34-e64fa97ce1e8"
        },
        "item": {
          "id": "e7899b36-fc6f-46c3-9b1f-50b6cf87b381",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f42408eb-cc11-4dee-893b-86d72eeb3e8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ae3295-5c69-4110-a200-cd8fa8e547a4",
        "cursor": {
          "ref": "d4f862f1-e85f-49e7-90df-8f4c4990dbdc",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7e704cbe-a34a-455c-a1e1-ed402900358d"
        },
        "item": {
          "id": "85ae3295-5c69-4110-a200-cd8fa8e547a4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e4141056-cdaa-41f7-aee2-162279c16a29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}