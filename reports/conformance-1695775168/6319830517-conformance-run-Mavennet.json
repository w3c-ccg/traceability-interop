{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "48a9ef6b-5537-40d1-97eb-676c67c602e2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "93acf796-0eb0-4386-a409-9ac7577e9e27",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff08969e-899b-4441-8345-5aec51d94f2f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5542d288-30cb-485f-8ea1-77d915e40d5e"
                }
              }
            ]
          },
          {
            "id": "37ecc4ee-8b96-4f98-aad7-611dcfd2614b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "874e5b4d-a333-416f-8949-8aec439a9717",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dbe3e879-ab20-4281-ad67-cf83d3237479"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d2b69793-a5b6-4715-bd59-cf003d9cf2f4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "47e7a36d-dffd-4720-99f5-0bdc3de9a1b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ef09ae0-634e-4f98-b2d8-289c62715653",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ddd1a91-6aa9-496e-998a-8319a22b59da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11decdca-86ee-461d-992a-c1d881f67c4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "392a67e9-3e21-4be6-9057-d8db0497c02c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21493289-5470-4011-9cb3-ecb66ae06ede"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9611f5fd-b6f5-4bf5-bb35-28f1cd35dba7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83b4761d-5ca8-4b96-8575-b861d149b449"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bab2a63c-1bb0-4494-8e50-de3bdafb3b57",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1cf6f44c-6f50-4ce6-8166-a82b79c480b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31cb4b7-3b23-4ef0-9396-b1d3abcd2f4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31bf69ce-d499-44fa-a5f2-238cfb888593"
            }
          }
        ]
      },
      {
        "id": "0dca023e-9adb-4c45-b839-303a4e0d3055",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d2293683-a6e6-4f49-b6ba-172b63683c0a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d04b75e-3248-4b84-836c-6b82128a0242",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8451d0eb-0b20-41ca-8d46-1f9cc210f830",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500ffafe-7dcb-4916-ac3c-94604ebb88b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2dad92c-cfd9-43be-830d-132963c93340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369ec9b7-27ef-4dce-a86f-d4273dc81fa8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c443dcd3-9823-4af3-acb3-2e18048765b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0be74684-6b55-4d1f-b5b7-c7b15490c325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410c2e19-fccb-45a4-b191-d145966f3f36",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2958fc6-6bf2-48f7-986f-5050cd047aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec1a0c83-e2bf-47a0-9e14-2cdba0b4e112"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20e89c18-961a-4fc3-a93e-d4e53ebe0363",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06b06792-c6ac-4b6e-8bd8-8442d7b7bc8c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ce4c17-5f32-40c7-b882-a2f29d4c7e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8a0b5fe-3f50-4226-a0fd-d081d736225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d95a116-43b4-42f8-88e8-037432ef6dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee01986-eed9-4c32-8a51-00581c936a44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "37e00b58-c79e-425b-adc0-4274d5049071",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c8a6d26-61e3-48dc-b2d9-270cd4b65af5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5483e069-0417-4f84-a696-f279b446aa71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1eeb1672-8598-43c1-9e98-3232ae0a4e38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "146944df-b775-4423-99a7-264fc0bce8eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8cef9ef3-af1b-40a5-b656-f04e58409d66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27f06ddc-263a-4334-8867-5cb56bd8438b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad7e5963-6c50-4d27-ac9d-26480918297c"
            }
          }
        ]
      },
      {
        "id": "a7c5b0b3-844a-41f5-9061-9bae35a599f1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dee6224e-7d53-4643-9ea8-342b0f76b391",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2d1b59e-e47b-49d1-ad9c-b4fd623cab04",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7661c201-1909-445d-ae45-8c13d84e85b2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2ad477-2987-4ce9-a6e2-e68ad51b2e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e638048-a530-41da-b2a2-39809194ce61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e0049d-f4c7-4966-a5de-ed6d42a892d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ad86d60-e953-44dc-a985-1fe9d64e477f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c4b5c6-8e6e-4db9-adaf-f1629bcd03d1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9509e464-2d0b-4f4d-8c98-d3ab0a8a29f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d480a338-a926-4f5e-98a3-30dd0c86ab74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfdd572-592e-4a4e-aff1-519b10839b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8370bb7-ce3e-478e-aa2b-cc6b04caa456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5906021-bdee-4e38-b9f8-d42b09e4cb29",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7baca9b-9239-4bf7-b0bf-ca258f316a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9d81a2-acda-428b-93e5-2d4e915f4104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ebb1fd-95aa-470d-8d85-27ff66113499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee4fb3ff-fec1-417e-b84f-af44a48518d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f901acb7-2ce1-4f93-a25c-f31bb2eac45f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66936df1-4258-4bdb-97b9-008577adf183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42c11b3-572c-421c-8ec2-6f0facfffab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdec9e9-afa3-4f7d-b26b-4bacc1f99155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce878e37-2c96-45ed-bd89-2a7b258296a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8ec887-ed04-4607-9059-fc88aab5a06c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa55ff5b-98f0-4dda-adf7-4fb0b902870c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b23bfa-d114-4e53-8ef1-d0ce36ada147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efafb65-86cd-4665-baa2-afa2b3ba88ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8707e784-a334-40c9-b72e-1189319a7615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6627bc5d-d513-463e-9ccf-ab54ae04b111",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143e3521-7871-40fb-9f9d-ef6511df970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9eed7b5-0246-442a-ae7f-aa19cb9f74e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83766830-6d42-48a7-a2ea-425e98c702b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c6ba014-3ea8-4dd4-9abd-556872d9caf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7dacbe-386e-4f9e-92a0-1e8b454eeaa3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85ca008-49f4-4430-a5b3-4a391aad2dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95490b7c-07bb-4b54-b34a-751ff2637c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85357a7-baba-4140-aea0-317f75fc4a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0169a86d-5c64-43c2-8fdd-6c7c4b069d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f70aaf-96e3-4ef1-bc03-e29d785ef38f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af559241-ebc4-4c98-b235-58c4db6a9fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9905f1b5-e623-4ac3-b5e3-0dab9f11b840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68178b4e-b99a-4e34-9b0a-1260598679bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a6ed230-ecf2-4969-9508-86ee8ad0d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f3dca8-5b7a-4188-8fee-988094a31698",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5df0380-6829-43e7-88b5-ce15a89795fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16301eca-5db4-4f63-91a7-ff488c6483a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a92397-3da2-4e46-875b-49cae3f12faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7788f4e5-7bde-4742-a0e7-0351792d2847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e79f1bb-b811-4ce5-9215-2e0cf9564574",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb759f88-570d-4487-96f1-498e39d68d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716a64ea-4185-4f0b-ba9c-a51d9f05f137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a22c92-f7de-45d5-b730-124e9fabdc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b133455-da75-44a7-ba92-24f23a895079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0286dfa-29fb-4dad-9e90-0f5897d15dae",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73257f6-286f-4116-b4bd-04a249a171e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584f5f8b-6f23-4964-a8b1-90e961f87967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24384a53-4e85-4766-aee0-22520fc8abc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6459dc3c-8f25-4ae8-b26f-c06b9a796c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7261a498-00f8-49ce-87e8-28087136c2ab",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c612a591-aef7-4c77-9990-fb2a1fdf487f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211596c5-2935-49ff-9dd3-aaab891f6c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca907b9-a979-4d58-926b-2086eb0a2803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9bbb387-3b33-45a0-b93d-78487bfe8f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a732f854-c465-4cb8-aee3-1a485a37754f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5d7c6b-273d-4eef-a3f3-9051db0ff0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be515d1-b382-436d-81f1-5b64ca12332c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4705a4-9d38-45d5-9b46-7eb7cf296835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63a8158-a448-4ae9-8df4-6efd3de7d2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd489d05-5287-4eca-8643-2e9230593b60",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f638c8-3872-406b-949c-fc9149faf5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e1d99b-5f9b-41bf-ad00-f66e4e5068d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2939f5f-0ccd-4361-b1a1-a66f419dd638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ff5f361-8fd7-485a-8354-0f6cf5e91ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3584614d-8a44-463b-ad3d-95fd1bd8d590",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2893d3a-9625-4bf2-9a73-45920a41d0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16c8ab1-db96-4b54-be20-65f4830c8576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c2fdf3-ee6e-4f6f-ba77-80efaee8c382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f7b57d7-a598-4736-b72a-13a14824c85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578f8337-5377-4685-8965-7e17697c07e5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b21d8eb-1777-49e1-b394-529096bdd9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4e8fa1-785b-4c71-8726-f5469c4ba0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50c45b7-281c-43d6-8722-6a9e33ec5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f04596bd-3bc9-42fe-a495-dcb5932da2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7c80a7-2e43-4c38-9d1f-6a544e44f081",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a78c778-ba3f-4e1a-b07c-b70e2c759985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26b6ab9-cef8-48e5-a3a1-ebf733d0c5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7839bb-d1e2-46bd-941c-16fe34fac075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f2010d-ce54-4dcb-b669-efd2bdd7859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6ef665-3ef6-4e48-b3cf-30336bb2f060",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabbbbf4-f96d-4e1e-9ba9-7ab2e8678826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2779d311-d624-476b-8064-b812d8b721c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89a8872-692d-4854-b9ff-9438ece787a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c8bbbd-5f0b-40d5-8738-a78cbde059f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1a17f5-dfdd-483b-9ecd-af5c3c340497",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d861077-ce0c-497d-b51f-11fa361d0488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e37773a-8b9d-4652-af00-09e564d45a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa1557a-c824-4170-b572-154678356e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf722b97-2515-4a23-9727-b61e98696739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8366b20-efc7-4187-bf22-e11af50366a9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38065bde-e3b9-4cf6-8e63-679727786703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892c5ec3-248d-4ac5-bc2f-41db0fdf8f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8547ae-c897-42db-a8fe-0e0c0245ac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4184206d-c2cc-4c7b-a8e3-8f3e0eb0282d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b048ef-8c06-406c-8166-6af450423c0f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1262e83d-eb44-47f9-b7bc-32b6dd4a56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eef1d94-22d9-48ac-bd5b-918149e24886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188a07ad-f8ff-4a91-9f55-23c9e6705eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc074177-ee03-4fa3-a2b8-42cd78bed8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28543099-50d6-4238-8572-80a81b54161b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6a9fe7-d0f7-4bcc-b33b-c5bb3b9b447c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2d319f-f86a-4448-afde-53e032e53b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07777f2-d8a5-4a20-9180-050116734d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb73e07-b8e2-419f-b61d-e41c24befed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bb9c55-13d9-471e-8f3f-78865ce7a8b0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9772fc65-995b-498e-bd7d-fdf59118b83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecacfff-5080-4366-a93c-59e5168d5072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48a1cb4-85c7-426c-999c-e1c6dddf613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "858d1a6f-d81d-4bd7-af03-b3f70dd17b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b0bb32-bb66-42ee-aeca-44a266c55e33",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d882058-dc5c-44d6-92d4-6749f0a91903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037f2931-6337-4b47-a135-d2153213ef40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5596aeff-0fff-4e46-b7d0-fb37bb40b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62da897-6e03-4863-82e9-115035af81c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6921193-efd4-4244-8709-4092c0a94369",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab34151-9de3-4094-9053-00f42b3c99a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4b57f5-9ec2-4728-bd09-a326eb20684f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9027b5-9981-45f0-847c-6ca90672a15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d711c429-59a3-4162-b069-596ce1589381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1351ab65-b4d8-4e7e-8ed9-541a6d4763e0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0dcf78-8354-4164-a3e2-769b5783f10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be3ebab-a704-4f8e-90d2-616e3a4beb36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd70b5-8644-4e8b-8896-2dbf56d216f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc32daed-83c1-4ba7-a130-3768036e0b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44905c26-998f-4e07-9cda-6f1076cab370",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa3d18e-5849-4b00-b5bb-83ed1fc75815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404a4ecd-7d79-40b3-8e61-f7be88d2ac23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebf1b38-5694-423d-97e5-f533c2b54712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51194bdd-f905-491a-a511-23fc84984797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e98cea-6b36-4849-bf4c-337ec068be76",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8d8f93-b4fd-4a90-a086-516509198a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4926705d-94e5-49d5-9826-a308447a97ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fba5cc-b9f1-406b-87de-5db03839b568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d822db6-5779-41b3-84ab-58d51002b3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9387440b-f5a9-4e1f-aa1b-fffbca60b222",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107221d2-db1a-4dd0-95bd-77de3594b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf3a545-08eb-4ccf-87b0-553540c3b790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb95b029-da2d-4d81-a5a4-a24121044b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84eebc18-de29-4509-9cf7-7939cbf60a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650fb9b5-fe45-41ed-973c-9cafe2ce25f5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2671e4-5e67-4e84-b1f0-c4b807df024f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276f0e94-d01a-4672-9c73-316b88ca8590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d7fda-c8b5-4a65-923b-c3241a92769b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc2fbf7-906e-42f4-b909-9c5e3a3bf584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10116c28-f8bb-42d0-856e-30ff141995b9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d9c938-2c2d-4827-aa61-087dfe63e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1682c42c-7293-46f2-bc93-e98458d46e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2883f37-58f3-4627-a71b-b21544040d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bd8bfe-d951-43bf-817a-07cde0e6db56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa5714b-f8f9-4b19-9b8c-dcc3bc76ae36",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e6eb4d-b7b8-4105-8c93-d12a6bbc2336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f3ae56-279a-4251-9bbf-1b3dcc0eff1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f1a6e4-8185-42b2-a2f2-246f6fa537e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a45a592-7616-42bc-b3b9-ea33a26c7e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a261857d-e75d-4c3b-93a9-89f02d19712b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6fcec7-7329-4578-aaca-c1d623b0b33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029bcf25-ea45-410a-aa54-3b4386f3d01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9993ef48-0445-445c-8036-8395901f9515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e44616-978c-4dcc-ad84-9de71b38c50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38adce7c-2280-46b4-8885-8d5cb6601e5f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4e57f0-f51a-4fc2-8b59-ce3b0c7ad61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1bb6b5-9377-4df6-8288-c10d86cd572f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda5407c-44a6-45e2-bce0-53aedcc35736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a704ff-0b78-4d94-8d5e-faa4d9a0bfd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339d097e-1e21-4907-83b7-f154dfbc6e14",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cee6511-b374-4959-8462-d22116812131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4148f85-5974-4453-814f-3425ce63ed9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f03af94-c9d6-4ab8-b97f-caaa8f9e6d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0b04ce-bf7b-4d3b-a484-0d5bffdc6bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6703f8-5f06-4ab5-8720-dafc898cb477",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83867256-76d3-41c9-9be7-fdffc588de5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff3ee76a-dff4-4e6b-8dab-51d0915e022f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6798939-a8df-4a48-a6ba-a24f5a49e060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82fba29c-c6fb-4d78-bf31-f21db64fa46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cb8035-61de-403a-bffc-05f008be30d1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe5413d-d6f9-4221-8622-6f9f55a661b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa9939b-043d-4784-b41c-a56cc130437f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc7c7cc-418f-40b6-8a98-1b522c764cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55b27747-210b-4914-b6f0-660861613d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e407aa2a-7a8e-40b4-a6d1-f78739d1c7d4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5d268a-0434-40f5-869d-323834efe78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749bed49-35e7-491c-841a-417cf9214d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab37f436-fcb4-4837-a7da-94803f07a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5fc532-24e3-4dfc-b0d9-ddb07b3ef573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798a0ed0-d52c-43a8-a593-b94285e2d8b9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400a96a2-1e6e-454f-bd85-403f78a51145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f7b5e1-0ce7-4ac7-ae11-b5b4c677998e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc564e2b-983c-45a4-bafc-d6a21c7f9ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "303a9470-7035-45b6-9b85-6a7815cd2587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9c697c-95e4-47a8-befe-000771e2f0a9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb4f777-04ba-4a3c-8a1d-24c9a990ff67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f561da-969f-40e7-b249-5478080e7c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08a2b70-3d65-4227-816d-6a83a74bc4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "91dea385-16ad-42ed-a473-958df88409a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd46dfa5-ebc9-4e17-949f-bb93f4667561",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1fec3c-7cfe-4d60-b902-c79cbd416725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6761ae0-6f56-4a0d-ab9d-eb8eea0447a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9196f91-87ba-49a6-82c7-7378afe1b7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2a19dc-22e0-4b3d-a3ef-e6b537a06a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1267cae1-5483-4127-9790-37ba40149bd6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a38890-c432-4b4f-a2bf-49812b350f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fa7333-bb26-486f-b951-3ab5a28cdc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588d01b3-84fb-42c9-863b-9fdc4347b21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8abbbff1-efb2-4ece-b492-5ccd0faa791e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1ec572-ae70-490b-bf69-030c566bb9ff",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd58018a-7602-4e8d-a8c5-04ded9f3bca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1376db7f-7b72-4764-8983-85b1ee127c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ffd626-9a46-489c-9f1b-be25c42abdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "46ab570b-1213-4601-a344-9b019f4a9b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff3e3eb-8640-4a70-80f2-66529c8fa776",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee24b96a-051d-4aa1-b9ca-82a9349b2a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6bad80-27d4-409c-958c-237424b9bfec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc20224-6417-46bb-9cde-1449f37f4294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "890e378e-b7e8-4fdb-84ac-14c2c581d8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e038ad4-62b6-4c7f-a83e-e7af9f34e7f6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58da1a5-0cd9-47cd-acbe-90bc260c8a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4d74b5-8808-4c25-b88a-1a114df086b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2124aa22-6741-4a5a-a782-5b5d7fdde4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf58a2d-936e-4ec9-8110-f12567b3670c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5e41b6-e57d-4677-8b06-a6adb1b230af",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93abeead-eefd-48ce-9fa7-f9e20f4cc6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad3eb42-387b-4c93-8270-3dcde40eee97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ce1c8d-2d4f-49ff-bccf-f9537663f014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "109c6c65-bdc2-4202-9fe7-64ffc60d1be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e25cb-783b-4bef-aeee-ad51c38bece4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531388d1-6a26-4533-9f35-fae798cbf98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ffdadf7-232b-48e2-bdef-79bef311f502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755c0895-9a4b-4877-901c-a224a1b2c857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1ef2fe-7ae1-4b97-8847-79ee6663e5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59a8d7c-c5e0-4dfd-93c0-b778ac701b6e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacef297-e428-44ac-88ab-aa021b62dc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e85f33f-93dc-4730-918a-6a80d7b296bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196a7ddb-84bb-49b9-bea7-0d36d25b722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2483220b-4af4-4a07-b4a5-8343d01f15d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2eb6cf3-b8ef-4265-9e3a-8c3098b05be4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3703d4b-721b-4b82-a3db-de6d2846ab0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294f1085-4464-42fa-86e1-d971009871c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a761d71f-be4c-4333-868f-3d5c049998bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "885ffb05-59d0-414c-97ce-49768e8169b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89039ff4-703c-440c-8b61-f13d0b293c95",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548a5e67-9c7b-4719-aa69-4dd232d298f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6937418e-d244-4316-81d0-cac97c1cccd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d14da4-46bf-4a15-aefd-ade68c87f649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa8f8da6-847b-45f1-b328-e1ccb132823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5934a038-e6f9-4d8b-993a-4b64968cae15",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dee240-dc50-4342-a5dd-45da1e5bb5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba26aaa2-d789-4a56-9130-1136ca555676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7b0c54-b122-4375-8e86-430e9fab77b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "50520abe-e13f-496d-8c12-32e11400e7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d5d780-2ab8-4457-a4db-31bb551b0db6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fdd632-9e5b-41d5-b8b5-8164a30e1de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f564cbf9-b804-4a15-aef4-70e66d0ee9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b84f20-8604-4578-9156-3343c81333f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0bee7b-754e-4b12-a943-a9cfe65d967a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ba4ea1-f741-4f99-871e-23a1dc9b8868",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cc713b-08b2-4d8f-bedb-953ec2fd4b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c62309-3dcd-4157-aaf1-9a50e0f05824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86953493-35e4-4f13-86b1-4aa4ee033779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "370c8467-8fb7-41d1-94b1-fb5bdcab1d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cddbed-0f1b-45fa-8a9a-b13f6d6eb891",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8dd9b7-04c0-42bd-aec8-05bf9f72162f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164b17c7-4be2-461f-b5ed-80bfae72a7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48aa013-8581-46f0-98e5-88b81b943af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a432acc1-0bd9-4af4-b5bb-230e4b87d6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03b5fcc-303a-44b6-af53-051dcab3bf6e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e0559e-90a1-4d95-8da5-06da078faa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96559fc7-6ec3-4ad5-9be1-fa3fc09ceed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7580e6d7-3896-45b0-8e23-e0045697e7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da62585f-5d90-4297-93b6-bd567dd2c179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49080643-71b9-4ac0-b1f2-d382db11be62",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce65734-14b7-4ddf-8998-e72601a66a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3437a3e9-2b09-41a5-b8dd-3e4d079d012f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed697728-9334-4a52-800b-89281d829639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "97159c74-c8a6-434e-ad9d-4c00fb42dd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47007a1d-7bab-44d5-af3c-90db0c56ff3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df841e9-31b4-48a5-84d2-b42f3277872a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53930e21-9d71-49d4-a328-44751edfa5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3ac438-2259-4892-9e2f-65405701619c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "875307ec-766a-4d4e-aaf2-111d9867e6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b83050-1f68-4e37-b1b9-dc872c6babb2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f791f3-bc76-4fce-9ae7-30b808facdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4744f4-17f7-48fe-a991-8d3bdc55fdae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c91153-105f-43c8-8fb4-d39268e93ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0831a156-b51f-4f58-a52e-f6c94e8f8a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba47c8-efd2-4090-96a6-0045697ca4ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09aaebf-bbf8-44a1-8bea-1d21c10b0eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6b5f4c-349c-4ad8-bd99-854450a0f732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d31bb87-d9a1-44fe-8b8b-ba109468f823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "661d26ed-8dd0-4638-832b-05e8da44b624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa00530-78ee-405b-a88a-0f25ebb569dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ef2348-763e-40be-88a0-dad1b1011be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5968b9-3b74-4e7f-bd0f-83b4f9e7b3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb330f8-a172-4d8f-b732-afdb9ccc613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "08084da6-e0d6-4bc8-8be5-dd5522bfda73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ca0dd8-31ee-4e8a-b0e0-22b8c37ab548",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a77c31-fefc-477a-858c-a4f71c558aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72299f35-3b37-46b3-a071-c2a8c1308059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228b5942-fa31-4066-90d8-103923de1889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "71cc1b5f-ff6f-4c0a-8eac-bf5fb92dae96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0353e1b6-9731-4c95-85fb-d0dae198b566",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ab5c32-b291-44f2-a562-235b3877badf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c78b60-c11e-4d20-9a85-f49f54c1cb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd7abc3-3ec7-4e3b-839a-d6c4ac429ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3f8a08-af92-4c85-9aa9-88bb779b746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a97ff0-16ed-4541-9274-ac6d152efc0e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03c0fa5-4f27-456e-98de-a2263a858462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ef6397-ce00-4229-8933-1215016010d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b54cc14-431c-44ce-a988-e8c04ea43500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4820e730-6c94-4be6-bca8-e9698303cfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4313f9-6239-4fb1-b767-53e0d90a1236",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7784dca-7232-443f-a9bb-a522346edf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d530cc44-56fb-46cd-a5cc-1662d4d4d27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d932b91-1abc-4eeb-bf2b-b77f53f436b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ee719a-c51d-48fb-b448-489963e57627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7441146e-b64f-470b-80a2-aad6d06e66ba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e609d10-c140-4331-be40-1ed406365561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f28c285-7735-4d2a-b749-2d8568ed6a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f99eda-5f92-4244-b047-4b8b72940eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e56a664a-c7ad-488f-b682-780c39ea6da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f6fd4a-a247-4f84-a42a-1a401317f31c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca513d5e-c6ac-4488-bf2d-7b6f9b637c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f41190-1b61-4174-9b82-ac0319fa50e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38763005-a767-464e-adaa-b9b55a789c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6cfee9c-a7a3-485c-afb6-6e64cb6dd70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86150468-d3a0-4b47-89ca-7e260b2f6fca",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d913f842-2676-4b39-ae9f-1518928ae18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ce6fd6-e10c-4c94-b0b4-7f08fd1b0783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b86b97c-20d1-45e1-9e18-763babbe5480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a44014b3-6b6c-43ec-903d-f4aa99d6685a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94884746-a393-4bfc-ab1b-4351ef1574a5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e4177a-cc3d-4472-a778-c16e392f1bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9532e0-bba9-488d-a9ea-33bdee8402b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e22d71f-a1d2-45fe-a268-934c92197a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b596fc8e-c473-4932-923f-76996f7b401f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d081e9-85cf-4d34-a540-5d9275c5e989",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8d945f-5184-4429-8a45-3614ee85b962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0e1521-96a2-4b61-8138-161ea389eacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd87c7a-ebf5-4d90-9a45-60323961882a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "185c7aa8-6a22-4f60-847f-59fe7db2bd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5493b374-f181-4e30-ba50-457b11d95051",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f2597d-6d5e-41f8-8555-d8bcf0b4d22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fa4f49-52d6-4f96-bf25-3b3f6db70f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c53022d-dd7a-472c-96ea-e2590540bbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39ee789a-e4ef-4811-9f6d-a91b95c7df16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f0e2f7-c252-4b09-9d75-49182b31bd1a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158225ea-a391-4a65-aafe-1a8ccd8442c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1786829e-e50e-48b6-b19b-61a8238f12dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40363d2a-ca22-414f-95f7-4466fb5c38f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c21d96-4b57-41aa-9a5a-d2b727119715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb734bb-f249-4a46-a7a5-008d552a91ba",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b838bb4b-f61f-4f73-a823-39d8c85a04d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1630bf99-d0ed-47ea-8ddd-4077644f1590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6f4058-9b28-4c0e-be8f-9332fefeba74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8781aeb8-f75d-46f1-a681-044ee78a22e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc981563-3e83-46af-bb1f-a9591c79794f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29313c76-332d-47fe-ac5e-2615ebbf731d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9d07eb-d4d0-446d-9a0d-711abedc812e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01c9b70-4b87-42b7-a277-6dbee8c3d32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "086ff09e-ef7a-4d4d-bffb-53508198849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7937d6-12b2-48d3-a926-298e11919d2e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bddbb09-3dbf-4a69-ba4a-f70973bde88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e01d71-7cef-49c4-a3a6-96aa2383257d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f08fc3-fb18-406e-9323-1e3684a62164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98eb0583-f28d-41cc-99b5-7e20da994237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1214bce-c6ae-4819-ae51-4feec8008950",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0914194b-416d-421d-b63e-6e8cdd1450fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2eaa2da-0871-458b-b419-ea3e34ec2de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d52da2-259d-4b45-bcfd-f290edc5a6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97bdbfd3-651e-4de3-ac76-7998b6088812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388abab6-c1be-430d-9e96-5062f24d9581",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83333050-3372-40b0-a2bd-cf872ebc4d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440404fc-08a9-41cd-8a0e-397640e55420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f6d358-4c94-4630-863f-ec77d4613683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22d6f89f-9efe-434c-a45e-7ff6fd7e1a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2401dde-92fa-4343-8ac4-852baff65c91",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66dfe96-08c5-40bc-908f-f85ee4312285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbfd1832-931c-4532-aec0-7ff0403690ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8613b08-82b5-4d0e-854f-36f140bf7297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98b07245-0fb3-4e14-9115-5376ff122f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eb6122-4ed8-4f02-b6fb-e3d67a912ba9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96154f93-0eed-4e55-b59b-03e363a66b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30f78f3-e915-4b3b-b47c-5de9b641777e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3acc36-8003-4f96-a5b1-d1b6be794d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba1e6cb-fc2f-475c-90b9-52f17aed07ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9c14b4-ac8a-421c-b185-726920e07791",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a425d69f-53c6-4037-89c2-acf56075440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b6f907-940e-4fe9-a3c7-92eb9e6c7604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98edc70c-2755-4be0-b465-3ce069e30eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d6bf54-c285-41c7-95f4-bae9d52f965e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac2bfbe-48c2-4105-b970-32a5611710df",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2d221f-0d87-44b1-aa34-07a67b117da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7a1e4b-f8d9-437d-9874-853530a76eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bf2630-768b-4fad-9964-05cc5be39478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "599461a8-4813-4633-9db9-f53147a6b0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f48ac4-e49c-4910-9160-530d81d2a701",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab51971-b7da-4ca7-a8f0-348edd0bdfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a402cd-fd83-44ad-8e6b-fe51cd45d6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f615461-40a6-4143-97eb-b5db724d589e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59c4162-b44e-42dc-b32b-e6098a046b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dade12-75df-4b06-a929-2d1d7c9db234",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c363af-ef1c-44ef-979d-a9504903c693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de29ef2-ce28-482d-aa56-434862dd4999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cef4217-e610-436d-9119-aa548342d2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13de75c2-9164-4f09-b9eb-2065927fe685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13b8ee4-ec4a-4470-90ca-a19e54edb9b4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4309cb97-ac0a-4bb2-9e97-69a7d72b6818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550c39ce-e28e-480a-a60d-4039cd448dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650466e6-373e-490e-9517-8bc201233555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6715ab-f211-4b93-9f34-3bef30bdf0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e90e91-f27b-4518-a087-1979a04c1093",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3a2f5b-2167-447d-83df-79e40a056a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b7514d-e890-4278-83c7-c67b64315aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9fc8e7-03f7-4db8-b7ec-6e2859a22780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf462ef6-3aaf-4477-bcbb-7b16d77e024c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bbe004-4a9f-41d0-9d17-579fee972f21",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff936562-5577-453e-9d31-8c18b725a2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c606d1e-46eb-4d81-81ab-75fd2f93f29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c463c888-98e1-4504-ab08-0cbdf3094129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8866ab-47c5-4dfe-b5f2-9c8b0a91bd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec86b998-58cd-4f77-a3f3-28349477d8a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72594127-9baf-42db-b911-aedc0ec45d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e616e1-c467-4a68-8727-d19c04c8290f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b78f78-b066-4241-ab00-a937e75d1de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1435ab88-5451-45b6-805a-159fdbb80fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd58cc15-71a1-411c-8179-32809632a73c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947a0ca4-d9b5-4002-bbb8-aa1294705931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f631d06b-fb87-4a4d-a1fd-9f4ae3073c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2e710f-6238-417e-aebd-82f1c6ce40d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc8c0f1-7dda-4411-bc55-29fa0c23f870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63468ad9-7d9a-4cf0-bf32-132f65bda3b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61e4db1-250c-4ed7-957f-3ec3419534df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195689bd-941e-462a-b993-c82cbd14b8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec042fb6-d2a9-4146-af46-6b1a2fd2c75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf85dcc4-7904-45c3-bf60-e5e9233448cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c63f4b0-aefa-4c3f-83f1-f193e161fc45",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af93876-ad90-4232-9529-519d71938b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41303f28-d2b4-4b78-8e3a-0f4e3c345dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25ec26b-f05b-4d73-b7ad-ae9f2b3a3d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "56d2befa-40a1-4867-af54-81f0637930fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b5d523-9053-48bd-acbc-3acafba67acd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e1788a-3b3b-4f76-a8a7-7c4d8338ac64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f252498a-6743-4b96-9849-812f042632c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac698e84-5fe5-4318-8121-cd3c1828d126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fce021f8-c9c4-498e-80a7-d5c0ad504e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2378854d-30e1-4a70-96b5-30b12fd3bd87",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65cf695-c79b-4d2a-9361-792e1f94d828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789dc8f4-51c2-482a-8286-2664e3221754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661bf2e5-0d2f-4e1b-8299-1bf4ab3d042a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa2fd19-c8d2-4f60-9901-29c555c60890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe38fa9-0831-4ff9-8b46-713bfb5d68a2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4178d0a-3c87-4118-b710-f76dc4c75f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ecb9c116-71d5-474f-826f-7019882c3e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa524228-3596-48c1-b376-5f44f3464dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8746e7f-9f32-4483-a198-5e20fe0d3850"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25fb7b91-43ac-4d97-890a-8bb04189e817",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bc28689-9898-47f0-a732-e5b46e1d964b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330f081d-ef7d-42bf-ac9d-281b841a8f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31dcd729-b8fc-47d2-8b81-afc375f8ac0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ee9e29-0471-4f9f-9624-dfd053ce592e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daeb76b0-db5f-4c5b-a2a0-d7d8012c3a8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbdacf95-3ebb-4fe1-91de-77fb341391c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7174bc9-bbe4-4591-a9f4-40fe29cba0f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e2023d0-825a-49bd-a179-cf67235934f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "638f1fe9-d418-4c63-88fd-52462e8c00a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0989f6c3-a1da-4bbe-8eed-f1c1e9e578c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4540dfb-854a-426d-bab6-9dfd64e33e6d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07d932a1-49d4-477c-b6a2-4beea069133e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34d8aa7d-94a3-43af-af3d-db3227fcebd3"
                }
              }
            ]
          },
          {
            "id": "7d74d2ac-1ab6-4f27-9899-c5609164f3da",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d31c9f9d-dfbb-4d8d-8d4f-1089bf342d82",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14de0a5b-b53a-49f2-b9f7-43c85585457f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61c63b55-7f41-4313-968c-863aa68caf29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9e73111-a55d-4981-8678-59766206770f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b51a347d-cd6a-4e9a-b57e-e230dacc5a77"
                    }
                  }
                ]
              },
              {
                "id": "87319bd5-6831-4b92-9bf2-21e7644976c1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b579a8f-492f-44d9-b95d-d36bfaeaa7dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26b9ed0b-ad87-4ccb-8f68-687af541cb66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e04a929-c82b-4ce8-91a9-3e74202aa5c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ea8796c-667b-461a-93b9-39061170ad77"
                    }
                  }
                ]
              },
              {
                "id": "c1aef53f-aa5c-4f37-be5a-25ebdd2d11b6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb3068fc-bb59-40b1-bda3-41a1641f1bb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e29df70-305b-44fe-b368-02b95d31fe75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2a7125a-bae8-4846-a8d3-41b7787f1ca6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10ad2a76-42b1-46d3-9851-3976f4b916df"
                    }
                  }
                ]
              },
              {
                "id": "87e65538-5057-4d2e-891b-d04e03bc5cd1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4658641b-d659-48a8-8a5f-ebeb16dcd0f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f80cb157-821d-407f-a2ca-92d68de53729"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd304e91-78bf-4691-886c-33c2f9cf90c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0356467d-da99-42bd-bcc3-568c986ae382"
                    }
                  }
                ]
              },
              {
                "id": "a4d74266-85c4-4beb-a5d1-7feeb907f1be",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10cb8caa-ccc3-4387-9b21-ec01e2b46ded",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26401d8a-7ce6-47ff-967c-7f2470641210"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e26dd65e-2012-40f7-8eb7-79428f0ee9c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "99c4f00d-44ae-4f72-a252-435b53d7e017"
                    }
                  }
                ]
              },
              {
                "id": "b3bb8f05-4e21-42bf-af9b-ca126bd92052",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efbf7233-ff7a-4f32-b996-d1bcf734f1eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f9c8350-8497-463b-be6a-eb3ac108586c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e33b603-ca2e-4216-bb8e-e9e4cfa8bfbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d559d886-d93b-4561-abd9-baaacb8aeb3a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2cf4f712-3e74-474d-b159-7562098dbe26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29382ab3-37f0-47a5-b67a-d3391ce20250"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e06ceacf-7e47-4c56-a799-c07ea74dc8d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f67f4f0a-cdbc-422f-8e22-1c3a3c965154"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59194513-30d3-49b5-a44d-4889be65b5a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dd5a9948-f582-4687-b291-5d99f08f1555"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48df603b-993e-4839-ba07-a05b7692d06d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41e0e0db-8b7d-4cb5-8164-28bf5610a912"
            }
          }
        ]
      },
      {
        "id": "ffdbbc4d-a8ba-4412-a62a-e77a587404df",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0b51a6ac-0734-4572-b4a9-3406e3b53a88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c32c182d-b078-42ea-8d74-18aeb0b87aac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a30f0549-6da9-4017-a286-584f15838002",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5675d80-e3b6-4539-ae6e-876663475be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132a95d8-9ea4-4bcd-b3fe-9dc45d93bfeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718cf9a8-329c-449b-a0c1-2e5bf9e11f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "485bf519-e3c8-4647-9e47-80a93f977c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deac89e7-c53c-47b6-b147-476e9163e85a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfbf7cd-63ec-42b7-bc1e-10646fd4a43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd721e07-d8ea-4d3a-b45a-64d8d0b1954e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af0a846-7ec1-45e5-b9cc-edff90f345fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd4ae8d-6393-4cca-8f68-1ccee3847e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dee714-73b8-4647-9911-d11e15d87a8d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0898d0-fcab-40b6-b103-77c728f2d7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aceeebf6-2932-43fe-859b-5bb54c179c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f94f68f-af73-4b08-a547-7191aaf113bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a35033f-4fb7-480a-b128-dc15add08637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305349ff-973f-495c-8d2f-b7c7aaee4ea4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aefe967-0024-435d-8380-4927eeef823d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a56b83-7497-4c39-8f65-58091baae28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e5789b-162b-4af9-a3d7-476fdaffd616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea96bf9d-1991-4f19-b6a6-351429e2cc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c390076-0c6d-4f83-b360-fd0e2443aabd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2abfe8a-3c19-493f-8a99-3a91af531eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a8bdb2-83a2-4519-9495-d6c081d54eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b40b8b-ced9-4e72-b115-8426f638fb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b00213ec-1203-43cb-9264-95abb338800f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146b58bf-d411-4616-a3d1-485d63042dfc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb715db-4b19-43ba-8190-5ff59aebb59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d66e7c-66c8-4da9-b9a2-22658dc998e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5279535b-d317-45b6-ab4d-8758cc6940e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9fd6bbc-e1f3-43da-9774-cacc53102934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3366d27-c532-49ca-9d79-2b2c37afd673",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938e4613-2ddd-432b-b2a3-d22fd3e1eb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b165fb41-cf39-4ce9-b91e-136dc5f80c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421ffcb1-b080-4d36-832a-efaab79691e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7488256e-0809-4dc9-93b9-c1f84d8c1fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382ba59a-0396-4004-b590-8f7aba24834c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a479e002-ab24-4a88-8f16-8408cd406bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dd6b19-43a0-4e16-abd4-0d474dadeae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54fc1cf-995d-49d7-8d88-1707f9eeddc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "725595c1-0366-446b-a083-3134b71b18d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3245742-be66-4107-8c0a-88b2e44ac0f4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280da73f-7459-4d1c-b494-655039b22ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea43c6df-43a8-4c1b-9e5b-bab75576c843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72c8e40-675d-4143-9807-c862791fe512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f0b8e3-3ea2-4143-9b35-d877dd919f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c9a0fc-610a-45c9-afa4-e7acfce44ac7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746a798b-7e74-49e3-abff-1e1b7ed1c2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2faab9-1ae9-493e-9dd4-3393088e6d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d25925-d6ae-4b16-a77f-bd7e7e59909e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad293d4-025c-48d4-9106-fce1ca9f0125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98c71ec-a498-4951-a6de-82baf9ed1757",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3613a78f-8561-4099-8748-ad5efd37d7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764f0a6f-af72-49f6-a5b7-9445ab4ce88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a52b67-9d67-42d5-9286-fc584b0b4c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c08f3de6-35f5-4dc4-a137-79d1fd3d57e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df427bbd-a2ee-4922-b96a-cb92823ffbc5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935ef69d-f0e1-4f2c-8079-b9018adbb97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4a9cbb-ab13-4f12-8449-4fb651b30c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2e0567-4b97-4468-9f32-1a10785a6454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed2bf54-7afe-4751-93c5-7be553f7e7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691461e0-b06f-451a-a297-4ad447b58ec7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf86ceba-7533-431a-9478-f4997d8e6540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5e2a2f-f7a6-4041-a600-18defc02ecf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824fa454-cb18-4e0d-8a5d-b53573cb5689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03bfb108-3b87-45d8-8992-357aea8efc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce9facc-2ed0-4f77-b587-536f0035c68e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ac6615-822c-43a5-852c-2052b485ca7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15243bc-3539-4b5a-801a-a04ba610a54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7523f6-e8d6-459e-96d9-dac0a98e951c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e57ef66f-acd9-411f-a454-2512d363897d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731fcb3f-4932-4b98-974a-ec42485542cb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b8d081-b9fe-4f5e-85d1-2804da3d2b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abf631d-fd97-4fa3-baa4-d1d71fa1c9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0824766f-f97c-4aa8-ad06-49a4faa2ffcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbf546f-ac2d-4f8b-9629-ed59886c8c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3758e74f-6662-4b72-8101-b52a10a6ebef",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435cecd8-df6d-4a64-869d-63218afb5212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4440ef3-cf52-4d73-bfd1-e70126d8014b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abff3a5-d533-493b-8952-5fa5fd34d1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9b9eb5-3f38-474f-8672-ab21d9b5bd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b030de3-f43e-4d3c-aa61-6f041a13195b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abfec15-99a7-4231-999a-c64966187e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5f54e7-e498-4f5c-b8be-f648dab5c2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f0517c-ca5d-4b7d-9a09-02962b6c3676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3fe039-c253-4fca-a24a-f2933ff23de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54f5a5f-2f64-43e7-a2d5-a839a20dcac4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6ec3ce-a205-4d6a-a54e-d84bf2da4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8c110d-24e0-41d2-898c-d104744c1628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43655352-2b72-4fc1-bbad-546e092ee076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2846b700-0dcc-4d32-85f8-c441c65fd30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59b6557-bb39-4c6e-9b32-651a38ba6faa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108e9ad0-d8e6-4533-9a4f-27616f49ad47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff51c088-3f1a-4d06-8319-bea92079ec3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a691096-cea1-480f-84bc-eed526c7cf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54613043-5ab4-4a34-9943-8b2c1b05a161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6987676f-fd32-4a0a-b0af-eba66159bfbf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b84c98b-8de8-4dec-b1d8-9ceb68f94b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6152294-9242-4134-9d24-fd889e27de0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f438cb78-a17d-4a1b-aca3-87067e93ce93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "674f76df-659a-4846-b05e-75145cfdf9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051de52a-0ef2-494c-a1bf-4038cc5b79f9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010e7ef2-6ed2-4e0e-bf80-fc0db0278adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a13a10-187c-4105-99a5-5fbe196a15aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c97ed36-bff2-4f6e-913b-594ddbca6120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9407a1-bc7c-462a-b553-5d829314d4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb581a4a-bf86-40cd-a146-10a7c2fca4ef",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a126a700-b267-4084-a721-14df12865233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0110cd-c43f-452f-a9c7-5235d65749b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d6475a-cb35-401c-a592-2f0af1394fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd54ff0d-361e-4279-a648-a9acae482759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11145e4e-b7c6-4537-a88f-d364ecf3977a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3525c1-6ffc-425c-8462-8d35fec0dd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71e957f-51a4-4aed-9bd6-fdb9173a3a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06f4b25-dc61-471f-97bf-edb45b547583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c00ed2-bb1d-4ed2-8c9f-f7ca1459fac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffe90f6-e215-4549-baad-20994702e923",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c931b4-e9bd-4da1-8eaf-0e837f34dc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93f0483-3691-456f-bc32-581dfcd4070f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705fc1a6-bb3c-468c-9c54-fb66b6bdb5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0936d5-cc0e-4de4-b791-953a1b41f597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d7646-e184-44f5-8562-f87c0432f11f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed6d22a-09cb-4cfb-b752-ca354a60735c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430a8997-d924-4bd2-a28a-2cbe95462570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2a8a85-6476-4349-8408-fd7fa0436245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8513d1-ef63-4dbd-9959-7ab1b77bc31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fb7717-935c-4dcf-a85f-2d4c6317ed53",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351756df-fa29-4103-9c68-932d694b3c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568170e8-4737-40b6-9a3d-c795799da58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b67675-d615-4486-9318-38ec475d1b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c28ec26-3376-4ae4-9256-0a4f85a2d005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a94c64-c712-49eb-a938-0b6b811dfe39",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84e2cbd-facd-434a-8ec0-8e52c56250ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc0b137-36bb-403c-ae4f-21f5e68223e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9176b9aa-3277-4cb6-8b22-0a2b4a2523bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "924d3504-e6eb-4909-af18-3149edc33f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f275841c-2faf-4d0f-8dec-5d26e8f49cb3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3c199d-1218-4861-8c6c-6c7e9105118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d31e0e-d390-4377-b282-e71b53018faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f6b1a5-e25b-4889-abea-a5bc9120f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26191cf5-9f43-493d-aa9b-685132fd1657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8f3630-41ec-43e2-92af-3a35df5e90dd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f77b81d-510c-4dcb-bc8f-4ef7afef94b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6adc0c-1f23-4e27-9838-bfab64816ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f33735-2d30-4d8f-8e7f-e20f989f7825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "720309bf-d683-4442-a581-7fe3a50e280a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba7c5e3-78a0-4b8e-b501-bb092cf2fb42",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3d33af-2e4b-497f-a8fa-d272a44fe954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d90f8a-1f93-492a-ae93-20ced7be7d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c993e-4e17-4658-9242-80de4da11dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e487c4bf-a58e-4322-95f6-61e56b28c7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1f02b8-6c66-4919-9b86-8469ce68d8b4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5e6f5e-5c99-4bcc-acf9-2c04dd60cc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3909f7-bfad-4296-9b66-ff7a196ef99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcdfad2-0de3-4482-82d8-6b36ebf4e3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00c1391-d0d7-4697-9a5d-d9bb916a3b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bebb58-49a4-41c5-ab29-1430d035e2ce",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234c734d-36a8-42a8-ac69-33bcdafd254c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c81c48-77ed-4bfc-9c34-da68b30c204e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe8dd6e-62ce-4b1b-8325-17efba7428fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4303d498-66ee-4cc1-af96-1de81d1abe98"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42f13d31-93f2-497d-be85-e976a5b7fffb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec5081f1-f16b-4c88-a839-709697147115",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd22af63-ce3e-45e2-8445-435fc6864bb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5d566f97-0483-4172-a1da-869c517a702d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3d9bd8-e77a-45fc-bc5e-e40ffa83f1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51d2e44c-8de8-4293-8aa7-a3b635a0df1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b593b3c-e966-472f-a2fa-2a3407013fd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c05f74b-5165-401b-9739-fc05fe161ef5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eceb759-91fc-4b7b-8a74-b3db7373ec6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "033010c7-ecf3-4356-a5d0-0687ff6ed2ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02e3bd94-d72c-40cd-8bfd-1a164966b52d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbfa0489-0aa7-43f4-94f1-ae3d520b91c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d30f016-d5e9-4c3b-b5a5-6985b5f29243",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ed61140-4a90-4a80-bba6-1cb833d6c101"
            }
          }
        ]
      },
      {
        "id": "775d6ee5-a559-4e26-a70f-1a7ea3495ac5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fa93b901-9a11-4c5a-a698-7969fd07f20a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26b651f0-5e2c-4603-8fa1-0bed2382f888",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03560854-4952-4663-aa94-d4825871cc77",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac451456-24fb-41fb-b6b3-c23471d79d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960820f7-51bc-41db-96ee-e8e7277d7aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e46d578-ad7e-4002-9bb7-eeec762f1e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3c5f93-ad0a-4913-81c8-e20a3ca642ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89458282-7295-41ae-becb-668a5ba0b13f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbeb98f-38cc-4e37-8c78-13aa833066cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14375b03-a836-4942-bfd3-348ade5c43f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209123bb-3097-458b-83f6-a3391b057985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e899ec-59e1-45ff-a302-bfe6f7c8d497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09200eba-b322-4b31-a3b0-f4ac0751d8cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7862b53b-68d9-4dcd-8435-69fd7f2027ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd89f6ed-b24b-44e4-b165-bca9decde17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25350856-4332-44ce-9c66-de4168423fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35e933c-d9ae-4012-b878-7ff12e04da0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99db9e3-1375-43cf-b258-479e93d0f704",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e652d88e-024e-4e31-b6a6-16a6117e1baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d01887e-bc62-4fdc-ad48-ca3cca9751f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a530fa-a93e-4032-a5d2-4513ac195a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ac84b7-acad-4647-95f5-a3ce4a84abca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bff941-69e2-4223-927e-950902bbc566",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db1cbcf-8f0d-4e64-92f8-e40430e3f3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a4dbf7-e8c7-481e-8e80-231800e03a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f093ff-34db-47ee-a406-309fdb9788b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e152facf-6528-4069-af2b-c8222fda1e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cb41be-6c66-4818-888c-4b0afd2a37cf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6bf1b6-d355-4dea-8578-225f48ffd3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9feb5748-f881-4eba-83e7-bc54435ca9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6626744-48c9-4769-b2d6-aca2cc7c33a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "161f9b1f-4d13-462f-b86b-4a5c5f3cf945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859cc7b3-d601-42fb-9a14-d865eb0ac95c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0461fba3-8af0-42c2-97df-9d4d729053dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572020d2-9280-49a4-83fd-8587ecc91691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98b0e1f-50f7-4aa3-834d-3c5df0cd22ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b21199-67a8-4632-8299-bfcbeeafcf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c8dc1d-ab57-45ec-a7f4-63625f80aa26",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bf0495-a9ae-4bb0-9073-7aef7a02d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08f7598-bd5d-4eaf-af80-d1046966cab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7942fee3-f618-4793-8d07-d3e851b97ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "229404e1-de6b-493b-a199-77a45da64ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b5c38d-8284-4db7-810c-e24a7940c9ea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9711bd70-a3bf-40b6-ab68-bbe250b02a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02779900-c3db-4f8c-af3e-17d3473b1117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cfd67e-342b-42e6-994b-345bb4062930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db7ec5c-1b9a-44ab-89ef-291e896b4559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82caf456-0261-4e88-abb3-08e58fb956ab",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbfad13-2e6d-435c-b846-c94fef167e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06ba3ce-f844-4fe1-9079-d87e668c749f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7390462c-926a-44b8-bcbf-8755e90aaf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3f2986-e068-4f72-b7f2-268aa6f4ee51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd51525-1df3-4005-8738-b39f6c4433dc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b202b34a-1b7b-48f8-b6c1-8afc061bb470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a9d392-1b24-498f-a452-b5094676af14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23a9852-956e-4ecc-94ab-db7f0e9be907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f734e7-3063-443a-87df-b581dd044902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37aef8cd-02f6-4e1a-9c02-5c9a134c6256",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d548d8c4-d5de-4b4c-8437-1c9c6bd3dd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c50f36b-a8ac-4b3d-99c9-0c16816b179e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d916335-c44d-4d51-bc9d-6ade2b434079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a770a69-4c97-4d40-bcf4-5da9f66442ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9c8a51-fcaf-4b3c-ab6b-7a2a882c90a6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecff8bb2-4cd3-43c0-af31-1babbfc2d8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec938dc-8479-4d9c-918d-6657e65e55b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6458c7-b768-4fe6-9dd4-10cd2ce57a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99208438-aaf0-42d3-9644-b37c23329dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28909858-7ed8-46e6-9d05-b35dcc8d9d50",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24918e6c-ab05-4089-8874-2278f3581450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a56675-be23-44c3-8776-c3548dba01f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d9a3a0-e607-4288-b6c2-bb5658160584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "835825bc-defc-498d-8bae-6b73e8a6587a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99995cb7-f007-40aa-94a9-27833e28c9fc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5813d91-b075-4b30-9c89-f4951490608c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a5b9dc-4a89-431d-802b-3949ff0bc889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad864f7-c17f-4915-b635-c0cf5cc94244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "26fede22-72d0-4fce-8072-c7c3931a8eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0213f137-60b0-4efa-9d9f-aeb209746b77",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ec08b6-d5d9-4f32-91a9-04e47f2bf14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0794d1d6-c08a-40f7-992b-b7c8e959e252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7558dcc4-f516-44cb-b6d8-4a1c73a7f855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9413345-51ba-4973-bceb-1eaca2e2ccc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71313c2-f3be-465f-82aa-1a48f0516d43",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd92de09-909d-4ff0-9153-dbbcce31183a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949e7ccb-c086-43bc-9788-d07a254d2bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0413b3-446a-44a4-b926-e04118a0d7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f70e02c7-0329-48be-adf1-6324854a9b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137d3409-ca75-4538-8410-d9163b75ba7c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f63a2d4-f3ae-42c8-be86-12e48ad94d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e129570-e0e2-4af1-9fb1-fbcd49ed427b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b22d02d-e09d-4dae-b421-bf5f07cf4d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "655aab54-1163-483c-b162-1784ab661e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6e86bd-91a7-4f26-b7c0-f3736c9cdf77",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9fbfb9-d438-4a21-abc7-0ea4f179a202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b345ea1e-1376-43f1-b2dd-62ad1f0c7465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f957cd3e-9a77-4b99-9d74-95bfa29aaaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5716cd-ea86-4ae0-b53e-fa3a72d58fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9db0c7-0199-4ce3-8a13-740acde3dbf6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076c47b7-f9d9-4b35-9165-f4282a59b279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f3b3ea-faf6-4f95-b579-ca2602fc99f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0e318e-f61a-4857-874f-c2b0fb26d047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b793d001-c7cf-4039-8c5f-bda6bd1512e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73da7f6c-f998-4040-894c-76a887f414d9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423c712c-f65e-445e-914e-d71bb15da407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78810f9-c0c5-4a92-be0a-45cb9e2c2780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fd355b-38fd-4778-8557-79b97e8f3f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8b48c0-4a9b-45af-a6f5-5f22e2d9665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606340e2-3b16-41ff-b5f2-9d5aaaaed26b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b63e4a-61ff-4197-8ecd-5fd63947f0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e52fc52-ba85-4899-96f7-5d07ccb31f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37552603-918e-42c0-ba69-5283fc1101d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92946114-6221-478f-9c02-e503690afbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33c8172-7e31-4bea-8009-19f0de5524bf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f0000d-5b22-4f4e-ac85-fdf063e33e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb0aa86-d4f5-4812-8bbc-a1ae56f74bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea43cba-45ab-46bb-8eac-453b36a2a4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f41c22-8439-462f-aee8-64f2b722bce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4994a153-2baa-46f1-8f60-29643c15ee3f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fd92e1-73f6-4035-a2b0-13f7e743803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73913eec-b742-402f-b3d5-4f64f9bb9b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e790258-8546-4b7e-a896-13ffbdd4d0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb98026-91e9-4e19-b970-ae1acfc4752f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4948d0a8-0295-4abd-a8ae-1d857157c67e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cc1ed6-28a4-46c9-a476-fc79661bb0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71568b2-8255-4c8a-a9cb-68863a7b28c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6287bbbc-4cbd-4259-951f-51bda0cc3eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0abc25ce-f133-40a8-9b26-33a98c07ad48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ef42a8-a667-450f-974b-9733afc67568",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e54b01-1c20-4918-9180-8ee4460b8a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2960f0-87bd-45ab-9891-f6151f3e4ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb27c1-3e86-4a29-9c30-a2949297e5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "021d039f-cd81-434b-acdb-584c94526bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3ac5a6-7b77-41ba-9a0b-9a30559fdcd7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59d0b34-5c60-48fe-bda4-1b416f92ddd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b739a071-fb98-4cae-9e2f-a1d42fa4e840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe65a627-4b3d-40ec-bcc7-84175ff801f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6fc853-80cc-4e5a-a075-ea457e434103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f04278-68ae-44bb-9f6a-cb89056b9495",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f573396d-f91f-42ae-929b-52e8ac02148a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97760e6f-fbfe-4ebe-a4e4-4510eb89d22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3af3556-8428-4418-96d1-fa817fc694dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f569b2d-2f26-4600-8985-bbc4ddbfff8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdcb1f3-7d38-4984-a428-b6da469bf6e0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8329a72-6185-413c-8b58-ab34f26c7091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ff8661-7cb4-4fd0-bbaf-50e00dd2a3c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915841e2-b963-4f9d-9e8b-a194dec773e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2e70e9-03d1-44e7-a68e-908d52cb2093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9590a6-a0a6-4a35-bb86-7e024354d6b1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed55aee-79d7-4a0d-86e5-752a1e663df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe2131a-0f1e-4635-848a-eb979d49668c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be10f85d-aeac-4815-b01f-a3e9fee7a9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "061a5986-0dbf-4105-b62a-ba1da1ddd694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b54d8f7-baf3-4f8a-b740-4afd3547df89",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b11f2e9-1c96-420f-a8ce-414cf5ce04ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d75fbf3-12cc-4a81-b8a5-be3eb30713c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b7e0de-093b-452e-929f-eb6de97d36f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e2d3ba-570e-4c44-92de-0cf06004962b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383ed012-43cf-433a-9063-7a176db90935",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6974647b-58a9-4b74-a5a2-c16ae915074d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33a7b25-b54d-4fb9-b5a7-b18ef277b97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d287128-cd10-49a8-adc9-dcca339f77d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab9b431-9312-484c-aa09-74fa912ea5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2aafb4b-2aa4-4225-9b1e-27928079b143",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30490ae-914b-4141-82c6-402daaa13c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7693c427-92a6-4510-9265-d124aee099cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23489eb-ce20-4ff8-b9dd-6ad96a68f6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca2d265-20d8-45b4-8bf9-67a37029fb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb47ae83-4c36-40ac-a505-dfee661952de",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b2e8b3-0427-434e-b52c-86b6d54aaf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920f02d1-4967-42f3-879f-a8e7306e1a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458c1b9f-b718-4d89-a0ba-ba2d0516d7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f703b1-865b-46d5-8ca9-b20b0ec0983b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3c181f-2dfc-40e6-b804-c81cbdea4e64",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0611e85a-de6c-404f-badd-947dfd0a6ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284ee605-922a-4132-b580-73e1795b445c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bab5b06-de49-41a9-92a5-cb5cf2cb1651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb60909a-54c0-4756-abf3-08d3a8021b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25516df-0412-41f2-8e76-5aa66a3c1831",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb19a30d-2510-4b53-a088-81197609cf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a218b1e-dfd5-4d9b-89ef-096585a5e4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a04391-b007-4f98-8431-3e5c2b52c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9e19b0-4662-474b-bdc7-54c3e70e6da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d466cd-95b5-4d98-b56d-c2f58e9a895c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26690bef-0e2a-45e6-a4bf-c73ed688c813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab93388-53c8-467b-b29f-dc529159a000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f503d2-3e28-4840-b958-1ed0a5d33ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c32983-03a7-4ab0-a3bb-82c1a5d63d99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e09bc5a-51af-4747-8555-28ad6f64fc35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a54f2b5c-b870-43b6-b946-7e01a8b721d1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e5f631-ec5f-4509-b08c-0f9dc8c65c1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5d36be-1996-4fb7-bd02-540ccf9c174e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81342ab-40bb-41c0-b209-5808f698fa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e7045c4-9a61-4742-ac32-f53fe2f55421"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f20736eb-8476-4b77-8621-72e4e85d5bb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f686705-9092-4d18-83ad-37a665aed5bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f6b4adb-0fdf-4be9-b0b3-14725742564d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b5580be-22da-459c-97ed-97f9c7b79dec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e20818c3-78e4-4a59-89a5-9599bf23810c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ba78c39-3949-453d-ae6a-206c1153ca70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7b207c6-17f0-43ba-af5a-e91df2e1d013",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "123f0994-89d5-4f27-885e-0235621bacb4"
            }
          }
        ]
      },
      {
        "id": "4a408356-0e00-4d81-a3db-da2db888b0fb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e413e8cf-724f-46e2-b29b-07b3d5888247",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff3ff07d-51e3-4a73-a46e-ae93a3bf704e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e0cccc8-7bcd-464c-bdbd-d1adc7c682e3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeefe6a-b372-4cd1-8cc9-1b33ed709b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83cbdf1-aad3-462c-8cc4-bcf4d299a6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1092e1d0-3b36-45e3-adf9-4d348769ff10",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb01fa1-d7a1-444a-b8d2-9bcf0c0345d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c39548-876a-4601-bdb7-f4260c474309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb77dbb-0b42-47d4-bcae-f0321991a08c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7917adb6-d151-46f4-8f11-fd0a84075395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d273b89-02a0-479e-927c-e363bb7b309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5221508d-3277-4921-9093-61a40186e5cc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20c28b5-c911-4d0e-af38-e90533e70fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617933c1-2a92-4951-a1a7-570f667c5867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d73723-de67-4611-a891-3d7339f3692d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3796bf-45b1-4345-9152-36637f854a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1dd413d-e268-4721-b7d5-ec8d583199c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690e8858-b856-43df-aaf1-748f2dd0f598",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d322215-93f4-4577-bf7f-cb4888f4f165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7d65dd-4cce-453e-8731-a42754ea2655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd2bb1e-9143-438f-bc3b-2111304568c2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5161c4-45b5-4b87-895a-24dccb37496c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68c8549-1df8-4d09-9453-ecd70f06d72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c95771-37cd-4049-9d08-d0bc5bfd898a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52310199-42a4-43d2-a7bf-b712931edce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040896b7-e16c-41a3-bc26-a50c18245ae4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b29d57-da0a-4ec8-8b64-869a4be1ddc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12670f26-c408-43b1-bba7-402dc299431e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d7fa19-f71a-453c-b74c-1406dd845c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4597f8fd-3615-4eea-ad8e-e402c40d386f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a957c3a4-8a88-407e-b575-f2b74dbc8cbf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad4d13b-bd78-4a09-9d5a-c0e9e9148d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f2ac079-dc7a-4852-aaba-4c50a2f769e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691d2ee9-ec25-4372-9f03-51e8f17e7073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffbb4342-d52e-49d4-9501-e78463285cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee818120-4e0a-4491-8199-a933a9b748b5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e3f0c4-4122-4af3-bf30-cba4f0b7c682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb55bbe-5b1b-4ce9-ae2f-07eae36a7de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb4e39c-0b12-4a5b-800d-bfb3715e7af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d34c051-845e-4bbd-b6f5-29c0c36eda1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb922115-b15f-4fe5-a93c-1a68b5525d4e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9cf4dc-53cd-4d06-946b-227adb66f2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66a2fe3-bdef-4459-a23a-d70374a62c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bc5790-be9f-42d8-965d-f25ecd81a6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b08f73f-e46d-41cc-bcb0-d2c9c475674a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2733f5c-ce9c-4eb1-b5b6-1bba4e28f115",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354c92f7-e3b4-41d6-91e1-1986b0fdf782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932c003d-eea7-4342-84ad-95f6891c20e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e43c7d-55bb-47f9-b092-245eeb1659ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d0613c-a102-4a40-a2fd-b71a55e357b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e3a995-bf40-4447-915c-53f552b41711",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52aa0a1-ee7a-4e14-b10a-1b3956a6b310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5328dba2-9208-4d38-8e19-b0d8f3e2d15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd74a8a-998b-413c-9595-bb2ff028058a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3a1376-cc88-4ef2-8468-822d142ffb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e17b1f6-a0ce-4fc8-bf73-bddd7aa9bb37",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71efab88-f6c8-49a3-8d29-9da000de145d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e855fdc-0804-4c43-9cad-0e6959498d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c31a889-8587-4ad7-b140-c179119c8e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe16967b-46cd-4a81-8331-53d398566f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c5b06b-2745-4798-a95f-37f91a33dcbe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10579709-40a3-4f29-9f65-580c149e94ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb069cf-855c-45cf-9778-5a4d3c0ded8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016e4a99-9126-496c-8ad0-4fea0c427878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f012ccb7-76d8-4ec8-8e5b-065f420f1a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3eb220-5d05-4bb0-b2f8-25c8fee42c52",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10716f05-6714-4983-a573-88011055445b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07f1835b-5ec4-4a2b-a733-69afe73a546d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cec2999-a41c-49f9-9015-27af27302ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eec94b2-3c98-4c87-beb0-cb819f75d105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8500679-d217-4add-add5-1b6b7bdc1015",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f980a618-208a-4a7c-8e6d-48651395479d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4f1bc2-10bf-4bec-b27c-80010b5485fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d51cc02-8717-4c0d-ae12-0d73164734af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcef2516-de60-4273-96f8-b6f062094331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dd58e6-483a-4c1c-b360-672e7a53ec31",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edafc4ec-22f1-4dc9-9bdb-f1156fca54bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7324f330-1bd9-4ac1-aed6-026da8ce0a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb7ad6f-a86a-4803-86ea-69ad1af8335e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd1764d-1624-414b-9974-4717722c22e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026258e8-a1f8-4d7b-a264-93402f1b8e4c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421bcf7c-cfa3-4235-9ef9-c1cdaad22267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd76e307-b5fd-49d8-ab33-0524abefb91a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd717707-6753-46fe-9124-abdb0a40a06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef80761-5e8d-4f52-a66f-230404476110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1bcb23-565d-4147-a007-052f72d76d4f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5ffee4-320e-418c-b4fc-fe37165b5705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824f2871-64a5-41e8-9524-5513846a8583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd63eb9-6e01-47d0-a910-faa9b7fa6c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8744b2d7-92af-4211-bcdd-447f6ae829f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13fb2a1-0ca8-4485-990e-1e2ee0fe83e1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9d865d-765d-4b19-96f4-5ccf73baf2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a831863c-3644-4581-8b09-0c791f769c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e02cd41-ffc4-4c7a-8103-d300fe6062f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1121cc-8e5e-4214-a620-cc7d56a5cfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ea3a3c-3e3f-40e4-a9e1-ac4ce9600497",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c546130-2af4-4bdc-a045-0f601fae0713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a640eca-c9e8-4a27-a163-5f8157cbc03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874a32f4-df10-4ab7-909a-adaf576c554c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d770c39-84f8-481b-973c-65a342cfb9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dbdead-52e8-465d-8435-2922046c74f6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338eba77-a233-477e-860b-1705a12efb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4cba3a-ecd8-437f-872f-185d654825a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd90e9a-dfd7-4465-9f1c-716d556048a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80322bbd-0376-4a71-9f0c-0faf3e2dbe3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a5758d-b601-4da9-bdae-4661c4f7b5e4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb2a62e-d9cb-41a8-805b-de498895f1c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0dcb31e-fa69-40a4-a311-530cb5d1de58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa79e52f-85b9-41c4-a5a8-6d74e8da819b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edbfe7f5-951e-4c9d-a610-04cca319d16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595447a9-6414-4338-a4ea-df526f58fdc5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e09c2c-d54e-4a24-915b-6c74e8ce46ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0fb07bf-a951-4371-83e4-d823c3c7c796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3192da6c-02af-427a-9577-d46c5314a91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84b701b-e190-4297-b4b3-40f90cac2df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d474177a-908a-42be-b517-a47974a22ea7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c9a638-4f3e-47bc-94d7-2257635694df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c24388fa-1048-482c-b785-bb7f3d312b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c8a7c9-434d-40be-8ec7-ec8ceec3a63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d204c3-af6d-442d-8891-5244ae1e74b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a927c579-8515-4dd3-a966-97737f655e56",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985ab34b-e1cd-4dd6-a301-d235e3615967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbeda567-cbe9-4676-ab69-1e8cb468ea28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe2dbab-518d-4edf-905d-102ec63f811f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550c2469-e100-4658-853a-18f8058ae152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73f69be-eb2c-4374-b23c-4777feb74074",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b33464-8334-46c9-914c-cb15f197d97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6812997f-8020-4664-8b7f-8c0569a0f4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237c4a98-8de0-4fd2-8668-8d0fd840043a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f731ded1-b708-4bd9-a0cd-ea3988d69e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c9e662-0523-4271-b023-151e2b6a9c43",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95792c18-76d7-4c13-8d21-9a58de567650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba677f52-1184-44f9-a2ae-55150c73f8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d890d2b5-468e-4a2e-baf6-9b42ae2ca563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e32f14-6014-457c-9cb0-4588b296e1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f44e099-ccfb-48f5-812f-a8c84f574877",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71a4742-ef6b-4965-9cc5-564dd84ad881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9685e7d-74eb-4ca5-8dcf-93a49d11d19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c2d3e8-9340-476e-8b65-085b34aa5edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c232cde6-3295-408d-9614-d38c3eda6e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d598ae17-2efa-4c7e-8e1e-00e72aa359af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2051cc-0ac2-4183-9d48-e2ee293006ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2631ad35-d351-44bc-938b-e2fb527c5d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30659647-051a-4550-aada-32769796da91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387b0217-a4b4-43ba-b829-f40ee40bb58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb54ae56-58c5-4070-8cd7-46cfec075121",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a7e04e-729d-464c-b62f-fda552487954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401f7546-a309-4a73-b73f-b617abdae1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8ad373-77ef-4a3a-8921-531d726d6de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65841ef-07f2-4f22-9173-d2fcb82315de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcc7947-d992-42db-9a7e-6ea4831ed019",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec495084-6c89-40ad-bd06-a7ad91a067b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f53be3-334d-41e8-8e8e-b17ff9a479e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf7f76c-75be-4fbd-b7a4-ef0d2d02810f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055b81c0-f84a-4692-9e85-67e39b2c5553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df935de0-a29e-4e30-bad0-df5d6307797b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fea4345-7b48-467f-9fc3-94ddaf059042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "149e9299-7dff-47be-8615-b9db2949f6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f217fd-dbc0-4707-93f8-e9e43b402b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322d454f-9874-4134-91ef-a3cc8528630c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5893f7a-1c32-4693-992b-a03d31411327",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f879f9e5-7d10-45a1-8379-f378fe2c6c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f79b0d-1097-47b0-8f28-1a6e38f40483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55f78a2-85ef-4b32-97fb-68c433597577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a29d28-9410-476b-a441-4e8d9880b5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b688efe6-b192-410f-9070-84654ef9d247",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5764acfe-5657-4805-8165-88024166b941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe88ad19-66f7-4a41-b3f3-1559d16a8aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3ea0bb-09fb-40c3-893f-fb291f9e8928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d41f598-c61b-4504-928a-7e9898732720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141e5fa1-7c5c-4851-96fc-9412b9695f05",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410f1ff3-de53-4dbf-bec4-7d5fd8f094c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcee0e2-eee3-4145-b833-fb9270934ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80acfe0-79a9-4c7b-8746-9cdf8a52e234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7c45e3-3f40-440c-bbf0-abe674ad531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf7a149-a119-4013-a0f5-1ae44bfbd62f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab815ac8-a4c5-4efd-9aa8-6203d4d3dbc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc141103-6a69-4b47-aee0-4e3219f5b09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2709f58-7c6e-4821-bb3e-15dbddb5be0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d219931-d897-488b-85a1-54eefa0b8f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5ce37f-44ad-4161-8a6c-a160ec1d3165",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab15339-4844-4856-913f-1f9e08ec7872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd8eb9f-6594-4cab-8296-e0e8e47cae4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d5db67-235a-4b59-a561-fe038ebf480e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecc8e67-c377-4e47-a38a-b001fec351b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf66c1b9-ecfb-4e7e-a976-d60d8a04fcf5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c88cfaf-58e3-498f-99c6-f8d09952f7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130aa577-1968-4e96-84a7-571a21d4b616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e310b0-1fc3-48dc-8562-2fe34fb17c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa466acf-2de8-40a7-acd4-61f790a130d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd0bb5-0d76-4dee-921f-b65951fd1922",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bff8d56-1e01-46b0-b923-ec2d08d9442b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329e0233-64f0-461f-a281-67fc718b64cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44b4a74-3fc1-4d76-b829-a53aa4417568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75908bb9-7090-4807-ac05-cd7606012cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bd741e-e9b3-4eb8-aa62-bb16d844d152",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23c6481-aa59-4b9c-8593-c63930b30ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30289f7-8d79-43ef-be77-04f864c50b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1acd74c-4886-4789-b6bc-ec98870f05cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a353bf49-3b65-4ca0-80fe-4c3df7c78b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4587aa96-8db2-40d2-bce7-1643fdf56a4d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e0bc01-1d0c-40f2-a87f-b6e532069265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce4409d-f1c0-4098-933b-190104a458c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f71b58-4653-4191-a346-734f920e9178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93059438-34cc-4a7b-8517-7452e5556d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd44ee4e-26f1-4401-9998-5214bc38abec",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7409f34-37a9-4990-bde2-6d60674df8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b2e944-7b30-4f13-a75b-20eb27227327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605ac9a9-0455-46ed-8e79-34ebc72e3f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f866bb9-ea98-446b-bee5-2e0a94eab9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0296208-2213-4908-a772-c4e6fc355651",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b174880-4718-43f4-9bfa-3b37592a23a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b87220-9069-4135-be78-ce37aee25eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e5a69f-4783-4e96-96b1-a5c731e28746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76550411-2bda-4638-bec5-f4d83b0d132f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e057a133-298a-4cc5-8f0a-51f642bafa3c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487fd706-6465-47e3-872d-1214958b2a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d445a73-d879-4711-8b0c-26c432cce2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bb9eae-b23e-4914-8c4c-23567ad4474d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a299624-9810-4f20-9933-6b3f8d0ffe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90739828-ce66-4176-b3f2-e2fc804aba5a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23790f56-5094-4905-93b3-ea3e893e79a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e13d3b-7f3a-471c-a355-00c24b5c12a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9656af87-2f79-4d3f-a07f-c28f8092b0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c201162-6fb3-47a1-bb35-8d996d228e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e58cb4-5c4e-48e8-aed2-320358aa371c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d370da-abf8-46a4-bbee-cba3562a8cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79519c37-d02c-485f-b645-70fca49286ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b83c53-1896-463f-b405-0ea4f4e13e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62706392-2909-4a7d-9c18-efad423cd8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac9c28-74a5-4717-ab3c-81fe3190a562",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280b8860-f9be-4071-8606-97ccc4e5787d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bab8d7e-b615-4011-8b17-a14a814560a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570a4c6d-c0e9-49af-8e11-2ddd9c2b74bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89add565-9239-4024-b8f1-baf5720901de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ab2922-4bfd-464b-9530-0b1c1681f7f4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87f2128-0a47-4d90-957c-9e411ae74539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a19c1c4-6e73-4416-955a-c383d8c389c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c79a03-bc71-4a8a-8c0e-c4703a658dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c884cda5-ab9a-4583-b243-e3d059deaaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75eccf3a-6929-4e48-b181-bb84d2da79ce",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae4a105-46b7-4ca0-aeb9-683e2749ecdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20e0aff-e6ae-41dd-92c4-bf7f91753444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade2455d-de74-4f63-8ccf-83c0eed59a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4c90e5-d265-4e80-8b03-a9c2b7b0a9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bf93f9-b49a-4997-bc47-1cc4570e99eb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82acdc3-642b-40c9-9dd3-06e8f59cc59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9b0e54-3b6c-4ea2-8ea1-3b504be6b2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417ab393-ccad-4edc-b59f-0a0c0e65da1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088e65ef-e91b-4983-bb7f-556f1bc82b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af38032-6cdc-42c8-9049-bd521565df01",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aba701a-d3a1-47c7-8921-5e529fc8006d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df67c10-6407-4474-8b0f-48a8fb85c0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de59330b-d5c8-4d88-9b4a-eeba2c2c8242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b215ed-d18e-44e6-aeca-f8edf94a2d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94172f2a-9e31-43a9-a847-6d9a3a787a6f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b882764c-8576-46d9-9a80-edd36e362189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9be0bf-9d36-4791-9e05-8dac71fc0f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e799f73-5f4a-4757-ba30-f23ae1410500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d083532-64e1-42da-9c4c-eac6ef238d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87484f7-26ba-4659-9ff4-d67b4fe1786e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7918bb-5543-4b1a-8fc7-f6f23e0c2de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc86b53-d41d-4d68-8be8-ce383d689e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2762c5-fa5f-4e28-9272-f56cf4b22a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafd261b-cc29-4882-b3e2-54136761d0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952ecf9c-6964-4e58-be86-e9012af1c557",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5782d45-880c-4515-8e29-06614eaa51ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e07aff7-86ee-44cc-ba96-d84de1055fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28061602-41f0-44f3-ae04-acd08239601e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f38090-a759-48d7-a3b4-e6a9e57180b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fd95b7-7bd8-40b0-a079-08388f7ad902",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5515723b-d382-43f9-a4b6-c04ea2921a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1026f149-725c-4954-9b0e-c02eeb1fd815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ebe6ff-3fba-43a7-af70-e18e4dfd4c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765c24e1-e9fa-42ef-8766-0bd5a04d7912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a217bff-79c4-46ac-9416-fc46ad86ddc3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eab736-e056-4f69-90c2-5e92a42ce7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34c6028-d1fc-42e0-bddc-84accd61e26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95139505-520b-4e28-96e7-9370d20cb44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2417f424-2e19-4740-b61d-f61636ab1578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01927dfe-4ef4-495d-a41b-b42cac68937a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6930c6ec-498b-409d-a1f0-2c56d944b871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf9d638-2c86-4b1d-9d3a-a4d3f54a2014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c74775-329e-4a5b-afc0-d3677812e1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ef958a-e14f-4d4c-91a7-c219cf289afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b97d3d-01c3-4a1f-a54c-a36ed129ed5b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c94953-c068-4f51-8fe1-078a76db0e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55dd0f68-00b6-4df1-8351-eede6b6131eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a819dd-fed2-4f98-a442-24b552ee7284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5b99b0-66bf-42c3-87ba-3524d6f6aa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c78baa-96f9-43ba-b368-ec6b31f3bb8b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7153982c-06bb-426e-95d0-075db36cf006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715abb4e-c166-43d9-863d-cd06610a2377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275cb1e9-27d0-4bb8-b5cd-428219f7c841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25294bb6-b6d0-46f6-ae2a-cb6c5d4ff7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027a817b-0498-4d3b-a238-858aa8e98351",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74240736-ee85-4d50-b15b-7646862c8395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb644c3a-7f24-464e-ba5a-0cd6344cd6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876b1bd4-f12a-4bc5-b9ca-3a4fade1fd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931de70c-79dc-4823-9401-b4728c1100a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedea9d4-7d85-4073-89b0-9a5e2bde59eb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cd4d63-a813-4e9b-b0af-4337000720e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237cadcf-59ba-4391-b8fa-39079c841932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e27c83-d7f4-4269-8499-23bf06ce35e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f90176-81e4-4def-bec2-19bdec8f1885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d3bc3-7d77-47f5-a3e6-d32a8db23a8e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2663dc4-4a9e-4637-910b-eab30c1ac811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "008c4d8e-4bda-4e0a-aeb9-e8522a4df243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ea52e9-e04f-4e06-8c25-10f73c1fda8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8937f54f-57d1-4026-a617-e8d07819b4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f1a77a-47c6-484d-854d-adc795265972",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2454d581-3310-462f-9c76-400ca58c5360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce2c2ed-027e-431c-8317-370a775b1556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff11a24-0147-40e2-a2c5-2ffe06ee8a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed6495a-a977-4118-8db6-7b5faf51a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a23501-0591-4800-a89c-199a4ff58faa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a17234-f6b3-4e0e-a8e1-5af9613cdb44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87d7ad4-bac2-4860-b1e8-bcd63383cfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25b3889-4589-4ca1-b1a1-d33e9061a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952741d1-b981-4e8a-bc8d-734e1861ebd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051ebccb-5506-472b-837e-35a64fe5a35d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86d7abe-9c03-4b79-8708-85c415d23b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a869e241-7d2e-4337-823d-dc66e6638882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a1ee10-5501-4d3e-9755-0d3e154d9310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc393490-8870-4440-a79b-062e4e556aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fe2814-6937-4d53-bbc7-1ab17d450bbf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e0c5ef-a893-4921-852b-89e5cbe89c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca2107a-5e24-4b31-8341-c372558e331a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cc035a-6abd-40d6-b187-484c96186fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a8d95f-4261-499b-828a-336dea3f0e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e281eb92-2223-4f2b-9d3c-4318490fdc69",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fe735b-f612-46d1-a640-21af97fe1e2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e76c57-8c4e-4cde-80c9-ed748afa934c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b75ba23-d125-49d3-bf3d-0e826d051ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32de7533-c172-472a-bd5c-4f70ab521dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea5bce8-5ba3-477c-a337-add1e02fd965",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d17565f-2845-4c06-ba94-abbec9d48687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8be98b44-1f0b-48fb-92e9-073e960da705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331fb9b3-c885-47b9-b55a-913c0daa500d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b220ed9e-3291-4e56-a02d-eb3bb97adf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b3980f-7132-4c17-a923-325129e0471f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c77d4-2c51-471e-8d8a-0737c08664bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e664a579-f439-4b90-b6a3-1339400b1351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0781650-2719-4141-a4b6-9e5d28574ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f099bf22-450a-4b57-abeb-b25ecc1269c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eee1c3-a0b1-4825-9ad8-47ce626b88bc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8114708c-116a-4d79-b622-154eb4c1d8a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "703c94c6-020e-42a3-9320-76033c472b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613a0ce2-8804-4639-8adb-2c6a76fa7807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca42b4d-2a9c-4393-b2e6-f5c6372646c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09ede8f-28cd-42d0-9191-571d094c77e9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b949a3-847f-41d6-8bf0-c1fa38d4006c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea2ad44-0002-4f25-a73b-28b581b5f6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d31402-6b49-4ae4-a2ed-4a908251e41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e393ea5-378b-4c04-b01e-b2a2df26b865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519dca9d-b055-4560-923d-6629ccc376bd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c9a91-0abd-4385-8fd0-e793c79448bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85165f8f-7939-45a4-85a3-75bb40b975b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348e67df-ae12-43a7-a839-722246249ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd86f9be-8c16-49f5-a293-9953baa10084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf18945-a879-4610-b62e-307a44a40e0f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b071463-b36f-4427-af29-34bb5a5cf26b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa9fc9d-2cd2-4cf1-9583-6a3f21a462fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c28ebc1-8eb4-4ba4-8153-ea79712ec43e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24466be-eff2-4705-a177-cdf618db3e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16e1d20-6b36-429b-804b-ab48a3fba463",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a08212-7915-41b8-a175-620994fbf22a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad397db2-50ba-4492-be10-a15490b7b93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce4a4f0-a616-40f1-9a0b-406b9d2ffd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e4ea73-456d-49c7-bae9-f32a399e8965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37adf0c-7248-4e29-9157-903d5ff1ab53",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d184195-8de6-44d4-aae3-07c8ca22ffb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21ba27f9-2012-4d52-9be6-8c5872c0b1cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e819259-1648-4e90-8ac1-03b6f859a91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200569ad-6064-4fe8-be57-1cd0381e5068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df620aa9-19f1-4d03-9f27-7a3cd57e6052",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c8da79-c601-4c0e-9bff-31cbb91a9da3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "916e195a-6d6c-4391-aaad-5bb38ae59d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ad8de0-c07f-45e2-a2ef-9ecc87f4ee20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd31496-84e7-4298-82f9-78fa5a078016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25feb0f-975d-4038-9930-e827ba989d6c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8f5fa6-7399-4e51-99d9-8e60dfeb9751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8013aa2e-a6ae-4830-be6d-ee45d19a9bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2caaf1d5-02e4-405e-a895-6f4c2bac9aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c93fb6-56a8-4fb9-be25-6125ed6da4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2f801-f546-4cfd-9da2-1000827317db",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f2d4cf-db40-4759-9a93-b9c66afd10be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1002697-f5c7-421f-aacb-0dcf09432b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9ccf19-c8a4-47a1-8f40-dffc737834c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f49d755-e7ca-47c2-a093-ed424588e7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850f532e-2225-4720-a2a5-96ea764164de",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f207283c-7025-40f1-864a-abc20ef4fcbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "911e97b9-5d4d-4f7e-a730-057bed1a8168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd5bdfc-d2f0-4cbe-8878-88e81506a576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e891775d-78f9-44c2-aa83-e9235513038c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebd3572-590d-4f80-8015-c51368c05ac3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcc46d2-39cb-416f-877b-c065bb2e4c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3906dcae-0012-4dec-974e-c2d583973d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ea7bb4-8268-4a56-8144-1dceacec53ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2031cca7-9f9f-46f9-aced-a07d9c9aa24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ed5110-d86d-495d-8002-20be29748057",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4995a3-d343-4644-baec-2ee45feefdd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57856093-af08-4972-bf47-5d9d3b7ecb65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c06bf77-f812-41b2-a6ef-65bd20663f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05df7775-fc37-4e14-ac6d-0bf4c26f6a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65532139-1a01-40e6-bb4d-cdfc45bd5604",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd90a2f-ccb8-4ad4-be57-eea847210515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a3dd3e-49d8-4640-831b-fbaa8e96d9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916bb0ce-e065-48ef-89b8-3af250bf3b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0d0aef-49dd-4170-a0f3-7b84cb14ef65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046dc415-6474-4c30-8236-05be7b5a4686",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a2638c-53ab-4d55-a01d-fc7212e80b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75329dfe-4bc5-4411-b78d-58db7ab5b85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c780a8-5a84-49c0-bf91-079f44db6ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b42cf0-3f62-4d96-86f6-c52da49874eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb5914f-c6e4-4d3f-bd69-2770649f851e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936046b8-acbd-4d4c-ba48-f99ce0d31bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad3c2f3-1f70-486a-99bd-268d4cc70aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02692949-65c8-420b-a094-a6bfbb73cacf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f15069-e1ef-4438-806c-76c5e89173d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789f3369-dab3-4e5e-8e72-cee20a1c25f4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f1a478-53ec-420c-98f1-e6c17f64ab7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac17ab0e-1d3a-42b9-8043-951b6bdbc189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874a7723-b57c-41d9-b825-c9e752e206fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4c7648-2e55-4963-a659-3e73f8a04093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1594d1ad-d944-405f-a512-1a7c8aae5bda",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27db985-a34d-4ec3-9663-1a66dddcb076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4043f76a-7a72-424f-a446-a51aae53f6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c705ee0-56bc-44d6-83f4-4f982365f001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22da76a1-8e8f-43d3-9c1d-e1de91ae8931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc6d814-91ad-40b7-9eef-066d6969e063",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd929b70-2e72-4cd2-b088-e171941317ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c91d00-e98f-4c96-93f8-866ce4ffe3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8188c1-9d5f-414f-a181-c099b14add2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705c5a3b-aed4-4107-a2f2-10af4438a35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e396123-6582-41a1-a3f2-2b0a8c266ca1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319c0fea-265e-4282-8e31-f2a7ca7fa859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27843d74-c8c7-4cc0-b59e-c07bc282de04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9ec75a-21a6-4989-b71e-6f2c106f443a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49194dd-4172-431f-994e-371c1e866961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7708f302-c36f-4c43-8e94-c2ed60a63c5b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a1201c-b9c4-4dc4-9f55-f61853061021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d260bb-e2c6-4796-a607-6a47373ef371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9a12fa-dda6-4d35-b197-4eab77884662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91d2cde-efde-4be1-8e1e-b349cb01dcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9566468f-7a67-4afd-87ae-750146338f9f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a22974-371b-4336-92b5-b8a7957647b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1c329ac-c1bb-4c46-b5a0-3d6823cb0aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f683f327-5990-4e8c-8c4c-69dba6e28e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07757ba8-999c-4e53-a50e-bfaf2a3b0171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70c6f70-7625-497f-a064-a5f4ce2a9260",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f2bfe7-fc6f-4ce3-9dac-b1490d1fcf71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce322f1c-0c79-4348-ba18-02cf2200174d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb2dcab-aa71-49fc-bf44-d9057cbc0c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6c4647-78f2-490d-83ca-79e0094baef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecda83f7-4471-4f14-a114-4c61e2650c63",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3ba96a-a919-4067-9494-2252ac96521f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb55b0a-0616-4269-be87-fa95052115e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8a344b-2208-4e3e-b7ec-029e4a053fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d4dd8b-025f-4dc7-92fb-6cabd8187f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdd65d3-afda-4218-9af9-b66b1fe4cd4b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41c5ca2-18a5-44ab-a41b-401a7aade64c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631dd90a-ff2b-4eac-a261-9f63dade2f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eee3361-a9dd-4644-af63-06adec33aee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b5592a-82ec-48a8-9459-a31d0ad4c944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8f727d-1ab7-499f-a6bd-8bae03889829",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6581967c-4177-4d75-887a-5bdc53fafa2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47915167-a4e0-4412-9e90-d6d8156c417a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b0b1ad-856a-4668-ba2a-b20aad9c4e7f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878cb2b1-663a-4337-9bc0-20d61421f404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88662f5-6f96-4aeb-97ab-40282527db54",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99939912-1dc4-4dba-b79c-c34f45b50c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf16ba8-7a7e-4211-9770-da7ee657f5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a24662-28c6-4a21-9750-9d43eba35d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffd26ea-9e9c-4059-b2d5-f707249c4075"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49ba3eef-ed2f-4792-ab7f-c1ca13167937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e72160a-3ed7-4e1a-ad63-dd2e94514939"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "716615d1-c969-46d6-8e18-0ad60e4d2ade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f825d37-657f-4d88-b750-f6b3a1abf1de"
                    }
                  }
                ]
              },
              {
                "id": "9832d5e8-e4f3-4c24-9213-9fbf1c1046d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eeae8466-377e-4485-9e0f-e7f8d12bafbb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ea132f-6fc8-4ad2-8194-6ff93854aec6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3735c4c0-7dd7-4735-bb90-42d39a4c2b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121e0c2a-b279-44b4-bae9-bca34d016bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2af9daf-3b79-4a7c-a7e0-e63be4919ec0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57450c4f-3404-47db-8f74-9070457ca9ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "feb61d32-1926-41e4-9843-04013af7feb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c210af1a-5aab-4e04-a33b-d7f630bcb519",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8110fc7-73ae-4f9b-b714-8d424d334798"
                    }
                  }
                ]
              },
              {
                "id": "ba748b8d-a12a-4d4f-8a38-66ca05fcfcc2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5dfb1d29-8a66-47ee-84f4-f7f4f31ebc45",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461706e2-4e6a-4837-a762-f71227a7bf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3f0c4e2c-589e-41ba-bc7f-d5b9d11b1af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a713fb-ad4f-470a-9857-c1a46e96e751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc70ccc1-94fa-4855-9541-e267004afad5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "67563584-d9af-4d98-8a43-2564e7bdc4d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "736550f9-2f01-4cb2-a55a-8877bd79b2c0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6904cd71-a0c5-4f0c-91d2-6e4b96b6606a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "33185883-3b03-418d-8331-58d5532f11f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3b6fcff-5a7b-49b9-9b24-6bb5bfd1e9b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e21183cd-51e4-4d4f-9a85-79fc167e08bc"
                    }
                  }
                ]
              },
              {
                "id": "9f992b96-54e8-46c7-9e0a-c2ce31222b80",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dd10298-0d3d-4ba4-9a34-d17f2daaef00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dc80f3f1-d3f4-46da-abec-4eb12982484a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d32299c6-802d-4910-accd-bf15f25bcc53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e838670c-b703-49c0-9f46-93ebc3e280fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0acaf55-a3aa-4945-9ecd-bbc4f1cfd7b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6f8f9d9e-dc96-4a3e-98e5-ccc5b4145b54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b904ed03-22bd-4c57-9994-e0620c9d3231",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b6575e0-e736-4d51-9786-67f97164107d"
            }
          }
        ]
      },
      {
        "id": "2df6072f-da61-4ed0-b39f-9bd9c71d0ab2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "59c58e6f-8a9e-41fb-aeb7-d674cb8c849c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4def5fae-2269-4dba-b68c-afb642f4a6ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56a94929-b9da-4031-991a-cb472715f8b6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2cefeb-03a3-4a05-bc9c-c968f23a754b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb1654b4-d0d0-4767-b60f-af158cb2aeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c916bfe7-c1ea-48f2-9d29-90fb3661f002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583982e3-f788-4cf4-b433-70f7eb2b319d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af46f1fb-0dad-4624-9b93-e5d77f00e955",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f45bbf0e-78cd-4309-9341-e05bef978cdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec114a23-9b48-4374-a203-814b711aa395",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "888ce8a8-b3d7-43b0-b1ec-36f975276ddf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a92d77b2-52cc-4900-a03f-7b22c2642792",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f56bf1e5-081d-4e3e-932a-24807279e177"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff3cda36-4a54-4ccf-9399-b2cd1fa04049",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12a0f62b-4eb6-4f1b-a022-96456b5e2ed4"
            }
          }
        ]
      },
      {
        "id": "a8b16a8b-f79b-4a4a-a967-fe01fb0f1ec3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1959dee1-8eb7-4fb4-99fb-96771e87b8d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e0d4258-a020-474c-bcc2-81b199bdc6f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e0351cb-5692-4ae1-a262-805b53104c35",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86a375d-8060-40b5-80d4-f07cf30ae6b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4219342-5212-416e-a21a-ca977277f394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e693ad-cdb0-4f69-b88e-cd9354563526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33606616-2915-4b8b-a5c2-559268a57f52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3eb383a2-0add-44da-b117-82957032d3c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "778428e7-0f68-4777-afc8-7270ec1cd749"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bd76498-1fdf-4580-b92d-621e65dd6309",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca0f1b8d-66c6-417d-b73f-22e42b7489a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c573a86-79df-4639-abf9-fb1ceb74b201",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0eb4648d-4907-492d-8528-44fe12ab082f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c56b771b-56a0-4bec-9b3d-9797fa001500",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9a63ac0-df5e-4c4e-ab3d-464fa0c43c5e"
            }
          }
        ]
      },
      {
        "id": "feed6e83-a2c4-4120-b418-1bc98212222a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e37356dc-6902-46d4-b314-461bd24597af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6db3bb91-934c-4a78-9d36-6db04ec3d3f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "455ba82d-dfdb-4c0f-b4ac-ce38b7bc4a02",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7202ae2-2811-48c4-9458-c19403d1668f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df588f54-1d2b-4da5-b85e-e3203e2dd9c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c1a4ec-ad13-48c8-be15-3aeb26390f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18942f93-ba37-4beb-9eec-f061d9c6e20e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a747364-bf10-4945-8941-7d051443e87b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0dbf0fd-2edb-43ab-96bd-e8c4cd6f2bcc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01947b7c-541e-42cf-bf7f-66889d519627",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "625620c8-0343-4a77-b5d1-bf79fd84c390"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86300580-9e60-4249-977b-d098d3ec23c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8d8e0da-ac20-4dd0-8be5-21576e7fc49a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "338df8f0-7926-4569-aa74-8a7f68d225c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "483a002f-2015-4ae7-b205-96de2dc99128"
            }
          }
        ]
      },
      {
        "id": "9e714aee-1b2b-431b-9e2d-6360d3703e19",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79adf35e-cfef-486b-9b93-f052a6be2897",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cfca55b-45dc-4f7e-9c91-70bcfa8209e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ae677ea6-5dbb-4094-b1d8-a52c4893a187",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0838b5f9-c4b5-4dc0-8eed-620ca5a52d58",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e0ef4a7-d191-434e-b28e-877feec20959",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 183.8204225352113,
      "responseMin": 10,
      "responseMax": 2054,
      "responseSd": 326.6469528963053,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695774835633,
      "completed": 1695774902646
    },
    "executions": [
      {
        "id": "93acf796-0eb0-4386-a409-9ac7577e9e27",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fcb4a1d7-dbdc-4ed0-9e24-f022499ffd82",
          "httpRequestId": "161d27b8-505c-4c36-9f40-92cc6fc96980"
        },
        "item": {
          "id": "93acf796-0eb0-4386-a409-9ac7577e9e27",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "428e5dda-2e5f-4e8d-bd3a-72bd50016694",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "37ecc4ee-8b96-4f98-aad7-611dcfd2614b",
        "cursor": {
          "ref": "92056902-524a-42fe-b491-01388058a2b6",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a195a28f-271f-4738-9697-6497acb90fe9"
        },
        "item": {
          "id": "37ecc4ee-8b96-4f98-aad7-611dcfd2614b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "801f7ec1-f031-4db5-9c0b-27fc08bd81d9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "4ef09ae0-634e-4f98-b2d8-289c62715653",
        "cursor": {
          "ref": "2f454974-ab48-40e8-ad04-0e43aabdbf86",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32a41a95-ebde-4fb0-b9f4-8db9f7b35e53"
        },
        "item": {
          "id": "4ef09ae0-634e-4f98-b2d8-289c62715653",
          "name": "did_json"
        },
        "response": {
          "id": "854ac7f7-8ead-421d-826b-f87033ff17a1",
          "status": "OK",
          "code": 200,
          "responseTime": 521,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8451d0eb-0b20-41ca-8d46-1f9cc210f830",
        "cursor": {
          "ref": "4c121264-69aa-4500-b664-1f9f4486f254",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2df28cc8-8d1c-4bed-aa59-a24c403197cb"
        },
        "item": {
          "id": "8451d0eb-0b20-41ca-8d46-1f9cc210f830",
          "name": "did:invalid"
        },
        "response": {
          "id": "5576f4a2-8c4d-434e-ab71-aa6ec090546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8451d0eb-0b20-41ca-8d46-1f9cc210f830",
        "cursor": {
          "ref": "4c121264-69aa-4500-b664-1f9f4486f254",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2df28cc8-8d1c-4bed-aa59-a24c403197cb"
        },
        "item": {
          "id": "8451d0eb-0b20-41ca-8d46-1f9cc210f830",
          "name": "did:invalid"
        },
        "response": {
          "id": "5576f4a2-8c4d-434e-ab71-aa6ec090546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369ec9b7-27ef-4dce-a86f-d4273dc81fa8",
        "cursor": {
          "ref": "024573f1-ddff-4db4-bde8-819e7049861d",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8b31eb14-d877-496b-b981-0f22d4f4d26c"
        },
        "item": {
          "id": "369ec9b7-27ef-4dce-a86f-d4273dc81fa8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3b24d2fd-cbca-4a49-b023-0e1c7d3ea42d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 210,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410c2e19-fccb-45a4-b191-d145966f3f36",
        "cursor": {
          "ref": "799ba745-4b9c-48a9-96b7-624750d97883",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6be1e481-f983-47f9-8f73-f6a1abf0d1d3"
        },
        "item": {
          "id": "410c2e19-fccb-45a4-b191-d145966f3f36",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "90b241bb-4d94-43f2-8888-a513e9738b1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b06792-c6ac-4b6e-8bd8-8442d7b7bc8c",
        "cursor": {
          "ref": "0eb46150-e5d5-407e-a47b-6d1297723fe5",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7a231012-29ab-4f30-854c-0b5e06a3b13d"
        },
        "item": {
          "id": "06b06792-c6ac-4b6e-8bd8-8442d7b7bc8c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d7d9d39a-ddff-4210-8134-7cc8fd90e362",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8a6d26-61e3-48dc-b2d9-270cd4b65af5",
        "cursor": {
          "ref": "cf1e41a6-e915-4644-aad7-1211f70dec1f",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6a79af23-2018-40ab-b54d-365ef0c4e8db"
        },
        "item": {
          "id": "8c8a6d26-61e3-48dc-b2d9-270cd4b65af5",
          "name": "identifiers"
        },
        "response": {
          "id": "f036b933-10e7-44a7-814c-20e26bd61322",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7661c201-1909-445d-ae45-8c13d84e85b2",
        "cursor": {
          "ref": "083c8a2e-5717-4ac6-98d9-f084d9e238a2",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7f42fc2f-8b06-46c8-b18b-db4064411623"
        },
        "item": {
          "id": "7661c201-1909-445d-ae45-8c13d84e85b2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "246d0db0-5305-4d28-958c-0056a71eae7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c4b5c6-8e6e-4db9-adaf-f1629bcd03d1",
        "cursor": {
          "ref": "892ec931-1c31-462b-9f3c-321fb678d6e5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f421f8ef-bcb4-4efc-b429-75e9e6054d9a"
        },
        "item": {
          "id": "a6c4b5c6-8e6e-4db9-adaf-f1629bcd03d1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "64b91e9e-d296-4b46-8e07-6c563700c22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5906021-bdee-4e38-b9f8-d42b09e4cb29",
        "cursor": {
          "ref": "084f6082-b6c5-4c7c-97e5-40bf266ab942",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a58e5e11-3b4e-43e5-ae0c-87ee68ebf7a0"
        },
        "item": {
          "id": "b5906021-bdee-4e38-b9f8-d42b09e4cb29",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cc843124-4188-4a7d-8b74-4db24a2417b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f901acb7-2ce1-4f93-a25c-f31bb2eac45f",
        "cursor": {
          "ref": "b6623ede-21e7-4717-a1b3-b4bd47d33e22",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "75a643b5-4545-4008-89f1-9793ac352d06"
        },
        "item": {
          "id": "f901acb7-2ce1-4f93-a25c-f31bb2eac45f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5ac34744-6056-46a5-95bd-9dce5472ba2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8ec887-ed04-4607-9059-fc88aab5a06c",
        "cursor": {
          "ref": "d215ca94-b903-476a-80a9-a08b007732e9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "50c7805b-9e80-4872-b237-18ece633ecda"
        },
        "item": {
          "id": "5a8ec887-ed04-4607-9059-fc88aab5a06c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "abbc973e-721f-4143-a766-1b2f8b68c9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6627bc5d-d513-463e-9ccf-ab54ae04b111",
        "cursor": {
          "ref": "b0aae828-97f8-4277-9c81-9ec5a8ea2d0d",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8cb954de-947a-4f19-bd99-71a40f7de848"
        },
        "item": {
          "id": "6627bc5d-d513-463e-9ccf-ab54ae04b111",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ed3fc32b-fb01-475a-93d0-da08d5ffa25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7dacbe-386e-4f9e-92a0-1e8b454eeaa3",
        "cursor": {
          "ref": "bfb6c5a9-13f5-43aa-a81a-c7a31f8e8496",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "23d1748d-5920-4c94-a45a-8179447648ba"
        },
        "item": {
          "id": "5b7dacbe-386e-4f9e-92a0-1e8b454eeaa3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "affb5f5e-1c46-439a-b1e5-0c3d7b570020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f70aaf-96e3-4ef1-bc03-e29d785ef38f",
        "cursor": {
          "ref": "8fd2dd05-2085-43d7-b2d6-eec16946e422",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b59961b7-1eba-42f8-acbe-53ca5ed24af9"
        },
        "item": {
          "id": "f3f70aaf-96e3-4ef1-bc03-e29d785ef38f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dcd9a152-b6c1-440b-9340-3d6bcff516f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f3dca8-5b7a-4188-8fee-988094a31698",
        "cursor": {
          "ref": "631da69f-e1bb-4be2-a557-f23cb195cd0c",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9e829f96-60ec-45d4-a4c1-926514e44389"
        },
        "item": {
          "id": "f5f3dca8-5b7a-4188-8fee-988094a31698",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4983498a-6077-4e4b-b35e-0f721e3392f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e79f1bb-b811-4ce5-9215-2e0cf9564574",
        "cursor": {
          "ref": "020fb067-9619-4abd-b976-f898f8fd59a9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "63f460ef-f387-4b9e-b850-2f66fcba6108"
        },
        "item": {
          "id": "9e79f1bb-b811-4ce5-9215-2e0cf9564574",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0732f899-45c4-4aba-9d8b-d5db5d151d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0286dfa-29fb-4dad-9e90-0f5897d15dae",
        "cursor": {
          "ref": "7267f300-98cd-4f15-85b5-68fa5ec16229",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4c62ac6a-df49-44a4-96f3-ecb20ce3d744"
        },
        "item": {
          "id": "b0286dfa-29fb-4dad-9e90-0f5897d15dae",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "11ae8f19-0b04-4168-baed-40a415cf3430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7261a498-00f8-49ce-87e8-28087136c2ab",
        "cursor": {
          "ref": "dafcdea8-816c-443e-bdc5-3b82b518f7b2",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "11032faf-3f4d-40ed-a8b9-fed1fcc89c2a"
        },
        "item": {
          "id": "7261a498-00f8-49ce-87e8-28087136c2ab",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33a0a9e9-ed99-4a8e-b4dd-4916565e49c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a732f854-c465-4cb8-aee3-1a485a37754f",
        "cursor": {
          "ref": "9881b60a-0dde-4987-a3d8-086d73b38101",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d3ef2d11-414f-4ef9-8a96-0cbc23d768ea"
        },
        "item": {
          "id": "a732f854-c465-4cb8-aee3-1a485a37754f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a20e4911-83f2-4033-895c-71f4ecbb5b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd489d05-5287-4eca-8643-2e9230593b60",
        "cursor": {
          "ref": "4ec0987c-bf28-446a-9a0a-d71cbe5033f1",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1d4bb65f-f7f1-4ebd-8be5-c415a493c69a"
        },
        "item": {
          "id": "cd489d05-5287-4eca-8643-2e9230593b60",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ecd52331-8f3b-4f4b-a6e1-cc164576d6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3584614d-8a44-463b-ad3d-95fd1bd8d590",
        "cursor": {
          "ref": "d7f302e9-4d77-47bc-8344-18a6eb781b76",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08bf7023-1980-4719-b10c-1a2a1d35d187"
        },
        "item": {
          "id": "3584614d-8a44-463b-ad3d-95fd1bd8d590",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b7ed0201-c2b0-46e8-a349-3f2d29434261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578f8337-5377-4685-8965-7e17697c07e5",
        "cursor": {
          "ref": "a54f69fa-c4dd-4f67-98a1-a9c0bbfc2da2",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8777b8fe-c4a8-4318-a2d4-128d4cb51075"
        },
        "item": {
          "id": "578f8337-5377-4685-8965-7e17697c07e5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3f808ea3-ae2f-4073-befa-8300824931e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7c80a7-2e43-4c38-9d1f-6a544e44f081",
        "cursor": {
          "ref": "2eb8f086-1225-409d-813c-0082cd86dc7b",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "794588ce-2884-4c6d-97c9-3780b1b71a36"
        },
        "item": {
          "id": "7e7c80a7-2e43-4c38-9d1f-6a544e44f081",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b3e1d270-66ec-4f31-b654-016297a0e5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6ef665-3ef6-4e48-b3cf-30336bb2f060",
        "cursor": {
          "ref": "130511b5-5de4-44bf-b540-52e3e2b68748",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4d5421d2-c75a-47df-88a9-43d61201049c"
        },
        "item": {
          "id": "ce6ef665-3ef6-4e48-b3cf-30336bb2f060",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fbc73f8c-8ff9-4b4c-8116-be92c71503e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1a17f5-dfdd-483b-9ecd-af5c3c340497",
        "cursor": {
          "ref": "5520ebc5-e1d4-419d-9c58-b2ab56d31c29",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "093ef445-cc6f-4b16-a119-24fea7a4cdbc"
        },
        "item": {
          "id": "6d1a17f5-dfdd-483b-9ecd-af5c3c340497",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "09565654-0ab2-4271-87c8-3120c8611a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8366b20-efc7-4187-bf22-e11af50366a9",
        "cursor": {
          "ref": "81bd57ba-52b5-47e4-bfe3-7138db942229",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9fc522f0-5ed3-4ab9-91bc-fb092551a2bf"
        },
        "item": {
          "id": "e8366b20-efc7-4187-bf22-e11af50366a9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c5ece41a-06fa-4b26-9e09-7529de36ae93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b048ef-8c06-406c-8166-6af450423c0f",
        "cursor": {
          "ref": "5aa17d6e-fe15-45ed-b0fd-f3bff657ed4a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "83d67acd-bf0b-4671-8c52-950c8e789c4c"
        },
        "item": {
          "id": "43b048ef-8c06-406c-8166-6af450423c0f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "01b3a837-12ff-48a7-9971-f5a1279a03cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28543099-50d6-4238-8572-80a81b54161b",
        "cursor": {
          "ref": "9e0d9020-29a1-499f-b92b-5303f4636333",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c1eb3739-a1c1-4f80-9dc0-e2c0add8bd7f"
        },
        "item": {
          "id": "28543099-50d6-4238-8572-80a81b54161b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "56053d30-06d4-4f3a-bbbd-d53857cf258f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bb9c55-13d9-471e-8f3f-78865ce7a8b0",
        "cursor": {
          "ref": "3e91521b-b708-4a75-ac8b-5b22b3fad570",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "644d6b12-5a30-4900-a3b4-31fc1fe5edc4"
        },
        "item": {
          "id": "59bb9c55-13d9-471e-8f3f-78865ce7a8b0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dd281237-4b43-4738-8cae-3e6a766b0ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b0bb32-bb66-42ee-aeca-44a266c55e33",
        "cursor": {
          "ref": "5a49d629-f1be-4299-86c4-2a69bec08943",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a4f332df-fa3d-412d-967d-a8a3e3282fe3"
        },
        "item": {
          "id": "d7b0bb32-bb66-42ee-aeca-44a266c55e33",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df1c36ab-cdc0-47ce-af6b-e25bd9ff103c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6921193-efd4-4244-8709-4092c0a94369",
        "cursor": {
          "ref": "90fcc2ad-a8c6-44a6-9872-0466444b1fe2",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "35c51a22-daed-4ef2-b2cd-40824f5c9ebe"
        },
        "item": {
          "id": "c6921193-efd4-4244-8709-4092c0a94369",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "733fc8f0-7f3d-454a-90a5-5d23ad5f1c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1351ab65-b4d8-4e7e-8ed9-541a6d4763e0",
        "cursor": {
          "ref": "59c618f9-b634-49f4-97cc-c41431ae2c64",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dade85c5-66a3-49c8-ac59-1dc5a893a81c"
        },
        "item": {
          "id": "1351ab65-b4d8-4e7e-8ed9-541a6d4763e0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7aa01522-eaed-4be7-a273-d21506a52740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44905c26-998f-4e07-9cda-6f1076cab370",
        "cursor": {
          "ref": "fb8ef447-e890-4d87-ba09-724ec58e7cd0",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35757386-0643-4acc-9310-79bf378e760c"
        },
        "item": {
          "id": "44905c26-998f-4e07-9cda-6f1076cab370",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "26304185-32a1-413c-88b3-7e3c25ef2aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e98cea-6b36-4849-bf4c-337ec068be76",
        "cursor": {
          "ref": "456fd1de-e232-4d82-94a1-40d3ec493ca3",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b4f007be-52f5-4c81-9b41-6cd5da5e5b0d"
        },
        "item": {
          "id": "43e98cea-6b36-4849-bf4c-337ec068be76",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "42d85d5e-17c5-4007-af02-f32a82740130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9387440b-f5a9-4e1f-aa1b-fffbca60b222",
        "cursor": {
          "ref": "c507f2a2-8e61-46c8-ad9d-d6c776abdf9b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2a94a160-b971-487f-ba7e-17f7e3e044b5"
        },
        "item": {
          "id": "9387440b-f5a9-4e1f-aa1b-fffbca60b222",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "42e4bfaf-2fb4-40f7-8cfd-7aa8ab20157e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650fb9b5-fe45-41ed-973c-9cafe2ce25f5",
        "cursor": {
          "ref": "d19b8a4b-9f32-44b3-a135-958905a821fc",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ba0c0ee2-8c59-433a-b057-9b67d7ad9f4a"
        },
        "item": {
          "id": "650fb9b5-fe45-41ed-973c-9cafe2ce25f5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2dcad488-2558-4fc8-93f5-00256811ec6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10116c28-f8bb-42d0-856e-30ff141995b9",
        "cursor": {
          "ref": "41f1fc12-41dc-4c53-9f96-0d75f13fe1cd",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ad87d100-091e-495c-a226-845a68d0bdd5"
        },
        "item": {
          "id": "10116c28-f8bb-42d0-856e-30ff141995b9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "30f88420-ac54-41b5-9fee-13b4e91143a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0aa5714b-f8f9-4b19-9b8c-dcc3bc76ae36",
        "cursor": {
          "ref": "1e038ff4-6917-4b01-b24e-cda316633f35",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c1fb16af-7926-44af-9bbf-5b0da5b681f2"
        },
        "item": {
          "id": "0aa5714b-f8f9-4b19-9b8c-dcc3bc76ae36",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "93c91b5a-b94f-484f-89ac-1dd5fe9af074",
          "status": "Created",
          "code": 201,
          "responseTime": 2054,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a261857d-e75d-4c3b-93a9-89f02d19712b",
        "cursor": {
          "ref": "ff02f4b3-4045-4d36-8570-b132b7e8b7be",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cace49cf-d0c2-4937-9f5e-de7a47fef9ef"
        },
        "item": {
          "id": "a261857d-e75d-4c3b-93a9-89f02d19712b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "732266c9-c3aa-496b-a5b1-6524ce823ba2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "38adce7c-2280-46b4-8885-8d5cb6601e5f",
        "cursor": {
          "ref": "e47a98ff-09f7-4a61-9eed-c8fea8589dbb",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e735a58f-5719-4801-893f-ead3fbf39d2a"
        },
        "item": {
          "id": "38adce7c-2280-46b4-8885-8d5cb6601e5f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "73c6855a-6229-4de0-937c-14c1470932a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339d097e-1e21-4907-83b7-f154dfbc6e14",
        "cursor": {
          "ref": "426c2778-68ca-4a97-a2f4-432e54006cae",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "37ba8496-1617-4f71-9ce2-a23be60cad5c"
        },
        "item": {
          "id": "339d097e-1e21-4907-83b7-f154dfbc6e14",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "559b9dd5-9ff7-4748-9053-12576ab52f6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2e6703f8-5f06-4ab5-8720-dafc898cb477",
        "cursor": {
          "ref": "2611c9d0-ddd0-44a1-bf9d-f66fefd693ff",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f6c099f6-02cf-44ce-aa70-706243a94bc8"
        },
        "item": {
          "id": "2e6703f8-5f06-4ab5-8720-dafc898cb477",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "56c4e13f-eeba-469e-b9b2-03c1833851c1",
          "status": "Created",
          "code": 201,
          "responseTime": 1546,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d6cb8035-61de-403a-bffc-05f008be30d1",
        "cursor": {
          "ref": "3860d146-640f-43b9-9bf5-fc29d04dc9a6",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "df534d26-ab45-4c7c-8053-7b040db6f887"
        },
        "item": {
          "id": "d6cb8035-61de-403a-bffc-05f008be30d1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "93b7412d-e2e8-4c59-8c38-4298ea45e1ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e407aa2a-7a8e-40b4-a6d1-f78739d1c7d4",
        "cursor": {
          "ref": "fac2f604-1948-4e50-b829-af47bf7f4cac",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d2afc76c-d7cc-441b-bf37-0cce463fbaca"
        },
        "item": {
          "id": "e407aa2a-7a8e-40b4-a6d1-f78739d1c7d4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bc09b3e2-15a4-46e4-9002-b5a3398780aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1346,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "798a0ed0-d52c-43a8-a593-b94285e2d8b9",
        "cursor": {
          "ref": "b26bed9f-b122-4f7d-bb07-378822a99741",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "351653de-39af-47bc-8c3e-8987862ba47b"
        },
        "item": {
          "id": "798a0ed0-d52c-43a8-a593-b94285e2d8b9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bc99669d-5c35-42ad-b6cc-23bcb6700d78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d9c697c-95e4-47a8-befe-000771e2f0a9",
        "cursor": {
          "ref": "abbf5bba-b142-4c54-be46-74e09937517d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e443a9e-b2bd-4fd8-b03d-6988dbfb1dcd"
        },
        "item": {
          "id": "8d9c697c-95e4-47a8-befe-000771e2f0a9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4ba829d8-a4d3-4b35-89e5-beaab9d75712",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "dd46dfa5-ebc9-4e17-949f-bb93f4667561",
        "cursor": {
          "ref": "4764f194-816d-40e4-a9c1-c1304e34e506",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dc9f7783-b905-4897-bb5d-38e54a7377a9"
        },
        "item": {
          "id": "dd46dfa5-ebc9-4e17-949f-bb93f4667561",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2b2c8c42-fbed-4255-8834-8112e44c0d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1267cae1-5483-4127-9790-37ba40149bd6",
        "cursor": {
          "ref": "346ee78f-79f4-4406-a0b5-cfe624410bac",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "93a7f970-5290-4590-bb21-6eb9fbb1e87a"
        },
        "item": {
          "id": "1267cae1-5483-4127-9790-37ba40149bd6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "98c08e4a-c486-4101-8490-27b7dad16169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0e1ec572-ae70-490b-bf69-030c566bb9ff",
        "cursor": {
          "ref": "b631d40e-76d8-441c-aad3-42f84b72ece6",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3ab5231e-59c2-4205-ba6e-b8b97d3b79af"
        },
        "item": {
          "id": "0e1ec572-ae70-490b-bf69-030c566bb9ff",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3270a690-dfb5-4cab-9725-41f03953b5b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1483,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3ff3e3eb-8640-4a70-80f2-66529c8fa776",
        "cursor": {
          "ref": "053954da-6330-4b2f-9539-f7fd218c1112",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "72612e11-0942-41ed-b8f6-5e89b353f7f7"
        },
        "item": {
          "id": "3ff3e3eb-8640-4a70-80f2-66529c8fa776",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "314658a9-9d2f-4bd7-92bd-1d18bbda8d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e038ad4-62b6-4c7f-a83e-e7af9f34e7f6",
        "cursor": {
          "ref": "22c2c87b-f035-401a-8d39-f29981846a88",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "00f8fa1f-8832-43be-b688-d767dc8e1f1a"
        },
        "item": {
          "id": "5e038ad4-62b6-4c7f-a83e-e7af9f34e7f6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c43a302a-0ade-4070-862f-97ebdf5e9b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5e41b6-e57d-4677-8b06-a6adb1b230af",
        "cursor": {
          "ref": "caff5551-d9cc-4a44-bfb0-d45d3ca75855",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0b85b8b6-c74a-415e-8311-cad5789ee67a"
        },
        "item": {
          "id": "4c5e41b6-e57d-4677-8b06-a6adb1b230af",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f56a640a-820c-451a-a3ec-25a10180fcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48e25cb-783b-4bef-aeee-ad51c38bece4",
        "cursor": {
          "ref": "c541b4f5-6050-4d5a-91ba-97cb29d48cf3",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "93ab64cb-ff06-4a71-abff-cb7097d09928"
        },
        "item": {
          "id": "e48e25cb-783b-4bef-aeee-ad51c38bece4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "33b4f37d-80fa-4578-94be-5c6df223d20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59a8d7c-c5e0-4dfd-93c0-b778ac701b6e",
        "cursor": {
          "ref": "d150e41c-5e52-48ea-8379-b048bf7a14e0",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "66d20d90-699d-4240-8c6e-ac2751b8353d"
        },
        "item": {
          "id": "d59a8d7c-c5e0-4dfd-93c0-b778ac701b6e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d4884ac1-2e2d-4109-abea-608bb930cd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2eb6cf3-b8ef-4265-9e3a-8c3098b05be4",
        "cursor": {
          "ref": "9e134e6a-6f78-452f-aee7-179fbfbae3d2",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "af3ed7f4-8924-460b-ad3a-7bb29e79e680"
        },
        "item": {
          "id": "f2eb6cf3-b8ef-4265-9e3a-8c3098b05be4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5cda8bf1-45ba-4800-82b0-8727569686ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89039ff4-703c-440c-8b61-f13d0b293c95",
        "cursor": {
          "ref": "ae5abd5e-5649-46fd-811f-7080aab3be16",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f5c9b4d8-aac3-47d3-87ec-3666b77f85da"
        },
        "item": {
          "id": "89039ff4-703c-440c-8b61-f13d0b293c95",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c8262f18-7d97-46d7-b38b-f4c658180579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5934a038-e6f9-4d8b-993a-4b64968cae15",
        "cursor": {
          "ref": "8e3d6070-7658-4ba6-b276-d2c7f27444b7",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "27238327-3ff4-4bbc-8200-103b5a9f7413"
        },
        "item": {
          "id": "5934a038-e6f9-4d8b-993a-4b64968cae15",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4d6c8a88-dddf-42d2-9750-f879c82c27fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d5d780-2ab8-4457-a4db-31bb551b0db6",
        "cursor": {
          "ref": "946bddc8-57bd-49d5-9569-c3996d43ad90",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1bb0cee5-cfb4-4a6e-8f55-8fde7c07d3c7"
        },
        "item": {
          "id": "93d5d780-2ab8-4457-a4db-31bb551b0db6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a7c508c6-bd5f-4ad1-b86b-ffb1184e3541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ba4ea1-f741-4f99-871e-23a1dc9b8868",
        "cursor": {
          "ref": "5f5ac2ea-8364-4019-895d-a765d2908ad1",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "13e93293-3300-4e20-bd61-40d5a0fe1df6"
        },
        "item": {
          "id": "e5ba4ea1-f741-4f99-871e-23a1dc9b8868",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fb853bc2-a2fc-4c73-8d5a-df8bb7e224df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cddbed-0f1b-45fa-8a9a-b13f6d6eb891",
        "cursor": {
          "ref": "c05130f2-f0ef-4faa-8fd4-d28765b85f12",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6c7519ae-48af-4edb-9621-5fed75a42e97"
        },
        "item": {
          "id": "18cddbed-0f1b-45fa-8a9a-b13f6d6eb891",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2c274a06-8245-4c8b-864c-24b4a5d7f1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03b5fcc-303a-44b6-af53-051dcab3bf6e",
        "cursor": {
          "ref": "eb29f09b-470d-4389-a9e5-1129deb73338",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fc86e1da-ceb3-49a1-ab85-5f3fc48e225c"
        },
        "item": {
          "id": "b03b5fcc-303a-44b6-af53-051dcab3bf6e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2a60ec82-7437-489f-8265-9b97d6e73bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49080643-71b9-4ac0-b1f2-d382db11be62",
        "cursor": {
          "ref": "d387b990-b788-48fb-9f12-ff27ed76e4b9",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f341931f-f5c2-4138-8f76-51c06798c553"
        },
        "item": {
          "id": "49080643-71b9-4ac0-b1f2-d382db11be62",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "037e1ffa-a499-4098-92ea-de42edc3e0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47007a1d-7bab-44d5-af3c-90db0c56ff3c",
        "cursor": {
          "ref": "afc20517-2272-49dc-a1e9-cc88637d1ecb",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e3e4f805-178b-46db-962b-36b43d47fc38"
        },
        "item": {
          "id": "47007a1d-7bab-44d5-af3c-90db0c56ff3c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "15de0204-db8b-449e-882c-3d9dd468638b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1186,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "24b83050-1f68-4e37-b1b9-dc872c6babb2",
        "cursor": {
          "ref": "1c29fa2a-12f3-4fc0-b8c4-382f27972120",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "620a4d13-e175-42be-8b7b-b79178139f51"
        },
        "item": {
          "id": "24b83050-1f68-4e37-b1b9-dc872c6babb2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a3b6682e-29cf-4847-be5e-fbb92863865e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1232,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "aeba47c8-efd2-4090-96a6-0045697ca4ea",
        "cursor": {
          "ref": "4b68c3af-9df8-4e9e-b27c-8e9b33df3906",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "43cbef50-8ba6-4eca-ba1e-2879fe3eb215"
        },
        "item": {
          "id": "aeba47c8-efd2-4090-96a6-0045697ca4ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2a44071f-a312-41e2-a905-2e909a8d3233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ffa00530-78ee-405b-a88a-0f25ebb569dd",
        "cursor": {
          "ref": "380730fd-6704-4f19-8981-adec5b17491a",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "22964b9e-694e-4567-8e4d-ddba5a878233"
        },
        "item": {
          "id": "ffa00530-78ee-405b-a88a-0f25ebb569dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "56c99bfc-c9e5-4179-a1b5-58c0551096d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1193,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "24ca0dd8-31ee-4e8a-b0e0-22b8c37ab548",
        "cursor": {
          "ref": "ea02c707-74ae-439d-887a-5a81e4259f3f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2e6f0829-b65d-4b17-b2bb-fe7ee4d88121"
        },
        "item": {
          "id": "24ca0dd8-31ee-4e8a-b0e0-22b8c37ab548",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "18594288-0b29-47b9-8c08-d7d1844a28cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0353e1b6-9731-4c95-85fb-d0dae198b566",
        "cursor": {
          "ref": "f7605920-fad6-4992-966c-0b24a056b490",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "95bb2203-e3be-4bf5-8ac7-3bfcccdc4970"
        },
        "item": {
          "id": "0353e1b6-9731-4c95-85fb-d0dae198b566",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5e9d31a9-c3b6-4378-9c83-cc40ce6ffb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a97ff0-16ed-4541-9274-ac6d152efc0e",
        "cursor": {
          "ref": "7256444c-96be-4f40-b549-a0f2c5ceda69",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b762b281-edca-4e15-80ba-6db7e7ba8b86"
        },
        "item": {
          "id": "71a97ff0-16ed-4541-9274-ac6d152efc0e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "55cae4a4-26af-4abf-a6b9-e5eed04c7d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4313f9-6239-4fb1-b767-53e0d90a1236",
        "cursor": {
          "ref": "8a6de213-6e45-47c9-a1e7-d13a6d8444dd",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "664c53a3-74eb-403e-8be2-6b4b65d299b9"
        },
        "item": {
          "id": "3b4313f9-6239-4fb1-b767-53e0d90a1236",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f7d06c27-bf17-44d9-9d4d-da4bd0b84970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7441146e-b64f-470b-80a2-aad6d06e66ba",
        "cursor": {
          "ref": "6393380c-a2e3-4151-9ba4-3234a197899a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d2ee2636-6f7d-42ca-a748-d9d5e7b019dc"
        },
        "item": {
          "id": "7441146e-b64f-470b-80a2-aad6d06e66ba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "011f82d4-4946-4a5c-a6b9-796bec7f0611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f6fd4a-a247-4f84-a42a-1a401317f31c",
        "cursor": {
          "ref": "676f76e7-f8e0-4236-84f7-98da51245bc5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "91289343-1ccf-4fb8-b7d1-f55550cea0a2"
        },
        "item": {
          "id": "f9f6fd4a-a247-4f84-a42a-1a401317f31c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f5283c9a-7e31-44e2-bbaf-3f2d242f8a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86150468-d3a0-4b47-89ca-7e260b2f6fca",
        "cursor": {
          "ref": "149c7b4f-1183-466b-9426-23bc389d6aa4",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "31fb552c-4b92-44bb-bd99-9427efb463c0"
        },
        "item": {
          "id": "86150468-d3a0-4b47-89ca-7e260b2f6fca",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d7da574d-12f4-49a3-bd63-e674f054a7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94884746-a393-4bfc-ab1b-4351ef1574a5",
        "cursor": {
          "ref": "1e1f788e-7724-4365-84d7-def1f1d2e2dd",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "33d7cffe-398a-445b-b372-4c438cca629d"
        },
        "item": {
          "id": "94884746-a393-4bfc-ab1b-4351ef1574a5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "10308d81-dee8-4094-9945-539f218e083b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d081e9-85cf-4d34-a540-5d9275c5e989",
        "cursor": {
          "ref": "e6a1f417-d44b-4b7c-9f3c-e039fc6a6d96",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "faa6c828-d580-49ba-9aa9-714e0f10d332"
        },
        "item": {
          "id": "b9d081e9-85cf-4d34-a540-5d9275c5e989",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "64b496c8-59c0-46e5-9629-97b43dbd4d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5493b374-f181-4e30-ba50-457b11d95051",
        "cursor": {
          "ref": "fb47fcda-764e-4294-92cc-0d6aff15f641",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3868c9e3-c65e-48c1-a999-866ac11351b8"
        },
        "item": {
          "id": "5493b374-f181-4e30-ba50-457b11d95051",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0b5ecdcf-8297-46d9-8a5a-31e02dbb938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f0e2f7-c252-4b09-9d75-49182b31bd1a",
        "cursor": {
          "ref": "74101f22-e9dd-48d1-9741-3015bab595ae",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f91db0b2-ba61-4f0e-8ee7-9bd5a9091724"
        },
        "item": {
          "id": "a8f0e2f7-c252-4b09-9d75-49182b31bd1a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c40e39cb-580d-4313-a467-0d84df94dd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb734bb-f249-4a46-a7a5-008d552a91ba",
        "cursor": {
          "ref": "a5c7ae09-1df5-476a-8819-806c1c903e3c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eb7835c1-4bd1-4f11-93e1-792f6f068926"
        },
        "item": {
          "id": "4eb734bb-f249-4a46-a7a5-008d552a91ba",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d81e6c86-cf2a-41a2-aa7c-047ffb3f2def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc981563-3e83-46af-bb1f-a9591c79794f",
        "cursor": {
          "ref": "aa2c0f7a-d24a-4d7f-af4f-d4e9343176d6",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2c52c142-5289-43ee-9e3c-aa0d2f928a3e"
        },
        "item": {
          "id": "fc981563-3e83-46af-bb1f-a9591c79794f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6051b4b0-81db-4362-8fe8-dc468a3e7311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7937d6-12b2-48d3-a926-298e11919d2e",
        "cursor": {
          "ref": "c97ffa3f-1f3d-4b75-8706-d50d60afcf31",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5b2aa3e4-e88f-4d38-a092-35a3448e2233"
        },
        "item": {
          "id": "5d7937d6-12b2-48d3-a926-298e11919d2e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fc0f0d01-5188-4447-805f-1c9e70ece7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1214bce-c6ae-4819-ae51-4feec8008950",
        "cursor": {
          "ref": "d2f65954-425e-4a9b-96a2-9b5301d28191",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dc71b4f7-def5-4cdd-be0a-2615c5f7ab6c"
        },
        "item": {
          "id": "b1214bce-c6ae-4819-ae51-4feec8008950",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a915540c-e103-40ba-ac5b-556ade8ff555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388abab6-c1be-430d-9e96-5062f24d9581",
        "cursor": {
          "ref": "237033e7-aed8-48d3-95de-dca98425d3cf",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "35d87ba8-6606-4427-8b0e-e19817955cc5"
        },
        "item": {
          "id": "388abab6-c1be-430d-9e96-5062f24d9581",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b0b3a7a8-09f9-4148-900a-f1c1c52608cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2401dde-92fa-4343-8ac4-852baff65c91",
        "cursor": {
          "ref": "88a14e12-edda-471b-923b-2a02132bc272",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ecefe179-147a-4c61-a145-b8e91074bca0"
        },
        "item": {
          "id": "d2401dde-92fa-4343-8ac4-852baff65c91",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6bc8a5a5-eff2-43f8-bb16-7c4f869d1f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eb6122-4ed8-4f02-b6fb-e3d67a912ba9",
        "cursor": {
          "ref": "633c8f8c-3c3f-472b-936e-5c527bab6381",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "81985196-470c-46aa-aee7-87c05ea32cf0"
        },
        "item": {
          "id": "40eb6122-4ed8-4f02-b6fb-e3d67a912ba9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "77d32154-c21c-432f-bda5-32d0b66d27b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9c14b4-ac8a-421c-b185-726920e07791",
        "cursor": {
          "ref": "1af47542-d4f5-48cd-9553-b95d196e6c16",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "07c3be9e-0ecf-46dd-8712-6691f2609f8b"
        },
        "item": {
          "id": "5b9c14b4-ac8a-421c-b185-726920e07791",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a31a9472-4df7-425d-928a-cb725eee1ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac2bfbe-48c2-4105-b970-32a5611710df",
        "cursor": {
          "ref": "60cdffdc-f495-4d12-8abb-b90115b7bd4f",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "364fe2a6-33e8-4b59-aaff-900a743912b2"
        },
        "item": {
          "id": "7ac2bfbe-48c2-4105-b970-32a5611710df",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4a015210-442b-4af5-89e0-edfc1f7bc570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f48ac4-e49c-4910-9160-530d81d2a701",
        "cursor": {
          "ref": "8e7cc625-e8e0-4f67-a9df-eb1cf8c174ba",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6032b179-6a8d-47dc-9992-a167668d16d1"
        },
        "item": {
          "id": "32f48ac4-e49c-4910-9160-530d81d2a701",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aae469ba-6e92-487e-b484-fd005a40def2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dade12-75df-4b06-a929-2d1d7c9db234",
        "cursor": {
          "ref": "03b59d75-c9a0-459f-860d-294e7fff4eb5",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7358a873-d47c-4593-8eda-4329bcb1a39e"
        },
        "item": {
          "id": "a8dade12-75df-4b06-a929-2d1d7c9db234",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "caba373f-d898-470a-9e8b-bd5ca0eef89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13b8ee4-ec4a-4470-90ca-a19e54edb9b4",
        "cursor": {
          "ref": "3a06a87e-1bc1-4ebb-9c74-293ccc4accea",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "18f2d9e3-3375-4cde-8f3e-3c1b980d8fda"
        },
        "item": {
          "id": "b13b8ee4-ec4a-4470-90ca-a19e54edb9b4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "211ef4f3-3660-4ed8-9821-18f9e253ec63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e90e91-f27b-4518-a087-1979a04c1093",
        "cursor": {
          "ref": "1c2bd3cc-96ea-452c-afa1-b2ce9156c6dc",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4edcd719-c23e-418f-a4a8-792e4319dcf7"
        },
        "item": {
          "id": "f2e90e91-f27b-4518-a087-1979a04c1093",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e54a4228-90be-426c-82a7-6ed085f6885b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bbe004-4a9f-41d0-9d17-579fee972f21",
        "cursor": {
          "ref": "532ebfd9-ba65-4257-8518-13d8c9adfe7f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2ca5b0ff-feac-44bb-ac63-9166476b43e8"
        },
        "item": {
          "id": "63bbe004-4a9f-41d0-9d17-579fee972f21",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "03460939-7160-48a6-a1bd-93b385dca014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec86b998-58cd-4f77-a3f3-28349477d8a0",
        "cursor": {
          "ref": "33a62719-e255-4931-a3b6-83663519674c",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3ac38735-6295-456e-81cc-0d0c00bfd4fc"
        },
        "item": {
          "id": "ec86b998-58cd-4f77-a3f3-28349477d8a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb7bc741-42df-4493-aaef-e9e1ec1e7818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd58cc15-71a1-411c-8179-32809632a73c",
        "cursor": {
          "ref": "9bf79295-d6cc-413c-aaa3-f63414447584",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3cda8c65-5915-4d8f-9e0c-64867c39bf13"
        },
        "item": {
          "id": "bd58cc15-71a1-411c-8179-32809632a73c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "05c30f60-e04c-4513-9c61-52e0003faba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63468ad9-7d9a-4cf0-bf32-132f65bda3b1",
        "cursor": {
          "ref": "30c5978a-b830-416e-8b14-da02fc0e74a6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b6a510fb-a579-4f3e-b716-7d60aee11d15"
        },
        "item": {
          "id": "63468ad9-7d9a-4cf0-bf32-132f65bda3b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1ed6b6ab-d6dc-49f4-a4af-0e0f1c79d82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c63f4b0-aefa-4c3f-83f1-f193e161fc45",
        "cursor": {
          "ref": "1f4f020b-65ce-4e82-a4f2-9583f00d6610",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5c7eef4c-e8d2-48f0-b3fa-6f914a5b8dd8"
        },
        "item": {
          "id": "5c63f4b0-aefa-4c3f-83f1-f193e161fc45",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5cb8af90-290b-4a0c-ab6f-41676e384d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b5d523-9053-48bd-acbc-3acafba67acd",
        "cursor": {
          "ref": "4b95f451-4499-45f0-98c1-0264edf2b6b8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "55741013-999f-4b94-8032-c87d6e20a81d"
        },
        "item": {
          "id": "e0b5d523-9053-48bd-acbc-3acafba67acd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "462581fd-9bb3-43cf-8d57-774eb34e771d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2378854d-30e1-4a70-96b5-30b12fd3bd87",
        "cursor": {
          "ref": "1cc59e75-ccf0-41ca-9088-5c47a8ecea95",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "835fe9fa-0f8e-49a1-8ce7-05c634b0db0e"
        },
        "item": {
          "id": "2378854d-30e1-4a70-96b5-30b12fd3bd87",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73ed3541-ab90-49ef-bf37-f5f01ac9ca71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe38fa9-0831-4ff9-8b46-713bfb5d68a2",
        "cursor": {
          "ref": "a87c371a-2eeb-4e0a-a541-d0193d851153",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d2d1b60d-5125-4dc9-9ae3-f28d95ef6fa3"
        },
        "item": {
          "id": "2fe38fa9-0831-4ff9-8b46-713bfb5d68a2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "610c0e22-1607-4571-af4c-89c6aec997fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc28689-9898-47f0-a732-e5b46e1d964b",
        "cursor": {
          "ref": "4e5ab8b0-948a-4de1-aa44-057449f1ce86",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "42e98664-9332-489b-a8f6-67b1aa802fbe"
        },
        "item": {
          "id": "2bc28689-9898-47f0-a732-e5b46e1d964b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dccfc702-b457-4818-9a3f-4ca019245ed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31c9f9d-dfbb-4d8d-8d4f-1089bf342d82",
        "cursor": {
          "ref": "bfcdad7c-ec5c-4633-be4b-ff20e4d82ed3",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "59d09a7b-f73d-42bb-8b65-3d4012b7e06b"
        },
        "item": {
          "id": "d31c9f9d-dfbb-4d8d-8d4f-1089bf342d82",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0cbcccb8-c0bb-4bc9-b0ec-3bcd326c0389",
          "status": "Created",
          "code": 201,
          "responseTime": 1582,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "87319bd5-6831-4b92-9bf2-21e7644976c1",
        "cursor": {
          "ref": "358c0ff9-48af-4c88-9cc8-61f80df77016",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ffad79c1-5062-4033-942e-b1ad86d47888"
        },
        "item": {
          "id": "87319bd5-6831-4b92-9bf2-21e7644976c1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9b053b84-fb24-4469-860f-e8bfe955151b",
          "status": "Created",
          "code": 201,
          "responseTime": 1445,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aef53f-aa5c-4f37-be5a-25ebdd2d11b6",
        "cursor": {
          "ref": "6f060f77-39a3-4dcb-92f4-b57b0a16226b",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a8e73dc1-be6e-456f-ae41-5421a7410058"
        },
        "item": {
          "id": "c1aef53f-aa5c-4f37-be5a-25ebdd2d11b6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ad07fe19-1185-49fd-ba26-9f9a312f1ffb",
          "status": "Created",
          "code": 201,
          "responseTime": 1431,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e65538-5057-4d2e-891b-d04e03bc5cd1",
        "cursor": {
          "ref": "ebd25f84-1bad-445b-943f-83ee029d993f",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "827a1c3a-ec78-4471-85e8-2df3df339d84"
        },
        "item": {
          "id": "87e65538-5057-4d2e-891b-d04e03bc5cd1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "03518491-83ef-49cd-8be6-e6c1b58357f5",
          "status": "Created",
          "code": 201,
          "responseTime": 1474,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d74266-85c4-4beb-a5d1-7feeb907f1be",
        "cursor": {
          "ref": "8f43d7db-30a6-4f2a-9e5f-a5f0d3747b89",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5bb46fbc-1e44-44b1-b75d-0893ff99cffd"
        },
        "item": {
          "id": "a4d74266-85c4-4beb-a5d1-7feeb907f1be",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3eaa0657-cd94-4c71-bbb3-515b8ac508b0",
          "status": "Created",
          "code": 201,
          "responseTime": 1430,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bb8f05-4e21-42bf-af9b-ca126bd92052",
        "cursor": {
          "ref": "c39549db-b4c4-4a32-a4c1-e5c35bd2a9bb",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "92e47f0f-918f-4e2f-8081-b7411f137850"
        },
        "item": {
          "id": "b3bb8f05-4e21-42bf-af9b-ca126bd92052",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2ed6e53d-b54c-404b-83ee-e4db3c831d14",
          "status": "Created",
          "code": 201,
          "responseTime": 1439,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30f0549-6da9-4017-a286-584f15838002",
        "cursor": {
          "ref": "32698794-5c5d-46b4-a5fb-8c6d44e0d3e4",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17aaad91-e250-4817-9a93-d634706484e5"
        },
        "item": {
          "id": "a30f0549-6da9-4017-a286-584f15838002",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cd64ad18-4b31-4251-8833-f2a02ea7ec0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deac89e7-c53c-47b6-b147-476e9163e85a",
        "cursor": {
          "ref": "ef3417c9-1404-4caa-8833-4641a1705691",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1203265f-ed80-4ba0-9347-ac05ffacc650"
        },
        "item": {
          "id": "deac89e7-c53c-47b6-b147-476e9163e85a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "338ee66d-6805-439f-aa9b-09bb8e3b8f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dee714-73b8-4647-9911-d11e15d87a8d",
        "cursor": {
          "ref": "eabd24b3-c467-4115-8638-99f7ddd0b6e0",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1b94a480-c351-44f3-ad5b-f6a560a4cd0e"
        },
        "item": {
          "id": "98dee714-73b8-4647-9911-d11e15d87a8d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5237faf6-7cbb-4c03-8e98-7727dd627d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305349ff-973f-495c-8d2f-b7c7aaee4ea4",
        "cursor": {
          "ref": "2f25d30b-ec07-4411-b5f5-c003435ada34",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6c639a93-eb42-43cf-abc2-95b8d2a97a97"
        },
        "item": {
          "id": "305349ff-973f-495c-8d2f-b7c7aaee4ea4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "32148f1c-f5cc-46db-80df-47afc0689d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c390076-0c6d-4f83-b360-fd0e2443aabd",
        "cursor": {
          "ref": "874e6fa0-8417-400e-91c2-c810a2cd6b36",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f972fbf5-c73b-4c32-9d45-ff25224878f9"
        },
        "item": {
          "id": "9c390076-0c6d-4f83-b360-fd0e2443aabd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c6744a1e-0011-4fd5-9468-16da9b130472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146b58bf-d411-4616-a3d1-485d63042dfc",
        "cursor": {
          "ref": "8c32ce0f-2b90-4896-bc11-c3ba51ed2804",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d086e951-da6d-4173-b8fa-9d7e25060e61"
        },
        "item": {
          "id": "146b58bf-d411-4616-a3d1-485d63042dfc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c3f7807c-3568-4f71-8693-ed16669234fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3366d27-c532-49ca-9d79-2b2c37afd673",
        "cursor": {
          "ref": "33428970-4eff-401a-9869-c5b5c494fd7e",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "67c6d230-60a8-4e03-9951-d3aa7b331035"
        },
        "item": {
          "id": "d3366d27-c532-49ca-9d79-2b2c37afd673",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d165254a-7e21-4734-9886-db3c66f11729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382ba59a-0396-4004-b590-8f7aba24834c",
        "cursor": {
          "ref": "f18053e6-8663-4463-b484-203492ad8017",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e3d4e6b7-f0c2-4298-9a58-5f68b9b441fe"
        },
        "item": {
          "id": "382ba59a-0396-4004-b590-8f7aba24834c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5769c464-e7fe-4212-a9f8-8389fd3e2b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3245742-be66-4107-8c0a-88b2e44ac0f4",
        "cursor": {
          "ref": "f9808bd9-c2dd-40cf-ab55-f25a04bd5313",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "99b5f444-b2a3-4f48-b635-28f5448921a4"
        },
        "item": {
          "id": "b3245742-be66-4107-8c0a-88b2e44ac0f4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0faf3259-5da7-49b8-b1a1-bb82afddaefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c9a0fc-610a-45c9-afa4-e7acfce44ac7",
        "cursor": {
          "ref": "ce252c97-b15e-4921-9b74-2ffd4cc04ff8",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "790ac0e8-7852-4fdc-83c9-26fca22a5eb3"
        },
        "item": {
          "id": "16c9a0fc-610a-45c9-afa4-e7acfce44ac7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "279759e2-6d8a-4080-9689-3f84317ffb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98c71ec-a498-4951-a6de-82baf9ed1757",
        "cursor": {
          "ref": "d76f9b4d-6fc2-4b63-adb4-bed4a3b8ed9e",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1ffb5826-4b04-4acb-a528-a45a41d9fae4"
        },
        "item": {
          "id": "f98c71ec-a498-4951-a6de-82baf9ed1757",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "378abc80-a99b-423f-adcf-9f21c425a278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df427bbd-a2ee-4922-b96a-cb92823ffbc5",
        "cursor": {
          "ref": "a35686b0-f2c4-42eb-835f-dd79aab565e5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "13aea321-70de-410f-9255-4bec99e146d9"
        },
        "item": {
          "id": "df427bbd-a2ee-4922-b96a-cb92823ffbc5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c04f31aa-5838-4513-8d4d-434077ba60e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691461e0-b06f-451a-a297-4ad447b58ec7",
        "cursor": {
          "ref": "e6cf105c-33ff-43d2-8ed9-76cde0f2f0d5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4ef5e18a-ce1a-4414-b37c-392cfddc6acd"
        },
        "item": {
          "id": "691461e0-b06f-451a-a297-4ad447b58ec7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c64d9fbc-5314-435c-b84e-733516d672c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce9facc-2ed0-4f77-b587-536f0035c68e",
        "cursor": {
          "ref": "935e7489-192b-426b-8a21-ea3a10213960",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6be617ca-6eb3-4ac8-8c62-f21f02073687"
        },
        "item": {
          "id": "2ce9facc-2ed0-4f77-b587-536f0035c68e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0a72fde5-30d3-47c3-8b01-9ab7413991b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731fcb3f-4932-4b98-974a-ec42485542cb",
        "cursor": {
          "ref": "094dab40-e287-46dc-b837-8d2f713f8ebb",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3bd905bd-69c3-47db-b0d9-a089b9b88b2a"
        },
        "item": {
          "id": "731fcb3f-4932-4b98-974a-ec42485542cb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b8b2a7c5-553d-42ea-83cd-e97f3090362f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3758e74f-6662-4b72-8101-b52a10a6ebef",
        "cursor": {
          "ref": "fa07be4a-5261-4d2e-a613-3cbaf8824798",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ca71bc5e-92da-4455-8cfe-7a7cf5454b83"
        },
        "item": {
          "id": "3758e74f-6662-4b72-8101-b52a10a6ebef",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "035f0fde-04eb-48f8-8050-9ce58bfee33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b030de3-f43e-4d3c-aa61-6f041a13195b",
        "cursor": {
          "ref": "1aa65777-1c69-4d1a-a751-78d9c4dcc430",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3191ba36-833a-4d92-8727-c1960d985733"
        },
        "item": {
          "id": "2b030de3-f43e-4d3c-aa61-6f041a13195b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ad63ee5e-6480-4293-9e46-3c4509741752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54f5a5f-2f64-43e7-a2d5-a839a20dcac4",
        "cursor": {
          "ref": "7874e0a1-743d-4ff1-81bd-1a255175b75d",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9f8e7d3b-c509-48de-a97c-fb084d528196"
        },
        "item": {
          "id": "a54f5a5f-2f64-43e7-a2d5-a839a20dcac4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4d0d1f82-5845-40a2-9b61-0ac49a9abcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59b6557-bb39-4c6e-9b32-651a38ba6faa",
        "cursor": {
          "ref": "1f28fd71-704f-432c-aac0-c209bffc3c4c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8fec43d8-4a3b-40f4-b9ed-ab671535b20f"
        },
        "item": {
          "id": "e59b6557-bb39-4c6e-9b32-651a38ba6faa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fff51e14-3732-45f9-a689-2303c95b54e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6987676f-fd32-4a0a-b0af-eba66159bfbf",
        "cursor": {
          "ref": "110261a7-57b0-41d4-9df7-6ae4950fed20",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ac14312d-744e-4287-a0a9-e8cdbc378c97"
        },
        "item": {
          "id": "6987676f-fd32-4a0a-b0af-eba66159bfbf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ea560ace-d736-4ab0-8fbe-832e410a5514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051de52a-0ef2-494c-a1bf-4038cc5b79f9",
        "cursor": {
          "ref": "72000b81-0c5a-400d-94d8-1aa59304e6dc",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "752800db-8f01-40ea-89ee-796dd6629080"
        },
        "item": {
          "id": "051de52a-0ef2-494c-a1bf-4038cc5b79f9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b171ec88-0026-4c3b-9167-96eb7635545a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb581a4a-bf86-40cd-a146-10a7c2fca4ef",
        "cursor": {
          "ref": "60d79524-338f-4559-8355-e365e065f07f",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1fe0976b-3e0d-485e-9124-4e0987e305e5"
        },
        "item": {
          "id": "cb581a4a-bf86-40cd-a146-10a7c2fca4ef",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "88d5db85-c987-4e41-827a-313bb285195b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11145e4e-b7c6-4537-a88f-d364ecf3977a",
        "cursor": {
          "ref": "94043082-2dbd-407e-b90d-04160ac3d2fd",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b9601e07-bc1e-49ac-ac50-77733ee4541c"
        },
        "item": {
          "id": "11145e4e-b7c6-4537-a88f-d364ecf3977a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8bd5dc24-4b9e-471c-a094-bf00ea4c836d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffe90f6-e215-4549-baad-20994702e923",
        "cursor": {
          "ref": "79774fc6-b310-4fde-a572-f101174a927a",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "651cbd05-299b-4613-b112-257feb398a2b"
        },
        "item": {
          "id": "8ffe90f6-e215-4549-baad-20994702e923",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "47dfa216-6476-4a2f-91e3-a71da81aa6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d7646-e184-44f5-8562-f87c0432f11f",
        "cursor": {
          "ref": "13b6bcd5-260f-485f-9315-1f8b876232e3",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ab05efd6-2452-4396-83b2-bc7c2a668adf"
        },
        "item": {
          "id": "040d7646-e184-44f5-8562-f87c0432f11f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "438f06bf-387b-471c-aca3-7b36e3b5ab05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fb7717-935c-4dcf-a85f-2d4c6317ed53",
        "cursor": {
          "ref": "db352ddf-7c6b-4dd5-a792-f70a86ec2ca4",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9086c86c-2cd1-4674-9d7c-558b9540d6ea"
        },
        "item": {
          "id": "95fb7717-935c-4dcf-a85f-2d4c6317ed53",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18ac6413-d247-4604-8c8d-c14e8b20c890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a94c64-c712-49eb-a938-0b6b811dfe39",
        "cursor": {
          "ref": "b1190687-70c1-4beb-a817-7cb1f0a4e84b",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6df237c3-d756-4f03-9fb4-ed036c3b5cdc"
        },
        "item": {
          "id": "d1a94c64-c712-49eb-a938-0b6b811dfe39",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "637cb579-ec59-42d2-81fe-1724df2875d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f275841c-2faf-4d0f-8dec-5d26e8f49cb3",
        "cursor": {
          "ref": "2169f443-7811-4e86-89fb-f30b74cb1a48",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ac2a81c8-7e46-4789-aee6-8b36c2143bf0"
        },
        "item": {
          "id": "f275841c-2faf-4d0f-8dec-5d26e8f49cb3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "69dd00dc-5e08-4e9f-964d-64354a3ffaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8f3630-41ec-43e2-92af-3a35df5e90dd",
        "cursor": {
          "ref": "68f40366-b9c2-47b4-9341-3937a705738b",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e201ace2-6c6c-4b71-a83f-a4434ba7e4bc"
        },
        "item": {
          "id": "6a8f3630-41ec-43e2-92af-3a35df5e90dd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dc1765a2-c642-4109-b22c-90db1bb8eb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba7c5e3-78a0-4b8e-b501-bb092cf2fb42",
        "cursor": {
          "ref": "55a4a7e0-1a0e-4e31-9709-a432977f26d4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "62006da4-a55c-4131-a0cb-332f70d75c03"
        },
        "item": {
          "id": "3ba7c5e3-78a0-4b8e-b501-bb092cf2fb42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "015500c7-18af-430e-9ea1-b813c20354b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1f02b8-6c66-4919-9b86-8469ce68d8b4",
        "cursor": {
          "ref": "cfd70d82-8288-4b50-b206-e2f3f52a8f04",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fc34d6c1-b7be-4b75-bbea-5d2704117b88"
        },
        "item": {
          "id": "3b1f02b8-6c66-4919-9b86-8469ce68d8b4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fe141f79-d03a-4451-9fab-d2bebed68dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bebb58-49a4-41c5-ab29-1430d035e2ce",
        "cursor": {
          "ref": "dc5e6631-af7d-41c9-8c3d-8707d9e27cf3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ff16cce9-0023-4f27-8362-bc8fad60420f"
        },
        "item": {
          "id": "99bebb58-49a4-41c5-ab29-1430d035e2ce",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0ba0c5a4-93c9-4395-a499-de805bc7cbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5081f1-f16b-4c88-a839-709697147115",
        "cursor": {
          "ref": "ca66b3cd-d3bf-4a66-a260-8abb00c80e18",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "237262e8-0592-4948-87ee-22b5bddeaf0f"
        },
        "item": {
          "id": "ec5081f1-f16b-4c88-a839-709697147115",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "166aece6-1cca-4987-9ea1-46fcabb633e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03560854-4952-4663-aa94-d4825871cc77",
        "cursor": {
          "ref": "c776f78c-bdb4-42a2-8e45-1a72441ade21",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aedeee0f-103f-4dba-8511-662963bc6379"
        },
        "item": {
          "id": "03560854-4952-4663-aa94-d4825871cc77",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f735243-91a8-48de-8ba0-5da7e266b738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89458282-7295-41ae-becb-668a5ba0b13f",
        "cursor": {
          "ref": "f224bc44-60c9-4d8c-a735-99a8a4a1cadc",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f93b84cd-4a63-488f-ab01-2d472fccf686"
        },
        "item": {
          "id": "89458282-7295-41ae-becb-668a5ba0b13f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1fac20b2-2d5e-4e0f-b206-fca83e48d7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09200eba-b322-4b31-a3b0-f4ac0751d8cf",
        "cursor": {
          "ref": "e4fb6bf9-3f51-4769-b44e-561b6bf1a37e",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8e12faa2-3bdd-4c3b-a158-54809d4848b0"
        },
        "item": {
          "id": "09200eba-b322-4b31-a3b0-f4ac0751d8cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e49864e5-8677-4429-97c0-ea7f34b38b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99db9e3-1375-43cf-b258-479e93d0f704",
        "cursor": {
          "ref": "0998e170-b453-4038-8cd1-2988b1c17933",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d49c1692-b6bc-42c8-86c6-39f4c63a02b4"
        },
        "item": {
          "id": "f99db9e3-1375-43cf-b258-479e93d0f704",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "665c9b2f-7082-4d09-afc1-57707161723f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bff941-69e2-4223-927e-950902bbc566",
        "cursor": {
          "ref": "4321b73f-e8c8-4d14-a748-d48c40bbc5ec",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "11ddbb02-e4fc-45fa-a284-dc9cf1539795"
        },
        "item": {
          "id": "37bff941-69e2-4223-927e-950902bbc566",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "be0d1418-0024-4e24-96ea-405af7368529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cb41be-6c66-4818-888c-4b0afd2a37cf",
        "cursor": {
          "ref": "e04c3f16-48ab-489f-a4ea-be85bdd28359",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "09542273-213d-470c-bfc7-9da23fbcac5a"
        },
        "item": {
          "id": "a9cb41be-6c66-4818-888c-4b0afd2a37cf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "20d104b3-c3b6-4e7d-9027-6d9d78d71a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859cc7b3-d601-42fb-9a14-d865eb0ac95c",
        "cursor": {
          "ref": "006f6a45-8191-4020-ae7f-9b3bcb09a499",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "99de0fc3-c016-4397-88a7-12592b3f50a9"
        },
        "item": {
          "id": "859cc7b3-d601-42fb-9a14-d865eb0ac95c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e7626429-f334-46e1-9334-dca3b5b7cb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c8dc1d-ab57-45ec-a7f4-63625f80aa26",
        "cursor": {
          "ref": "613716c3-3e33-46b3-94fc-fd0eacc97a42",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f0301f8a-09af-4df6-ae61-5afbeb24ffac"
        },
        "item": {
          "id": "d0c8dc1d-ab57-45ec-a7f4-63625f80aa26",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6104e3f0-2577-4205-b6a6-61e2049a9c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b5c38d-8284-4db7-810c-e24a7940c9ea",
        "cursor": {
          "ref": "6563305b-f61c-40d4-9d4b-af9f014b2da7",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e82beb61-4953-402e-99e3-be62418162eb"
        },
        "item": {
          "id": "02b5c38d-8284-4db7-810c-e24a7940c9ea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "21e48ec6-2af5-4db3-a239-3aa707722a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82caf456-0261-4e88-abb3-08e58fb956ab",
        "cursor": {
          "ref": "1e564cad-ca7e-4ded-a515-c5cc2ad27e4a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1d5883ae-7306-4fd2-abd0-c416e1b31759"
        },
        "item": {
          "id": "82caf456-0261-4e88-abb3-08e58fb956ab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "466644b0-39c9-4c75-a9b6-4a4d89a277ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd51525-1df3-4005-8738-b39f6c4433dc",
        "cursor": {
          "ref": "e17c03be-c06e-443c-a312-b61f54bdd52c",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "30f88181-9f78-42ff-a229-5d3b4c49e5a8"
        },
        "item": {
          "id": "7fd51525-1df3-4005-8738-b39f6c4433dc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bd2a5968-ae4f-4b66-9a89-ea8cc3b5e098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37aef8cd-02f6-4e1a-9c02-5c9a134c6256",
        "cursor": {
          "ref": "1f0b12e4-2c93-4cd6-9a40-4aeb52df6303",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4746e0cf-00de-458b-82e2-db5181925c06"
        },
        "item": {
          "id": "37aef8cd-02f6-4e1a-9c02-5c9a134c6256",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d6475313-525a-4055-8a99-a6cf111ea233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9c8a51-fcaf-4b3c-ab6b-7a2a882c90a6",
        "cursor": {
          "ref": "e927a497-5c4d-4839-b325-bbbefb35bd8a",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "49b72467-8d40-4502-8f17-ca23dea51d7f"
        },
        "item": {
          "id": "ef9c8a51-fcaf-4b3c-ab6b-7a2a882c90a6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "26b8a89e-3c3f-4017-bffc-4ff11a7872de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28909858-7ed8-46e6-9d05-b35dcc8d9d50",
        "cursor": {
          "ref": "12ed9c1d-85f8-46c9-9a7f-ca5ddf7e36c6",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a6aa823a-f2c7-464e-b23d-5d5182161331"
        },
        "item": {
          "id": "28909858-7ed8-46e6-9d05-b35dcc8d9d50",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f3a6ad4f-b48c-4627-92fa-8b00a69b60bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99995cb7-f007-40aa-94a9-27833e28c9fc",
        "cursor": {
          "ref": "bf13d098-7790-4647-b82b-cdfa540c1e51",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "01a1b3f2-630e-4750-9da9-78573fb87f8d"
        },
        "item": {
          "id": "99995cb7-f007-40aa-94a9-27833e28c9fc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4175c5fb-ca12-44b6-ad0a-64074b070b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0213f137-60b0-4efa-9d9f-aeb209746b77",
        "cursor": {
          "ref": "f88d4bdb-a6ea-4cdb-a7b0-c3a6a521d253",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61bb4156-2de7-4d81-ae45-ceb0c68a8f49"
        },
        "item": {
          "id": "0213f137-60b0-4efa-9d9f-aeb209746b77",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fc2a3cd7-39b0-4bf0-8a5e-bb5c74052936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71313c2-f3be-465f-82aa-1a48f0516d43",
        "cursor": {
          "ref": "48e6fe63-8975-44bc-8198-13c0e7cfa408",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4a9ba89e-41e6-430f-bda8-8d478f71ded0"
        },
        "item": {
          "id": "d71313c2-f3be-465f-82aa-1a48f0516d43",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "68be3cbf-1ab8-43a3-840b-6bcabec1b5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137d3409-ca75-4538-8410-d9163b75ba7c",
        "cursor": {
          "ref": "3383ded8-d808-4809-9827-f3e0af8a844c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c424be25-2733-46b1-a060-d6d32d734c18"
        },
        "item": {
          "id": "137d3409-ca75-4538-8410-d9163b75ba7c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c61e193e-abcb-4d52-a8d8-b722ada325f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6e86bd-91a7-4f26-b7c0-f3736c9cdf77",
        "cursor": {
          "ref": "6b15c4ea-b5a3-4243-b57c-06685ff4a803",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6b3797d1-b6b8-4b9e-9b07-1ce9845a8fd6"
        },
        "item": {
          "id": "da6e86bd-91a7-4f26-b7c0-f3736c9cdf77",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "223b0e7d-5cd1-413c-8833-c084301a5fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9db0c7-0199-4ce3-8a13-740acde3dbf6",
        "cursor": {
          "ref": "9fec676c-7efc-4b4a-808d-c8837d664c81",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "849ce3a3-2121-4027-b1f4-9e3e2846387b"
        },
        "item": {
          "id": "3d9db0c7-0199-4ce3-8a13-740acde3dbf6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b90cfb11-856b-4e75-bf59-02f0bc347790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73da7f6c-f998-4040-894c-76a887f414d9",
        "cursor": {
          "ref": "d896bcb6-59ad-4344-ac4c-0fd1b589dd16",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f4265696-e7d3-4cfc-b10c-f5127f0bbf5b"
        },
        "item": {
          "id": "73da7f6c-f998-4040-894c-76a887f414d9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3f8c2dbc-9ef9-4a3a-b883-45a15df8d637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606340e2-3b16-41ff-b5f2-9d5aaaaed26b",
        "cursor": {
          "ref": "33e5363d-2eb5-4744-8340-371269d8f9de",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b1eec362-bfc9-48c9-b8cb-1b8ea6c917fc"
        },
        "item": {
          "id": "606340e2-3b16-41ff-b5f2-9d5aaaaed26b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9046b626-e76b-47f5-99a7-f718c844e9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33c8172-7e31-4bea-8009-19f0de5524bf",
        "cursor": {
          "ref": "727a8db8-b31f-40a6-b188-be9d3d67c173",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3cefc211-2e06-4614-b436-aa2ad20d3da3"
        },
        "item": {
          "id": "b33c8172-7e31-4bea-8009-19f0de5524bf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fee8813c-4cc1-45f1-9541-c66be53c18f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4994a153-2baa-46f1-8f60-29643c15ee3f",
        "cursor": {
          "ref": "2643570b-7f01-47b9-a4d5-2a6518ff31d5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ab37175b-c6e6-4e5a-8aec-0b4625160ad0"
        },
        "item": {
          "id": "4994a153-2baa-46f1-8f60-29643c15ee3f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5faf3e81-c4b8-428f-8d2e-b9f92c642051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4948d0a8-0295-4abd-a8ae-1d857157c67e",
        "cursor": {
          "ref": "e3c95e5a-dad1-4cf8-b1bf-0b779f22ba6a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "10ffba04-f804-453d-8b14-a6bb6a75bc90"
        },
        "item": {
          "id": "4948d0a8-0295-4abd-a8ae-1d857157c67e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08e279aa-9567-4c4b-9cbe-9f2214320d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ef42a8-a667-450f-974b-9733afc67568",
        "cursor": {
          "ref": "3a4732cd-b9f4-41aa-bdd9-de8d914399e5",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c24bc535-dde7-4b69-bc81-8c616f367dd2"
        },
        "item": {
          "id": "16ef42a8-a667-450f-974b-9733afc67568",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "be5c6f38-7c9b-4f03-8a8f-b79c825bbe34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3ac5a6-7b77-41ba-9a0b-9a30559fdcd7",
        "cursor": {
          "ref": "fd0924fd-4832-4145-b923-92803e03eb73",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf978d9f-c881-48b2-ad82-1b2176a917c7"
        },
        "item": {
          "id": "bd3ac5a6-7b77-41ba-9a0b-9a30559fdcd7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c582c693-69ab-4740-8815-3686102d4d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f04278-68ae-44bb-9f6a-cb89056b9495",
        "cursor": {
          "ref": "6bcdace0-d9dd-4358-8198-10278ee9bc71",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "19776466-52a9-482a-ab22-edaa909fc04f"
        },
        "item": {
          "id": "e2f04278-68ae-44bb-9f6a-cb89056b9495",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "886bc997-796f-45d2-a8b2-a5c976c6f484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdcb1f3-7d38-4984-a428-b6da469bf6e0",
        "cursor": {
          "ref": "38a0e112-7742-4da2-848b-7fc892f72521",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "94c0251d-fa20-473b-9f3c-139b721a50f9"
        },
        "item": {
          "id": "7cdcb1f3-7d38-4984-a428-b6da469bf6e0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3e8b1a85-fb73-41f1-b036-44383c23829b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9590a6-a0a6-4a35-bb86-7e024354d6b1",
        "cursor": {
          "ref": "e0573ebc-d0c0-401e-8df6-1ba27068493b",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0ffc06bb-7ac2-4bc4-9be6-b9a143b458d0"
        },
        "item": {
          "id": "2a9590a6-a0a6-4a35-bb86-7e024354d6b1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c7cb6b88-4105-49de-96de-ed91bc0b3c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b54d8f7-baf3-4f8a-b740-4afd3547df89",
        "cursor": {
          "ref": "1bdc125e-3297-47fd-b45e-860f86e44af1",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fd13cda4-edf8-4388-8644-eaa493ddae19"
        },
        "item": {
          "id": "3b54d8f7-baf3-4f8a-b740-4afd3547df89",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8670feb6-823c-427f-8059-ea86e3696593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383ed012-43cf-433a-9063-7a176db90935",
        "cursor": {
          "ref": "e3e3cfb7-d03f-4870-8b55-f51a7f0c11ad",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "850fdc37-ff69-446b-bffc-891165e1f7ba"
        },
        "item": {
          "id": "383ed012-43cf-433a-9063-7a176db90935",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "267eb554-19ae-4e3b-b7a9-53b813af0ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2aafb4b-2aa4-4225-9b1e-27928079b143",
        "cursor": {
          "ref": "d6cda021-d01a-47a9-9028-3f0947b835fe",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "142ce7e9-6fbd-4997-b1b7-03057d600de4"
        },
        "item": {
          "id": "e2aafb4b-2aa4-4225-9b1e-27928079b143",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "36235d7f-845f-4296-b7e2-198cad514ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb47ae83-4c36-40ac-a505-dfee661952de",
        "cursor": {
          "ref": "4f59c8f4-b2d6-4e44-a77c-b8ef67edf61e",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e7040c9e-7fdf-4278-b530-6c21a51a4f46"
        },
        "item": {
          "id": "bb47ae83-4c36-40ac-a505-dfee661952de",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cf7f07d7-2173-43f6-b9b8-28b1368bffc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3c181f-2dfc-40e6-b804-c81cbdea4e64",
        "cursor": {
          "ref": "ddeda264-4b62-4abf-9a65-ba0d24138fec",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b12495af-bd58-4d01-8618-f3f2bdb02bdb"
        },
        "item": {
          "id": "db3c181f-2dfc-40e6-b804-c81cbdea4e64",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "54ccda17-47d6-4fb9-b949-b40964387f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25516df-0412-41f2-8e76-5aa66a3c1831",
        "cursor": {
          "ref": "e7daf86e-39ac-4959-8f24-7d4c013799f4",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "45bf53c4-af48-4d14-a0d0-2d3c4c9fb0c9"
        },
        "item": {
          "id": "b25516df-0412-41f2-8e76-5aa66a3c1831",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "40b54c5d-73ca-4bfd-84ad-3b7b219a33f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d466cd-95b5-4d98-b56d-c2f58e9a895c",
        "cursor": {
          "ref": "b2a12fe1-46ee-47fc-9964-8da05e3b1f99",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ae3e36c-dfca-449a-a03b-0d4ac7659cca"
        },
        "item": {
          "id": "c3d466cd-95b5-4d98-b56d-c2f58e9a895c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "92ad307c-ae55-40cb-aca7-a0b1082bad41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54f2b5c-b870-43b6-b946-7e01a8b721d1",
        "cursor": {
          "ref": "63967c88-c26c-42e9-af55-3797797dd722",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f01951db-a60c-421e-be50-a6f010536a40"
        },
        "item": {
          "id": "a54f2b5c-b870-43b6-b946-7e01a8b721d1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "93217529-7bc8-4046-a319-7660d7caa063",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0cccc8-7bcd-464c-bdbd-d1adc7c682e3",
        "cursor": {
          "ref": "e90d034a-3714-41cb-9b8c-41c96cec8ea4",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ce1210ab-87cc-4a1a-99e1-28ca0e75d875"
        },
        "item": {
          "id": "1e0cccc8-7bcd-464c-bdbd-d1adc7c682e3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "469c8c35-2886-420b-bd3b-57d2ff91c1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1092e1d0-3b36-45e3-adf9-4d348769ff10",
        "cursor": {
          "ref": "dcfeb293-ac8d-4734-9bc1-bddeedc2220d",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9088e671-f0c5-4df9-a3da-bfa189fe7f32"
        },
        "item": {
          "id": "1092e1d0-3b36-45e3-adf9-4d348769ff10",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "25ec07e3-0273-417b-ad0f-1920ba481139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb77dbb-0b42-47d4-bcae-f0321991a08c",
        "cursor": {
          "ref": "6f933ec7-5329-4e6f-a5a2-610d3324bee3",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d66298f-9133-48dd-9816-a6e5e3f3be14"
        },
        "item": {
          "id": "2eb77dbb-0b42-47d4-bcae-f0321991a08c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5ff89aa7-327c-4db9-aa48-1298b397884c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5221508d-3277-4921-9093-61a40186e5cc",
        "cursor": {
          "ref": "07529b47-d428-48e7-b5fc-9f7b0ea320ce",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ce178bd9-8a48-4e62-ba70-2f7c90845303"
        },
        "item": {
          "id": "5221508d-3277-4921-9093-61a40186e5cc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4d7c751d-4ca8-47f4-b62c-d2b88a403870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d73723-de67-4611-a891-3d7339f3692d",
        "cursor": {
          "ref": "df701ce0-1513-4abb-b039-ce3e2aef763b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "62b83743-350d-442b-a09d-ffd690b23b2e"
        },
        "item": {
          "id": "59d73723-de67-4611-a891-3d7339f3692d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "54fb82e3-8b6e-481b-bc23-b515ae7efa7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690e8858-b856-43df-aaf1-748f2dd0f598",
        "cursor": {
          "ref": "28c40787-e85a-47d5-bbb6-376e32cab286",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8eaadcd6-dcf0-4c9b-ab64-5e958ed5f5be"
        },
        "item": {
          "id": "690e8858-b856-43df-aaf1-748f2dd0f598",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2f29e4ef-987d-4d43-b708-ae8721c5c583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dbd2bb1e-9143-438f-bc3b-2111304568c2",
        "cursor": {
          "ref": "3614fb7f-50d9-4090-b3d1-dbf92faec6dc",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4ca93dc2-bc0e-4231-83e1-bb9c32949f41"
        },
        "item": {
          "id": "dbd2bb1e-9143-438f-bc3b-2111304568c2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "962b2653-585d-4f57-a6e4-4bad67113258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040896b7-e16c-41a3-bc26-a50c18245ae4",
        "cursor": {
          "ref": "c9fa669f-1d6c-4115-beb8-8018c3dfbd57",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "59700c1e-270d-47ee-a0a8-6b7d099b0c05"
        },
        "item": {
          "id": "040896b7-e16c-41a3-bc26-a50c18245ae4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a3517312-20a9-4795-9d05-2586c72d3f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a957c3a4-8a88-407e-b575-f2b74dbc8cbf",
        "cursor": {
          "ref": "f8799685-0809-49c3-8ce9-a5567f0c09b6",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "24791e5a-6df5-4499-9eb9-520554220547"
        },
        "item": {
          "id": "a957c3a4-8a88-407e-b575-f2b74dbc8cbf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6f398fec-20a9-4123-8746-ca3cf9f716d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee818120-4e0a-4491-8199-a933a9b748b5",
        "cursor": {
          "ref": "1d751b87-027b-430a-b880-1a06d313db89",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "13899047-d310-49c3-a0de-1326ac7237e1"
        },
        "item": {
          "id": "ee818120-4e0a-4491-8199-a933a9b748b5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8fa910f4-754c-404d-9b68-0c8d8db21d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb922115-b15f-4fe5-a93c-1a68b5525d4e",
        "cursor": {
          "ref": "1d60c69d-7e78-4929-9a30-f19f5580f63d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8d97278f-3ccd-4cfa-a15c-fad5743a4d15"
        },
        "item": {
          "id": "fb922115-b15f-4fe5-a93c-1a68b5525d4e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e18c6b6f-7c52-4c5e-959f-610297aead81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2733f5c-ce9c-4eb1-b5b6-1bba4e28f115",
        "cursor": {
          "ref": "a07dcb64-a0a6-4445-ab1c-2ceb7240c1d4",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "71c75889-7801-4652-8cb8-7aab871d9960"
        },
        "item": {
          "id": "d2733f5c-ce9c-4eb1-b5b6-1bba4e28f115",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3a5979fb-3e0b-41e0-8ccf-0924551144dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e3a995-bf40-4447-915c-53f552b41711",
        "cursor": {
          "ref": "cedf347a-0ea9-4e9c-bf23-f37577f7ba8d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "221305df-d57e-4c3d-9110-4dae365067d7"
        },
        "item": {
          "id": "07e3a995-bf40-4447-915c-53f552b41711",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4fe17926-91a3-414f-b2fd-9abf2cb6e467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e17b1f6-a0ce-4fc8-bf73-bddd7aa9bb37",
        "cursor": {
          "ref": "e8059fc3-84d1-4f72-9b2f-afdb3b540fab",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ccd527b9-672b-4b23-96e4-b42edc90e8fd"
        },
        "item": {
          "id": "1e17b1f6-a0ce-4fc8-bf73-bddd7aa9bb37",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "afeee926-3acb-4066-8e9d-472d7382b613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c5b06b-2745-4798-a95f-37f91a33dcbe",
        "cursor": {
          "ref": "138ca4de-b481-48a3-98d1-6085e05a0d8b",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "73130f34-99ad-4e73-9e6c-3b33837b888b"
        },
        "item": {
          "id": "34c5b06b-2745-4798-a95f-37f91a33dcbe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4735b127-95c4-42b7-bbe0-bc1f1930703b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3eb220-5d05-4bb0-b2f8-25c8fee42c52",
        "cursor": {
          "ref": "81d1dab0-1c87-443d-bcb7-466edd5a48c5",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8f57ebbe-0a07-47f4-927c-347f4eb00bdb"
        },
        "item": {
          "id": "3d3eb220-5d05-4bb0-b2f8-25c8fee42c52",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a3b5f73f-43b5-4c6b-bcd4-4c264136117f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8500679-d217-4add-add5-1b6b7bdc1015",
        "cursor": {
          "ref": "2914f05e-ca60-4a7f-ab82-30568edb2e66",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "84045d93-2b32-489d-9b64-066fa5ffff2e"
        },
        "item": {
          "id": "b8500679-d217-4add-add5-1b6b7bdc1015",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6dc41d2e-b429-4897-abc5-41ec3fcb33cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dd58e6-483a-4c1c-b360-672e7a53ec31",
        "cursor": {
          "ref": "8de8c899-678e-428f-bf4a-db22e92b735b",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9f7eca0e-0c4a-4d6e-8432-985125b00878"
        },
        "item": {
          "id": "10dd58e6-483a-4c1c-b360-672e7a53ec31",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "96e92ba0-c353-4cc2-b59b-0a31b504deac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026258e8-a1f8-4d7b-a264-93402f1b8e4c",
        "cursor": {
          "ref": "85578e85-9438-4dd7-9b8a-42b1e6bd31d1",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5b9bd768-c277-4521-a45c-e890484d89d9"
        },
        "item": {
          "id": "026258e8-a1f8-4d7b-a264-93402f1b8e4c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "647affc3-d667-451c-8909-b0c538a291d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1bcb23-565d-4147-a007-052f72d76d4f",
        "cursor": {
          "ref": "d08ec6fd-fbfd-4230-9c4e-185325290408",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "803f36fe-9422-462f-b17d-0a6d657deb48"
        },
        "item": {
          "id": "1c1bcb23-565d-4147-a007-052f72d76d4f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8b3fd4cd-f214-49ef-a264-8b565974f151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13fb2a1-0ca8-4485-990e-1e2ee0fe83e1",
        "cursor": {
          "ref": "ea073bae-0f36-4282-9c9b-c3346f65bf96",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "02f98fda-ece7-4925-84e8-8c7f56aeb229"
        },
        "item": {
          "id": "d13fb2a1-0ca8-4485-990e-1e2ee0fe83e1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "57a241c0-4e30-47ee-a37c-b484eb984e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ea3a3c-3e3f-40e4-a9e1-ac4ce9600497",
        "cursor": {
          "ref": "01c58ab3-fb13-406d-8ee0-ac807b730b83",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "91852635-d0a7-4ea0-b40d-de27b09fdb09"
        },
        "item": {
          "id": "50ea3a3c-3e3f-40e4-a9e1-ac4ce9600497",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b94ea720-9a05-45d0-a6e8-64c6e4ee56c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dbdead-52e8-465d-8435-2922046c74f6",
        "cursor": {
          "ref": "69a8c15a-dc79-4d42-a0a2-9aee554b098b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8c40c0c2-c95e-4c15-b5cf-1d166eb8ba19"
        },
        "item": {
          "id": "d1dbdead-52e8-465d-8435-2922046c74f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c34d3137-65d9-40c7-bd94-038bb7f83257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a5758d-b601-4da9-bdae-4661c4f7b5e4",
        "cursor": {
          "ref": "9c041b46-2edc-4325-95d9-2c39297e541a",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ab913b6a-ce17-47aa-94d3-032160a698aa"
        },
        "item": {
          "id": "e1a5758d-b601-4da9-bdae-4661c4f7b5e4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1796a52b-840d-4364-b648-36924e14b1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595447a9-6414-4338-a4ea-df526f58fdc5",
        "cursor": {
          "ref": "fef8fc00-e24e-44fb-a28c-e1a7d71e74ad",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5be9869e-0f45-4c32-b0d6-39048be37ccf"
        },
        "item": {
          "id": "595447a9-6414-4338-a4ea-df526f58fdc5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ea08f3b5-2dab-4b13-971e-081e48f94566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d474177a-908a-42be-b517-a47974a22ea7",
        "cursor": {
          "ref": "5bd01eaf-9729-483f-9c37-97a016d91ecf",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3bbafeef-b3f7-4da1-b542-7036d2cb9b21"
        },
        "item": {
          "id": "d474177a-908a-42be-b517-a47974a22ea7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6ce3caac-dc8c-45a7-a166-48e0cf9ddb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a927c579-8515-4dd3-a966-97737f655e56",
        "cursor": {
          "ref": "7285bec0-9c3a-4298-a03a-68b29ee06d30",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5553a1af-367e-4157-8534-1ac638ba4027"
        },
        "item": {
          "id": "a927c579-8515-4dd3-a966-97737f655e56",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5d7fef6e-a67e-482b-8617-2432587640c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73f69be-eb2c-4374-b23c-4777feb74074",
        "cursor": {
          "ref": "d9e7e669-c44b-4bb9-9aa2-3c77be411773",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "20f83bd6-e692-4133-9e6d-5cb62a8cca39"
        },
        "item": {
          "id": "a73f69be-eb2c-4374-b23c-4777feb74074",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0a9b6613-1e3c-4c5e-a231-37a49bdc10de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c9e662-0523-4271-b023-151e2b6a9c43",
        "cursor": {
          "ref": "b8c3b31d-f14b-4d2e-9e47-9a41884c30a4",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b93a4d88-5a3e-4381-8176-b992af70b800"
        },
        "item": {
          "id": "69c9e662-0523-4271-b023-151e2b6a9c43",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f9ec6541-7cd2-4c70-8388-04bec8df60fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f44e099-ccfb-48f5-812f-a8c84f574877",
        "cursor": {
          "ref": "ddf3116f-ee74-4860-81c5-539a24a7216a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e93a0c6e-370e-44dd-b826-6c3443a333c2"
        },
        "item": {
          "id": "2f44e099-ccfb-48f5-812f-a8c84f574877",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "13abf12e-d823-44e4-aab9-2af5dce7629e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d598ae17-2efa-4c7e-8e1e-00e72aa359af",
        "cursor": {
          "ref": "d97fd8da-b580-443e-b289-6c36f9f83dbe",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6c387525-5858-4887-978c-90924eca22c2"
        },
        "item": {
          "id": "d598ae17-2efa-4c7e-8e1e-00e72aa359af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "089e913e-dae8-44fe-abf3-b4e50c9f6bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb54ae56-58c5-4070-8cd7-46cfec075121",
        "cursor": {
          "ref": "ed131610-5fa3-4dc8-a345-965a00d610cf",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "884542c2-ae3a-4ba6-974f-b89daba1126c"
        },
        "item": {
          "id": "bb54ae56-58c5-4070-8cd7-46cfec075121",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6f8c4e1a-92a7-4cfe-bd6b-ec8048720075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcc7947-d992-42db-9a7e-6ea4831ed019",
        "cursor": {
          "ref": "dee9b515-fb2d-464e-961c-9e660590483d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2ec26555-6e87-4d8d-9f46-5b2a29765045"
        },
        "item": {
          "id": "9bcc7947-d992-42db-9a7e-6ea4831ed019",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "aa999ac0-2511-46a0-acab-0617a3a77e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df935de0-a29e-4e30-bad0-df5d6307797b",
        "cursor": {
          "ref": "43afe056-0f4e-4ecf-a4a0-46e5595f7869",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "54955199-b21c-49fe-a8cc-a8a17aa536f2"
        },
        "item": {
          "id": "df935de0-a29e-4e30-bad0-df5d6307797b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6f3a17e3-2301-4bae-b663-c78adbaa20cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5893f7a-1c32-4693-992b-a03d31411327",
        "cursor": {
          "ref": "6998449b-b7ab-45c7-bbbe-cc5d5ab15f47",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a3390842-9010-49b5-b857-de08eac53a6f"
        },
        "item": {
          "id": "b5893f7a-1c32-4693-992b-a03d31411327",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d6253b9b-691b-4df9-abc0-675c1a9a1b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b688efe6-b192-410f-9070-84654ef9d247",
        "cursor": {
          "ref": "97b7a8ff-aaf5-42c2-a67f-6ee7aea70216",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "96108cb3-6e2c-4dea-99d9-cc9e1a2dca2a"
        },
        "item": {
          "id": "b688efe6-b192-410f-9070-84654ef9d247",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cf706d74-04da-4729-a117-96fc1d187b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "141e5fa1-7c5c-4851-96fc-9412b9695f05",
        "cursor": {
          "ref": "d1666238-bd8f-4283-bbf0-986a0e16704d",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "75e63b47-85cc-4a0f-88eb-a3565d30d295"
        },
        "item": {
          "id": "141e5fa1-7c5c-4851-96fc-9412b9695f05",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d41b77e7-ea25-40e5-9f98-ea4a2f108a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "fdf7a149-a119-4013-a0f5-1ae44bfbd62f",
        "cursor": {
          "ref": "263aa303-7033-46c5-b03e-44b452123d46",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "de8dd5a4-52b8-459d-bef8-8a4607e3a3ad"
        },
        "item": {
          "id": "fdf7a149-a119-4013-a0f5-1ae44bfbd62f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e46d45b6-9d21-4e64-8a50-21b5ab2581fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fb5ce37f-44ad-4161-8a6c-a160ec1d3165",
        "cursor": {
          "ref": "9bd3a72c-b86d-4c58-81b7-0a7f655b171b",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "be965044-b22d-4fe0-bee9-1d31f1690b87"
        },
        "item": {
          "id": "fb5ce37f-44ad-4161-8a6c-a160ec1d3165",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8e3262ba-a32d-4c15-bdf8-b40783dd1fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf66c1b9-ecfb-4e7e-a976-d60d8a04fcf5",
        "cursor": {
          "ref": "36c17589-22ac-4a52-8983-d893a65c07ec",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "594b4880-c898-4a35-8569-e38dc534ea87"
        },
        "item": {
          "id": "bf66c1b9-ecfb-4e7e-a976-d60d8a04fcf5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2755a0bf-d350-4081-8200-4416d3868060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "5efd0bb5-0d76-4dee-921f-b65951fd1922",
        "cursor": {
          "ref": "75529e58-c761-4d50-9425-714d1a7cd5f1",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "56cf8fe5-a095-4d2b-89fc-65ee9e527580"
        },
        "item": {
          "id": "5efd0bb5-0d76-4dee-921f-b65951fd1922",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7f436f66-ffc3-4778-913f-d362912144dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1145,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "36bd741e-e9b3-4eb8-aa62-bb16d844d152",
        "cursor": {
          "ref": "28e943fa-78ea-4ee6-b4ca-12802ba428d4",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d3a2afb4-c43d-44e5-b05f-a1c761e5ffb5"
        },
        "item": {
          "id": "36bd741e-e9b3-4eb8-aa62-bb16d844d152",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0bb41909-6056-40ef-8f72-87171b7f8498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4587aa96-8db2-40d2-bce7-1643fdf56a4d",
        "cursor": {
          "ref": "59e7f4fa-e924-4381-87a3-7c17d4f01697",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2bd2c0e6-98d8-4315-b356-38d41145de01"
        },
        "item": {
          "id": "4587aa96-8db2-40d2-bce7-1643fdf56a4d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "598a1e8c-48c2-4c38-b8fa-384281d17f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "cd44ee4e-26f1-4401-9998-5214bc38abec",
        "cursor": {
          "ref": "5d0f5d5d-a88a-4c2b-8a8d-a177fd5e156e",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "45a96c21-23fc-4139-b923-26e676ce5c7f"
        },
        "item": {
          "id": "cd44ee4e-26f1-4401-9998-5214bc38abec",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a4f5aa20-a265-46d1-9bf2-bc6bb2f0103d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b0296208-2213-4908-a772-c4e6fc355651",
        "cursor": {
          "ref": "7793dc40-c225-4eb1-b56a-c16eca02e43a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1f312907-241e-49bc-a604-29c23c4217ec"
        },
        "item": {
          "id": "b0296208-2213-4908-a772-c4e6fc355651",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7d13e118-b19e-4814-8fa6-94464e823b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e057a133-298a-4cc5-8f0a-51f642bafa3c",
        "cursor": {
          "ref": "cc039717-6b1a-4a30-8e64-f18dc39ef53b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c582ff67-90b4-42b0-aa67-4b4767461c4c"
        },
        "item": {
          "id": "e057a133-298a-4cc5-8f0a-51f642bafa3c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "017c83e8-0420-4ad4-b086-cda3ff956e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90739828-ce66-4176-b3f2-e2fc804aba5a",
        "cursor": {
          "ref": "9cc6990a-b4bc-40a0-9b24-cbecf5daa6e6",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "de2997f4-23ee-406f-8462-1b1b48fddce3"
        },
        "item": {
          "id": "90739828-ce66-4176-b3f2-e2fc804aba5a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "edb0f711-f6bb-4a47-a4f3-cc92683be72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e58cb4-5c4e-48e8-aed2-320358aa371c",
        "cursor": {
          "ref": "ade4cca2-abe7-4d42-920c-c6b5afa22b9e",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "faf8746f-de63-44b2-9728-842eca4d1b14"
        },
        "item": {
          "id": "a8e58cb4-5c4e-48e8-aed2-320358aa371c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0a647c9-91ee-430f-aee2-96ecfdab1362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdac9c28-74a5-4717-ab3c-81fe3190a562",
        "cursor": {
          "ref": "86b0ea26-8bc8-4507-af2e-9ae2cadfa318",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9b2c57db-252d-4f0e-bd4d-85baa0f57bcb"
        },
        "item": {
          "id": "cdac9c28-74a5-4717-ab3c-81fe3190a562",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "50f6763e-2103-4359-96cd-45cce300561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ab2922-4bfd-464b-9530-0b1c1681f7f4",
        "cursor": {
          "ref": "4e049cbe-4c00-480d-9b6c-95d48085fa7d",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c087d310-1599-4bc0-8635-9752ddfb58f4"
        },
        "item": {
          "id": "d3ab2922-4bfd-464b-9530-0b1c1681f7f4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "692f2101-b063-4e71-9a3d-512a759f9334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75eccf3a-6929-4e48-b181-bb84d2da79ce",
        "cursor": {
          "ref": "e92507f0-c6f8-4442-ae48-9d704befb439",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c9edf1e-84ce-4054-a067-e93020a991a4"
        },
        "item": {
          "id": "75eccf3a-6929-4e48-b181-bb84d2da79ce",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "72494be8-850b-4be7-a0ee-51f1347a9593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bf93f9-b49a-4997-bc47-1cc4570e99eb",
        "cursor": {
          "ref": "4555192a-df3f-4fb8-b124-003398c9fcd9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b22e5417-a47b-4d51-92cd-dac0d74f955a"
        },
        "item": {
          "id": "b6bf93f9-b49a-4997-bc47-1cc4570e99eb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "10b1bc92-a231-4c35-beb2-c77725c0b7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af38032-6cdc-42c8-9049-bd521565df01",
        "cursor": {
          "ref": "72dd8797-d31f-45bc-aedc-ef6795ddf6dd",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6a85069f-2e8a-4a5a-8448-990abe7c51e2"
        },
        "item": {
          "id": "3af38032-6cdc-42c8-9049-bd521565df01",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e7050260-7170-4024-9328-0c1926e72cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94172f2a-9e31-43a9-a847-6d9a3a787a6f",
        "cursor": {
          "ref": "c48a822d-f8e2-4b68-a75d-7888f7d24140",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "848d3324-03a4-4bef-9dea-c4627d5ed418"
        },
        "item": {
          "id": "94172f2a-9e31-43a9-a847-6d9a3a787a6f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "df2a6a52-8db2-479f-82d9-c934d98c5d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87484f7-26ba-4659-9ff4-d67b4fe1786e",
        "cursor": {
          "ref": "34d96052-84b7-4c74-a867-d4795ad6fb07",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3f5fcb10-63be-44f0-b021-7944890c0e98"
        },
        "item": {
          "id": "a87484f7-26ba-4659-9ff4-d67b4fe1786e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c80fcb24-7b06-41c4-a103-6ee8980f5c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952ecf9c-6964-4e58-be86-e9012af1c557",
        "cursor": {
          "ref": "30bdcedf-5033-4956-8e10-e4b2a5baa3b1",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ae6fc8e-141b-4c03-8ba4-d865e813322c"
        },
        "item": {
          "id": "952ecf9c-6964-4e58-be86-e9012af1c557",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6b5eaa0b-efd1-4a29-846a-782e9a4155d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fd95b7-7bd8-40b0-a079-08388f7ad902",
        "cursor": {
          "ref": "296e224c-3a94-4178-8f94-565d37c5acbb",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7efc3422-8c97-4439-b6ea-d94fd14dbb4c"
        },
        "item": {
          "id": "31fd95b7-7bd8-40b0-a079-08388f7ad902",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c28b53aa-48d6-4b0b-ac3e-8224243eaff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a217bff-79c4-46ac-9416-fc46ad86ddc3",
        "cursor": {
          "ref": "e547d351-d6dd-4391-a009-3ae470e6380f",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0725ff03-815f-4c23-89eb-5a0e81980b78"
        },
        "item": {
          "id": "4a217bff-79c4-46ac-9416-fc46ad86ddc3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c7f77f7b-3c31-41ea-8e6f-e7da2edfd690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01927dfe-4ef4-495d-a41b-b42cac68937a",
        "cursor": {
          "ref": "855e452a-0b15-473c-8386-048db02ec861",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "763a6a52-97a8-43f1-aff7-36be28a52f01"
        },
        "item": {
          "id": "01927dfe-4ef4-495d-a41b-b42cac68937a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a85f6215-a2a0-4b66-84cf-4e618129a735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1188,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "d4b97d3d-01c3-4a1f-a54c-a36ed129ed5b",
        "cursor": {
          "ref": "0306901e-c4f4-46d2-a24e-f76365c71a47",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "374c5eda-f252-48c0-92d4-a252e7f4b63b"
        },
        "item": {
          "id": "d4b97d3d-01c3-4a1f-a54c-a36ed129ed5b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1302fbf4-91fa-4497-894e-a19e024dd3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1189,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d0c78baa-96f9-43ba-b368-ec6b31f3bb8b",
        "cursor": {
          "ref": "3a16bae2-d4aa-49f6-9d2c-6016bba6f64e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5c2dae61-29f0-44b6-bf26-4aedb4c32cd4"
        },
        "item": {
          "id": "d0c78baa-96f9-43ba-b368-ec6b31f3bb8b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d622d367-8b3c-44ac-aeee-f91c779542a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "027a817b-0498-4d3b-a238-858aa8e98351",
        "cursor": {
          "ref": "d92bdf19-93e0-4dfd-b314-84059a0a6663",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5d525220-119b-479a-8c35-41046f485bb5"
        },
        "item": {
          "id": "027a817b-0498-4d3b-a238-858aa8e98351",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8611cfa0-e9df-4d8e-9f77-ff704393f6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1183,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "cedea9d4-7d85-4073-89b0-9a5e2bde59eb",
        "cursor": {
          "ref": "ee03ba9f-a682-4595-94f8-8be790392a9c",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2bfeefe2-2bee-44d4-8785-14edd600fab5"
        },
        "item": {
          "id": "cedea9d4-7d85-4073-89b0-9a5e2bde59eb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "adeb5a33-8744-4c7a-9dee-f0f3beb0efbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "222d3bc3-7d77-47f5-a3e6-d32a8db23a8e",
        "cursor": {
          "ref": "c5deb857-9985-4ba1-bd24-45cbd66cf967",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "98790ccb-ab69-4a0e-83ac-98e023fe2a07"
        },
        "item": {
          "id": "222d3bc3-7d77-47f5-a3e6-d32a8db23a8e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "efb21a3e-f06b-47c3-9fe9-7aa80f27c1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f1a77a-47c6-484d-854d-adc795265972",
        "cursor": {
          "ref": "2bcf6f7a-e1cb-4566-b7b7-9958a4f27e3c",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "66ddaf37-c1ce-4dc9-b518-3b21c97369cc"
        },
        "item": {
          "id": "55f1a77a-47c6-484d-854d-adc795265972",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dc9f7118-ae5d-45c0-b66d-2571ce1ed6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a23501-0591-4800-a89c-199a4ff58faa",
        "cursor": {
          "ref": "2a90c598-061a-4fae-b358-642aecfc2ff4",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "defd17d6-f021-4067-9325-1735b042fe5a"
        },
        "item": {
          "id": "b2a23501-0591-4800-a89c-199a4ff58faa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92029d8c-79db-4110-94b4-884567419550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051ebccb-5506-472b-837e-35a64fe5a35d",
        "cursor": {
          "ref": "28063404-959c-44b8-81c8-92f54d6fe70c",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ab1cf762-72ad-4ee3-8268-750ef9715503"
        },
        "item": {
          "id": "051ebccb-5506-472b-837e-35a64fe5a35d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8ecfc4df-4879-450f-a277-6a39d7f627cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fe2814-6937-4d53-bbc7-1ab17d450bbf",
        "cursor": {
          "ref": "bc64e104-1d58-4d83-bb2a-21951eb4df69",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e0be0b1c-64a9-4326-9d0a-726870fe1257"
        },
        "item": {
          "id": "43fe2814-6937-4d53-bbc7-1ab17d450bbf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f68616f2-8f89-4192-a6ad-72a661b5e7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e281eb92-2223-4f2b-9d3c-4318490fdc69",
        "cursor": {
          "ref": "93dd6060-cd1c-434a-a9b4-ebc9c6067eac",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fe86a19b-64d9-4d8c-8811-589a6ff6abee"
        },
        "item": {
          "id": "e281eb92-2223-4f2b-9d3c-4318490fdc69",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6c803382-6849-45ba-8d5f-6a5034366285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea5bce8-5ba3-477c-a337-add1e02fd965",
        "cursor": {
          "ref": "4d291a4b-73d0-4fbf-a1b6-5efd7a032cea",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5d40cd38-3ad0-47dd-bf41-c1ab504b0392"
        },
        "item": {
          "id": "0ea5bce8-5ba3-477c-a337-add1e02fd965",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "176a43af-1b78-4101-9bb4-7b0142ff816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b3980f-7132-4c17-a923-325129e0471f",
        "cursor": {
          "ref": "bc305957-405c-449a-afc8-3530dde9e764",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a5fdf8ae-b313-477e-ae2c-27a0fc9ad6fd"
        },
        "item": {
          "id": "66b3980f-7132-4c17-a923-325129e0471f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc000aa5-d1e9-4e29-afac-b859e4e13fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eee1c3-a0b1-4825-9ad8-47ce626b88bc",
        "cursor": {
          "ref": "67d3ba5a-7cc8-4831-b7f5-e478019a95ca",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5e17538f-8ac8-4076-a0fd-225cfbe6172e"
        },
        "item": {
          "id": "86eee1c3-a0b1-4825-9ad8-47ce626b88bc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "81e48d41-0bea-47ac-9c8d-1c2d7d12607a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09ede8f-28cd-42d0-9191-571d094c77e9",
        "cursor": {
          "ref": "0a71108b-ecae-4f16-abaf-9bf408d5fefd",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ebc8b57f-e1c1-4b6c-b8e5-d91dbfc8aabf"
        },
        "item": {
          "id": "e09ede8f-28cd-42d0-9191-571d094c77e9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "86a8885b-d3a8-4408-8f9c-e1db5f43248f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519dca9d-b055-4560-923d-6629ccc376bd",
        "cursor": {
          "ref": "22bb2896-13f5-45dd-8b07-4be9e31ad3ec",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ba953aa6-d33c-49d7-a7ca-7b252ff54049"
        },
        "item": {
          "id": "519dca9d-b055-4560-923d-6629ccc376bd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "da443aa0-a2e4-4df2-8500-1b7414aa6bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf18945-a879-4610-b62e-307a44a40e0f",
        "cursor": {
          "ref": "11ef50bf-4242-489b-9e18-22c9fe5193ff",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b907ec06-be7e-48b1-9451-62f13c3419ef"
        },
        "item": {
          "id": "8cf18945-a879-4610-b62e-307a44a40e0f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bec41d6e-bdf6-4a84-94cf-516f2e817f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16e1d20-6b36-429b-804b-ab48a3fba463",
        "cursor": {
          "ref": "54a1163a-6823-4d83-9382-2f55a2468897",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9fefcd7d-c5bc-45c4-8103-68284d0d7d04"
        },
        "item": {
          "id": "b16e1d20-6b36-429b-804b-ab48a3fba463",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c9233bb6-0be9-4a50-80a4-b0ef9964ba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37adf0c-7248-4e29-9157-903d5ff1ab53",
        "cursor": {
          "ref": "8fd5ce9e-1129-4730-8792-e00bb2f13d33",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b1138508-1d37-4c12-acab-7db5dcd22f70"
        },
        "item": {
          "id": "a37adf0c-7248-4e29-9157-903d5ff1ab53",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "86313ca1-28e1-4a7c-927f-dbb4b843a7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df620aa9-19f1-4d03-9f27-7a3cd57e6052",
        "cursor": {
          "ref": "a036376d-e234-4ecc-9810-d49ec27b09ef",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "036d2210-d8ea-4635-bc40-c3a5d18baab5"
        },
        "item": {
          "id": "df620aa9-19f1-4d03-9f27-7a3cd57e6052",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "00eb0b70-5b59-4d27-9807-f2909ff6b596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25feb0f-975d-4038-9930-e827ba989d6c",
        "cursor": {
          "ref": "c47333ad-52a6-4fdd-9922-c55eccf27a8f",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ded926d8-80ce-4484-af55-cb48b804aeae"
        },
        "item": {
          "id": "e25feb0f-975d-4038-9930-e827ba989d6c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "90588ce5-0c74-4be5-98af-22e310832fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2f801-f546-4cfd-9da2-1000827317db",
        "cursor": {
          "ref": "dc416f9b-76f1-4a18-ba30-601af957e923",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2fb67a3f-054c-4241-9015-982809b585bd"
        },
        "item": {
          "id": "04a2f801-f546-4cfd-9da2-1000827317db",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "97996a6d-9d07-4d10-b0ea-c58b6a4408ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850f532e-2225-4720-a2a5-96ea764164de",
        "cursor": {
          "ref": "fd425876-9b13-4c63-9ce0-8e1bce4c86c1",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "519354ed-74a9-4628-a8b5-2bfa222d6920"
        },
        "item": {
          "id": "850f532e-2225-4720-a2a5-96ea764164de",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "09c55b21-43f6-49ab-809c-60bae0df49d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebd3572-590d-4f80-8015-c51368c05ac3",
        "cursor": {
          "ref": "1e69d83d-6ab9-4d36-b0d9-4248c5eb674a",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "56a6f0ce-5e24-443e-99ea-1265fb93f727"
        },
        "item": {
          "id": "eebd3572-590d-4f80-8015-c51368c05ac3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c17e1088-e652-48a2-b1df-f6d3f24b0ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ed5110-d86d-495d-8002-20be29748057",
        "cursor": {
          "ref": "76968b5f-2b1f-4288-ae3f-901b5682582a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8e44917a-81a3-4bbb-b901-d5739594a8f0"
        },
        "item": {
          "id": "e5ed5110-d86d-495d-8002-20be29748057",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d7ba09a3-157e-4f8f-b223-2f539a870949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65532139-1a01-40e6-bb4d-cdfc45bd5604",
        "cursor": {
          "ref": "61e19cd3-290a-4ac3-a489-f1806b782812",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "65310148-8616-49bf-a88b-623634c926f7"
        },
        "item": {
          "id": "65532139-1a01-40e6-bb4d-cdfc45bd5604",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "19853af7-59cf-4637-baef-2f104e5f3fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046dc415-6474-4c30-8236-05be7b5a4686",
        "cursor": {
          "ref": "1a644b37-63f0-4f5b-bd83-eef1cbbe604e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b44ed7f5-3114-437e-bd4d-887aa3e7a808"
        },
        "item": {
          "id": "046dc415-6474-4c30-8236-05be7b5a4686",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd788267-1fe3-4d31-a231-0cb53ca8efa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb5914f-c6e4-4d3f-bd69-2770649f851e",
        "cursor": {
          "ref": "7b7edec9-a969-4ade-91c5-fac4c86e36dd",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2ad27a3c-4067-4370-8708-a07067707d44"
        },
        "item": {
          "id": "0bb5914f-c6e4-4d3f-bd69-2770649f851e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a16c75c0-41d0-4ca4-9763-c8e885628379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789f3369-dab3-4e5e-8e72-cee20a1c25f4",
        "cursor": {
          "ref": "40882057-989a-4ad9-acbf-643d06e0cc40",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7e40ab2a-fd56-4214-a311-ef68a332dddc"
        },
        "item": {
          "id": "789f3369-dab3-4e5e-8e72-cee20a1c25f4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8d243994-564d-400f-8915-d24067d4d3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1594d1ad-d944-405f-a512-1a7c8aae5bda",
        "cursor": {
          "ref": "c466e4d9-ba4d-4ad4-8449-8bc9ac487628",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e6af892a-9386-4231-b90e-8e77e05386b4"
        },
        "item": {
          "id": "1594d1ad-d944-405f-a512-1a7c8aae5bda",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d542af3a-c009-441e-bcd7-1cc1eaac661e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc6d814-91ad-40b7-9eef-066d6969e063",
        "cursor": {
          "ref": "31adf58a-290d-4f02-ac13-9866336bfed0",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b810cc73-2e94-4fbb-9a16-3237423c2e4a"
        },
        "item": {
          "id": "1fc6d814-91ad-40b7-9eef-066d6969e063",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ba1e9c1b-5e25-43b9-8ba8-b675f2162257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e396123-6582-41a1-a3f2-2b0a8c266ca1",
        "cursor": {
          "ref": "4b0c4584-eebc-4acb-8c1b-315d58742d18",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "236686a3-de21-4501-bbed-9fe61651af33"
        },
        "item": {
          "id": "6e396123-6582-41a1-a3f2-2b0a8c266ca1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6aa97963-60b9-46e1-8389-f218ccf5ebac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7708f302-c36f-4c43-8e94-c2ed60a63c5b",
        "cursor": {
          "ref": "89b30d4c-2dcd-4d53-836b-444559786825",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "eb64397b-0b0f-460a-9dfd-d2a79f22a459"
        },
        "item": {
          "id": "7708f302-c36f-4c43-8e94-c2ed60a63c5b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f94d1e6f-8e9b-402c-a529-1517e4778fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9566468f-7a67-4afd-87ae-750146338f9f",
        "cursor": {
          "ref": "fb667e09-9205-4f6c-852e-41f4488d1ecb",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "08cd98f6-1e43-466a-ad9b-757d92beeed4"
        },
        "item": {
          "id": "9566468f-7a67-4afd-87ae-750146338f9f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3fdc2d63-c276-4b52-982c-49fece5fa50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70c6f70-7625-497f-a064-a5f4ce2a9260",
        "cursor": {
          "ref": "1c8877ae-2c39-4efc-bf6d-810115622515",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "741a5717-3171-4f6f-aade-642ae977b5e3"
        },
        "item": {
          "id": "f70c6f70-7625-497f-a064-a5f4ce2a9260",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ead0807f-a55f-44ec-9df8-1fffb3372d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecda83f7-4471-4f14-a114-4c61e2650c63",
        "cursor": {
          "ref": "8119f990-35ad-4702-8a67-0cef23e775e6",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e9f913e9-f3c9-4f92-88ec-88a6d8b465ed"
        },
        "item": {
          "id": "ecda83f7-4471-4f14-a114-4c61e2650c63",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "02ccb497-0f97-46bb-b27b-db80b0fde6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdd65d3-afda-4218-9af9-b66b1fe4cd4b",
        "cursor": {
          "ref": "99a2efd0-e088-49b3-b272-962bc7fd3cfe",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c9853b17-47f4-4b4d-9ec8-d8fe74e2faf3"
        },
        "item": {
          "id": "cfdd65d3-afda-4218-9af9-b66b1fe4cd4b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4acf558f-f704-42e7-b52c-f6d9e8b80849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8f727d-1ab7-499f-a6bd-8bae03889829",
        "cursor": {
          "ref": "65f0d635-7308-4fcc-a10f-3419e6e687ae",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "be91f83c-8d1d-4830-bbbd-812921f17301"
        },
        "item": {
          "id": "ee8f727d-1ab7-499f-a6bd-8bae03889829",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "320e2c2e-2260-415f-9683-8d74aaf14472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88662f5-6f96-4aeb-97ab-40282527db54",
        "cursor": {
          "ref": "0eed30f1-8a5b-4693-af94-2c8f2a5ea366",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d566fbbc-1874-4246-8290-3703f50f3441"
        },
        "item": {
          "id": "d88662f5-6f96-4aeb-97ab-40282527db54",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6e092e1-b13f-492e-99e9-d1e40b128c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeae8466-377e-4485-9e0f-e7f8d12bafbb",
        "cursor": {
          "ref": "380ec3fe-b55f-4a9d-aebb-a7bb6721db0c",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "656978c9-b7e8-4df7-8173-8446d4030ad9"
        },
        "item": {
          "id": "eeae8466-377e-4485-9e0f-e7f8d12bafbb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "db82a457-4224-4144-8248-2d43ea0f17a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfb1d29-8a66-47ee-84f4-f7f4f31ebc45",
        "cursor": {
          "ref": "aef9ccfb-155c-43c7-8d16-aca032ecad27",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f877a1fe-806d-44e2-94f6-1ebc2ecc6d4f"
        },
        "item": {
          "id": "5dfb1d29-8a66-47ee-84f4-f7f4f31ebc45",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "886b93d5-0bed-46fd-853c-c02e4c8a14e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "736550f9-2f01-4cb2-a55a-8877bd79b2c0",
        "cursor": {
          "ref": "453e1c6e-df05-4b90-b8bb-cfddf0db3a2f",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2a8f8f14-f0f8-4fca-bc94-ea8453aa0e0e"
        },
        "item": {
          "id": "736550f9-2f01-4cb2-a55a-8877bd79b2c0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2273af52-0df9-47f5-8a5c-10c6d3319ff7",
          "status": "OK",
          "code": 200,
          "responseTime": 1363,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f992b96-54e8-46c7-9e0a-c2ce31222b80",
        "cursor": {
          "ref": "3b3eece5-0d65-43a1-9ef4-fa42f2661bf8",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b3e6d1a8-7f8b-4845-a6e8-709b88eabb52"
        },
        "item": {
          "id": "9f992b96-54e8-46c7-9e0a-c2ce31222b80",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dbe02119-3889-43f0-93d1-ba6653f3b516",
          "status": "OK",
          "code": 200,
          "responseTime": 1354,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a94929-b9da-4031-991a-cb472715f8b6",
        "cursor": {
          "ref": "60c2d7f6-d418-42e2-8e1a-e268b02af323",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3c2b3e92-1663-4568-b35e-b7ea38c8ddd6"
        },
        "item": {
          "id": "56a94929-b9da-4031-991a-cb472715f8b6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2374571b-7e5a-4642-8aef-7c83806c216b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a94929-b9da-4031-991a-cb472715f8b6",
        "cursor": {
          "ref": "60c2d7f6-d418-42e2-8e1a-e268b02af323",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3c2b3e92-1663-4568-b35e-b7ea38c8ddd6"
        },
        "item": {
          "id": "56a94929-b9da-4031-991a-cb472715f8b6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2374571b-7e5a-4642-8aef-7c83806c216b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0351cb-5692-4ae1-a262-805b53104c35",
        "cursor": {
          "ref": "d68aa7eb-d309-4e5b-9742-73dc697ccea1",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4c5fe50e-059a-471d-ad08-9f47b41aa194"
        },
        "item": {
          "id": "9e0351cb-5692-4ae1-a262-805b53104c35",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7bf32182-1ab5-49e9-9ae5-dd3feb015300",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455ba82d-dfdb-4c0f-b4ac-ce38b7bc4a02",
        "cursor": {
          "ref": "9bd08783-371a-4e35-88d0-0b4c0130ad21",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "33ca0460-f2dd-491a-980b-ec6dced405a5"
        },
        "item": {
          "id": "455ba82d-dfdb-4c0f-b4ac-ce38b7bc4a02",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "18a06382-4e57-4ca0-bcca-01db62fd0d84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}