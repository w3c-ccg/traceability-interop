{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c98f7229-f502-4242-8146-58c8c7ed1e03",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a3108c71-4338-452f-984b-d66e548737ff",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de4eea1f-887e-4eee-8f37-0f6ba530d21c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a82c7fe1-2ba3-434f-a785-16274328ecc9"
                }
              }
            ]
          },
          {
            "id": "15133a0c-09f8-4956-a42b-c95ea043376c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f505916-9dc7-4cf4-a12c-c10d9a699900",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "653f1c8c-d375-47fb-aaeb-cbbd7cf9dc44"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0a22335c-12ed-4700-8707-a19787dec08b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a411d6e-1046-4540-bfaf-ba18fc7afc3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7ff45e3-7009-4551-a661-142573d30eb0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa73b05e-f9af-4d6e-a9aa-018e0d1512a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e51dc7cd-9449-4516-b731-edf2a3d049cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8a0eb69-f1a7-4213-91cd-9aeb8ee7390f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d367856-d26a-47fb-aef5-52b482c1aa16"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4b039605-f122-49ce-aec9-a8a1ee5dabf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93f172ee-7fbe-478d-b9a0-e37517ac0188"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74b38901-a021-452a-b32d-1bd83c636043",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d20fd42f-5eed-40c8-841e-d26112e828b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a40bb94-8485-4c3c-a53a-dd6db4b3857e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a476674a-54f6-4a87-9a17-a026b5d6806a"
            }
          }
        ]
      },
      {
        "id": "af7e43b5-5023-4e2c-9ccf-36c346372b5e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0e0a3175-f241-497d-80fa-1ef207db9961",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0690ce85-f5f6-479b-9e16-f0b4bf6360fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20aa198d-1ce7-45f7-817f-e010716be5be",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7984b4b0-1b3f-4bb9-abf3-4049ff424d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96afd95a-af39-4e07-8478-52a9b6147d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0356519-47ba-4490-8c0a-ad36c30a3f85",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af00ae1-b9a3-4367-8afd-d210d4f5746f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1333bfb-c4ec-41fc-966c-693b4b3ff137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86183a85-bd95-464d-8ce3-92edb4252d4a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dcf724-ff72-4406-9c27-d654ee0598f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45b62bd5-e89f-411c-bff6-d11bd8d8191b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba23b0b0-4648-43f9-91bd-48721ba27128",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2b3d44f-8040-4550-9538-f8482ebb4c41",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a248b49-d4fd-4294-b57b-25230284fabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba43c4a5-b0a4-46d5-b46b-1178df27fd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66617a7-776a-4199-a6d7-ecd2eb731d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0fd1f9-1198-4c01-bce1-d6a10f9859ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "df75ef6b-889e-4587-a1b3-38768fff50ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e023dee2-86e2-4421-ac4c-54d5f6ac5778",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "219d6718-b8f3-49d9-8bbc-1618c3dc19e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "570e300f-4f23-4f97-9a69-23008e82bc96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b8ce9cb-6c77-4af3-9989-7373c1cf5f4f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9ddbb1a1-a01c-48d6-b9fd-13aa3dc71889"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac8cda89-a9f8-46c7-863c-a97106d4ec58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3e1cd54-24ac-4269-bf5c-4103eb8ab47f"
            }
          }
        ]
      },
      {
        "id": "a9816f7d-040c-4545-8d97-31476e96d113",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "253257f0-79d0-4701-9eea-081832d96aaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cbb553b-dbef-4185-82fa-400f81fe3c85",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3fce9f9d-caa7-4556-b468-c191d79a1c04",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3ecbd7-fb60-4a06-ae67-3ee76b9ed7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b46af7-c535-4fcb-abe1-45c2b0058a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd4acf1-8396-4fd9-94a6-14e643abeb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2863f56c-f8ce-4b52-b9c1-d584f52ef9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc9a3b1-427c-4650-9359-112af5d301e9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff7153f-4fbe-4ead-b4e6-81797f30f8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93882fb6-8a91-4f03-aa04-036a474842b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609df697-b0c6-4cca-a577-c51951a7b5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a11e7044-9e48-4f2d-8d26-0833b944ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346abf40-d135-42c5-bcfb-782627d916ad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ba0c1c-f0dd-489d-9af7-b879db35de93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a1ed62-78ea-4c14-82b8-4f06229ad15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4bb064-696b-4c36-b704-7d4071254b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d7365c-c907-4807-b014-5946e9555fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c17c57b-e0de-4786-b2c7-1dbfe7b17ee3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff1b0c1-8069-44f7-886a-5505cee15b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76da74c-7651-4770-b45b-f99ce9f677b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf1f722-c35e-4f68-91c4-3cb382c7322e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e699c65d-1331-4cac-b9b8-4d04aa4d8fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171daed7-c842-4f41-8686-9112b09d8c58",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a329958-5ed2-4c19-9df2-f9c0b1e531c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62032302-110a-47d4-9645-b3e56226e4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d5f6dc-56a1-4069-8f0d-48b601573235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0464f110-447b-4780-bd33-a1597ab42b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807ce025-8a35-4507-a397-cd615c6bc9cc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a776af6-061b-4760-865e-3baee10b2c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c606c845-5222-45a7-9d99-ca28642a11bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19389f9e-5dee-4723-9993-30eeac8e6b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77c6ca39-fed6-47a3-b782-19ba3f536f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1acda1-1f78-46fc-86a6-ba832ad44cea",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452da89f-085e-41be-8dfb-ecf127919dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7fffa8-72ce-4735-ab4b-abba6800bd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453569eb-3043-406b-8b47-204c19f19578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34fcc58d-982f-44cd-9211-41c82500337e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0aafe4-a5fc-4e96-9a68-fa2d71aa1ab5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b3e16e-dbdf-43b4-9dd6-0075a9a9514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7adb6ae-dc83-4eb5-85d8-82c9b6b84066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08de77f6-7376-4752-b70a-51c55fbd5b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73182fad-eda1-4dce-a1a5-7482e21b406b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c312ff1b-88df-4616-8ce8-1fff4c71634f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb98f8-385b-47dc-94a4-d02836d2120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ea6569-76ba-46a4-bdd5-278bac27adc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd894350-221e-47fa-8740-9bd0759a7030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb3ab610-958f-4255-9db1-9fed85fda6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa71dce-4727-41c2-8ea0-b696383230a3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e1f57f-5f29-4bcb-8588-0784dd027731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4f176f-609b-4bfd-b602-6b2d1719d402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d612f658-0bc5-4b8f-af48-03798336429b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91c18a4a-fa8d-493d-8a1c-90a773502852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0e242f-92b9-4396-bd4f-531fb4ea4cd3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0aa212c-9c12-4850-9da6-36a8b41c0fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b87c78-3298-4c53-9d92-4b7128336f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746da98c-fafc-4ddb-a85d-5e425d5845cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fecc652a-92b2-430f-8594-5b647e516ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5779cb1f-d32e-46f1-ba58-a0b75e6ae877",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96b0cec-c547-4e78-9360-d2214009f9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e3521f-d407-414f-bc7c-0377f75cc5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b46ee6-aa20-4463-ad66-70ba3aad9177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e43d7a0f-b3a5-474f-907b-996040e2dd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366e78ad-8a6b-4834-9cde-db6541b0de79",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d26174-928c-4666-bb42-621f32a00d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ebf992-1090-4640-91a2-7de174ee61b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d7e753-2aa8-479f-ad1b-28ebe37b6504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f5f1a3d-0328-49a7-bd1e-c893ffa1fc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b5b240-df89-4bec-b23c-ca659bcf1ed2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a5c7a5-333b-4865-8d65-7e0aa4e5593f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d78d5f9-a5f9-4c02-886b-83e876a3c185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0682b90c-dcaa-4669-b960-1a39c77b0e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a2d4562-1b53-47a3-8e17-4034e311d26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d012da7d-7443-407c-b7a8-9868534eb4f7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54faaf65-19dc-4b24-ae85-0243ddde56db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c9be6e-ce36-40cf-bc9c-dad5234a6508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0b3a11-1ceb-4530-bfc7-e5a5d950bc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4f2c3b8-92bd-48db-adb2-52c3ee5e7520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9ecc75-80ff-4372-b1ba-36a5b0900f67",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7f129-608c-4fec-8184-732dcb6315cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f323f900-efc1-4d00-ab75-1e749fa3805a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b36031-4a02-4740-9193-07ad2b290cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f073a5b6-b502-4a61-ac0a-cf964f27b053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f9bcfa-da55-430c-8dd4-7bb11ebde32a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e9fab0-3c59-4764-ad8b-cb8e052f058e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fcd9c4-e0eb-41ca-85d6-d6bcf20ef1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bebc62-7237-44a8-8b78-1042d49d8bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0566d1d0-442b-4d99-860f-5346d3a18548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5572f9-802e-4670-9685-51a3a2469518",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24f7aff-f622-4061-924e-dd929cc380d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c5893b-857c-4df6-8ade-362e00d7215c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d93432-97a0-4f47-9479-cb245d2543a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "320d4dcd-c9b8-40ae-9414-a3c017fcd2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189f18c4-0ee3-4b81-b757-937d16a0d776",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309448a-a196-4dfa-b661-73e461db958f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303104c4-35b7-4822-93c6-12ff5f0d67f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51e295f-8c5b-4012-8703-5e3899c46d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "173c4a3e-a13b-4e9a-adf8-f899f9b763e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fff9542-5ed5-43a2-8fe4-ede862911a7d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b943ee-4efe-49a7-bbb4-086a5a123b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4d4cb6-3b0f-4bbf-8ab7-d6f6e284c32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cad4ed9-72e8-441f-af39-b1bf14f8c116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e00462-156d-4085-beca-d951ae63d987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af1cc52-f061-49ae-b040-e70254deef78",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447a2ed1-b3cd-4c18-b638-13ba4da5300a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ded272-a1e9-4a12-9b36-78b7946f2565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15839b74-c5fd-4e47-99cc-e728bfa52ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59957dc5-190d-4a2b-aea4-3658b31a71ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9561640f-7608-490b-9a1c-86404a935010",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede015a9-3371-4eaa-8b1b-feaba25285b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e87f9e-8195-488d-970b-9f0c9a210804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c9d829-924a-4199-8c94-2112c80b4ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe36998-52cc-4407-8e75-05e5d0281b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7a568f-49d5-4ec1-88c0-eb79e2c6a58a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce421f58-eb7f-4bac-a8ff-48fd54953eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a370f51-5bbf-4a46-9812-8acd7cb703e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c80ccfc-9ce2-4c35-9416-0038c640bead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e90809c-5b06-45a7-9ab7-d5356dcd03fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd47870-a3e4-473e-916e-1bbde4e47e34",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba77a4e-fd97-4b1f-b81b-c777f69629f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc41c00-18aa-445d-9c6b-3e716f99c106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696159da-b309-448a-b457-7e9dc9500f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3af7a395-f7be-4aed-b26f-d17c1272e0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85198d4-ca18-4e10-a4ac-fb087eae7ccb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc649830-0284-47a6-8759-86feb0eb14ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a778cfe4-a274-4d66-adc8-8603d4bddc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29209d9-3d0b-4427-b5b4-dc7dcab5f805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c17e529-5342-4463-b2c9-eebbfded6caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1150a08-1690-4655-8456-22115d06430a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5697d183-67fd-4d8a-b7bb-ba4f834c6145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5463ec3d-7303-4a0c-95ce-e196414de164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb03732-df51-4529-a72d-be2c7e0ec68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebbf8e9-aa6c-4224-9308-e4a541f72880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4863d1d7-589a-4501-943b-ad1d9d0f96d4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc4f3f8-aec1-4224-8584-04c6c4d965e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470adee0-1477-4430-b1cb-09731d970841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f155c42-2995-49e1-a748-8d9e1bf81bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "936ed1e9-67ab-469c-9eb0-2c1da77479c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b836810-5bf5-486a-9f79-02da9dea6119",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df489772-2ae3-4702-948b-69e476b2ea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49e6d60-046c-4ad5-9c9c-301f9fef4cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196fe6ef-94da-45a1-bf26-36d4fedf1b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "37481813-8895-4390-bcba-084a4b816657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddadba1-d0bc-4668-974d-5d7c325ea953",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3487b10e-13e3-485d-a0e5-b9ab5447fcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a483c956-bb0a-4975-b9e0-fc65e9a99c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d56bceb-f928-4e84-8731-441e833bcab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6957d4e-de28-47e0-abb3-d6e443498a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf94baa-cf01-4546-8bb9-1a7b57c8b51f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c70fcd-d18d-4c79-a252-39b4f0e6d8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509783b3-94dd-4d2e-9bbc-7f64b24608ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02faf0f-03a2-40f5-b933-e862baf757dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "483b36ff-dac7-4fa8-a69c-5af746c0d7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bfae82-dcdc-48d9-af79-b9932d9a72fc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79098d61-620d-47bb-b5d2-9e2b9d28da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0547fca5-6c9e-4704-9c79-61d6cd6754ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78356120-44ed-46b8-97fa-6b1a5d3f00aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12cdfc31-7d05-4238-8278-104694f4b68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad23aefa-0814-44ec-81f2-e7375e5dbc96",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163e5626-fc1e-4057-a71a-defa365f6df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ffda7b-d086-4329-990c-081186982e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba10e26-6258-4be5-ab27-08ab01b0fbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6988bd-21b6-4eb6-a8fb-b4e205a5dfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f5db33-7f6c-4b24-9827-114f97217a5f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9f977d-30e1-43bd-87b2-6bb9f6fb5d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f275cb2a-ed78-4e0e-81db-e307df93e576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75102d09-199f-410d-9a3b-0ef7be992425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdab41ac-2a90-4976-be02-036d503b951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2ea9dc-1fdd-4827-a614-715673c61c45",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee23327-4a6d-4e30-ba22-28dbb7c39ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3933f5-bb5e-4f69-a245-27aaf8f31a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a113c9-d17b-4a64-8384-0bcda2233a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6052ef28-ffcf-4ae2-9eab-75b4773e6955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe48b5d-2b5f-45eb-866f-c6eaba5ff4d5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cc5eab-afb5-4a8b-a32d-fa8bc4110f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f7308c-c3fb-4924-95c6-4bcc5608f9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5d72a6-eb84-4ba8-8d61-01f53ec3b8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "23bfe676-16a4-4105-b96b-c88151b557e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5992e38-6360-44b0-a739-477088cb3f2a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e7f2ae-a94b-4da0-8e26-552906a4a752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de82707d-6f36-4ac8-9e91-01a3b7ef9326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43036787-31f4-4b26-98bc-cf1589e4fc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c83e2981-4238-40aa-9bf2-4c452d944a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03355a2-03f0-44c6-9133-d1908ebde35c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee350d9-dd9b-4ab5-b97b-bc6b1bed711f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9154333-8a0d-4c09-8d5f-ce8de5b292b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bd1150-7805-462a-864a-5e3ef1b0bbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "224bc57b-83c0-4eb2-a9f7-a3a185b371e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb92daf-0fa0-4724-aac0-897e8d76de57",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0de3299-1109-43e2-b53c-e9b70b0187d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e95ef2-81e7-4fd3-9283-5c42cd5f7935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11aeceab-62b3-4cc3-b162-b57cad55f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "82c93043-bcc7-4830-bbba-e7904185780e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949030ad-488d-48f4-b863-2fc8b3d25c29",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea415b72-1426-4ebd-8c29-98036ae404f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cb8a0a-bc13-4eda-94f8-7f50d4222d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9d90b9-294c-4095-aed4-7f646bde2d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "931ca9a2-0d5a-47b3-87e2-fd46c9ab629d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a226933-63e7-4852-a942-608a00893b54",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7015fb9-2c9b-44f2-a5f8-8dc825a69807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fa59f4-b7d9-4c23-9b5b-ce52d8d61abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109210e5-2105-4d0a-b514-3395c9cba523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "89c4984f-8f93-4f39-ad06-5247c420e680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d84e110-aa35-41f3-bc3c-a4623547957b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d54a161-c892-4371-aed3-566de872458f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d16783-cb90-43fa-81a0-b5fc11e5dc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509261c0-1937-414c-bec0-a7fd9e0233e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "63eef07b-7977-4c2a-bd9b-6d7bb6915173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f190e5a1-b25c-409b-81a5-d0e1fc0aee3d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671fe620-38c3-48f4-9336-b4c9891a937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac1265d-addd-4071-aacb-c744bc3ee98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1de7ba-7c54-4849-9efa-18a78f630721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d054b6cb-81a7-4ebd-bc82-bba79e322675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12bd8e3-d870-4303-bd62-73e69d4e32bb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05af0d7-e230-41f4-b265-59a3f7cbe205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5443da1-bff0-478f-9e8a-248720974fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561a7e29-e049-4a9a-911e-d1df38cac071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "48bcf823-2ba1-47cb-99c1-185436888401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbdb8e1-f27f-46b3-807c-33b268130e33",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf01686-2f64-4fca-8130-1299a58f9357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ee7983-dd4a-4528-8fe5-5c2b2ee8c3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22444250-ace2-495d-bb4a-4927fc73ab84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "36749268-2c0a-440d-9a7d-8e5c7221e973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93adbee1-9c60-48f4-b68a-1b3735147936",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf26dfb-fb73-49ee-b293-839da8d7bb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68c10e0-f3b5-4de5-92f1-aa64f86ed43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53148931-a980-4ca0-a279-ae274127a742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47dbb178-39d4-400d-baf0-e4704fcf6901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc1c7c4-18fd-4f06-8650-06fe64ce435f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14be20fc-6518-4781-b353-be6b0ebf3f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a60bc24-4026-4fff-99a5-5c8358273614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18167283-91ed-46bb-9978-799fe613adab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f6ba12-dcd3-4f27-8fae-68b6667fe12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3608585e-e2c6-418c-9fc5-76afbc12aa91",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919da3d7-668d-4151-98a2-e37b30e119ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8b4094-f7fc-4019-a720-88b0bc850578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138fd3de-4986-4500-977f-20ad65ae8415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0041e46-28ce-458e-9f2e-de19b2beb229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf422dc7-360e-4461-8714-e2b276db1fbf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6b69d4-f6b6-4f99-80c7-964f85cc267c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e9222a-482a-4a65-82db-0baca43bc0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c93de20-c8f1-47d5-b868-26243f447866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "507d7d09-491b-4fb7-84fc-939e902b01c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc32925-0eb8-48f4-a6ba-c71f9fbbb892",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d366ce3-c0e7-4a77-b840-6bf9f47f65ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3db97e-91cf-4bd6-a28a-1e78bacd8c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099a09a4-e0ec-4312-976f-0721fca0014f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbf6f8c-1523-47e5-840b-77e983bddd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48322d75-0aff-45af-869e-3694ee794bd7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7fa219-fcfa-4ee4-b858-f5ac77a13f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d1658c-42a3-46f6-9443-4c9567c19236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0463d5e3-52c0-4708-92c9-e978e40480cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1557f867-fa96-46b0-981c-518ed3306ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c440c3-e746-4720-b75a-ac1536d3100a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9537c5ce-75ce-4db6-92e9-06a5064064c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2837394-b42d-48b1-a5cd-84a0522771cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df50ed0f-3b4b-4268-acc4-5b2f3240f686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fda97bf9-d3c1-40b3-97fa-5783484cce77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d85cae-4ade-462d-93a4-45493f9e2aac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c90e6a4-daa7-412c-8dbe-5d32991241a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64cac90-8765-4fae-93f5-956196c0451d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236fe729-dd45-453d-8601-a79c6c04e402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31ef5e30-e2be-449d-bc76-a89ba660ba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4174dc-fdbe-47c1-8d70-6a527b2605ed",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f983b0d6-ec0c-4177-9cff-c4a56b7fe70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb2ecba-bc3d-490f-a1c1-6263f14d06bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594d678a-e1a9-4dd2-b0f8-512e6fc24e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02fdb6cd-ee9e-4f69-89e5-44e1b224a33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d357da-ca03-4f9f-afac-1186625f8a19",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073c4d45-dc11-4613-a981-6f4782d8f06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66c7107-e09f-445f-887e-ab0a54265784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0afef4-6b62-4ada-8faa-4ec4a4245bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e18a9b9-3d1c-4c99-bd8b-7f5a69293401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e14406-14f6-4c2f-a3e2-27e9944759fe",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dbdccc-c33b-4cb5-8adf-6928bb38d2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e609c2c-4e7c-4138-8558-8dfd2bced104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7166ae-4e03-43b0-9ee7-9136a9d26174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb1cd63-eb2d-4fab-9f5b-3188bedf182e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694ddc0a-387b-4624-8517-fbf8319f56ca",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec62c7c1-ce64-47af-805f-ac6df8a5328b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c7f663-77af-44af-9664-675aa2f617ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cad562-bf42-4de0-8c44-e23eddbe4f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "914f91b4-96de-4430-a38e-fecb617b18f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde6119b-5e5d-4050-91c7-db2a864b68e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3922932-9f19-4451-9b4e-93d525c1b416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e10ce4-5374-47ce-ad5a-ec5a5f234033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa437d2-a764-40da-84cf-947df919284a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e279d83-83d3-4fa4-baf3-cfe2523be298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec163aea-d566-4e8d-b14f-1e033ad63a2f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdab7175-23fb-4661-8e88-b4bd89774fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2d9f39-d9a4-4b51-a49e-e6568b826935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed08f014-2030-4344-b223-bed2a00cb09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edbad111-e894-4348-89f6-df09dd560a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3410c123-03eb-4766-83ab-3e83bfa290a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d9eec3-88fe-41eb-8b78-6dc9de533b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e186df3-608b-44f6-8265-a305eaedb689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2200472-eb40-46da-adef-dd32b5cc55af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b40fee32-9700-44c8-a0b2-d402837b3d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fc0aad-a697-4d4a-9e29-b28dd203590e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70993479-5b9d-4859-bd11-728ade4f814b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5748042-bf0d-4a24-953a-0d708464a9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33956630-8a3b-45d3-81ce-3721da7c2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07d451b5-1c43-42d5-a726-4eaaa945612c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9dd6a2-8baf-4452-9bd3-049b04856af2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9cead5-921c-43a1-b4ef-728c9ae3bf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6903512-b0d7-4e49-9b2b-f5f7b11f35ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d353bfe-6bb1-4fb0-b2e9-3d7e6d3df014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "335675ee-a376-4ab9-88ea-428f3cbc6689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032dce69-45d5-4d56-83be-359f696ad232",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb01286-f3c5-4482-bd73-791d0f3745bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9226d001-97af-4b3a-8eac-f85a8bbef2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad964d7-49bc-4eee-81b1-c23fc4acddf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f176eb43-ba48-412b-bff2-65ab6b8593fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643e975a-3ee1-4f67-917e-7fdb72d1b746",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85693900-3e3e-4d73-86e5-0acb12aa9129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1723e387-928d-4314-9490-aa2398d304ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b46378-765b-4474-93b5-71979bd0fdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1cda3e6-986c-4129-aa54-562dfd04b2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d60f28-8cea-4fde-a51d-24ad816110f1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0d4229-b350-4993-8a03-8a340e28cce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64360d2b-9da6-49ea-8366-3d110dc1bcd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0278ab0e-e720-4bb3-8fda-7aecc93f39c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "223ee132-fd77-4914-a8fd-9a7cf574bdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0a23c7-ff5e-443b-91fc-cf19d40ea13b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbcbb09-36bc-4f89-89a6-db7a40548852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cc7358-251d-4300-95c0-f42cb40c0067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c416be-b9a2-4bf5-8150-b85e1336044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e217aaf-3798-4d5c-98ef-23d0f2f8238e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6c1080-772f-4811-9236-9ec8e2819a35",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587c478d-d154-4245-90cf-5dd4287c8012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0911a89-1f5f-495b-b5a8-759950fa4cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e711e881-703b-4106-a5c3-9bf05de395ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f11f4472-c719-41c5-a842-63b34bc34511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458b9b7e-8b9a-4764-8b3f-2a0484709f70",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dced148-b026-4e16-8654-0ddc97e8b986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7ce2cf-13fe-4333-92e6-4db00c90f685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c17a75-7264-4945-924b-db3d396cc343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b019299e-fe22-4735-a4b7-17a2d9e131db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f7d8b2-13fb-41c2-8c79-6daa26fe4ea7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f764d48-b879-43c2-801b-82ec4e8edb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f561aef8-3d6a-42e5-8502-6dd78a9e8a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f191b127-f1aa-4c71-91a8-56f53562c7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "28808476-4a85-4350-a2ab-a4361e5faea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85e0eb-e08a-4633-a2a7-12ad45b87cca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6fec52-0ede-43b2-9edb-ea1378a73617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35db6ea1-b4a0-4bb2-a2f6-db9aa4fb5271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebe7bb3-2735-4eef-9d5f-7192d146b4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb335a31-630e-4809-bea8-a0bfe007e06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a90694-2c59-4f4b-9e09-20782398306e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac0f0c7-c9f3-43ac-bbd0-90d0de28fe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03aa3978-4afc-4e03-aa37-cc54ec2b59ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c864adaa-23f3-4d5a-aadc-8e72083008c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90d4d533-05b5-4f1a-a02e-f1e9c3715833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba94d3ef-4567-40a6-8be6-135085d12bfb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7ffe2b-87ba-4644-8448-9305fbd4fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9412d3-9b32-4834-9492-3f89b84b1058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9378c7f1-0c0f-44b7-a7d1-a4b4540b3111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63f305f1-92a0-40d5-99a5-e70529986dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9899fde-9df3-402d-b456-021249beed77",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4813db97-f4fe-414e-b82b-b6ec43f0996b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0058c3-eda7-45ae-b77d-307c9c822a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa77acf-b293-4e8e-92b8-9f0d48149f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c28167-6cff-435b-9810-4be4a320665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c73640e-6a71-436d-9baa-7ce64fca2f3e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f77dc96-3f71-49a1-8bf6-42e765685c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4527f91a-ac01-47b5-8fcc-0ce919fba884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117eb29e-f0ef-4b63-90a4-ac23292bea4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a76cf377-cba2-4e78-a0ce-6a08ed169e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e187b868-d6d9-41d9-922f-029699f754e4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f80fe7-7aec-43bd-8503-978754391e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36b7d23-5879-4ade-a07f-a6ab7227e25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e895ebde-d2cb-4128-9373-dbe743c3a202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ff6d36-5ad2-421e-bd72-1b28f3a8ef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0f44ab-7b89-4789-8e82-96724408df8d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94ed8e9-8281-4bad-82d2-9ebf7730fc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064f489e-991a-4f68-b247-3b966c4a6262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeb9cda-4951-4258-860a-463afdc25ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab0d99e-8723-4b3a-a9d9-e097d194ff3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99bd034-3c09-4d4c-b020-44cd73b0635a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59623c1d-b747-4af8-9319-aa95f4a8f242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70a1c0b-d031-49d7-9d99-7fc8457f7bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd134d7-c383-4880-9ff4-a4a25ded5ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f533619c-a62e-44ad-9c0b-b4262f6f49a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33272d42-6365-422c-86f5-8c3be4aa61ea",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26429fc-abf2-4cb7-8451-6a864ae34a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246d8b62-648f-4e82-a510-3da9b7804b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b78de5-fec4-44c9-9984-88be01e3c1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b88d6f-ea1d-4046-99d5-c1b63fa7d41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd626ae7-43a6-4919-b574-7a391956c2b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b76304-c767-4057-a8ed-2282bb1c4e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3288792-1a42-4b04-94e1-ae35effec6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fcdba4-8398-4cce-b525-586733ebfd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6042b96e-d58f-450e-89fb-f8854bdc824a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fd558b-4b58-44f5-b3b1-a05511b180e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb72cd0-be13-4d92-ab26-676aa2cbad69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0faf68f-6cef-462e-bff4-a74b8994f249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6584aba4-c55f-49d9-ad42-6f5eee390e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc9e42d-bcff-464d-98a5-8be6c50d095e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5879452-3d07-4973-ac63-5fbf9d10422f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3a69d3-0a78-421f-95ac-68f9a4ccb649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd209b2-c767-4313-9239-b79d4da0aa93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f972318-21f7-47c5-aaba-e9844a558282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b95e9e88-bfe4-4924-9cbb-910e791e9078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a08da9-b735-4c7f-b5da-d6b30380503e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d0030d-71bd-4b52-b403-a5f6d4899fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e650f6d9-8cc8-4286-b35e-5f059bba2e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8eb3f7-6b38-4579-95fc-589f4c3d200f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b520dd5b-f9d9-4fbd-9b40-638d721f1ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa033a3f-f54a-4563-a8ba-d180772a8feb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ca4b40-7b73-41e3-a39f-08b4d6f4ceaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62df7612-961a-4299-bd76-52d5b3d3af7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22368fb-c580-4ee9-9eb2-41ab70f15a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15182fa-69a2-4658-8c95-4e0ecb7fdb8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cefc97-4271-4c5f-8e1e-7a5be94f0f2d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe1015e-9eb5-4645-bd59-55fa1fc26bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f9856f-e94e-4255-9567-b66975975853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fe3f81-cfbd-44d8-8d45-654b6631db06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffd1a30-981f-4a4f-bbf4-5b743d49dc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3e40b7-8b32-4f4d-b065-a03b44a18406",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd47b949-3012-4ca8-90bc-b0b6234c043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d01bf3e-5cce-4011-b8a4-4efb16c3c050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cfbed4-9b75-4bfc-8cce-0eff409bfda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7be1ce-b9ad-435c-92dd-67672f28d357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d60ca0-04a0-4bbf-a804-6884e276310a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d62400-0fce-4ffb-a0cf-19b3742929e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668f44d5-ee27-480a-8d2a-b91ed687ca73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab530c8-d6d4-4576-a066-0dee50f87aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "baf98408-c516-4890-92ae-c69338a78aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2843aff3-1829-4f08-b801-1085efa042dc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cc2707-a5d1-4e98-b53d-75a0c42bdb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318fe6cd-086c-4b5e-8d94-94cc5e093873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084e99d5-2073-4250-bb3d-3dd54f85fa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af8d9a99-efa7-437f-b3eb-bd156a93f7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b20f06b-e515-4765-849d-2c7278a6f33d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5a8e9e-7a84-47fd-ba88-9c90e9922cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4f9509-97d6-4a41-99f4-414e07a0f28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50979208-dd19-4c8e-a899-c19ac8503056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d56302-d362-4e98-9189-378ad4d17daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d2cf5b-8a29-4a84-b2c0-14fcb0543717",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9bafce-62dd-44ab-ac39-0196b681a7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac273b75-1f21-419c-9a02-2c6fffc33064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2e9ecf-8a4c-45c4-b824-3a92c11fa670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41ac0b50-125e-4d9c-a465-bf395d567342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fdc94c-a367-4f2d-abe3-fdf55415379a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b2c311-a4a0-44dd-b984-a1078bfe8808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18567695-0b81-4144-9ec9-343df16137b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e28dea0-4583-4f16-8a3a-8596d798dec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "217b0d42-c71d-478d-b4b2-a049cfcbf4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88da6ad8-3644-467a-b56a-b7838dd98c49",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c7d20e-8eeb-43eb-88e3-e4f5d4dcbd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd43e34-6a18-4861-9951-8f90a7f1776d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de540a7-3718-42c5-8355-2ff7a459bfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "534e2424-da18-4cc3-864d-5df590714898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27af186f-b360-448d-8604-178d84eb185e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac4ab98-0953-4f5b-9c96-9b572fa78aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea5c54d-1a85-42a3-bda5-f414259dcc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69598f83-0f9a-43cb-b6d7-67bd07343836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "13dd624a-048d-46b7-879a-35f076834164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f5e8d1-c4ee-4432-af01-e1b289749b27",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d18f7f-dd2a-4cbd-9a5c-fb41ba9177dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "99b7bbc8-dd9e-4fae-a85f-f46792684c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4830d80c-f7b9-4594-b457-6426e6f08176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "50412ea0-c783-4739-b39f-fc1921be7125"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0ddc979-e622-4578-84f2-9127ab0d495a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b84d226c-9b1e-404f-9eaa-2aa5f41b11b8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a467d27-efcb-459c-bbc8-d555a638a93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "917e0c80-0721-4dfb-9abb-c56e3d80c7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a9c838-f8b2-4b22-b85b-5bc6d039ef16",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91b563f6-52c1-4a83-86dd-7957196d7a28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd276186-3e3e-45b7-8484-a5d019f34bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7db3139f-b3eb-4c59-8ca2-7e4af4b8a648"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2a547ec-ec54-4159-b1e7-7f7169519da5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "690f1a19-bf82-42aa-b2fd-e740450a9e60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc28b40e-e0e5-43c0-add9-8b616897937c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c1dde2d-88b1-407c-aeb8-58305ecd7892"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9550cc8-7164-48e9-8038-3286e7b117de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6d2274c-a018-4040-a3d3-3c14ed3e411e"
                }
              }
            ]
          },
          {
            "id": "b3410460-3797-4368-9682-5ea2026003f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e090a106-f90b-435a-a41d-afa2a3fcff43",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c583ac06-ef48-42f1-8e7f-2e2ad74df41c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8718fd-e618-47ef-a1a4-b2829f62eee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "84a411f4-a8f9-44fb-af8c-0575362d020c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a025f5a-9fda-4580-8578-be49d1df81bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7703be44-1549-4c49-8f15-531d94cddeaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05cfc6c9-cd68-41b2-b5fb-84bd916b414d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89bacc1-bf02-48b2-b838-f261cca268fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80921d41-1f5d-4df6-b07e-b0a1dda5bdaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c85e092f-8484-4a55-9ab8-3eaebf8137dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02ab8db1-d5c8-4c68-a645-3d13d58af474"
                    }
                  }
                ]
              },
              {
                "id": "a0385932-b781-45f3-ba49-eb231f546ca7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14c8e874-a01d-443c-ae27-3a5084b1d81c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad46aaf0-895b-47d3-9600-40520f59ffe9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7315840d-bad8-482b-a7b9-20ec9a2475a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "638645f9-8a0c-484a-b217-ef6650907722"
                    }
                  }
                ]
              },
              {
                "id": "68bb47cd-7381-4f69-ab91-463124e77ed6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d290538f-f75e-4cc8-b3d1-8234fc4c7183",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8a2990c-1c6c-40cb-a862-73dc8e21196e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2326741-f2bd-4e51-a750-6fe35d810e26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d18051f-ac2d-4667-9604-f49ef5ae9570"
                    }
                  }
                ]
              },
              {
                "id": "0ebf620b-4b50-43bf-90a5-45423df145c3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c42d5658-73d8-4789-a500-e561fb7898ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddd76023-ffd6-437b-bca9-8465d8db8486"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62c1bb36-3d31-4787-b4f6-1594d7ecf816",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d9b312f3-834f-4739-9e03-bc49bd89b4e1"
                    }
                  }
                ]
              },
              {
                "id": "6e874c0a-9ad9-41d7-b149-15f22b20c513",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf370ccd-08c2-4e28-8239-4b164d406f95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56eae04f-f223-4333-b3fa-1323796881e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caec6f25-0daf-44d1-9bea-a14d2332323c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6260cd9e-2563-4a30-877b-4fb5729acd86"
                    }
                  }
                ]
              },
              {
                "id": "a7e9e624-ee25-4919-96df-e3f31905a47c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed19b411-ef8c-4174-9a26-46f85821e66e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97371e06-e45d-4fc0-bfa4-4d7f466d6aff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71da64ea-c229-4328-921a-80a162901497",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87be4790-01a3-4a4b-afbc-7aa28208cb5a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2277aa5-b65c-4701-9191-71ea6cc58892",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ac1d84f-2ebc-4eb2-b4e9-19a76303fe19"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "62dc036f-dacd-4f0d-992f-8dc0f7c82387",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b038d91-b20e-487f-8328-dc9f920ce57c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f5360eb-5bac-4e4e-bcda-9242ddd924e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "63621d7f-dc5f-421b-b773-c7dbf5f789e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1172ab23-9761-44ac-a88b-468e0cd6d303",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5e18727-7c0c-400e-b537-5f864be5adc1"
            }
          }
        ]
      },
      {
        "id": "0c747cbf-e1b1-4758-8eb3-3f4a5c6370f7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "627721f2-9d13-4d5a-8696-39993925dcf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "987de359-ce52-4205-ab32-17510a195c27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47e27679-e8f0-4e12-b3d2-19b4f1284680",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d785fa4-f94c-4af4-baca-bfade216e852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b687ec97-0dd8-4021-898f-71b09174e2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e47d82-8bec-467a-b848-c306fa5b8daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f651ea0a-203d-440e-b0e6-8eefe6bc95ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02af8c3-4b24-4480-aea4-69005616cfaf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2472c9f5-d328-46b0-ab16-d98fbc72b0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a0f05c-3519-4cd7-82de-1db03fbf8bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8ff61e-a861-4ee4-a19e-07e9f99996fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78ba8997-ba39-4fc5-bf1d-5dc026d4643d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9521b62f-476f-4c1d-95b3-b3d7496c93ea",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105d3e26-64d9-4c20-b6ed-94510bff06b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd6721a-0f61-4c0b-80cb-72feea3dae1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca008220-3b80-4c65-baeb-22d8788e7225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f709b5-d86c-4644-a559-8eac9657e523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a4509c-81ba-46e0-8f4c-dcddf0641a27",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1c40cc-6231-48f9-b122-12be83524034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e106979-cc5c-486d-a0e2-c88dca486d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6c96c1-f4d2-4c81-addd-ea452fee63dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dad5776-3bb9-4eb3-8a78-85130108c09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e372ab90-ee94-4c99-8706-4a20cf06154d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8859088-9546-4147-9a5c-9a12b4a21953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc16d733-f426-47f9-9415-7f10ceaec225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a78efc-ec4d-4b5c-9081-103f5d6549c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f3589c-9dbf-4b6f-9d15-488a5388580d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87129388-8cbc-4c0c-8695-430f6e9fc826",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95f89b5-1435-40d1-b7de-295bdc0877cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9602a76e-2928-415a-8169-c413b626313c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6b7663-9e9f-469c-b059-7cc79e2a098f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "464bc9a9-36b0-4443-97e0-c4123ae7d5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15dfd2d-8b4e-4ae4-8305-981bc1ab2a9f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661b0651-9f95-4cce-8c84-ea38aa1910e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2229da48-3974-4b36-8f3c-6d4a2c061080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8619bf-9c68-49b6-a861-0b311ca02a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3792be0-874e-44bf-8c1b-a43b443c5424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca79be-8507-47c6-b93a-53b518e8f0e5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841c2c50-b69c-4614-9cba-0ea0fc2a9d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cee9f6d-50bc-46da-bd50-c1d0b9b7e433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e0efe3-e834-419a-a170-51809624d699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f8c144-3acb-4897-9fea-178380d8db0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c176720d-8ff9-473d-8070-d0707f5b430b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93255bf-e5a8-4f21-9a07-e94d3cbb0c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5941ef3-512e-40d0-8979-8fff76766518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b611829-1c63-4f51-8044-b76e7ce508f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "111fc051-b1bb-4568-adf9-f867090d97cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab16f626-5c39-4c8a-a258-54906d0ca1ab",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4ffbee-9d8e-43e9-9e6d-5a35ea2bebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc8bd34-d0d5-476a-b285-c73eae47118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55dc56b-9a03-4b75-9afe-a0de9d2c486a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "484f0e63-0f42-4788-834f-c368f40bc63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ad9415-e838-4c6e-b7f1-8f2919e2cc26",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5a64e0-7409-461c-a206-5709330a615d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a056941e-80b4-4af0-8ace-8079f71ada1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfacd161-4b7b-4ef7-8073-12eff319480e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "96affdfd-86e7-4b02-b43d-d38deb61be7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf87bf6-44b6-4522-abc0-1dc32b5c052d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7fd64b-356b-47d3-a1b0-ef77a34488b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d985db94-0ce7-4519-a191-8250182f5f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ca1795-26d6-4bda-9446-66ac41088b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53b39e94-9788-4f89-953a-5b34ef2da463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6306293e-6a93-4670-8b96-5db2e2e9d7fa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648c1214-7000-4984-9478-2e87cd2c8e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265b198e-66c8-4508-afc9-89a0c8d9e7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffdb9bb-e777-4621-b47c-70568fd92585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "662e3379-3a4e-432f-9134-5c4818a333e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61306988-9827-4a8a-b5cb-e6f3b008e6c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67d01b5-4d21-4974-ae45-1947c5c83985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc020f76-5dc9-45fa-8790-5b318d1f0d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78b9c80-05aa-4a62-a601-5a7f906b953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "014e0884-bf90-40f5-97ab-a238500dc45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4329f1b1-71d0-4c24-9cda-7d5c96129466",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464a64d1-baf8-416f-bc61-806220521e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16165298-41d0-4f42-9bea-c6bece3d48b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e50c166-11b0-472a-b40e-e40b1ba81295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d412d7da-714d-4488-b069-aaaf183d6b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151a2e73-3e77-4400-a3d5-23e325a7d052",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88439778-83fb-43c2-aae4-39e33a958e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9275f041-b401-42cf-9499-42b4b5e78413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b33abd3-b175-4a97-aa2b-85e24a5d3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb33437-9d2b-46d4-b098-43578a8848a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2e0491-e40e-4d7e-8bfe-b0a5d9b4ff29",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804f5721-061c-43a0-9b05-49b2c22d14fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8760e2f-8bac-4de5-bee5-826828ad8637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2a7df8-61f5-408e-a365-80e208192a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e00b929-3992-4f35-8751-a6942cee6d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d33ed6-1cdf-4746-82be-f9de835c6b41",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c72d162-b848-4e63-9f20-477301c428bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fd9a7a-8504-4efd-b9b1-221f949f9eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b4e001-8ff5-482c-88b2-cc37f424b943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9aba45-6778-4149-9721-afea4d7c5675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a278f96f-7122-4893-8f16-62159b16558c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11e2be3-d2a7-401b-8bf8-4612b47d2b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50a8e23-ba9e-40f3-8ec3-5644e1105280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4cea0d-ae5d-4c0b-ac95-73156595e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "789e5919-5acd-4b7d-9920-af7c4605b6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd433a3-6bb2-4411-ad50-60fb244bc35c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e54e89d-4918-429a-ad84-15a1da36f1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7a5d36-7532-425d-a6ab-dc90ee03b8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0d6b2e-6fe2-4a0a-9fd6-14292d52f071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb09247e-c724-4969-b6d8-863a6bb9b443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f50a8bf-3235-41a3-b368-96429aa8c96f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8420c284-5971-4c3c-8aa9-aa41bde627a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b171addf-0125-4188-8bd4-96746e96f3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f537a6c-0bc7-4fae-beca-425106f66785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76577fc-b9d4-460a-9ce3-164f9dcbf6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e216b3f8-0345-4b40-b0de-45060abbf5d3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724ecba5-37e1-4c87-9dae-1f0b87f8ec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994f4ee8-f0e1-491e-9165-3c0e40ee8924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d9222e-fb24-481e-8aef-0591c5771830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71287a20-c8b4-4e4c-bf30-d0fcea0fada2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4ad2f6-da85-43a0-afd5-d2278258282b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb58ffd-4f63-4d7a-a617-bc332f91d4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dbc484-b0b9-4b03-a702-d7f505525402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed2a103-2191-4e52-a40f-2e7392e6875d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31ea7b26-4bc4-41ff-8458-d42074ae6553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51f2d18-3a71-488e-9d36-4b66762cd9aa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89ca56d-c551-4eba-afb7-4aebd2bb7d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcd1395-da64-49bb-bc74-382ed70b2e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7497963-8e08-4679-9a9d-05dc7cab980b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f41de53-e5ff-4ad4-b55b-47dae62a27a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92586cea-663b-40c3-b381-366ca90dc530",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc0bd01-ba22-4b4d-9992-fabf7c17ee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a6dcdb-311d-4c9b-9506-816558ee746e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe01879-f050-41c8-b1d6-6a4242e585db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9d8c89-cc9f-475b-b0c1-b434ae4123f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009e17a5-8d60-47da-ac90-7298436c5985",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e347f08-918a-42e6-9865-a735bf2e269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d92646-1b23-4612-830c-7cea7b0050b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2024f232-9010-47e0-8c4f-149f897596d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "227023a1-6dc5-4296-b95c-4deffa29adeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143df02b-85bc-43fa-886c-d1f4981763ef",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd72ada4-18be-47fa-a4b3-a602718e8b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e991f0b5-b9a0-49c6-8cc7-dbc4a9e0a56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a1048a-57af-40cd-aafb-b279b5cf7b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "539f6bce-8483-4e3b-bee5-5b79b3fded5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f530d-50a7-466d-9373-2b4c0da34e3b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32b05f3-9f8a-47d9-82eb-50548ffc5ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bbcbc4-a9f8-464e-b4e9-b84db6c2a3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4cbb4d-58f7-4544-a0ed-2dbdd2f11e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61611697-ac03-4da4-a088-13676a2b755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a694f3-c01e-4b23-8bd4-3900b796aaae",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0465409-9f49-4031-87d0-41e4b9c4d1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339896a3-a000-4e2b-aca0-5a057a09b41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d451b379-3864-485a-b90c-38e438e2f507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e5cb47-c81a-40a9-95c5-abe2c9e4b16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6e798d-6c3a-46d6-9a8d-fcf033ddcace",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8378f8fa-791e-4474-bf91-55ffb9f97587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed405da-25d2-4ff7-a56e-8f2c48338f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df054fd-fada-46b7-91eb-f9fcc4508c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79faa403-1550-4255-8125-3adf1354749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2d795f-f380-4edb-8927-b78e7876ab0c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95545784-bfa4-4436-bc4d-ebffdd3924e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7884098f-89f1-4024-8429-07d08b6fe0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9408936-48ae-4ae7-8eb6-8a6af96ae126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aee52d3-5b78-4d68-a4b0-81333476bdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617e6016-8c3d-47b3-a387-7d872e645eee",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828bfded-707f-4119-b8d0-46d5bc55015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e4dd88-42bd-40a4-826c-3fdc06154e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad8fdef-21a1-428a-80b2-73b54cc844de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d345744-de76-4aaf-a1b5-034e3a6c7806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb1db68-6d3f-4801-a054-4d51c2a65ae4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37aa89c-74cb-4744-8320-e07473b39968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0dfa64-11b9-4383-86bd-77960e9eef41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7fb702-b288-4b7b-9655-d763da200429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d623923-4d81-41ee-ac96-a24400193405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b64560-de48-4077-8f10-a1be839ca267",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b14f39b-a55e-417c-91b6-1ebb295879b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76750a38-cf63-40f3-a7e7-882263f26e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c3fdf5-58b7-4ff3-b824-265da45827ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc8cd1e-3b1f-4222-aca7-c8f81805eb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351ef014-7826-4ab3-b3f9-00d2b850d8be",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ffec9a-7d23-4aff-8af1-e6212f1d8d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb67a953-33b0-45c2-a890-8b1d50961fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87743f9-abe7-4dc1-875e-8c5a4a20eca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75dd7542-966f-473b-abc1-364042ad25a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c349d4b5-3765-4783-bc76-3655bbfa2dbb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d2a7ed-8cbf-4ec1-90ce-5165eb975c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4b2732-32cb-4f72-91c7-fdc62ff353a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f8fbf5-8742-49cf-968b-5e8008f8b967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1372038-074c-4ebd-a4e9-f68888d482a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077093ed-f4bf-4f3e-bc65-9baf35935716",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f863ce8-b2ff-4230-85a2-5e0cdc9455b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337357fa-bb45-4f77-8633-602e7bc50a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937ef421-f1dc-4a35-aa37-3aa0d2e38952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9079e28f-580c-4f90-b35f-76068742ac9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1bace95d-15c6-4325-b5bd-957dfb56e637",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16e865b4-d2f0-4368-867d-59dfaacfd1f7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b806360b-1a9d-40e4-850b-2a1e2e91732c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "503ec98a-27f4-455f-82fb-ae0b21e40a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd338de-6721-4bcd-84dc-8917eae64f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd336165-69e8-4952-8ff0-a01e268e5b5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2182e9a2-2748-46d3-9c14-60112f2df39f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "295af722-ce9a-403a-987c-25c77b759a92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb7b4b21-d50a-497c-8b6f-ffcaf7a1a113",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b49ef1f3-3240-4791-9148-e5f089c891ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86584378-0092-4c8e-b913-a2b9bbbc2a09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "732484c3-be2e-4f5a-9fde-aed670c3a2e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41be3175-0ad1-4218-9c32-6a6c52064da3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "069303af-29bf-46d7-844f-022d3f9fba53"
            }
          }
        ]
      },
      {
        "id": "6f3cd25f-876f-4501-8051-b8fc2e3c772e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b9e8e798-fbd4-48b0-8364-c92df2057633",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bf15d99-22e5-4b33-887a-b7c9bdf09057",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed71ee48-dc2b-497b-b456-c499d792442c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdc2ce0-10b9-42f8-acba-fb753880a776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7409928-b6d7-4de1-8cc6-c2a34e9e7e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df68adc-d762-4ccb-a839-ea8cd7ae898f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f976565-4989-4be3-9a18-f7e70cae2ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87714f9-8559-4d72-a291-3a40eef0277e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d54048-0719-4acd-894a-d90ef262d5c6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d0f117-cbd1-4124-a5d7-0e7073cf3f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2065f8fa-2cd8-4eb0-b75b-4555a26b8496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b568aa66-ebae-44fa-9d39-8ab1f0c97b4d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2baa10a-d4e3-42ab-a924-88a8a1aaea54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11074748-7fb9-4648-a13e-414951d99b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ef08c4-b364-4d16-915b-cb80ceb23a79",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4764f46-3b91-4977-8072-f595c550e64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241ab778-0573-43fc-a746-90c7803df2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2b20f1-3efa-4793-a7c4-116a041dd56f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56d6cc8-f2b1-49a4-85ba-a3602a3223bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdfd8b5-131d-428c-8793-d8b344ab00af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150ac5c8-0934-4ab3-8ca0-73d0abe7ff1a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c59dad3-5341-486a-83a4-ee710295c4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3ef0be-2ff9-4047-ada8-d6ff7429fa70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76afa656-c111-44fd-8947-ac947ec3b079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba12274e-21c7-46d8-b1df-0bfb46bafd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24dd0070-c56b-42b1-8350-4cc30cb4f4e7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866967f9-5d31-4697-8230-f4c1e0284c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c7282b-aedf-4ca4-af7d-5427d8fd3fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4072c6-50f7-4e81-bf2a-236570f4bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45afaf8-7bba-4495-89e0-12d60b50c3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3337af8b-de5e-4135-86f0-0c6d821d0737",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d560b15d-80d0-4117-bb56-dbe6a9f40228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44bebca-a6f7-4506-a5b9-3e4954a8d367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be442d3d-7ef9-4283-999c-10f8e7cccf90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499224a9-2442-4111-ac98-8264345d565d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358afd65-f67b-451f-8e98-1238507add15",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dc3641-62ea-4a10-8a66-46872602b96a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1fb2dde-128c-4ffd-89a5-b4bc4a35ffed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377503fa-6bff-4ef1-8e72-4c85b30b4a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3394d72-9f5f-4819-830b-94ea739ac2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8e367e-84b5-4cd6-98c3-980b0ea4e2df",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575db413-968d-4590-a86c-97db9645361d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776d6213-1166-4655-8fbe-a452d88f9aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ac6bc7-353a-4eff-8895-6107234dd7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a168af-2b40-4460-b337-d5bc7d7c5ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dd80ad-9d8c-453b-af41-12ba4a3f6764",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd217fae-a4c8-4b20-8012-96faceb78779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc1bcbf-7c97-4ad2-b5a6-4ee4668e3402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ab898f-760f-4f5b-a082-6e21a15dea42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64803c38-c38e-4134-b0a3-14033d756f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5134f4f-5bcc-44ef-9709-5fc5ee03849d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4565efbc-9dce-4ead-a313-5c0d6910c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ebb28d-7e15-4aed-a00d-29e3d7299990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7780c73-e7a1-45e9-82e2-45a249a6e058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b679d5-7aad-4223-98cd-79f0193b54df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75048b4e-90dc-4d2e-9c19-4a63653724a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52709ddc-bd40-44ea-aee8-e6cc4b904d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da7a79fc-e611-4b43-ae96-b5c86f89a590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cb43f8-db9d-4f03-b3bd-460f264a459f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598319a1-758c-44e5-83f6-09a6ffcf1172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a66f10-cd69-4ff1-8e02-805d99726fe0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da3966a-e528-4010-b8ca-4314271570fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8e3aa2c-cbb2-4ed6-b6da-77b0635a90b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2756c741-b18b-44b5-8c03-f22798e6dea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26960d48-d921-4d83-a02e-35558792b20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b60ebc9-e11c-4a19-97f8-cc85d9eac422",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7047afed-50eb-4abd-8df8-aa7eb79546a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8291a4cb-9c6b-4fc1-8ec1-f14e4066c22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060476c9-b920-4035-85df-442d31c337ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7492f68-0363-4b00-96e0-d88be49e061e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ed368d-75a7-4fec-a73b-0b001ef30294",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60745847-ae06-48f7-bbf6-d009b25fd247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d98f9bf-8d9c-407a-b5db-5b9eaf99bb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec12e61-9c2b-4e61-91ad-17a418907455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02c4e83-61ff-4b5a-b805-f7915c80e6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e521ee4a-c9f8-4afc-8272-c7aa87a338a5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ff4f2f-e48e-471f-b549-8bbadd119452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce43b98-0ef0-4df8-9c17-12c7afaa4518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f57b92-6d11-453c-89d8-cc512ceba96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12228e0a-7af3-42e6-9a2d-0345f09ea4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5761bc6a-00f8-4641-a41f-a4a4c2b3319f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a180b3-5b32-4896-ab5a-2d8682438c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589fdb71-a023-43ce-bcb8-4d2eefce90fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8d833d-0a4c-4498-a73e-93f9fdf84880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76e383d-e409-4402-bf75-b49303ec8c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251da296-cfa9-4870-9c29-421701b4fb88",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ea8dca-564e-4495-b38a-5ae2cae8f2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0401009-fabb-40ca-a455-458063ee3434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1129318-0644-48c4-82d2-72c4a261b4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ed9c94-f936-4037-baad-cbce3ef06c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e85038-85e2-42ea-a4e3-3ca49085a837",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586dd418-31cf-4984-ab71-382beb2f02b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4c967f-7d38-4a84-b4a2-36e2e8d00158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01951aa-429b-4530-abde-5407f626f15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528233db-c7c2-400b-b7e5-353b15cab368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d18ef8-9931-4326-8019-0126f78b87fa",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d5d0f0-84ca-4cda-946f-3bb3e2b68c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8266bca-c9c4-4c5f-ab0d-90f2a9e62989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c174b902-0135-476f-8e16-f637e3476fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa73ce0-ea1f-4994-a188-cd32bc28f293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11181aa-1e55-4b9d-ac31-4674039e7a2d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5271b2a5-6efd-443d-89f4-e8128bf4c6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ddbc8e-09df-4313-8faa-9f0301acc4e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bb4af2-34e9-4dcf-9735-bf77dad1922b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69216990-72ac-4c1c-85a1-8b20a2e027fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a6cfa4-e07d-41be-8730-c71b4e264c31",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7702f366-e9da-4e3c-93e2-5a74bee4fa98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1043a2f9-4b13-435b-9ee5-a28261346b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b547038-e6b5-4453-9a6c-6b419e2c0a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dca82cf-d5ab-4d33-9cfc-bc0aa47ccadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48876368-4082-4931-99cd-a55aa3ea080c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4343d56-f1c2-488f-a0ca-91d26237ccb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7bc839-515d-407e-bca1-a472aa41cae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091dc8ab-f741-460a-88db-205cd707d20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afeae5a-155c-493b-b155-634c00da3aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802993cc-b2bd-4aeb-ad23-3bdb271cf410",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adac8770-a6ca-4cb6-adbf-f5cf3aa8f8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "448f0739-81d3-4910-81e7-9915e6114121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92a7b91-1b4c-47c9-bc8d-69e2c0383584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b5d2aa-3ccd-4e07-bf12-176bd8f25914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bea3c59-3f4c-4391-ad39-1a03ad87ec57",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c3d26f-18e0-4c40-a414-393256bd6afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "732f6ebf-cc70-43e5-ac16-d92e6510d34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1eac4c-f9b9-4bcd-a434-5d752bd46843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8e141b-b91a-434f-adb4-c34a22a4c527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e19dca7-d6c9-424d-91ba-cc6533e6bb7e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72e34f6-4367-4889-829b-65ae8c03adfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405107cf-50ea-4e99-b393-b7bda6358490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b02d4b3-1f0c-414f-991c-71b16592f338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0599de67-c32f-4529-8fdf-e129d0ddcd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58af67c6-8e0c-4575-99c2-4ff50122d078",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0754391-6d28-4e6a-859b-bc59c32bbe32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d832bc-6814-48a5-a3b4-27642384874e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde9e9a1-19bf-4836-a2be-018e0a324d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf611e3-5d68-4e76-837a-360c4b1facac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69be000-68b5-446d-a9a6-227c0db280ca",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce32a22-616c-4025-9e3c-8edc4bc35d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1af040-c52d-43eb-9bbc-c6931229b570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9af5eb8-99c9-4e45-854b-93693af06fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac8018d-0af7-4364-8542-9306937efbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d8815a-ec79-47e3-b4b8-165923b891be",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6e63cb-4235-4f3e-81e5-8730b9194cff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbc94ed-2a90-4081-8794-99d1cd4e21c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037c05a8-aebd-4f6d-a06b-7f3046ff848f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8010163-fa72-495e-ba7e-93903283fe03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb1199c-ee26-4778-9630-0ed1c99648c5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa331c1-98a4-4690-85de-7b93bfe46c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1abfa6d-dabc-4176-b411-c634a1a140f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00803a65-d5c8-4d62-9e3c-a307a020b6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0f9f5e-1cc5-4742-9804-98edc1164faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7696813d-483d-4b75-9fb5-2ba00736876c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e690f6-257b-408f-8fd1-6b932b3f8f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e232803-43ef-4e63-ac11-8fb92bceb4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c0bda3-32b9-4ae2-9474-84eca0edd7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1f4aa0-17c4-4feb-ad4b-0ba387a64b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d47ed14-9733-454c-af66-00dd0e1a2e7a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0929267-c6a7-4a63-84ec-6152d288f093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e32c703-a947-44e1-a583-d25a5df135b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f3a235-af59-411e-9c1b-4750d70d40df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85559dc-6b14-423e-b9c2-a786f59a2142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d5af53-f7d9-4db9-a665-97dd289f8e4f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe9ce62-5229-4a34-b699-77421d5b10b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915b6a17-020f-408b-9190-4f62d5adbda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99933df4-c64e-48fe-86f6-bdc99e8298d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2c9ac2-066f-4296-bba0-88f76289f5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59528d6-bcd9-43d0-ade1-58ddd9042f31",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f617a987-e805-4ec2-aa4e-f2d9b77b9ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64589929-8878-4c6b-9d19-2f85ecf26cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae00096-3af2-41c5-9df4-fd720d1db20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bbfd6a-328c-4ebf-9300-4e7ab0313f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4573ae2d-3673-4071-8c49-1eb0454d8b51",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591826d4-52ec-43e7-aacb-dfe0b3277bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ce3ccc-b551-41e8-9260-396c5e3b14f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da386533-eb21-4f9b-9e85-e62fd8703846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc8bd71-c958-4f93-bc5a-35903b94a8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5c1bbf-1445-48bc-ad92-7271bf2f7495",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4c90bb-93bf-4624-8b34-6b861ade5c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a83264c-374a-4a64-8bf7-adbb4d76b9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dd27cd-d7d1-4d82-a1a3-d2267afbafd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2273b720-2625-48dd-af8a-11e6a4dc9888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376fc7a0-63f6-483f-b262-6c2a4e23480d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b27b89-e211-4aa8-b862-7d7794663c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a576c5c0-b0b8-4a55-bee5-b95193bfb932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c483926a-fa24-4873-914a-1217a3b86840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5e18e9-53f5-4aa2-ad42-cb78706aa33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8242fbdb-fde3-4957-8330-009a29202f7f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fbd602-9b16-4348-94fd-d37904451c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6fe8a0-afc6-49b7-b011-993d1eb108f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a2e78-132d-480c-8e68-adbc4fd57432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790b5d8d-30b5-4264-a8e4-a7fd3fd3ba66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3161dbd5-16f0-40f0-abc6-93e67d552080",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01faa8b9-29d8-4ce4-b892-130996856ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a26d1c-56e1-457d-aefa-765e7b3ac5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdc6e62-e8e2-4870-86d0-d7ea9050114a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352d86f6-b373-4c57-9d8e-5ea6eeb565ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7b1173-03df-4024-bc9b-2d54c8051c97",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52d7b2c-4293-4af4-823a-0d2f7bd630c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e348a02d-dbec-4691-989a-2418bcabba1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52bbf6d-3658-4f07-b923-d514ee00a8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6831944-f173-47f2-98d6-6be2a15b091c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4141795-0973-444d-b52f-ef4da1d30f7a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf1953f-9773-4274-af1f-94cae36ba1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d0b721-dc19-4c83-9ff5-88dd6d3e509c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de898167-2b20-4d22-9b47-7202e35c3b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a113a2-cca7-4934-8929-afdc6ec5e8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e056669-9c4e-4fb3-9690-ec3809a3894e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab07a2e-bc96-471a-bf8a-bcee53fdddfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8e1296-08ec-40f0-a64a-00b67adbaaf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6146cec9-914b-4b57-a2f4-b759c080a6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52221e8a-95ac-443d-8d37-6429862b97b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35a17f9-19eb-41eb-bafc-065d101365e5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcef839-0480-4ea0-b1d0-dfe912c3431d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7b0f01-136c-4ba6-9237-ebf439133d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1308a375-b6d9-4111-9d5a-6087632168d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f460e26-c589-410c-9d25-8fb3614d7df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f5df40-c805-4cfb-8e5a-77fc9553b8f9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b1bdd0-6680-4062-b493-b6103eb681d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa0c7a6-47be-4bbd-991e-35463f2d0482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed9aa5c-38ff-45a4-8ac2-2f742d736090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff01f3fa-b7fc-43fc-bc73-6cc1a512681b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5554ee6-312f-4ca2-b8cc-5f27c2fab511",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cdc6b0-8450-48da-9b5d-3062f8f738ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9643a080-7cbd-46a5-8c1e-8fb9041d3f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c09d9c9-d318-4085-b9b3-06370844a4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead56cf4-29e0-4490-bb46-63b66ff9874e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443e8f65-667b-435d-98a3-d6b4092f3c95",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b75758-1385-4f98-bcce-d260583ff47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e0fa5b-0653-4ebe-9f76-f8e7d30254fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181ac111-cd3b-40f7-891d-46fdb2c00879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8334f6e-ca5a-427a-aa56-90d6b26832fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29beba3-de69-4171-a732-abc9c414282f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea97989-029d-4c6a-933e-4f87e6107713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7fe31a-bf3f-455d-b6b2-88a44d19f987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f094e72-cc99-4368-b95b-f8b9bbc5ae60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ccc7da-9f02-4490-86b2-fe8695c5dd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4e2793-8673-443c-b1ab-2e6764599225",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265a91ab-e912-46b9-ad1f-db5b0fe99f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a871f6bb-06e2-4917-9946-34c7ac6d5342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e061ad87-fd2b-4615-8a09-dc0d9baf0c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702470b5-1317-4ca0-a77c-91f0e92a1cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b062ad-3dc0-4963-9adf-781809200b67",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c98d1c6-3b40-4abc-b4b3-a2876008019c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ad342a-d518-4d3f-95ba-375c94b0f180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177aafbc-9fd9-46a9-9f64-3bdd72c5fea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4148fb9-100f-490e-a59b-12249737c4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a95a90d-b2a4-442f-8361-f87c319b0aa0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc64401-dadf-44d3-a8e4-32ddce6fc3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ccc2c8-d892-4f84-ba6d-b73eeb4fc54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c3ade3-ad5e-4da8-ad76-4636d5df396d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3352f8c-85ae-4299-b644-de49498dd8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499e464e-1846-4d47-9082-562e87d95b81",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12d1708-1756-4274-a553-2164da6a2365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af65b6c-f513-44dd-b3b0-ccf979b2b609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d223e8f3-b577-4e74-a898-eae8bbd3b7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa27b46f-748a-49e4-915c-b2a8d324b14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14ffbca-4cb7-4f85-aa3f-da5591004e0b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62465b99-6cb3-4bee-87c4-e98f77acebf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108a1e11-ec6f-43b1-b2a5-a8b529aad621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cd5e36-89a8-4ae3-8762-e84146bccc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bce7cb-f440-4551-bbf8-235af3896de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b743b5f-3219-4713-8100-251a47b2c97b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0173a0ba-0e7d-4c6f-9d7d-b8e8658b44d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f90836-ed24-4c16-a23f-282dea790f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fc74b5-7f66-41af-90f7-64379cc5eb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dee98b-3ae9-4a93-af49-c1097268008e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35aa448c-b37c-4d56-a59b-1bedca404dfa",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea286a73-154f-45d4-9cf6-2352e6cb4ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10899b6a-bdb7-40d6-8616-fd0fb003c9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc11623-120b-46a5-8cf0-f3240bef517a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889bb483-478b-4498-8abc-47d0acf544e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86116b6-030e-41f0-95ec-5eba5f603ad8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8df6df-a0e2-4794-8c09-2be794ea3d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b8fc75-31af-4a6b-a615-16204fd849ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de0f21a-a04c-41e7-bc97-5942ff4e2727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cad1ab9-bbf7-4844-b825-830dd3f49e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931a106f-fb32-4a33-a6c2-52d7d7725872",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd063de4-d173-4c3c-842a-ec2e3fb6200b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb5ec76-ea8f-4b61-8be5-2f914cb1eb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb416bf-adfc-4aba-8bbc-500f2cd31709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3fbb93-5dc4-47d0-99ec-dc6ea2362cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b455bc-c935-4f9b-8c10-7c279c4d4de3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1bb958-456a-496a-bf08-0ecb8341d4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b33a9b5-4784-4eb8-9949-f9a7466c1963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be57bddb-ed26-4cab-b2eb-aae4fe3a6d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca4f128-dded-45c4-9f74-ddf048b2a966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb5d36f-fab1-4d5b-92a8-8e63309c7659",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed4b2a2-33ce-41d2-985a-eee98a90f290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf78e563-5ba7-428f-9bf4-289bb35c7496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d6da9-7dab-4bd6-b1d8-e5a5594e7c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb123c1-d089-4acc-b990-9fac7c8e76dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2eceab-1171-4f0b-8bda-1800afca27d0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e409e9bc-8780-45eb-8129-c71ca3bf2a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a004e35-a25f-4f11-8071-33bf69ee12af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e23096-247f-41d8-bd3c-726578b4ed6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589aac29-9619-436d-af3e-67d4ac37c2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e317674-3c7b-4576-b0cc-5565b40ce036",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e60fcc8-6e4c-421f-9264-c8d3738af2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf895fdb-028d-403b-a87d-c72213dc7db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294196b1-3013-494a-af9f-d35ee6924919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4c3cd9-8218-4cbd-a8bb-e1e53e4878d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b62692-de7d-4ce3-bb87-808ab80d0c6e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1339b631-969d-452b-a99a-126c1f3685fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04860c72-5f55-4c92-aa8a-df96988682bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466cc5d3-7ced-402f-b082-aa2659f74f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0531b7-9191-4c54-8aa7-07585c178a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cca4598-9f34-44e1-a3ce-f24141f9bfa6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665748cb-c231-424a-a86d-d728e257832b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07e23d98-8c7f-4cfc-899c-9cb5511ec1f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7876792-455a-4281-b5e9-261caa2f2709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff54297-537a-481b-961f-0b7a87ea48ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c00687a-803c-4995-a5dd-c8cb9c9a0c9e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda3321d-6f95-47aa-9930-cac1a0bb97f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fda99ca-26f5-4295-bb32-2910d8ad9985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addd36c4-bddd-400d-ae16-866405ce67e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa95348b-59a3-4e41-bffc-d54d8cbfafd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de459ec1-e61b-4323-8b03-16ce8734dc73",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686509cd-ddb7-4e41-b3cf-aa8384601ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8411098-d148-4f23-ab64-ec2a5e196de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234b855b-87d1-4331-9894-5c32a60bea2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba34fad-edc8-45a0-a0e4-f51ea1582756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6352a43b-3b90-474a-8102-2d6da8da8658",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8818d7-6956-468b-b160-b165a7c52eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc29bcae-9bb8-4036-84a7-7dee0ae3316d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463d0366-6777-4cb3-9eb3-fea28f226333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d84131f-d621-417e-92bb-56ee2833b79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c4383c-9663-42b2-8d49-9cf95c0efe6f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e603497-ed58-4c92-ae63-3108add35401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "335acf80-e390-4c68-80e6-5296d11b02a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554c6c6e-f942-45fa-98c0-43d6f4f8f4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bb2b7c-844a-4757-8f54-8b0816d69bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ba402f-5708-4645-94f6-935d6cc08d1c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7072c2-2f94-466b-9ab4-38e3bae993ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40eb47eb-2930-463c-b07e-638f6fb88a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47be7f5-8666-43d4-a121-20da7a45ad02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b9f0ac-5402-409e-972f-2bd9d7f4cc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fba3371-16d9-470c-bac9-ab9e13cd75ac",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac2fce2-141c-48c4-be4b-91ecf19b62ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca2c405-c595-4b28-ae88-c4098cd4793b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb1da2d-640d-446c-a39e-1a6478107528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129d0ac9-1048-4ea1-979c-9fb75d283f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0448a9c-99bd-430f-bc76-0f2fe3e2697a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3db1575-0fb5-4f33-a05f-9ee32694d07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99c44d32-61ed-47a0-975b-1b696705a171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c593cf28-a6e4-4f79-b253-141c8bee2980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2874d8ae-d209-416d-9b29-49ac864b8167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f386dc-01c8-480c-99b2-bccf7eb480cf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea5e5e4-1166-4568-a2a8-fe2026f9d81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98fc76e-a1eb-4991-b533-596c4193ab5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3df1ed-319e-4bd3-97b3-205f90f61004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba60840-3090-4738-bc1d-7398073c8aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f591ad26-427c-4bde-8f19-194202cbd8e2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f827b241-364d-4524-a17d-84f78440a804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "574d1e97-12c6-4126-9ff4-b8af5e63c27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad7f5af-0cb6-4f35-b81b-2ed9a8d430ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb5cbc6-99ee-4bb9-a918-ab1f40ee7f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b276e85-5c53-4311-81b7-c8444250a4b1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f658de68-4595-4a83-800e-e548defe4cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "176e27f3-31d8-4a32-bb4a-b52721612fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bed481-8089-471a-92ec-8cf0f4bfd619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d98481b-6566-4c13-b09f-9afc914d2a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fb8a41-57cc-44a5-9d52-0f1cd18ce558",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa5f71e-a195-4ae0-8e5e-a27128b4299f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e7e01b-281f-4882-ab97-61429af0fe86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950c84e1-1885-482a-b6eb-ff6f95eeb5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451893b8-a8a5-4208-950e-85c168f5a3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffb7619-85de-4fe8-a4a0-69829ccfb1fa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a84d0c-9e28-4925-9c59-469fe926b273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4573c9a7-3f38-42dc-8228-00d2c045ef6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98a1de7-d928-4369-a467-9d705db8cca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7236f21e-2f7d-42a7-b1c1-391a75fb64a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71212b5e-234a-4cfb-b4ac-eb1af0d6c16e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8a3587-1bc1-4e81-bdf4-ea5eb8ba04f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b22b338-c449-486a-9ae1-bedea23ffa47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e44d31b-25d7-4713-aade-e1e356ecf278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a06e4a5-65c5-4f7d-a7ba-0c43c6f6d7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c54ea0-4e93-48ff-83be-87ae024a6b9f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00867229-3065-47b5-a941-2bf2c6a8b5bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4e6feb-192e-47d5-adcb-655c60a25506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a566fa14-76b3-47e3-8412-758fb3753b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd69414e-b4de-4e46-8de1-6386c9cee1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c80112-00b9-4ecb-b36b-b5373dc693e2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9c6a32-0432-46c0-be8d-67be0f4455ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2d628e1-88df-48c8-b9fa-a4ec89760de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7757e2-7414-4d8b-b0ac-9a3baab2883d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a06ef56-461e-45db-a9aa-0ca149fdc0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72496f40-a295-49a4-a0cf-1e719a20a2d7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722a4003-5a74-4a65-ad9a-eb29711e2e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d403db8-375c-4329-aa3a-1b2c4adf1b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3167b647-f7d7-4b2b-8000-9653f0a8c125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b4f2d3-2007-4391-8efe-40b2af537b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a87544-f9d6-45a2-8906-fa4e69ca2a65",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aead66-d1ae-4bc8-8325-1a3f9095ffac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c920722b-7225-4b07-8cd7-1951a1976746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6191d797-44a1-4ff9-9d75-4dc558974fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5e0867-e8fc-497c-812c-a0d0460c32ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0c453c-2a41-4cad-bf1d-3052cb063c6d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929d6095-0239-4bf3-a4bf-cdb3560ce173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70517109-1c89-4063-a491-da85f3e314da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c3aab2-5051-4eb4-a65b-4b36851a6c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d2cd36-5d75-4153-9a0a-38a24a534c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008560d2-cc0f-4bce-972f-1dc3c805d23b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51682c3e-eee0-4dfc-91b3-f6ec4e9d5e82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ef82edb-3ee1-4155-b2be-5ce6626cbdbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6738575e-a162-4b7a-b080-d0b20632f848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ce520d-1e8c-4048-863d-2716cc6345b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633c3088-1132-43b2-b166-534be643b2cf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bea4ea3-4d7e-4535-9b05-63a1349bf9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644f4124-79b9-4db0-82b6-72d0659744ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8412367c-b8ed-42dd-9b09-b55cf7290dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5535b9-0750-45f7-98a3-559ef3e1ab75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546a9a30-be4c-439e-9919-c13ec8904550",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad2731f-0ef7-4849-bbf1-b510fed10e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5749b42-b86d-4a76-a2df-a7427f7bbead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c909a08-cab0-47e4-b6e8-36e002e05ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96444dca-1086-487a-a860-c20b283ca133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3058f573-defd-40dd-b797-996d67d47591",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd572fc3-4cce-4a77-93da-4fd241acf2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5a6a9b-645a-49a1-8ed8-67583a34d158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b72a7d0-51df-4843-88a2-2ada37b1060a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88be334a-56ea-48a8-a097-613ccadf54d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0270d3e7-1747-46e1-9c8e-eb2048fcdd27",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9362c75-31f5-4b1b-809d-f4df3057de87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e90b40-c84d-4999-9c12-9d75a211f6c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52577045-2192-43b7-a01b-7eb16de85769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678394bb-87d3-478a-8b7c-5941e6c61e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9fb5b1-accb-4860-995d-c5ddb5f7f319",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b97c295-f27a-428a-9ee1-dad5ac454ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b960a20a-eece-45fa-9e93-cd2953a607f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3434c4c1-77ca-44dd-b954-566ea1070305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cd0f40-a145-4a83-9063-840649b45bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84b72d8-6143-45f2-a5d4-36508f6d20ed",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb004505-ea59-4b0e-a305-90db572007af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b849561-3048-4282-8fb2-140a1102de14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5ee8dc-2aeb-4d40-a4a9-f09953010106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fe874e-9a13-48c0-8334-1dc407445307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31e2b69-50d8-4a11-ade7-7925ea733731",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6d58b-0e59-4e38-8f25-d2cf5a917fb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f14a40f-da2e-4824-b0be-36d3690c1864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee10811-78f7-43fd-be67-712cece583f6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4c6d27-c734-4dba-a122-62894172de12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aca77c5-2d28-4d39-96d2-4e1f8421215d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc07c28-1147-44c5-9961-699e5aef733f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8644c3fd-a02a-4c77-af82-e9ce03a0db54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f7d790-dfb9-4048-9e77-f3336f9d0cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c75a42-c212-48ca-9c35-36d93246fe92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5102c4db-2357-4131-9608-5ec2f438ee40",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad09fc0-e219-4460-b483-7f03e7f35df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "696d3fdd-22d8-4e22-8fca-2c04863ff6ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd38f98-5eb3-49de-bd9e-c22ded5f36b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e3499d-f8e3-46a3-9e2b-fc0512c8fbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9535b025-b2a7-438c-aacd-81b2810c3531",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eff14b6-8c4e-40f0-8f7e-c469707ade09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef732f63-825c-4781-98b0-52ce12937b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdc047e-dd08-4148-aaed-0e34c603322b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de96ca87-dcba-4210-ac00-559556415123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f445be5-bfc2-4801-99a2-8d9f4840468f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e193d462-f163-4577-ab87-9adc47f40931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2b8431-3e3b-4eab-b6fb-5ca44ff156f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5ec0ba-5cae-4170-adb9-a437d1be1c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adeebaf-0f0d-4d0f-b198-747a39c3943f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91551bea-0087-4158-9cc9-cf3d7cb2a75a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a67e57-c782-415f-998e-abf712911da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b461fb21-249e-41e3-8fad-46522ac1df59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad9898b-a071-4574-83f1-3911186bb827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4fde4c-d7c8-49a7-9d38-160b4d58d8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d561b66-6076-4ab1-94f3-edc260f024dc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35593e34-d208-4756-8fc1-bbedbacba656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1038bc8a-ebe5-4536-b811-f2dc261c8e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519dee03-8f09-4702-ac6c-6c07639f1178",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6014c9-aa1e-4e3c-8129-692e0fc3e187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a39b286-6831-4281-8e5d-2c6009f7f950",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a8ce9d-8ef9-4234-b9fb-9373c64f3588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a22b90-d765-46e3-ba7a-0cc9cde5be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10a7a2e-aa11-45a5-976f-2ded8d212a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f535890-38c9-4fca-8e31-1a17d33ae88d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03cfcc3b-db23-426e-8887-cf8ef4e05add",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bbd5c71-fe1d-406c-a5f8-2f1e7729f246"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a24adc-6c37-4e23-be0a-bcf418106184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5abae21-e6ff-4a96-9e12-b99c532a8a10"
                    }
                  }
                ]
              },
              {
                "id": "518a3fda-0f03-4324-974d-6c4da9330aa5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c2dd542-da66-46bb-8f64-3f4e3c6de691",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9eb492-76cb-4457-b57d-6f853f71ee5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "94025af9-40cd-4a6b-8ff2-84265fcdc78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914494b3-41eb-43c6-9a30-4414b76cba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bd83f6c-e548-4f97-ad73-c27c5d0e0ee1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8a86fd4-4d3c-4086-9b50-75f87db8f437",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7135ebc0-f72d-4c05-a802-c156ed5e7f4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c44620ea-c014-4abc-8c39-7223acbc6400",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d174f039-f709-4e65-b812-9a1a04b401c6"
                    }
                  }
                ]
              },
              {
                "id": "9b58db2b-68df-41f8-9c38-c04e2953e7a6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "81778bd6-151e-4d71-85e5-80f9cb32dee1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f405058a-d3fe-456d-ad91-90ea75ead03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4a35de65-c4fb-4ee0-902e-0d8247eb18f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f09ad43-bbb4-4a1d-a920-8e8624503e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8fbc3c-37ed-4d91-9381-e36d38d265da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0f9b4023-d009-4273-bdd1-4b8de053d8a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "60dde392-d10d-48ca-b495-7766c2b217bd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9448ff34-0dfd-40ca-9754-ed40a51c5eb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ef47a94e-bd6d-4ce4-92a1-414e3c694fe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c41b851c-db50-40dd-9853-eeb340ddd2d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf5bc63a-01fc-4095-81c7-01d489af037d"
                    }
                  }
                ]
              },
              {
                "id": "b12f81ad-f489-4b4a-8b8b-b2fadf774f7e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d60d308-37bf-4c8c-8021-abe8c1f3b6e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa6d9b41-028b-4251-b418-c5a03d28ec28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eba22dc4-ac6c-431f-93a3-1a9279641d7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51a5333a-4a8c-4e6a-961f-9bd6d761e28f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82b7bfba-5cdc-4d2e-99dc-cd7ee2d09203",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6fc76820-f0bf-4d10-84ed-d5f139f7b7ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25b47474-1d3d-4a80-aab8-cd225bb5d068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f47e4682-f151-4467-8206-a3e87d24e190"
            }
          }
        ]
      },
      {
        "id": "15bac1dd-d02f-441d-bbe4-522f2c66e6fe",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7e12e527-3384-42ab-aa86-537c338e1253",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b059cf40-3842-4a66-bedf-518b6cf06a09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0cce0179-5f72-4a1a-8b35-2070621f0492",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0428db-5be5-4ae3-9879-132bc8c2d1c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9b5cd3e5-9603-4985-8997-7f60b844b783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f4e3e0-0d67-4730-ab2f-27048e467d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69c27883-6f56-4ed6-b787-a8e94463a686"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f5d830b-aa65-4608-81f7-2894f9c54f09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb1fca08-ee34-42aa-a029-dc3cd645d237"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74f0895d-3ef5-426b-a1a3-b25e362e1346",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a53b402-9676-4c60-83fe-15cd21e63421"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a4889d9-c6ba-48c5-bc0c-0706338125bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6dba7bc2-31d7-437b-a171-23ff396d61f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e726a2a2-3b9f-4631-8460-92eb35e5a4b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c9ada51-a03d-4005-915d-d08d5eb7670d"
            }
          }
        ]
      },
      {
        "id": "e6ba015f-70a7-4f09-91ca-80646c026662",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9ba92323-6b51-412f-93b5-d6f7d0a83cdf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67cf5009-a3fb-4839-a07a-eac7d882a9bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be8881f2-21c5-471b-b24d-16f264b63628",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8475912-d799-4c67-8dce-85d8ee16c13f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09c9ce78-0d66-44d5-abbb-9e03030e514c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8c2737-b3a7-46cb-b5e3-7acea2ead304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e92ec05-a40f-47b3-a118-acd6b1264e2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31af4e6c-77c4-4862-b5e6-a6af88e6ac0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d374850-65b4-414c-a073-7b9d5fe3cfdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0056a7c-bf66-4c9f-ad43-24a5f141c27d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40e9fbfc-5cdc-4171-9fd8-1b873d51d551"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e59f9239-e0c2-4816-b453-9f7afab3b7ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f648ad90-b12d-46ae-bdfa-e03dc58c0b21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e04477a-c457-4269-8212-82e8aa27aa85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0284cda5-d93f-4043-99fe-5837729acbb7"
            }
          }
        ]
      },
      {
        "id": "321dc343-10fb-4f57-b0ad-bfa272d0a8a2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3cb1949a-208c-4322-bed8-fc673f1c7b20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e32d63ab-e5ab-4a9c-b854-596e39f027a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db14f3da-da51-4349-bd45-48ad43aa3237",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae039d92-0017-4b8f-9481-c64690881605",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c9abfd4-6ff5-4497-a5a1-4bebd08393dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd572f73-b5c5-45cf-9c50-2d2193a04851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5bf70ca-22d8-48f3-a018-ff769400322d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b219686-d9ea-4280-a735-ca168c85c4a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b451810c-e7bf-4587-9244-54b2289246b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ab9d5c0-0ac2-40be-9e76-d6fe04ccfde6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca1d80be-26b5-4d18-98fb-bb08b6fba9ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f764c2e1-c5a1-4441-a66e-9993ca748d93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c88275c6-132a-49d9-9eba-edbc139d434c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d88238f-e3ca-4d37-b05e-48a8e6e951f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "602e6b51-de57-4da1-a522-8f554f34e360"
            }
          }
        ]
      },
      {
        "id": "7d1334ea-93d7-4fb0-801e-2cd98339e270",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ec6872b-ed85-4a77-adfd-f569b866ebe1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96b39857-f909-4ecf-a49d-6e5538009124",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b35254ac-bb7d-4834-bbeb-ff4ad838160a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "853f38b8-7290-48c6-b153-eeb0e9b03f5b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f53201c-1960-4ec6-9ec9-b42803890e1d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 73.0436507936508,
      "responseMin": 6,
      "responseMax": 724,
      "responseSd": 91.41720427504524,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716770281621,
      "completed": 1716770308813
    },
    "executions": [
      {
        "id": "a3108c71-4338-452f-984b-d66e548737ff",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "41ab9b05-a66d-4012-ba1b-b08c21dc2cc8",
          "httpRequestId": "34c46195-d9bf-4188-8396-c87e8c8bc1f6"
        },
        "item": {
          "id": "a3108c71-4338-452f-984b-d66e548737ff",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f6441c62-b1f8-41c7-a97d-817cb5400641",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "15133a0c-09f8-4956-a42b-c95ea043376c",
        "cursor": {
          "ref": "f4853a7f-3154-4f46-81aa-ca1c5116322d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7e59fc80-8029-42e9-8a89-8092ed14599a"
        },
        "item": {
          "id": "15133a0c-09f8-4956-a42b-c95ea043376c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1833a5b6-24cd-458b-a019-8ead7f319c01",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e7ff45e3-7009-4551-a661-142573d30eb0",
        "cursor": {
          "ref": "1e78314b-ac55-42dd-87f6-39d592c6dd0e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a53c6f4a-20fd-4e9a-8421-289b4d6537e5"
        },
        "item": {
          "id": "e7ff45e3-7009-4551-a661-142573d30eb0",
          "name": "did_json"
        },
        "response": {
          "id": "4b28ad7b-da3b-422d-94c7-5ca42c19ea78",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20aa198d-1ce7-45f7-817f-e010716be5be",
        "cursor": {
          "ref": "005b455e-85ad-4f9d-bb64-694ffd791ab0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "250f897d-1214-43db-ad98-cb9b2eb4ab3e"
        },
        "item": {
          "id": "20aa198d-1ce7-45f7-817f-e010716be5be",
          "name": "did:invalid"
        },
        "response": {
          "id": "89324858-d8c8-42e7-9fa9-426c322d9de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20aa198d-1ce7-45f7-817f-e010716be5be",
        "cursor": {
          "ref": "005b455e-85ad-4f9d-bb64-694ffd791ab0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "250f897d-1214-43db-ad98-cb9b2eb4ab3e"
        },
        "item": {
          "id": "20aa198d-1ce7-45f7-817f-e010716be5be",
          "name": "did:invalid"
        },
        "response": {
          "id": "89324858-d8c8-42e7-9fa9-426c322d9de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0356519-47ba-4490-8c0a-ad36c30a3f85",
        "cursor": {
          "ref": "6aecf306-d353-4788-9c5d-4949dfdb03bf",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3aa913a4-643e-47a5-a2ad-60274f6f68bf"
        },
        "item": {
          "id": "a0356519-47ba-4490-8c0a-ad36c30a3f85",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bddb01d2-49c7-4421-8eac-bbe0aa990521",
          "status": "Not Found",
          "code": 404,
          "responseTime": 318,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86183a85-bd95-464d-8ce3-92edb4252d4a",
        "cursor": {
          "ref": "7cd3d031-fded-4750-8490-d71cdae10b2a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1d899019-0fd5-4ceb-89aa-170f879bb02e"
        },
        "item": {
          "id": "86183a85-bd95-464d-8ce3-92edb4252d4a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4e9c6131-75e5-498a-b191-e039e7331d05",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b3d44f-8040-4550-9538-f8482ebb4c41",
        "cursor": {
          "ref": "36869ec1-b9aa-4ed6-a8aa-66f5cb242ca1",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9aed0291-0a9d-4ab2-9932-e2fb19d7685e"
        },
        "item": {
          "id": "e2b3d44f-8040-4550-9538-f8482ebb4c41",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c571166a-c9f6-4853-a9a0-be36ca8c8480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e023dee2-86e2-4421-ac4c-54d5f6ac5778",
        "cursor": {
          "ref": "71e5e012-c0b9-4279-bbbb-9f9f86d9fba4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "eee1820d-e91d-4857-b38a-01c6a9ee74c2"
        },
        "item": {
          "id": "e023dee2-86e2-4421-ac4c-54d5f6ac5778",
          "name": "identifiers"
        },
        "response": {
          "id": "2494b4de-0ceb-411e-abc5-94fb22cec97b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fce9f9d-caa7-4556-b468-c191d79a1c04",
        "cursor": {
          "ref": "48890e7a-3122-4378-8a87-29cbcbad8366",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "23e2be60-3b81-4f5b-95c3-bd320cda657d"
        },
        "item": {
          "id": "3fce9f9d-caa7-4556-b468-c191d79a1c04",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1ddf2856-196e-478d-9b53-ebbe8a604703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc9a3b1-427c-4650-9359-112af5d301e9",
        "cursor": {
          "ref": "cc480435-1a21-49ba-9ed4-fffab0aa9e1b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2fc2ee4-6beb-4766-a35e-353e3b4f7e9c"
        },
        "item": {
          "id": "7fc9a3b1-427c-4650-9359-112af5d301e9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ff136775-9e15-4372-9717-5054bbdb1b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346abf40-d135-42c5-bcfb-782627d916ad",
        "cursor": {
          "ref": "01233589-a19e-432e-b407-81df8058a1d7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a892e26b-3c54-4afb-9a76-88e07bc61ce9"
        },
        "item": {
          "id": "346abf40-d135-42c5-bcfb-782627d916ad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eab33715-4dc3-42bd-a146-655f483da11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c17c57b-e0de-4786-b2c7-1dbfe7b17ee3",
        "cursor": {
          "ref": "c990d41b-1ca7-4610-9f59-d18a4e382aeb",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4dac520e-db9c-4460-8469-542f43506129"
        },
        "item": {
          "id": "0c17c57b-e0de-4786-b2c7-1dbfe7b17ee3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c3854a21-ebd2-4ca3-be33-fd31ad9f6c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171daed7-c842-4f41-8686-9112b09d8c58",
        "cursor": {
          "ref": "e53baef5-af09-467b-8339-5c256669eff9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "90ea73e6-0e50-4259-bb18-128c6f1d0df7"
        },
        "item": {
          "id": "171daed7-c842-4f41-8686-9112b09d8c58",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d84d129a-2e0a-4c8d-9b45-3264d89a27a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807ce025-8a35-4507-a397-cd615c6bc9cc",
        "cursor": {
          "ref": "f1bfdb5c-f9f0-49a2-b661-12582a8c09e5",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53e6813a-d3f4-405a-87f4-33fd0fd6cf58"
        },
        "item": {
          "id": "807ce025-8a35-4507-a397-cd615c6bc9cc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fafe9c30-9e88-4380-afca-761960a08798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1acda1-1f78-46fc-86a6-ba832ad44cea",
        "cursor": {
          "ref": "c5c07a74-7c54-4ae3-8c1a-10f71e103bc1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "db2db97d-c362-4ef1-82cd-13bab4a9d647"
        },
        "item": {
          "id": "5c1acda1-1f78-46fc-86a6-ba832ad44cea",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b45c404f-beb9-4dd0-a9bc-59ef1a2e138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0aafe4-a5fc-4e96-9a68-fa2d71aa1ab5",
        "cursor": {
          "ref": "31d1879e-9d45-4c45-945a-46ca8ac1e99c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e143a46c-9573-4804-b54c-3614f0e2e3c4"
        },
        "item": {
          "id": "cd0aafe4-a5fc-4e96-9a68-fa2d71aa1ab5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "550bf412-1626-4bfd-8b3d-d1e3a03de0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c312ff1b-88df-4616-8ce8-1fff4c71634f",
        "cursor": {
          "ref": "11ea4c26-dfe2-4302-b61c-2a7fed050e70",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0b172c6b-3775-4fe1-ac86-3395bc9a6826"
        },
        "item": {
          "id": "c312ff1b-88df-4616-8ce8-1fff4c71634f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c6faf920-649f-4b77-8629-f2f93837e40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa71dce-4727-41c2-8ea0-b696383230a3",
        "cursor": {
          "ref": "9240f873-8f66-458e-bf30-697c89bfd6b4",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8f40ab82-5079-4e92-8e46-86b655df1d75"
        },
        "item": {
          "id": "6fa71dce-4727-41c2-8ea0-b696383230a3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "800d7085-4ac8-4d98-a3e3-228592cd59f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0e242f-92b9-4396-bd4f-531fb4ea4cd3",
        "cursor": {
          "ref": "6b367fe8-af53-44d7-be78-295b491663b2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "341a7940-aa96-4b94-b748-08eee8e28421"
        },
        "item": {
          "id": "0f0e242f-92b9-4396-bd4f-531fb4ea4cd3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8c514d9-63d7-4ae1-8e0d-8204441b87de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5779cb1f-d32e-46f1-ba58-a0b75e6ae877",
        "cursor": {
          "ref": "30e4867e-da8b-4057-858e-3131769d306c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "895fb084-2171-439b-8e36-4543b1065a79"
        },
        "item": {
          "id": "5779cb1f-d32e-46f1-ba58-a0b75e6ae877",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "670dd67c-d563-4a5b-aac2-984997bba366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366e78ad-8a6b-4834-9cde-db6541b0de79",
        "cursor": {
          "ref": "fc88aa7d-8243-496c-9d8e-7c6fb28a03d7",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7f5bb30c-7f26-47fd-ad80-aa6605f239ec"
        },
        "item": {
          "id": "366e78ad-8a6b-4834-9cde-db6541b0de79",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2df0f748-5e9f-47e7-a5da-6de5f562437e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b5b240-df89-4bec-b23c-ca659bcf1ed2",
        "cursor": {
          "ref": "549523db-6c2b-489c-898d-6eb19668a09a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9bc77f72-72df-41df-b9ad-cab9e15c6d6e"
        },
        "item": {
          "id": "e2b5b240-df89-4bec-b23c-ca659bcf1ed2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9ad2ce74-13d4-452f-a4a4-1f5222cee950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d012da7d-7443-407c-b7a8-9868534eb4f7",
        "cursor": {
          "ref": "f40d229c-b462-469a-9a26-6f1472cd8ed3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5226bf2f-d074-4d8a-8b6b-bd85348fddeb"
        },
        "item": {
          "id": "d012da7d-7443-407c-b7a8-9868534eb4f7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9314d655-4b10-434d-b313-825a929c4c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9ecc75-80ff-4372-b1ba-36a5b0900f67",
        "cursor": {
          "ref": "a832b0f0-11dd-43e5-9807-e98744a152d2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d236392f-7be0-496a-8a3d-c50f57ebfbca"
        },
        "item": {
          "id": "eb9ecc75-80ff-4372-b1ba-36a5b0900f67",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "762d0f04-162f-42d6-80e8-9474583020da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f9bcfa-da55-430c-8dd4-7bb11ebde32a",
        "cursor": {
          "ref": "13b96e6a-c337-44c0-a585-9a63d92d8369",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "34f0993a-9134-4a60-942d-b52153ca81a4"
        },
        "item": {
          "id": "60f9bcfa-da55-430c-8dd4-7bb11ebde32a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4856eea2-0fe1-4073-8fd0-7951f1c6eaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5572f9-802e-4670-9685-51a3a2469518",
        "cursor": {
          "ref": "3d656ce0-4e59-48cf-8828-fa0e8b7abf65",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9ecf4cc0-aac9-4c7b-b335-77d58b2535d5"
        },
        "item": {
          "id": "fa5572f9-802e-4670-9685-51a3a2469518",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bfb838bd-a24f-42ef-a8f6-c19603ed4a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189f18c4-0ee3-4b81-b757-937d16a0d776",
        "cursor": {
          "ref": "3c9ddbb0-da45-4d95-bf75-ca248e827bbf",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d4a17d94-f61d-4b3d-80c5-91f8ac420a75"
        },
        "item": {
          "id": "189f18c4-0ee3-4b81-b757-937d16a0d776",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a2509acd-632b-492e-ba33-6826535a53fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fff9542-5ed5-43a2-8fe4-ede862911a7d",
        "cursor": {
          "ref": "0004da61-ec61-4994-b474-295acbe96fc8",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb1dc704-3ecb-4d93-8dec-348c4b320418"
        },
        "item": {
          "id": "0fff9542-5ed5-43a2-8fe4-ede862911a7d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2d1036e0-1801-4816-af72-19a739bffbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af1cc52-f061-49ae-b040-e70254deef78",
        "cursor": {
          "ref": "32649f11-bdf2-47a4-b8e5-54dd23dd5410",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "703b21eb-63bc-490c-852a-aa6154da0b57"
        },
        "item": {
          "id": "0af1cc52-f061-49ae-b040-e70254deef78",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "41ff4453-1601-4863-b0b6-fec1133d47fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9561640f-7608-490b-9a1c-86404a935010",
        "cursor": {
          "ref": "3e04dc94-5375-45b1-a390-1549291006df",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "36ee0d08-4a49-4c93-800d-0bc08d302d28"
        },
        "item": {
          "id": "9561640f-7608-490b-9a1c-86404a935010",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ee6cff6c-0558-4ab4-92a6-7acf9735d7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7a568f-49d5-4ec1-88c0-eb79e2c6a58a",
        "cursor": {
          "ref": "72841ae6-e798-496b-aabb-4f538b8ae38a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a18fa5f7-4775-4fbe-892a-1835493663b8"
        },
        "item": {
          "id": "bd7a568f-49d5-4ec1-88c0-eb79e2c6a58a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "99bd9024-b229-4267-a75d-58c4dd98a31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd47870-a3e4-473e-916e-1bbde4e47e34",
        "cursor": {
          "ref": "69e98354-36b2-4c45-977c-156828b6d012",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6c1e9d95-9c1f-472c-9451-8a689952a1f3"
        },
        "item": {
          "id": "2dd47870-a3e4-473e-916e-1bbde4e47e34",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "81d93ffc-762c-4fe6-9ab4-1046e1e67fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85198d4-ca18-4e10-a4ac-fb087eae7ccb",
        "cursor": {
          "ref": "45f5ce6f-6c67-444e-86c5-df5c56274943",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d76510b8-8427-4462-962c-b914afc62aad"
        },
        "item": {
          "id": "e85198d4-ca18-4e10-a4ac-fb087eae7ccb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1293794b-8fb0-49d2-a88d-2519c1844cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1150a08-1690-4655-8456-22115d06430a",
        "cursor": {
          "ref": "5175a57b-fadd-4014-9283-40d944a402a0",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0a378f18-6426-4391-9770-2f008c639cc8"
        },
        "item": {
          "id": "e1150a08-1690-4655-8456-22115d06430a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d9085f16-1652-4da8-9106-93c883e1ec83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4863d1d7-589a-4501-943b-ad1d9d0f96d4",
        "cursor": {
          "ref": "6d9656f3-0be1-47f8-882e-be62b179ae8b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eab92625-abe2-49df-bd4e-88b3d6af90c5"
        },
        "item": {
          "id": "4863d1d7-589a-4501-943b-ad1d9d0f96d4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6f58d635-a062-44e0-b4c1-afcd6e56f9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b836810-5bf5-486a-9f79-02da9dea6119",
        "cursor": {
          "ref": "d41eef60-9395-4fe5-80e4-8e9dd820f26e",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "baa01a77-df29-428c-8f32-b0b25779887e"
        },
        "item": {
          "id": "8b836810-5bf5-486a-9f79-02da9dea6119",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2c150f7d-839e-4b35-b883-5b1a6f6e18f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddadba1-d0bc-4668-974d-5d7c325ea953",
        "cursor": {
          "ref": "c5928555-77d5-4c28-afc7-8dfb7df96789",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d7585190-c8d6-4b32-8a93-fffd9093b079"
        },
        "item": {
          "id": "1ddadba1-d0bc-4668-974d-5d7c325ea953",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "482b858f-0f8a-4d9a-8ed4-81acc2c43bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf94baa-cf01-4546-8bb9-1a7b57c8b51f",
        "cursor": {
          "ref": "331f5c62-0f36-4014-8d20-02798def11d9",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "78c3daf2-8880-4288-bfe2-800259166ea6"
        },
        "item": {
          "id": "ebf94baa-cf01-4546-8bb9-1a7b57c8b51f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6c67b75-6e8b-493c-b7d7-1206a8ff5d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bfae82-dcdc-48d9-af79-b9932d9a72fc",
        "cursor": {
          "ref": "0e3c9d3e-d8e3-470f-8e62-6ee6d5b461d3",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3c7fd8ec-5496-433c-a768-af89bfb7771d"
        },
        "item": {
          "id": "34bfae82-dcdc-48d9-af79-b9932d9a72fc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2b11e88d-3a1b-4b8a-a1be-e7117ed2ed0b",
          "status": "Created",
          "code": 201,
          "responseTime": 724,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ad23aefa-0814-44ec-81f2-e7375e5dbc96",
        "cursor": {
          "ref": "20222a20-d425-4183-adad-2d566d3e4d0d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b673adbd-f492-4b1e-be3c-0eda4d1fa430"
        },
        "item": {
          "id": "ad23aefa-0814-44ec-81f2-e7375e5dbc96",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f21922f2-4cc6-4005-baae-cafd17ddd254",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "25f5db33-7f6c-4b24-9827-114f97217a5f",
        "cursor": {
          "ref": "dc79fa10-0273-4b53-8373-cfab19da9c5b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "33082d78-5be4-4d9b-8cbd-2ebafce49f0b"
        },
        "item": {
          "id": "25f5db33-7f6c-4b24-9827-114f97217a5f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b6f4a4ea-94a9-4705-8984-038f0c516d34",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "df2ea9dc-1fdd-4827-a614-715673c61c45",
        "cursor": {
          "ref": "5dc787ad-68e4-445e-b023-4743c0e5ec59",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f398d7b1-b462-493f-825b-9a26ee617334"
        },
        "item": {
          "id": "df2ea9dc-1fdd-4827-a614-715673c61c45",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7a33d870-c12d-44a2-b268-b1c20c504ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe48b5d-2b5f-45eb-866f-c6eaba5ff4d5",
        "cursor": {
          "ref": "6f8ceaf6-47f8-463a-8d41-dccee6da4bcb",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "56306673-c46a-4778-a201-f2190b17e420"
        },
        "item": {
          "id": "7fe48b5d-2b5f-45eb-866f-c6eaba5ff4d5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ad0f315c-8274-4fdc-823f-b4436e61a7aa",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f5992e38-6360-44b0-a739-477088cb3f2a",
        "cursor": {
          "ref": "c70100f9-fd61-449b-84c7-722388452be6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "07fd5327-0a1f-44c0-b710-28c5dd656086"
        },
        "item": {
          "id": "f5992e38-6360-44b0-a739-477088cb3f2a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83a2fe9c-6285-401e-aff0-7648053536f8",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d03355a2-03f0-44c6-9133-d1908ebde35c",
        "cursor": {
          "ref": "12cb8932-bffa-4c03-a812-5e2409a4a90e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "46f65627-eb49-47e3-bb2f-f4014a8258d5"
        },
        "item": {
          "id": "d03355a2-03f0-44c6-9133-d1908ebde35c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "164016a2-caf5-4f86-bf7f-7f31bfd4ac15",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1eb92daf-0fa0-4724-aac0-897e8d76de57",
        "cursor": {
          "ref": "aeaa5436-2b46-416b-9f5a-511d629dcb4e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ef54d2f7-e93f-4015-bcf1-b198f879d7a6"
        },
        "item": {
          "id": "1eb92daf-0fa0-4724-aac0-897e8d76de57",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1ca6e457-55fd-474e-b938-5968140938eb",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "949030ad-488d-48f4-b863-2fc8b3d25c29",
        "cursor": {
          "ref": "a49c73fd-fd78-4443-9622-af4811929a0e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d72ec979-abc7-48b6-9580-472ba5771747"
        },
        "item": {
          "id": "949030ad-488d-48f4-b863-2fc8b3d25c29",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e6eedff1-21ce-46be-902b-1c509e4995da",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a226933-63e7-4852-a942-608a00893b54",
        "cursor": {
          "ref": "c36dbdfc-d723-4fa8-a868-9f9bd6e3b110",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "24b3b20d-04b5-4d55-a7ee-bd1a54dc8da1"
        },
        "item": {
          "id": "3a226933-63e7-4852-a942-608a00893b54",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "06493739-19d0-4ebc-a19c-94a31b416817",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8d84e110-aa35-41f3-bc3c-a4623547957b",
        "cursor": {
          "ref": "9973da9d-d4c9-4ffa-862d-8fa46c19c8f2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "827c76b1-971e-43d6-856e-e3bb1da842e0"
        },
        "item": {
          "id": "8d84e110-aa35-41f3-bc3c-a4623547957b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d181f1ad-d73a-4ffc-bb98-aa192fb84dd3",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f190e5a1-b25c-409b-81a5-d0e1fc0aee3d",
        "cursor": {
          "ref": "c285168e-33b0-47db-bc95-0ee86d5d35a7",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7df0e838-feab-49ea-ac4e-b534286e329a"
        },
        "item": {
          "id": "f190e5a1-b25c-409b-81a5-d0e1fc0aee3d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a14f0421-8d57-43b0-93b9-f4173a3ea509",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c12bd8e3-d870-4303-bd62-73e69d4e32bb",
        "cursor": {
          "ref": "7a9016c3-e880-4846-a406-c214e478c912",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ca4e7766-6fca-463e-bae2-53dc4517ce4d"
        },
        "item": {
          "id": "c12bd8e3-d870-4303-bd62-73e69d4e32bb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eee95ddf-54fc-42d8-b401-c88926655d2d",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9cbdb8e1-f27f-46b3-807c-33b268130e33",
        "cursor": {
          "ref": "3c87b90d-b6b6-4470-9f93-f5bde628ecb5",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ea7d2abc-e1c5-4a9c-a6d7-7b92cf07e8cd"
        },
        "item": {
          "id": "9cbdb8e1-f27f-46b3-807c-33b268130e33",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f60db204-9d7b-488f-85ba-73f519de849b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93adbee1-9c60-48f4-b68a-1b3735147936",
        "cursor": {
          "ref": "db2bb203-e529-45b2-bc8a-1a51c570795a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "60c95c64-7f1d-43de-9b60-e056ec0c629f"
        },
        "item": {
          "id": "93adbee1-9c60-48f4-b68a-1b3735147936",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2cd1060b-06e1-461b-b7ed-d16140226489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc1c7c4-18fd-4f06-8650-06fe64ce435f",
        "cursor": {
          "ref": "3cf30fa5-965b-4c06-a16c-f4480e2d4f2d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a0b76e0e-9a5e-4629-9b18-214670150d56"
        },
        "item": {
          "id": "dfc1c7c4-18fd-4f06-8650-06fe64ce435f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ed2566e2-12d3-4db1-8b7e-6924e0357a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3608585e-e2c6-418c-9fc5-76afbc12aa91",
        "cursor": {
          "ref": "09fe9578-1c98-4bce-8fcf-0c927fb905a1",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7857d0ae-8863-4ad0-8c13-0a17854cb502"
        },
        "item": {
          "id": "3608585e-e2c6-418c-9fc5-76afbc12aa91",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d7a229e8-b2c5-4ec3-a681-522c921cf5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf422dc7-360e-4461-8714-e2b276db1fbf",
        "cursor": {
          "ref": "31be5d51-ceb8-4702-a79f-9fe3b65faf34",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24a65ac0-34bf-44e0-87ee-440b9442d720"
        },
        "item": {
          "id": "bf422dc7-360e-4461-8714-e2b276db1fbf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "67d7b8fd-3ee0-430e-bd65-20e3feb2433a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc32925-0eb8-48f4-a6ba-c71f9fbbb892",
        "cursor": {
          "ref": "c4ff9f2e-d4ae-407c-b90d-36f6db6c9630",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1f138aa9-58cd-4731-9f06-354c6afef7b5"
        },
        "item": {
          "id": "8dc32925-0eb8-48f4-a6ba-c71f9fbbb892",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e396be55-fa90-40c3-ace5-6dd02886b56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48322d75-0aff-45af-869e-3694ee794bd7",
        "cursor": {
          "ref": "7dab41b1-2b00-483e-a6df-a658c789bc7c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fbf5c3d6-7c80-43a7-bc58-cbf1ad1831a8"
        },
        "item": {
          "id": "48322d75-0aff-45af-869e-3694ee794bd7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8215f26c-022a-4dc1-b396-75761a562775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c440c3-e746-4720-b75a-ac1536d3100a",
        "cursor": {
          "ref": "87fc2ab8-a8f8-4360-a3a4-204585a984b1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "681503a3-a88b-481b-bbfc-896a1cf2584c"
        },
        "item": {
          "id": "24c440c3-e746-4720-b75a-ac1536d3100a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bb134990-0b19-4ef7-9808-b68efae4aa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d85cae-4ade-462d-93a4-45493f9e2aac",
        "cursor": {
          "ref": "3d7f0bb2-441b-420c-8236-abfabe7fd5ed",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6fc81a43-1c02-4556-8e99-1281cbdc12e2"
        },
        "item": {
          "id": "e6d85cae-4ade-462d-93a4-45493f9e2aac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8202f3c6-a20a-4307-be6c-668849202dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4174dc-fdbe-47c1-8d70-6a527b2605ed",
        "cursor": {
          "ref": "74974bac-c4c7-47ad-a7e2-90a753bf1024",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f01a4b23-0786-47d5-a597-51c738557cf6"
        },
        "item": {
          "id": "5f4174dc-fdbe-47c1-8d70-6a527b2605ed",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d5fd791c-52fb-4ed4-8879-fdd53d3e9e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d357da-ca03-4f9f-afac-1186625f8a19",
        "cursor": {
          "ref": "39c32bcc-04e2-4334-9971-a4fe76b998bd",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e097fd22-9a77-4671-9cdc-4507b1a88a76"
        },
        "item": {
          "id": "77d357da-ca03-4f9f-afac-1186625f8a19",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "59963c50-fc55-4d43-bce4-4ebf49070632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e14406-14f6-4c2f-a3e2-27e9944759fe",
        "cursor": {
          "ref": "2e8dd6d5-9117-4ed9-aee6-fb90e686d89a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "034fda06-6113-4a47-a73f-3f4c853060bc"
        },
        "item": {
          "id": "c7e14406-14f6-4c2f-a3e2-27e9944759fe",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d7ddc0a4-4a54-4f02-8bf4-8653ce3b5d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694ddc0a-387b-4624-8517-fbf8319f56ca",
        "cursor": {
          "ref": "e8e63903-2874-4a1b-a198-3df588916574",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "885ceeaa-28c4-4e29-b3d3-7e006e209879"
        },
        "item": {
          "id": "694ddc0a-387b-4624-8517-fbf8319f56ca",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a51983e9-3132-451e-a47c-0e532511fd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde6119b-5e5d-4050-91c7-db2a864b68e9",
        "cursor": {
          "ref": "f66ae75b-968d-4066-9651-94a707cdfac8",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "63c2b226-7708-4f79-bc64-968ab3c6b291"
        },
        "item": {
          "id": "bde6119b-5e5d-4050-91c7-db2a864b68e9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e52d2e43-bc84-45c8-829c-706c22e9f951",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ec163aea-d566-4e8d-b14f-1e033ad63a2f",
        "cursor": {
          "ref": "b1d301d1-539c-4559-93c2-99857e7bb0cc",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "351d61ef-88c8-4b24-9977-52abdfd80a0c"
        },
        "item": {
          "id": "ec163aea-d566-4e8d-b14f-1e033ad63a2f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f24324bb-bdc8-4f7e-afa7-903ba1d8e74e",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3410c123-03eb-4766-83ab-3e83bfa290a1",
        "cursor": {
          "ref": "062b0fc6-3ba8-44cd-827f-252c9fb5355b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "739c9568-8be8-46b6-95d8-e36f68a40d54"
        },
        "item": {
          "id": "3410c123-03eb-4766-83ab-3e83bfa290a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f7596c05-628b-4368-ab10-3f86c2a88814",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "32fc0aad-a697-4d4a-9e29-b28dd203590e",
        "cursor": {
          "ref": "6e694d51-ffe9-4ab4-8440-0fc56e96ba63",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ae96ebcc-c8c3-4385-b808-61f673ff4efd"
        },
        "item": {
          "id": "32fc0aad-a697-4d4a-9e29-b28dd203590e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df915dc3-068b-4ecc-95ac-15e3f3bb95a7",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9d9dd6a2-8baf-4452-9bd3-049b04856af2",
        "cursor": {
          "ref": "b14c6300-dddf-4f42-add4-2d9c5fe9802a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "36ff17c9-869e-49ff-a7b0-5f08fd2fdd6b"
        },
        "item": {
          "id": "9d9dd6a2-8baf-4452-9bd3-049b04856af2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6aa7f656-56df-4d9f-af3d-8c5bfc0a75bf",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "032dce69-45d5-4d56-83be-359f696ad232",
        "cursor": {
          "ref": "676998d0-a0b8-403e-9b9d-a853cf4d0cfa",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5de7c69f-cdac-45e2-8590-b1a3b0949d54"
        },
        "item": {
          "id": "032dce69-45d5-4d56-83be-359f696ad232",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "eb51150e-e8fc-4c1b-bf2c-ae97e686b2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643e975a-3ee1-4f67-917e-7fdb72d1b746",
        "cursor": {
          "ref": "fdf6b7ee-661e-4c28-8cf7-c6590637b534",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f9d1d4b3-f00f-4fc5-8eba-041915315828"
        },
        "item": {
          "id": "643e975a-3ee1-4f67-917e-7fdb72d1b746",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "02796881-296b-4762-a3d7-935a8f322f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d60f28-8cea-4fde-a51d-24ad816110f1",
        "cursor": {
          "ref": "a13e7eb0-f73f-4560-aa72-05220158d7b8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e416e275-81ba-4837-ba9d-c498a311e63a"
        },
        "item": {
          "id": "36d60f28-8cea-4fde-a51d-24ad816110f1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f0cc30c8-e945-4d29-acfd-7793179685d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0a23c7-ff5e-443b-91fc-cf19d40ea13b",
        "cursor": {
          "ref": "abdd7525-cfce-4e4a-91ea-0ae8c822dc4d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b65be579-ee0a-4d90-9711-3fe63087f2a5"
        },
        "item": {
          "id": "fe0a23c7-ff5e-443b-91fc-cf19d40ea13b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "00ab1cdb-f6a0-4f84-a130-a16b3c29083a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6c1080-772f-4811-9236-9ec8e2819a35",
        "cursor": {
          "ref": "1a16cf94-a7eb-4a97-bcc9-beb124668d05",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7c1a6c2a-1484-4ddc-85da-e005a17f7b45"
        },
        "item": {
          "id": "1b6c1080-772f-4811-9236-9ec8e2819a35",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0f5592dd-83f8-4433-8a44-6b1db5b0e8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458b9b7e-8b9a-4764-8b3f-2a0484709f70",
        "cursor": {
          "ref": "2593b725-62d1-44f4-96fa-6608c4f3753c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9cebd45a-9224-4298-8038-618894026afd"
        },
        "item": {
          "id": "458b9b7e-8b9a-4764-8b3f-2a0484709f70",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7e9c3904-8664-43a1-852d-9f014f3b5317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f7d8b2-13fb-41c2-8c79-6daa26fe4ea7",
        "cursor": {
          "ref": "92946f97-aee1-4408-b621-2d4c1996d12e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2660f685-8dec-41a4-8bb7-fd8dff218ff5"
        },
        "item": {
          "id": "f9f7d8b2-13fb-41c2-8c79-6daa26fe4ea7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e1828547-9e24-4870-8f08-551769347a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c85e0eb-e08a-4633-a2a7-12ad45b87cca",
        "cursor": {
          "ref": "d65c5e7a-4ad3-47ee-bb47-a033d0cbef65",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "812b7f58-f849-4b9c-9033-432b16a2ba47"
        },
        "item": {
          "id": "4c85e0eb-e08a-4633-a2a7-12ad45b87cca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c5c723ed-c7cb-4a88-84c8-057035c0b2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a90694-2c59-4f4b-9e09-20782398306e",
        "cursor": {
          "ref": "212a81fb-9bd6-477a-a9b9-8c4ba956abcf",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ff27d80d-20c7-4003-9809-73c22ca403a6"
        },
        "item": {
          "id": "15a90694-2c59-4f4b-9e09-20782398306e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "25a5b0d2-2225-46fc-9a55-702b47bedc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba94d3ef-4567-40a6-8be6-135085d12bfb",
        "cursor": {
          "ref": "65439be1-36da-4ae3-855e-718f973190ae",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1198dd35-00f9-4aa0-8fd5-8c44b1e0e281"
        },
        "item": {
          "id": "ba94d3ef-4567-40a6-8be6-135085d12bfb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca4dce70-f6b9-4545-aee6-0e08b09e36c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9899fde-9df3-402d-b456-021249beed77",
        "cursor": {
          "ref": "d3301831-a721-411a-b47e-aef7a9d27dcc",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2fb474b2-6a62-42b4-b68b-3664dfbffab4"
        },
        "item": {
          "id": "b9899fde-9df3-402d-b456-021249beed77",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e871e5b5-7417-4afb-ab38-c7d92f5b4c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c73640e-6a71-436d-9baa-7ce64fca2f3e",
        "cursor": {
          "ref": "c33b3b6a-8c21-44c0-91be-dd2765f840b5",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "efe36616-168e-49c3-aa3d-556b2ca84e33"
        },
        "item": {
          "id": "9c73640e-6a71-436d-9baa-7ce64fca2f3e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cd50c1c6-b602-47ea-a356-c8c2d39c56d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e187b868-d6d9-41d9-922f-029699f754e4",
        "cursor": {
          "ref": "6b28a3e0-b4f7-4790-80be-366163622b10",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8d5442d5-ff45-43bc-81c4-4ed1c294bdd7"
        },
        "item": {
          "id": "e187b868-d6d9-41d9-922f-029699f754e4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "58a874ab-c215-456d-b3e6-668de0816f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0f44ab-7b89-4789-8e82-96724408df8d",
        "cursor": {
          "ref": "1c99f059-cc21-4df1-8f3f-84a6997247b3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2ee84e4f-669a-4972-b997-3dbf8617206c"
        },
        "item": {
          "id": "0d0f44ab-7b89-4789-8e82-96724408df8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f56332be-c88f-4022-bc79-33bd6c9d0408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99bd034-3c09-4d4c-b020-44cd73b0635a",
        "cursor": {
          "ref": "910ae388-40d4-4d6a-8fc1-ee20f008b7bf",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0bbec796-822d-4143-a8c4-3aa91047b0a0"
        },
        "item": {
          "id": "e99bd034-3c09-4d4c-b020-44cd73b0635a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "464a29d5-fa1b-4469-a7bd-f49b113f52ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33272d42-6365-422c-86f5-8c3be4aa61ea",
        "cursor": {
          "ref": "634dad0e-9ed3-4dd1-a895-9dc91180dec0",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8752e4c6-a033-4850-99c8-6903445fbe9e"
        },
        "item": {
          "id": "33272d42-6365-422c-86f5-8c3be4aa61ea",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fa84375d-d07f-45f9-bbe8-b2309190de6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd626ae7-43a6-4919-b574-7a391956c2b4",
        "cursor": {
          "ref": "3b9f73d5-18a3-4246-9937-20b419074d64",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0d4b472f-035d-448b-b4ae-69304bade6db"
        },
        "item": {
          "id": "cd626ae7-43a6-4919-b574-7a391956c2b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2c5c0e1b-4944-4255-9118-00cc1cb24ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fd558b-4b58-44f5-b3b1-a05511b180e3",
        "cursor": {
          "ref": "0fa0a5b5-a796-46b4-825b-b86f172b81d7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "821fdda8-a36a-4e7f-b549-2fbc0af49445"
        },
        "item": {
          "id": "93fd558b-4b58-44f5-b3b1-a05511b180e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "64a247d9-04da-4d23-9ee9-f4343660863f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5879452-3d07-4973-ac63-5fbf9d10422f",
        "cursor": {
          "ref": "bd6f8ee4-a3ac-4d7e-aacc-4ad77aadc04e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b7890d7c-595e-4d13-85a9-e5439ff509e5"
        },
        "item": {
          "id": "e5879452-3d07-4973-ac63-5fbf9d10422f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ca97983b-de10-4fc4-9653-5c14fa3a7442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a08da9-b735-4c7f-b5da-d6b30380503e",
        "cursor": {
          "ref": "864951ce-6b14-42a1-b7f0-93521fa62fc8",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b479d667-1e94-4e0d-a5b2-e811473d534b"
        },
        "item": {
          "id": "64a08da9-b735-4c7f-b5da-d6b30380503e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c3dac245-1f9c-4a33-8126-2d7a55a8c080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa033a3f-f54a-4563-a8ba-d180772a8feb",
        "cursor": {
          "ref": "06de755b-b567-4563-b902-05614a746702",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e9a2ff18-6a1a-40cb-8c59-992d90bc7041"
        },
        "item": {
          "id": "fa033a3f-f54a-4563-a8ba-d180772a8feb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b909856c-7793-4687-8e45-95791b55911e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cefc97-4271-4c5f-8e1e-7a5be94f0f2d",
        "cursor": {
          "ref": "e72426bd-099d-4ece-80b4-6bfc8643e0f5",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "778693b9-c6f2-49c8-bfa6-02ae86b79e40"
        },
        "item": {
          "id": "96cefc97-4271-4c5f-8e1e-7a5be94f0f2d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2703788d-2ec9-48d4-8973-d0913c6a530b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3e40b7-8b32-4f4d-b065-a03b44a18406",
        "cursor": {
          "ref": "167e5685-962d-43bf-b7b0-5be5a8c20987",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ceb06795-519d-4b4e-946f-69d6a08939cb"
        },
        "item": {
          "id": "4a3e40b7-8b32-4f4d-b065-a03b44a18406",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7750cb9e-1bc4-4018-a3a0-85a458939629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d60ca0-04a0-4bbf-a804-6884e276310a",
        "cursor": {
          "ref": "99f7fd9c-7f10-407a-8e37-87def4a9aad6",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2ec91cc0-5381-4c34-9fe3-b6ff847e4bd5"
        },
        "item": {
          "id": "a1d60ca0-04a0-4bbf-a804-6884e276310a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5018c6c5-5f6e-4e39-92a1-9c270c688a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2843aff3-1829-4f08-b801-1085efa042dc",
        "cursor": {
          "ref": "08478da5-97c4-45e1-9e62-6dc581f03efc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ccefb35b-c8bc-4c17-83b3-9869f99822bb"
        },
        "item": {
          "id": "2843aff3-1829-4f08-b801-1085efa042dc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0451251f-29c4-4876-bd9b-f3049aa44d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b20f06b-e515-4765-849d-2c7278a6f33d",
        "cursor": {
          "ref": "5919bb67-9b7f-4ba2-84fc-87e3c28ac56a",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "57f3eb7a-d6d1-4537-b434-1a333d46be24"
        },
        "item": {
          "id": "2b20f06b-e515-4765-849d-2c7278a6f33d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b794eac1-3ab0-4b11-9565-d56a1945318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d2cf5b-8a29-4a84-b2c0-14fcb0543717",
        "cursor": {
          "ref": "0c807163-f105-4ec0-a101-f2fb430d2bd4",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b74f26a1-2050-458c-904a-b1c881f2de85"
        },
        "item": {
          "id": "e5d2cf5b-8a29-4a84-b2c0-14fcb0543717",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3f9b7446-0512-4b00-9b29-baab38ffba0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fdc94c-a367-4f2d-abe3-fdf55415379a",
        "cursor": {
          "ref": "fe0565fc-89f5-4f88-afd7-30cb0d6e5065",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "38077254-7f95-4223-a369-f4c11bd73cbf"
        },
        "item": {
          "id": "06fdc94c-a367-4f2d-abe3-fdf55415379a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4e895e8a-0815-4a28-ae0f-ac246a89f548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88da6ad8-3644-467a-b56a-b7838dd98c49",
        "cursor": {
          "ref": "246042dc-80fa-458b-8ef9-c8026fdac784",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ba5b5ec3-d300-4777-b126-5a264489b50a"
        },
        "item": {
          "id": "88da6ad8-3644-467a-b56a-b7838dd98c49",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c6205362-9a1f-4210-8ee8-3985ce8741e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27af186f-b360-448d-8604-178d84eb185e",
        "cursor": {
          "ref": "56726ec0-a8c3-477f-b296-3d6c69c23c0b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "da159831-4d02-4242-a558-574ff5c0f70a"
        },
        "item": {
          "id": "27af186f-b360-448d-8604-178d84eb185e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2737c473-48b9-4b40-b812-af2abb2bdf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f5e8d1-c4ee-4432-af01-e1b289749b27",
        "cursor": {
          "ref": "05e73596-465c-48b7-a2d6-21e2ec252d1c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3ee9234f-ead8-473c-be00-e4ee8f45af32"
        },
        "item": {
          "id": "b8f5e8d1-c4ee-4432-af01-e1b289749b27",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6323a41-a150-49f7-8175-1b51e358c2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84d226c-9b1e-404f-9eaa-2aa5f41b11b8",
        "cursor": {
          "ref": "0e981636-b58c-4c22-9b17-f7d27c1c5d4b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f3b62c8e-afce-44d4-8599-32c54041aa8b"
        },
        "item": {
          "id": "b84d226c-9b1e-404f-9eaa-2aa5f41b11b8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ad5e3854-ea71-4a9e-ad25-2bf0649b04f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c583ac06-ef48-42f1-8e7f-2e2ad74df41c",
        "cursor": {
          "ref": "5f8aefd5-f4f7-4377-8f1b-88ac2882d03e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ff4532cf-2734-4fb2-a9ca-09ef31bf7322"
        },
        "item": {
          "id": "c583ac06-ef48-42f1-8e7f-2e2ad74df41c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f58ba60f-5a39-4ead-a280-7fb05773c5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "05cfc6c9-cd68-41b2-b5fb-84bd916b414d",
        "cursor": {
          "ref": "a3e1f43a-4a9e-493c-9c81-d95c41499cdf",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b1971b1f-817d-4ec5-9401-9fb107cca17d"
        },
        "item": {
          "id": "05cfc6c9-cd68-41b2-b5fb-84bd916b414d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6250640c-49e5-4236-884f-e56a899b3864",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0385932-b781-45f3-ba49-eb231f546ca7",
        "cursor": {
          "ref": "7a93049f-1930-40f6-b336-89b6c5602636",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4cc420e8-7acc-47cb-acf0-cd69b24a3b8c"
        },
        "item": {
          "id": "a0385932-b781-45f3-ba49-eb231f546ca7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2c159a0c-c1a3-4a0a-8ec8-8117923e876c",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bb47cd-7381-4f69-ab91-463124e77ed6",
        "cursor": {
          "ref": "01157cf5-34ed-4a5b-9a55-7377833e108d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d235af1-9d4b-4256-902d-9e843098294e"
        },
        "item": {
          "id": "68bb47cd-7381-4f69-ab91-463124e77ed6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "90e8ccfe-37c6-4dd8-980c-038278add4f5",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebf620b-4b50-43bf-90a5-45423df145c3",
        "cursor": {
          "ref": "2a7ea1e5-cde4-4cda-813a-9bb207f44eb3",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f76e13e4-278b-4d75-8bc4-b75eaaf2709d"
        },
        "item": {
          "id": "0ebf620b-4b50-43bf-90a5-45423df145c3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7f8d0725-98eb-4e5a-a1b7-d7b42e8b0e15",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e874c0a-9ad9-41d7-b149-15f22b20c513",
        "cursor": {
          "ref": "8948e0bb-f922-4ceb-8cb8-94a3c824213e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "64ca41ab-3a31-4f5d-a2a4-e5e53c651b7d"
        },
        "item": {
          "id": "6e874c0a-9ad9-41d7-b149-15f22b20c513",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "263c1108-82ea-44f7-bf04-9bf1451ced06",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-27T00:38:16.988Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-27T00:38:16.988Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a7e9e624-ee25-4919-96df-e3f31905a47c",
        "cursor": {
          "ref": "a9839ac0-b552-4e51-86da-a909d6ab7531",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fcf36819-6fd7-421a-86e8-e8ed0a217981"
        },
        "item": {
          "id": "a7e9e624-ee25-4919-96df-e3f31905a47c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6507734e-cd8b-4308-b70b-b31bde043f96",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e27679-e8f0-4e12-b3d2-19b4f1284680",
        "cursor": {
          "ref": "8b905e06-16ae-4182-9573-1c8f2c5793b5",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e68d1840-21a6-459f-8bd6-04f2f97adcc9"
        },
        "item": {
          "id": "47e27679-e8f0-4e12-b3d2-19b4f1284680",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "41efd007-d37a-4bc9-81e3-c56d154f37d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02af8c3-4b24-4480-aea4-69005616cfaf",
        "cursor": {
          "ref": "f18e18db-2597-40e2-b758-b3fb8777bf9a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b02567e-478f-4a7c-9934-29cb3ae9f74c"
        },
        "item": {
          "id": "a02af8c3-4b24-4480-aea4-69005616cfaf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fe6b4b5b-525c-460f-989b-6a232904ba8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9521b62f-476f-4c1d-95b3-b3d7496c93ea",
        "cursor": {
          "ref": "0db7a398-780e-4ad6-a9a4-d808cf0565f8",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bb42d8ea-d53c-4e88-bd4e-0979fe0441f0"
        },
        "item": {
          "id": "9521b62f-476f-4c1d-95b3-b3d7496c93ea",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b768ffb5-bf80-4a89-b2d3-e71e01b0c857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a4509c-81ba-46e0-8f4c-dcddf0641a27",
        "cursor": {
          "ref": "24f5bdc5-db19-4711-9a70-f3fee26ed207",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9abfbf55-08bf-4ee4-b371-04275890fe9c"
        },
        "item": {
          "id": "14a4509c-81ba-46e0-8f4c-dcddf0641a27",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3ad6245f-7561-4de0-b0b4-b272a2137603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e372ab90-ee94-4c99-8706-4a20cf06154d",
        "cursor": {
          "ref": "19feb64d-31ed-43e6-8137-7f45750f912b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "16505c40-1c0d-4e3b-94bc-cede62eb2984"
        },
        "item": {
          "id": "e372ab90-ee94-4c99-8706-4a20cf06154d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "db8e549e-cd15-45da-9891-682ceba67663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87129388-8cbc-4c0c-8695-430f6e9fc826",
        "cursor": {
          "ref": "b70ce9bd-017e-43fa-aa20-e62758ab501c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6cdce57c-c292-4e73-b38b-3a06e9beb71b"
        },
        "item": {
          "id": "87129388-8cbc-4c0c-8695-430f6e9fc826",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e8647387-efe4-4ace-bf3d-f3b42fbc8876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15dfd2d-8b4e-4ae4-8305-981bc1ab2a9f",
        "cursor": {
          "ref": "b1a107ec-e206-4993-a88c-6fbd733a04b6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "65b9d937-e972-4a67-b6e5-b331baf84f0c"
        },
        "item": {
          "id": "c15dfd2d-8b4e-4ae4-8305-981bc1ab2a9f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b8f35f01-0fe3-4eb5-99f9-25df74172c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ca79be-8507-47c6-b93a-53b518e8f0e5",
        "cursor": {
          "ref": "47ddad21-3e8d-488e-be01-da058afe726f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "509253b7-6f7c-4c77-bd3e-44c4edbc4b30"
        },
        "item": {
          "id": "11ca79be-8507-47c6-b93a-53b518e8f0e5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "98a75c7c-824e-4480-ab69-18ff864e6527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c176720d-8ff9-473d-8070-d0707f5b430b",
        "cursor": {
          "ref": "a345799e-a414-478d-87ad-4fd50699084a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "64e432c6-5267-4e22-9048-b3c7e6d4d76e"
        },
        "item": {
          "id": "c176720d-8ff9-473d-8070-d0707f5b430b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4c89496f-61bb-4924-b17b-4847f8eeaefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab16f626-5c39-4c8a-a258-54906d0ca1ab",
        "cursor": {
          "ref": "150ea64e-d770-47b6-9df0-0912e54dc656",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3df98c63-6d28-4dba-83ad-0064edf5f667"
        },
        "item": {
          "id": "ab16f626-5c39-4c8a-a258-54906d0ca1ab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1a059665-77d1-4f2a-9ab2-5e5a483f5040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ad9415-e838-4c6e-b7f1-8f2919e2cc26",
        "cursor": {
          "ref": "629989ac-022f-421e-ba71-0b1112768603",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c222f621-eb94-4a0b-a8fc-c50f036fc6b4"
        },
        "item": {
          "id": "42ad9415-e838-4c6e-b7f1-8f2919e2cc26",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0e5ffec7-5940-4bf9-80ee-6a49a09eb6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf87bf6-44b6-4522-abc0-1dc32b5c052d",
        "cursor": {
          "ref": "765a9d70-9537-4211-98d5-9759f3e8a364",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fe11c359-c466-435b-9bbb-ab4d9b96acbf"
        },
        "item": {
          "id": "0cf87bf6-44b6-4522-abc0-1dc32b5c052d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6694ac4d-5171-48a2-9ceb-c257cbdd6851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6306293e-6a93-4670-8b96-5db2e2e9d7fa",
        "cursor": {
          "ref": "df03ae15-0f8d-41aa-8585-3c6ca87cc3f2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "872793a4-e815-4b43-acbb-6c1119fbb962"
        },
        "item": {
          "id": "6306293e-6a93-4670-8b96-5db2e2e9d7fa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bd570237-b67f-4463-a0fc-6e27bfb149de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61306988-9827-4a8a-b5cb-e6f3b008e6c2",
        "cursor": {
          "ref": "9027052c-4e10-40eb-97dc-3fb8ebcefe81",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2dfd901c-845b-4816-a5d8-74e720c18c57"
        },
        "item": {
          "id": "61306988-9827-4a8a-b5cb-e6f3b008e6c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b65d04da-82d4-44ef-8586-1ab7af42600c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4329f1b1-71d0-4c24-9cda-7d5c96129466",
        "cursor": {
          "ref": "4250c11d-ff17-4f0b-bcfe-f59410f8fc84",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8bc41153-0841-47a6-a3b8-d0c47ba53ec1"
        },
        "item": {
          "id": "4329f1b1-71d0-4c24-9cda-7d5c96129466",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5c6d57b2-95ee-4974-85dd-d58a0f39f01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151a2e73-3e77-4400-a3d5-23e325a7d052",
        "cursor": {
          "ref": "2e8f0280-1b70-4c38-9f6e-a4ad9bcecfba",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "11351b43-e9df-41d1-8199-88658ddf7b40"
        },
        "item": {
          "id": "151a2e73-3e77-4400-a3d5-23e325a7d052",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5682d70a-24da-4c47-b761-576b40004be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2e0491-e40e-4d7e-8bfe-b0a5d9b4ff29",
        "cursor": {
          "ref": "cec2fe6a-0a6f-4081-a65d-aaa334e8450e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "68d11bfc-d5ed-4cbc-8aad-c7b15e9c3d32"
        },
        "item": {
          "id": "2a2e0491-e40e-4d7e-8bfe-b0a5d9b4ff29",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "03191720-75f9-4f37-be61-b647f2f9ba98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d33ed6-1cdf-4746-82be-f9de835c6b41",
        "cursor": {
          "ref": "9dbe7412-f183-4651-a5f3-82546829fe2a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cf253ea2-2c62-488e-8ba0-ab164d7415bd"
        },
        "item": {
          "id": "88d33ed6-1cdf-4746-82be-f9de835c6b41",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7413fd41-201f-4876-a2dc-a30033201207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a278f96f-7122-4893-8f16-62159b16558c",
        "cursor": {
          "ref": "f1dbae7c-b8cc-4110-903f-bcf6b8aa2c9a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "be3eb492-3836-4d42-a574-1ae067f23479"
        },
        "item": {
          "id": "a278f96f-7122-4893-8f16-62159b16558c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4e32907b-eaed-43fa-863d-50c3b9d10c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd433a3-6bb2-4411-ad50-60fb244bc35c",
        "cursor": {
          "ref": "91719e98-a3f9-48e0-a970-6878b0e80c88",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "42615ff0-5911-47b6-8033-114ea05dd53f"
        },
        "item": {
          "id": "3bd433a3-6bb2-4411-ad50-60fb244bc35c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3d991d8c-271e-4552-a624-33f586e73df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f50a8bf-3235-41a3-b368-96429aa8c96f",
        "cursor": {
          "ref": "fc4dae88-51b8-4fbd-9635-1983a61b48a0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e3e0033-b7d6-40e5-98b8-e6d3d283e6cf"
        },
        "item": {
          "id": "1f50a8bf-3235-41a3-b368-96429aa8c96f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e90795f9-e256-4f24-b7ab-553f4542917a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216b3f8-0345-4b40-b0de-45060abbf5d3",
        "cursor": {
          "ref": "f614cfdb-fc4f-4473-af13-8562586405a7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a2840be5-2f3d-4e95-8f06-c90b40012991"
        },
        "item": {
          "id": "e216b3f8-0345-4b40-b0de-45060abbf5d3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f5b9242b-a65b-4896-ab32-a78c3f0fee67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4ad2f6-da85-43a0-afd5-d2278258282b",
        "cursor": {
          "ref": "16f0b2b6-47be-4a54-a4f9-fc7364c636cd",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "be7761da-fc5c-43ef-b6b6-05c0a00f4dce"
        },
        "item": {
          "id": "af4ad2f6-da85-43a0-afd5-d2278258282b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "385f3bd9-20d7-49ec-9790-396b3b99000a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51f2d18-3a71-488e-9d36-4b66762cd9aa",
        "cursor": {
          "ref": "adefdaaa-c281-450f-a6dd-888e76947754",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "45168173-2b17-4b69-931c-b6af68c03724"
        },
        "item": {
          "id": "d51f2d18-3a71-488e-9d36-4b66762cd9aa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e7206e29-bdaa-488c-89e9-4d47d68f7f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92586cea-663b-40c3-b381-366ca90dc530",
        "cursor": {
          "ref": "87be37a7-1277-4cdb-abc8-ff4cd0c6cb68",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b5b137a2-9e16-43b7-82f0-284c13f2fb1e"
        },
        "item": {
          "id": "92586cea-663b-40c3-b381-366ca90dc530",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "62b2102f-0cfb-4137-a0b7-d0d22e22f884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009e17a5-8d60-47da-ac90-7298436c5985",
        "cursor": {
          "ref": "3bd57344-c20d-4d8f-8a0c-17a23f51ce3f",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c8136077-3e63-4f41-86a7-bea3a26b5137"
        },
        "item": {
          "id": "009e17a5-8d60-47da-ac90-7298436c5985",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1be1a0c-9fa3-411b-9678-fb031134de1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143df02b-85bc-43fa-886c-d1f4981763ef",
        "cursor": {
          "ref": "daf0ddee-db23-4f3e-bba7-d600d4e64c97",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "798d9596-0c92-444c-bd55-20ab7e143644"
        },
        "item": {
          "id": "143df02b-85bc-43fa-886c-d1f4981763ef",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ed746c05-6bab-4ffb-b1aa-5c0e8f42cad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42f530d-50a7-466d-9373-2b4c0da34e3b",
        "cursor": {
          "ref": "8e51b5a0-3bbe-4762-bc6c-d64379a51284",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5ea17599-6d60-41bd-bcb8-7d7b0f09c893"
        },
        "item": {
          "id": "c42f530d-50a7-466d-9373-2b4c0da34e3b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0ed4b69d-9b4d-4e41-ab74-6788647fadf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a694f3-c01e-4b23-8bd4-3900b796aaae",
        "cursor": {
          "ref": "843de2ac-85a1-4274-bd2b-98599d24e6b9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d22d0918-2bec-41e4-a1ba-5bf4c9c176a8"
        },
        "item": {
          "id": "85a694f3-c01e-4b23-8bd4-3900b796aaae",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7e995fb3-b63b-4954-abb9-6b2e082e56d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6e798d-6c3a-46d6-9a8d-fcf033ddcace",
        "cursor": {
          "ref": "96ceefce-964b-438f-89f5-22198ed66c0f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1658ea58-235c-4b8a-805c-2fe86cac0f5d"
        },
        "item": {
          "id": "1d6e798d-6c3a-46d6-9a8d-fcf033ddcace",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "49dbda1d-4fcd-49d2-80d8-b2caf8e5a16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2d795f-f380-4edb-8927-b78e7876ab0c",
        "cursor": {
          "ref": "3ee7b652-9a28-4866-ac58-90f600fc89ac",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6f60dbf6-2ed9-4eac-85b6-d510d74d7410"
        },
        "item": {
          "id": "7e2d795f-f380-4edb-8927-b78e7876ab0c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0cd8f0b2-b06c-48f9-8f4b-a33c23e1f0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617e6016-8c3d-47b3-a387-7d872e645eee",
        "cursor": {
          "ref": "53ac9517-d8df-41df-811e-497a4b48d4a3",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "db02da7a-f862-4a63-9c37-bdb03a1ae83b"
        },
        "item": {
          "id": "617e6016-8c3d-47b3-a387-7d872e645eee",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ba878121-df29-41c9-95fe-753d962775cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb1db68-6d3f-4801-a054-4d51c2a65ae4",
        "cursor": {
          "ref": "f199df85-8b1e-48e2-a9ed-2d1e4e78d6aa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e1b46b80-7fab-4393-93cd-75da6796915a"
        },
        "item": {
          "id": "acb1db68-6d3f-4801-a054-4d51c2a65ae4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0133bb93-6561-4aec-9b12-6d9e8b7814c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b64560-de48-4077-8f10-a1be839ca267",
        "cursor": {
          "ref": "028656ec-7678-4e49-8ad9-bf4bcad67248",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "01148604-ee05-48bf-aa00-e2919cc64441"
        },
        "item": {
          "id": "e7b64560-de48-4077-8f10-a1be839ca267",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ac3c1acd-c1c1-42dd-963a-dbc77eddefc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351ef014-7826-4ab3-b3f9-00d2b850d8be",
        "cursor": {
          "ref": "ec79f88c-b9bd-4e62-8bac-0a069ac895f8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "138651b6-1a5a-4350-b72f-61325bd08bdb"
        },
        "item": {
          "id": "351ef014-7826-4ab3-b3f9-00d2b850d8be",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f6043e48-586b-44e1-beff-3cec4b67be6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c349d4b5-3765-4783-bc76-3655bbfa2dbb",
        "cursor": {
          "ref": "ad07d18d-da44-440d-ab7f-c18d27d72fc7",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "191a0684-a98d-416b-bd32-3090692cffac"
        },
        "item": {
          "id": "c349d4b5-3765-4783-bc76-3655bbfa2dbb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3c1c09f5-1a92-4bf3-b31d-6f3b6629c0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077093ed-f4bf-4f3e-bc65-9baf35935716",
        "cursor": {
          "ref": "2ddffd6a-7987-4dc6-9ece-5df90a852229",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "829aefb9-66e0-4617-a99f-6a3fa4b82394"
        },
        "item": {
          "id": "077093ed-f4bf-4f3e-bc65-9baf35935716",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b845d80f-9580-4954-aa48-f1635c2aca7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e865b4-d2f0-4368-867d-59dfaacfd1f7",
        "cursor": {
          "ref": "52aecc3e-c8a8-49d1-a318-b1ac24b6c4a1",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8f8268bf-f271-444b-ad01-18a260f54193"
        },
        "item": {
          "id": "16e865b4-d2f0-4368-867d-59dfaacfd1f7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "344e5159-b715-4282-a627-f614840f59ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed71ee48-dc2b-497b-b456-c499d792442c",
        "cursor": {
          "ref": "62fa0bd8-591a-45c5-b55d-5fbaec821fff",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e7b06814-cbdf-4fd1-828a-b00c26ffdafe"
        },
        "item": {
          "id": "ed71ee48-dc2b-497b-b456-c499d792442c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0b688f13-f42b-4c47-b7d3-e1c3254b783c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df68adc-d762-4ccb-a839-ea8cd7ae898f",
        "cursor": {
          "ref": "d5de169b-0c79-4f01-afaa-b554fe627a8f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "121291ca-8cc2-4405-86e7-53cd875c0b45"
        },
        "item": {
          "id": "4df68adc-d762-4ccb-a839-ea8cd7ae898f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3598f1b4-efcc-45af-b156-38d795369f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d54048-0719-4acd-894a-d90ef262d5c6",
        "cursor": {
          "ref": "cb6d73bf-2683-4f48-94c1-5df84507c6f5",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3d9b018c-9f42-42ed-9342-6d9499f7d8ec"
        },
        "item": {
          "id": "f7d54048-0719-4acd-894a-d90ef262d5c6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e147d0db-e82f-4935-b212-cb95edbefdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b568aa66-ebae-44fa-9d39-8ab1f0c97b4d",
        "cursor": {
          "ref": "7a59d6a6-470b-4c46-ac7a-06868531c69a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8be6befe-39e1-4be3-b417-d2c4a3cbc758"
        },
        "item": {
          "id": "b568aa66-ebae-44fa-9d39-8ab1f0c97b4d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a28e7d38-6e1d-4196-8eb2-6241dbbf5fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ef08c4-b364-4d16-915b-cb80ceb23a79",
        "cursor": {
          "ref": "7506e4a4-962e-431e-b9e5-6c3b566b3109",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7caf72d7-958a-4216-a9b3-2c0199332b0d"
        },
        "item": {
          "id": "57ef08c4-b364-4d16-915b-cb80ceb23a79",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "122808a4-5f45-4640-a5cc-5bdbc7d01d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2b20f1-3efa-4793-a7c4-116a041dd56f",
        "cursor": {
          "ref": "19bad8ac-0093-436d-9105-1226278be546",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "66fdfb0a-d068-467c-90bd-e26a8af5f4a6"
        },
        "item": {
          "id": "3b2b20f1-3efa-4793-a7c4-116a041dd56f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "54e536c7-d0d4-4823-9b2a-5bb6033aa036",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "150ac5c8-0934-4ab3-8ca0-73d0abe7ff1a",
        "cursor": {
          "ref": "02dce0d8-72c8-4a11-803a-c01dd57b7008",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "427d102a-f15c-49d3-a56a-ec964087ae38"
        },
        "item": {
          "id": "150ac5c8-0934-4ab3-8ca0-73d0abe7ff1a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dc25113b-5c6b-4988-95ab-6027e0a3d6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24dd0070-c56b-42b1-8350-4cc30cb4f4e7",
        "cursor": {
          "ref": "0aee00fd-8756-45d5-a69a-aedb381a6918",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7404039b-5ca7-44d2-9070-fea951594ccb"
        },
        "item": {
          "id": "24dd0070-c56b-42b1-8350-4cc30cb4f4e7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e57845c8-9f04-4030-850a-d120d50c1e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3337af8b-de5e-4135-86f0-0c6d821d0737",
        "cursor": {
          "ref": "38118db7-488f-4873-b3c9-2a06f1b9f301",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63c1d31e-d5ae-4dd3-979f-48caf6077015"
        },
        "item": {
          "id": "3337af8b-de5e-4135-86f0-0c6d821d0737",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dfc59ae1-2948-4fae-9c39-f0d6294c6991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358afd65-f67b-451f-8e98-1238507add15",
        "cursor": {
          "ref": "86530999-9871-4e97-bf4a-593d50fdd791",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3d8bb319-7961-4713-adb0-c03ae928e3b2"
        },
        "item": {
          "id": "358afd65-f67b-451f-8e98-1238507add15",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "413f8de4-db11-46dc-9c54-bf62b80a1947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8e367e-84b5-4cd6-98c3-980b0ea4e2df",
        "cursor": {
          "ref": "11c04af3-df3f-4f71-917d-b8c60035b6c4",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b34d2b3a-ae58-4f75-b9d8-309b9644c963"
        },
        "item": {
          "id": "5b8e367e-84b5-4cd6-98c3-980b0ea4e2df",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c3e88c00-02ef-4b3e-b62e-e8552a3e5fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dd80ad-9d8c-453b-af41-12ba4a3f6764",
        "cursor": {
          "ref": "1339e6b5-ff07-49b6-8d55-d79c0638f09a",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "226bf9a1-bf11-4f81-b07f-4d1742406196"
        },
        "item": {
          "id": "61dd80ad-9d8c-453b-af41-12ba4a3f6764",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c7b4cb80-0d37-473a-a3b5-de16d8e58295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5134f4f-5bcc-44ef-9709-5fc5ee03849d",
        "cursor": {
          "ref": "1bb5ba52-5807-4ac3-afc0-8a0a836c8505",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1cd2a760-d867-4d07-840f-e11afa4a0c0d"
        },
        "item": {
          "id": "f5134f4f-5bcc-44ef-9709-5fc5ee03849d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "37b67aa8-3437-45a3-b330-162a05568c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75048b4e-90dc-4d2e-9c19-4a63653724a7",
        "cursor": {
          "ref": "cf29b837-2363-4db3-964f-d13b68ba949f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7f2962c5-cda4-47d0-a4e3-f6594dfb4f4e"
        },
        "item": {
          "id": "75048b4e-90dc-4d2e-9c19-4a63653724a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f9b17165-be7f-4290-9edb-0896d99149ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a66f10-cd69-4ff1-8e02-805d99726fe0",
        "cursor": {
          "ref": "7cd858ad-720a-4ab5-83b3-eed7bae8a00f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "db16a2b2-9c9d-408e-8125-589354c3fec0"
        },
        "item": {
          "id": "b5a66f10-cd69-4ff1-8e02-805d99726fe0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a88e58c3-3a6a-4676-b2ee-e14f256df258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b60ebc9-e11c-4a19-97f8-cc85d9eac422",
        "cursor": {
          "ref": "cc1ad1d0-d046-49ae-8fc5-e84d4a175992",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "034ad6e4-80dc-4547-b873-8e0ceae62aa2"
        },
        "item": {
          "id": "8b60ebc9-e11c-4a19-97f8-cc85d9eac422",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "51c5e0ee-8d02-42d0-9743-491c303372e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ed368d-75a7-4fec-a73b-0b001ef30294",
        "cursor": {
          "ref": "45da4654-c1b9-4fa8-8605-4b37e08a2bd7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d4837549-eaf7-4c8c-aa3b-badc08cb000c"
        },
        "item": {
          "id": "40ed368d-75a7-4fec-a73b-0b001ef30294",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "010563e3-5bb5-4b3b-a8bb-3e5419925c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e521ee4a-c9f8-4afc-8272-c7aa87a338a5",
        "cursor": {
          "ref": "2e600c24-7944-49a8-b9dd-5417b5f53d8a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8384c9c6-77f2-4af5-9b5d-1e6768c34f75"
        },
        "item": {
          "id": "e521ee4a-c9f8-4afc-8272-c7aa87a338a5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "db368c40-1f7d-4375-a97c-538a0abc9a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5761bc6a-00f8-4641-a41f-a4a4c2b3319f",
        "cursor": {
          "ref": "b6e98e75-5bd4-4ca1-836d-5950fc531c5b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0a39b334-ec85-4c04-a718-1236d02033f1"
        },
        "item": {
          "id": "5761bc6a-00f8-4641-a41f-a4a4c2b3319f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "13a743c0-63d4-46f8-8c3d-1d5086b48a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251da296-cfa9-4870-9c29-421701b4fb88",
        "cursor": {
          "ref": "924c5cd6-3ae8-458b-be69-73df09e693ab",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4c4cb3c1-2c94-4df8-bb9d-c2d8a84ea718"
        },
        "item": {
          "id": "251da296-cfa9-4870-9c29-421701b4fb88",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "10b65a45-0a36-4fa4-9617-96f98d339852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e85038-85e2-42ea-a4e3-3ca49085a837",
        "cursor": {
          "ref": "da0fbc6c-187f-43eb-b895-85c6d2e784d8",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ab1bdc59-c7d3-4343-8ff2-37889af7516f"
        },
        "item": {
          "id": "94e85038-85e2-42ea-a4e3-3ca49085a837",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e10b9594-fa8d-4f5d-9411-8fe18a039288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d18ef8-9931-4326-8019-0126f78b87fa",
        "cursor": {
          "ref": "da552ae6-c99f-475b-97c1-2037fdbbfcfd",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a056fc2e-34e5-4b6f-970d-07c3870f8f84"
        },
        "item": {
          "id": "e0d18ef8-9931-4326-8019-0126f78b87fa",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "29163fde-7dea-4ea6-918f-4b239d9a3491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11181aa-1e55-4b9d-ac31-4674039e7a2d",
        "cursor": {
          "ref": "1e66d894-285f-41ef-a6ed-5008a6c07821",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "344b7744-bae5-4c97-9600-9fbce8ecfb2c"
        },
        "item": {
          "id": "d11181aa-1e55-4b9d-ac31-4674039e7a2d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "686724f7-0d74-4fc2-94ae-56ee27ab9b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a6cfa4-e07d-41be-8730-c71b4e264c31",
        "cursor": {
          "ref": "d4628fea-bcae-485b-afea-c57b16239976",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cbc98ea9-c6bd-4e49-96b9-4a6d504c265b"
        },
        "item": {
          "id": "23a6cfa4-e07d-41be-8730-c71b4e264c31",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "abfe5892-110f-4593-953b-285d0e03aae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48876368-4082-4931-99cd-a55aa3ea080c",
        "cursor": {
          "ref": "b5772d3e-8e5b-407a-ae41-feaf7d1f3da4",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e397980e-a0dd-4700-a579-2489d188498b"
        },
        "item": {
          "id": "48876368-4082-4931-99cd-a55aa3ea080c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "01556bbf-0a88-4429-a1ce-403a57438874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802993cc-b2bd-4aeb-ad23-3bdb271cf410",
        "cursor": {
          "ref": "f2d861b8-1700-4cd2-a76c-f6954d58a1ae",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ec88275a-2196-46df-8a75-aed097a050be"
        },
        "item": {
          "id": "802993cc-b2bd-4aeb-ad23-3bdb271cf410",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2114caa0-8112-47af-9846-491627031a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bea3c59-3f4c-4391-ad39-1a03ad87ec57",
        "cursor": {
          "ref": "7f7f1aea-6af8-46bb-a803-a870ef05216a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "10e4ae7e-b614-4966-a0e6-d83c68cabb79"
        },
        "item": {
          "id": "6bea3c59-3f4c-4391-ad39-1a03ad87ec57",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e986476a-5cc3-4192-8fa3-843d9be79172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e19dca7-d6c9-424d-91ba-cc6533e6bb7e",
        "cursor": {
          "ref": "cad9f6be-ec15-4fa6-9049-62ed0287e74b",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a58f4b55-c5af-4952-87d1-83ac9985eba3"
        },
        "item": {
          "id": "4e19dca7-d6c9-424d-91ba-cc6533e6bb7e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7255a009-71d7-42ba-86ad-99bf970f7f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58af67c6-8e0c-4575-99c2-4ff50122d078",
        "cursor": {
          "ref": "6bdc56c3-74b3-4a11-8845-8dac9670f7b1",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0ca31f4-fb7e-4608-a548-2418c5dc9305"
        },
        "item": {
          "id": "58af67c6-8e0c-4575-99c2-4ff50122d078",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3b33dafd-6b9a-4225-b23d-4c440d24250b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69be000-68b5-446d-a9a6-227c0db280ca",
        "cursor": {
          "ref": "b6b3523b-6e74-4b18-869f-e666b8d16583",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fb3811b0-8a9d-420f-a30f-d5544bc5c008"
        },
        "item": {
          "id": "e69be000-68b5-446d-a9a6-227c0db280ca",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "139cb185-d357-4609-bdde-cca5d9c7f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d8815a-ec79-47e3-b4b8-165923b891be",
        "cursor": {
          "ref": "379ae326-1d73-416d-b34d-6de86256e049",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "866191e8-bc80-43a4-8fa0-ea40b785b6e3"
        },
        "item": {
          "id": "b2d8815a-ec79-47e3-b4b8-165923b891be",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "05c036d7-da4d-41f9-879d-938fb6a479b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb1199c-ee26-4778-9630-0ed1c99648c5",
        "cursor": {
          "ref": "1d2bd7d2-196d-4431-a936-1792012d808b",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1980536b-9524-4c2f-8b68-0c3e3844a02e"
        },
        "item": {
          "id": "dfb1199c-ee26-4778-9630-0ed1c99648c5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3a26c413-21c2-4b9a-9b04-2a849b94f0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7696813d-483d-4b75-9fb5-2ba00736876c",
        "cursor": {
          "ref": "e6512cf5-8528-43c0-85cc-75fda12b3b8c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5c041f49-9127-463e-8975-f389aec2686b"
        },
        "item": {
          "id": "7696813d-483d-4b75-9fb5-2ba00736876c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de4cbbf0-4b17-4a14-bc2e-64bf7ea9c1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d47ed14-9733-454c-af66-00dd0e1a2e7a",
        "cursor": {
          "ref": "bfb18cf4-d9ba-4204-85c9-52b8eb1ea840",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3679a03d-b3ee-42c6-8c89-39155abb0b00"
        },
        "item": {
          "id": "0d47ed14-9733-454c-af66-00dd0e1a2e7a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d94572b1-a210-46ce-b186-34e165d4ec24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d5af53-f7d9-4db9-a665-97dd289f8e4f",
        "cursor": {
          "ref": "fc0ce7b7-31e5-4824-9a76-16ed29817f68",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6d70b38f-34a5-4406-b763-0a1e69519bd8"
        },
        "item": {
          "id": "28d5af53-f7d9-4db9-a665-97dd289f8e4f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0649999c-dc9c-4267-b843-2d28ac119da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59528d6-bcd9-43d0-ade1-58ddd9042f31",
        "cursor": {
          "ref": "8ad116d0-ae02-4910-af34-6c35417827d4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eb7e081c-ce8e-4c5c-b39f-5a6ff026b36d"
        },
        "item": {
          "id": "b59528d6-bcd9-43d0-ade1-58ddd9042f31",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2053f1d4-d76b-4acb-b62e-1ae2b374fe09",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4573ae2d-3673-4071-8c49-1eb0454d8b51",
        "cursor": {
          "ref": "0807c3be-d797-4734-9544-7719f18a3163",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "327753b5-d845-456d-afd5-ea14c598c1df"
        },
        "item": {
          "id": "4573ae2d-3673-4071-8c49-1eb0454d8b51",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1f6c1cc7-2770-4e50-960d-54b53ce8e734",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9d5c1bbf-1445-48bc-ad92-7271bf2f7495",
        "cursor": {
          "ref": "4233666c-ed12-44af-8364-cbd89b8f2a46",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "20ab495b-7ac5-421f-8c8a-7b90aca8aec5"
        },
        "item": {
          "id": "9d5c1bbf-1445-48bc-ad92-7271bf2f7495",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f6b93787-e695-45c3-b482-c85b08e6efab",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "376fc7a0-63f6-483f-b262-6c2a4e23480d",
        "cursor": {
          "ref": "0a1e3ae4-6123-48eb-9eb4-fd916abfd509",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5c0ec95e-a68e-49c8-a1b9-e71b712e4ef0"
        },
        "item": {
          "id": "376fc7a0-63f6-483f-b262-6c2a4e23480d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e6d99617-d7e7-494d-a430-a11f16e51f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8242fbdb-fde3-4957-8330-009a29202f7f",
        "cursor": {
          "ref": "f090d0ca-7571-414d-a07e-5d4e4357a512",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9b86ac2c-1e85-424d-b272-ca66967780bb"
        },
        "item": {
          "id": "8242fbdb-fde3-4957-8330-009a29202f7f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e0c3d74f-a4a7-46d6-94ec-cb8434e1a049",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "3161dbd5-16f0-40f0-abc6-93e67d552080",
        "cursor": {
          "ref": "4e47b53a-d483-4a74-9a63-62f8b943b6c4",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "00843267-c585-4c30-8546-1e5468de59b1"
        },
        "item": {
          "id": "3161dbd5-16f0-40f0-abc6-93e67d552080",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "499e2826-248e-4e32-b7c2-2faa5fa2efeb",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bb7b1173-03df-4024-bc9b-2d54c8051c97",
        "cursor": {
          "ref": "29c0ef7a-3b3d-4268-95bf-f74955f62d0d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c7f3f093-2345-4608-9664-11dd39e90a19"
        },
        "item": {
          "id": "bb7b1173-03df-4024-bc9b-2d54c8051c97",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "44eb656a-7a3a-4541-be16-8a9fc45774ac",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a4141795-0973-444d-b52f-ef4da1d30f7a",
        "cursor": {
          "ref": "cc737976-4226-46b0-824f-3c72d9eafd0b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0170dda0-9fb0-423b-aa5f-8db27a4d06a7"
        },
        "item": {
          "id": "a4141795-0973-444d-b52f-ef4da1d30f7a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1103ec25-fbf2-488a-84f2-dd1804bb1132",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8e056669-9c4e-4fb3-9690-ec3809a3894e",
        "cursor": {
          "ref": "a8cc6d08-4690-46e2-8f7f-1d3f2fe37511",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f2069466-29bc-4256-a087-5b95b412d828"
        },
        "item": {
          "id": "8e056669-9c4e-4fb3-9690-ec3809a3894e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "11583c6b-9f06-4c75-a142-fe0ea89884d3",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f35a17f9-19eb-41eb-bafc-065d101365e5",
        "cursor": {
          "ref": "0cb3bc42-032c-4939-a35a-7419b186c2ae",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2ea7f471-7ca0-4bf9-9a66-c11afb954eee"
        },
        "item": {
          "id": "f35a17f9-19eb-41eb-bafc-065d101365e5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0116b9c0-da4f-4cc6-862e-2571190f63ab",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b9f5df40-c805-4cfb-8e5a-77fc9553b8f9",
        "cursor": {
          "ref": "e27e516b-48a4-47e1-821e-364147466cda",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fe444c55-20c5-4e67-ac0c-f976c1f034cf"
        },
        "item": {
          "id": "b9f5df40-c805-4cfb-8e5a-77fc9553b8f9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2263ceeb-723b-4885-bd54-15818b9d6141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5554ee6-312f-4ca2-b8cc-5f27c2fab511",
        "cursor": {
          "ref": "e07cac10-81ef-4860-9e5a-db0849497705",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7900b4c1-33f5-4435-8ab8-8b81dc375140"
        },
        "item": {
          "id": "d5554ee6-312f-4ca2-b8cc-5f27c2fab511",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7493904c-d873-480a-a1f6-7b9a4e38dc47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443e8f65-667b-435d-98a3-d6b4092f3c95",
        "cursor": {
          "ref": "55d5100f-a312-4f20-840a-d36c3f7a5e27",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c10fe7c5-14c3-44d6-8c06-6c6d52dc8efa"
        },
        "item": {
          "id": "443e8f65-667b-435d-98a3-d6b4092f3c95",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "86bf0f52-e7c3-40e5-b063-dee6e91dfeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29beba3-de69-4171-a732-abc9c414282f",
        "cursor": {
          "ref": "69c07089-329e-4962-a0fd-b4667acd0d50",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b5c05b01-ae2d-481f-a0c0-933d1039f5f4"
        },
        "item": {
          "id": "f29beba3-de69-4171-a732-abc9c414282f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "169d789d-76f2-486d-b21a-49b08956a92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4e2793-8673-443c-b1ab-2e6764599225",
        "cursor": {
          "ref": "c0ab776e-81eb-4e28-9a00-a8cc551a3e30",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "14b9bea6-9787-44b6-95ca-95c2e0d6dd1a"
        },
        "item": {
          "id": "ef4e2793-8673-443c-b1ab-2e6764599225",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "15dfd0a3-5390-483c-9100-93bc1241ede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b062ad-3dc0-4963-9adf-781809200b67",
        "cursor": {
          "ref": "c37e08cf-49c6-4697-9496-686565b76a21",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2995076e-5669-49a1-afe4-bb396ddd443c"
        },
        "item": {
          "id": "f9b062ad-3dc0-4963-9adf-781809200b67",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "13548f6f-c26a-468a-8f7f-017346290ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a95a90d-b2a4-442f-8361-f87c319b0aa0",
        "cursor": {
          "ref": "3c5ef113-6d07-4bca-9412-1713b9d10a3a",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cfb60d42-4283-4f01-b0ed-296f52f62c57"
        },
        "item": {
          "id": "8a95a90d-b2a4-442f-8361-f87c319b0aa0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "433fa7b5-9c20-4122-89df-afd999e01245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499e464e-1846-4d47-9082-562e87d95b81",
        "cursor": {
          "ref": "58f570f5-287d-4615-9a24-5ada9e33926b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "93d1b9ce-1950-4876-b7e6-bd758c4be53e"
        },
        "item": {
          "id": "499e464e-1846-4d47-9082-562e87d95b81",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ad51a6fe-533d-4279-a6c5-df1f2195260c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14ffbca-4cb7-4f85-aa3f-da5591004e0b",
        "cursor": {
          "ref": "f1c1d779-158b-4723-a53e-6929016b931d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8f6e971c-d6e6-4609-98a2-90e0491e0ce1"
        },
        "item": {
          "id": "b14ffbca-4cb7-4f85-aa3f-da5591004e0b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f6dcc5c2-679f-4ab1-a559-fd2557484261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b743b5f-3219-4713-8100-251a47b2c97b",
        "cursor": {
          "ref": "583d6cf6-51be-4e6b-bcaa-90fa5fa659b2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c7ac97b1-6573-4e44-b470-921c666e986d"
        },
        "item": {
          "id": "0b743b5f-3219-4713-8100-251a47b2c97b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d59a48f2-ccbe-44ab-a038-83249090381f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35aa448c-b37c-4d56-a59b-1bedca404dfa",
        "cursor": {
          "ref": "9514ad52-4cd9-4996-ae99-c516f603c78e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "47e8fe78-c1cb-4f79-a32a-9bd2d70679f0"
        },
        "item": {
          "id": "35aa448c-b37c-4d56-a59b-1bedca404dfa",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d1499a94-0c96-4f2f-9a02-352406e6c58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86116b6-030e-41f0-95ec-5eba5f603ad8",
        "cursor": {
          "ref": "7705abfa-2151-4b45-9b27-88750dfbfe59",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "62cdc037-0ed4-4e14-8548-38c67a6e3e5f"
        },
        "item": {
          "id": "b86116b6-030e-41f0-95ec-5eba5f603ad8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2febf46f-c031-40e9-b0f2-12797d88c8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931a106f-fb32-4a33-a6c2-52d7d7725872",
        "cursor": {
          "ref": "9f1cec93-3e71-4807-ac03-e01732bc11d4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "63cc87d5-be83-4d5e-8a3a-5d61ba04c876"
        },
        "item": {
          "id": "931a106f-fb32-4a33-a6c2-52d7d7725872",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b9007692-ae4d-4827-a792-2009f9f25a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b455bc-c935-4f9b-8c10-7c279c4d4de3",
        "cursor": {
          "ref": "2f264cad-a024-469d-972a-d686bf7bc8ea",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "43131a7b-16fd-43c9-85bd-ac126e5f5b84"
        },
        "item": {
          "id": "76b455bc-c935-4f9b-8c10-7c279c4d4de3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1236539f-4b68-4756-84c8-95ca9bbfd8cb",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4bb5d36f-fab1-4d5b-92a8-8e63309c7659",
        "cursor": {
          "ref": "19527946-0097-4132-9443-e8daca2de122",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ca6be621-2f74-4840-9570-bb07ae908331"
        },
        "item": {
          "id": "4bb5d36f-fab1-4d5b-92a8-8e63309c7659",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "248668e5-df40-43c7-86dc-570e447a829b",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "fc2eceab-1171-4f0b-8bda-1800afca27d0",
        "cursor": {
          "ref": "5587e0a4-05df-4ec5-9b4c-64f05afcb97b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3a34fb84-11e6-4f5d-b8a5-54a2859f7773"
        },
        "item": {
          "id": "fc2eceab-1171-4f0b-8bda-1800afca27d0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d8085b90-9cb8-4b7e-a120-dd3f6f244664",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "1e317674-3c7b-4576-b0cc-5565b40ce036",
        "cursor": {
          "ref": "94426b86-f9a1-4f7e-979b-b28a34dc2280",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "19eebc8e-4353-43c8-9688-99b1e3abc898"
        },
        "item": {
          "id": "1e317674-3c7b-4576-b0cc-5565b40ce036",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b3a228bb-2be0-4811-9dc7-c37df08fcad8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "98b62692-de7d-4ce3-bb87-808ab80d0c6e",
        "cursor": {
          "ref": "3fc68510-4678-4e06-be18-ef09038acb57",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1eea1ae4-832e-41c9-9b41-53ce1eef03d5"
        },
        "item": {
          "id": "98b62692-de7d-4ce3-bb87-808ab80d0c6e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0c246ae3-6259-4726-93b8-4939194d1272",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8cca4598-9f34-44e1-a3ce-f24141f9bfa6",
        "cursor": {
          "ref": "12002119-b48b-41d1-bcf8-ed4ade833051",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "23cbcebb-c2bd-4664-a833-f9c8e0be9712"
        },
        "item": {
          "id": "8cca4598-9f34-44e1-a3ce-f24141f9bfa6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d11cea1b-9867-4b54-a649-1a3ed19170cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c00687a-803c-4995-a5dd-c8cb9c9a0c9e",
        "cursor": {
          "ref": "f2c26463-8c53-44ea-9c9a-a05eb6f94cac",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d4349256-b09c-46e9-b3b1-d062a406c5d1"
        },
        "item": {
          "id": "3c00687a-803c-4995-a5dd-c8cb9c9a0c9e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b1e74ff5-f6ae-4563-9448-048b5e46e578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de459ec1-e61b-4323-8b03-16ce8734dc73",
        "cursor": {
          "ref": "79ea92bb-1cad-45ef-90e7-810d0ddf82fe",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d7f642ab-2db1-4d71-b919-d2fd44005487"
        },
        "item": {
          "id": "de459ec1-e61b-4323-8b03-16ce8734dc73",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5ae5b429-2175-4c34-91e9-bdd7b410fc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6352a43b-3b90-474a-8102-2d6da8da8658",
        "cursor": {
          "ref": "de78489a-6cf5-4d1d-8122-f066c85c023d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0597903b-2342-4058-94af-4dca0ce39d74"
        },
        "item": {
          "id": "6352a43b-3b90-474a-8102-2d6da8da8658",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f3753255-f940-4d0f-bc58-60ebc01f6351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c4383c-9663-42b2-8d49-9cf95c0efe6f",
        "cursor": {
          "ref": "a545a96f-22f0-4977-99bc-e0509b2c2efc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cccd1aca-c814-4457-9c67-76b9c5d315c3"
        },
        "item": {
          "id": "30c4383c-9663-42b2-8d49-9cf95c0efe6f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f16b9e6f-1423-4533-9e78-12cb881cd7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ba402f-5708-4645-94f6-935d6cc08d1c",
        "cursor": {
          "ref": "52a7c999-92d9-44cc-9232-7234e2c99f59",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "929b6f63-f6af-4f51-b7da-d73cdab8e567"
        },
        "item": {
          "id": "a9ba402f-5708-4645-94f6-935d6cc08d1c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "55458811-faa9-4363-b107-1b6cb0cfeadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fba3371-16d9-470c-bac9-ab9e13cd75ac",
        "cursor": {
          "ref": "b3965dd7-ed5a-4a3a-a507-5cbb9511e122",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1c0c1a62-a830-4110-8547-0c5775ec4296"
        },
        "item": {
          "id": "9fba3371-16d9-470c-bac9-ab9e13cd75ac",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "67513f07-2767-4b92-beed-be875194a6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0448a9c-99bd-430f-bc76-0f2fe3e2697a",
        "cursor": {
          "ref": "7fc0c05b-702a-4dce-a9a3-06e465e95504",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "731a41a3-70b5-400e-b274-66ec39713d80"
        },
        "item": {
          "id": "a0448a9c-99bd-430f-bc76-0f2fe3e2697a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fee71218-2175-4dbe-81f6-d9b3e575ee3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f386dc-01c8-480c-99b2-bccf7eb480cf",
        "cursor": {
          "ref": "3f55378c-b50c-4805-afe4-c3d45fdf8b5d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f188734f-f34e-4c01-a6d9-1c16906fbf3d"
        },
        "item": {
          "id": "64f386dc-01c8-480c-99b2-bccf7eb480cf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "caf621ad-cacd-4d04-aced-fee625e4264d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f591ad26-427c-4bde-8f19-194202cbd8e2",
        "cursor": {
          "ref": "9e598259-6b39-4efd-aaf9-1a0dc589b0a5",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "96e15716-9a11-430f-9e49-274c57ca6f3f"
        },
        "item": {
          "id": "f591ad26-427c-4bde-8f19-194202cbd8e2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "02bf71eb-1638-4e39-b49e-efa3aea1bc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b276e85-5c53-4311-81b7-c8444250a4b1",
        "cursor": {
          "ref": "fb144bc8-6aca-4193-be4f-8bcd89c7e29b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d9e39e17-9c92-46de-8b0c-2258bca06c48"
        },
        "item": {
          "id": "8b276e85-5c53-4311-81b7-c8444250a4b1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "649d5cac-7e5c-431f-abd5-bd16015ce148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fb8a41-57cc-44a5-9d52-0f1cd18ce558",
        "cursor": {
          "ref": "635ed98f-bcac-4c21-9d6b-da6c929511cc",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "146cb6f0-f630-4312-a38e-516aab56ecef"
        },
        "item": {
          "id": "13fb8a41-57cc-44a5-9d52-0f1cd18ce558",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c479067a-142b-4b24-bfc9-db9797d42e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffb7619-85de-4fe8-a4a0-69829ccfb1fa",
        "cursor": {
          "ref": "bb697a0d-754a-48d1-8cea-feabd12ad01e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2d404d89-31a1-4f6d-a9bc-252940ebb8af"
        },
        "item": {
          "id": "6ffb7619-85de-4fe8-a4a0-69829ccfb1fa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ca810900-eca6-4443-a19b-1058faddb2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71212b5e-234a-4cfb-b4ac-eb1af0d6c16e",
        "cursor": {
          "ref": "41fa122b-afc0-4a47-9f8e-dd18274ac31a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "db8ccc31-17aa-4fd2-aa00-02cf6d6b8807"
        },
        "item": {
          "id": "71212b5e-234a-4cfb-b4ac-eb1af0d6c16e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d130b200-57cd-46e7-9195-b2ef5f74a248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c54ea0-4e93-48ff-83be-87ae024a6b9f",
        "cursor": {
          "ref": "14aa1a83-6895-4e6a-803e-e95c507a6953",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d32beb69-c3b7-449a-931a-448036bfbbdd"
        },
        "item": {
          "id": "11c54ea0-4e93-48ff-83be-87ae024a6b9f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f75a5317-d7d0-440a-af14-04cbf40dc0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c80112-00b9-4ecb-b36b-b5373dc693e2",
        "cursor": {
          "ref": "61ad53a9-fcad-47c1-9175-05fec03237fb",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3127fdb3-3841-4a5c-ad8f-ef3f90958068"
        },
        "item": {
          "id": "22c80112-00b9-4ecb-b36b-b5373dc693e2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "98512120-8a7c-4a1b-9043-323daded40c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72496f40-a295-49a4-a0cf-1e719a20a2d7",
        "cursor": {
          "ref": "f9da466f-b7b6-4f7c-a70d-a60e17819535",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f2fdb308-fe35-42ba-a88d-30e69def8177"
        },
        "item": {
          "id": "72496f40-a295-49a4-a0cf-1e719a20a2d7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e5a0bcc7-aad1-41fd-90fb-974aa9c76e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a87544-f9d6-45a2-8906-fa4e69ca2a65",
        "cursor": {
          "ref": "dfa0edeb-cd37-447c-8980-58a66fc4c405",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0ac5e13a-fb38-4539-be27-183158cf00a7"
        },
        "item": {
          "id": "c2a87544-f9d6-45a2-8906-fa4e69ca2a65",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c1fcd74a-6d8c-4bd9-813a-041f29a7d722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0c453c-2a41-4cad-bf1d-3052cb063c6d",
        "cursor": {
          "ref": "212f9409-356a-4a9e-91d8-3bcb26be76a1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "00fa97aa-06f4-4c96-a832-d16794c981a5"
        },
        "item": {
          "id": "3a0c453c-2a41-4cad-bf1d-3052cb063c6d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "845eab28-27f2-46a6-9760-b542e5cad051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008560d2-cc0f-4bce-972f-1dc3c805d23b",
        "cursor": {
          "ref": "15b72855-909d-44a5-ab6c-28ddcc70961e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c7f28a93-95f4-4f08-b5e0-ffe8b6379350"
        },
        "item": {
          "id": "008560d2-cc0f-4bce-972f-1dc3c805d23b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1292fa1c-2e41-486a-87a1-bb86cc2c07b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633c3088-1132-43b2-b166-534be643b2cf",
        "cursor": {
          "ref": "d1fe0df0-32f8-493d-bc0f-0a8c3d7e8549",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eab5e9d4-8549-421c-b7b8-ee6459a11f50"
        },
        "item": {
          "id": "633c3088-1132-43b2-b166-534be643b2cf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "203c3007-24e9-4509-a6a1-2f043e600c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546a9a30-be4c-439e-9919-c13ec8904550",
        "cursor": {
          "ref": "0446292d-5349-405d-a7e4-95abceeb4489",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a394042e-fe98-4982-bcc2-17fd63cf1cdb"
        },
        "item": {
          "id": "546a9a30-be4c-439e-9919-c13ec8904550",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "95faa7cb-06cc-4d15-a39b-592f1a2bb014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3058f573-defd-40dd-b797-996d67d47591",
        "cursor": {
          "ref": "ef8ff58b-81f8-4e42-a24e-66e14e1724a6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7ac91de9-9ad8-4c5a-becf-41efa9a91ab2"
        },
        "item": {
          "id": "3058f573-defd-40dd-b797-996d67d47591",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6870e16a-912a-4845-930a-5cbba16154a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0270d3e7-1747-46e1-9c8e-eb2048fcdd27",
        "cursor": {
          "ref": "6938c81f-7afc-4fec-9211-7d239cbb62ed",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "776ade86-e9cb-47c9-be10-eafba350f0ca"
        },
        "item": {
          "id": "0270d3e7-1747-46e1-9c8e-eb2048fcdd27",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5f3af55a-a7d9-448b-86df-e9705eabd9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9fb5b1-accb-4860-995d-c5ddb5f7f319",
        "cursor": {
          "ref": "ad1937ce-ed29-4937-afa6-a264ad6e1b7e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6db45971-2c96-417e-83b1-9709285406f5"
        },
        "item": {
          "id": "cd9fb5b1-accb-4860-995d-c5ddb5f7f319",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d543ed85-aa04-4b3a-b5a6-3b72aeaab7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84b72d8-6143-45f2-a5d4-36508f6d20ed",
        "cursor": {
          "ref": "c9479448-2e2d-4906-99a3-55204a1545d7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4ec32d4d-b436-4186-bdb5-0d4e19dfcb2b"
        },
        "item": {
          "id": "d84b72d8-6143-45f2-a5d4-36508f6d20ed",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7572eac8-61b4-44ea-bfc7-25849e714e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31e2b69-50d8-4a11-ade7-7925ea733731",
        "cursor": {
          "ref": "dd2de0fd-6fe9-4e52-9d66-5c1a0faf594e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "127d299b-e77a-4e24-973e-cd6eb2e57262"
        },
        "item": {
          "id": "e31e2b69-50d8-4a11-ade7-7925ea733731",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8ae32cc4-c29a-49be-8c43-36dfe7edacb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aca77c5-2d28-4d39-96d2-4e1f8421215d",
        "cursor": {
          "ref": "dda7cb88-f575-4ffd-963d-9815405f1262",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f6303ffc-a878-4171-88a0-8954c1c32a6f"
        },
        "item": {
          "id": "8aca77c5-2d28-4d39-96d2-4e1f8421215d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "96164887-d63d-428c-93fb-52f7ef82cf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5102c4db-2357-4131-9608-5ec2f438ee40",
        "cursor": {
          "ref": "d1044edc-6f0f-4019-8e8a-e325046f07f8",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "aa0a7171-6f2e-45a8-bd5d-73963e1ee5f1"
        },
        "item": {
          "id": "5102c4db-2357-4131-9608-5ec2f438ee40",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "61e15c50-7de4-44d8-87a8-cbb8a02d3c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9535b025-b2a7-438c-aacd-81b2810c3531",
        "cursor": {
          "ref": "3913b857-01fc-47de-81c1-c3a4cfbf2490",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "94ae577f-cce5-4854-bdef-3295931d5b8b"
        },
        "item": {
          "id": "9535b025-b2a7-438c-aacd-81b2810c3531",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bf79d006-ecf6-464a-ad79-d0b7c7b0dc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f445be5-bfc2-4801-99a2-8d9f4840468f",
        "cursor": {
          "ref": "6c3c77a1-4f2c-4717-9f83-75023881d355",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ac074f4c-4b1b-461d-a981-e70ac5003b38"
        },
        "item": {
          "id": "1f445be5-bfc2-4801-99a2-8d9f4840468f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f7d6a27d-2574-4c2b-ae21-e78ab15eeb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91551bea-0087-4158-9cc9-cf3d7cb2a75a",
        "cursor": {
          "ref": "ce714787-fa54-4544-86e3-3836b01d9dbb",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2a3dbef7-f1c0-4653-af6b-a1125f5bd830"
        },
        "item": {
          "id": "91551bea-0087-4158-9cc9-cf3d7cb2a75a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "acabb6f0-51d4-4094-a0a4-c7b89f0dda50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d561b66-6076-4ab1-94f3-edc260f024dc",
        "cursor": {
          "ref": "b65f26ff-1f64-47db-881b-d79bd1735e69",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a9637fa5-fbbf-4404-8403-e629bf69d0ad"
        },
        "item": {
          "id": "1d561b66-6076-4ab1-94f3-edc260f024dc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "eadb20fb-047e-4e82-9897-3ea264c2d5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a39b286-6831-4281-8e5d-2c6009f7f950",
        "cursor": {
          "ref": "3c42c4c3-5fd8-49a0-a8d9-6024fc11788d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "11ad47e7-5b57-456d-bf88-48dd0cf4371a"
        },
        "item": {
          "id": "6a39b286-6831-4281-8e5d-2c6009f7f950",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0c151811-1005-40cb-b79d-8cade6e6ec24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2dd542-da66-46bb-8f64-3f4e3c6de691",
        "cursor": {
          "ref": "d734bfe1-c35f-470a-958c-d5f46615d7cc",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b89a3766-0dd3-4e3d-b64d-08f7611025ec"
        },
        "item": {
          "id": "6c2dd542-da66-46bb-8f64-3f4e3c6de691",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c721f6ca-242b-4e90-a4de-223a82a5cb9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81778bd6-151e-4d71-85e5-80f9cb32dee1",
        "cursor": {
          "ref": "9f266e83-60c7-4841-b214-0f17e82e2620",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9cc23e69-9a38-4543-9d20-520a402af41e"
        },
        "item": {
          "id": "81778bd6-151e-4d71-85e5-80f9cb32dee1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bdd8df71-f202-47a0-881c-977572dcbcb6",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "60dde392-d10d-48ca-b495-7766c2b217bd",
        "cursor": {
          "ref": "01f17c6f-655a-41eb-bfd6-088413b706f1",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d0a4edba-050f-4a0a-b4e6-b76cba2ae75b"
        },
        "item": {
          "id": "60dde392-d10d-48ca-b495-7766c2b217bd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "49290a1e-0460-496d-9569-122b13fbb269",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12f81ad-f489-4b4a-8b8b-b2fadf774f7e",
        "cursor": {
          "ref": "4562e59f-299d-4081-8deb-bfd63f58c93a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "314d8943-fa42-44bb-98b9-28bb12f33281"
        },
        "item": {
          "id": "b12f81ad-f489-4b4a-8b8b-b2fadf774f7e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e029d3ee-7379-4da5-8cc6-bb5f08618102",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cce0179-5f72-4a1a-8b35-2070621f0492",
        "cursor": {
          "ref": "761391df-7eae-42a7-bea4-dfb716673fef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eea2a2bc-3e45-4a8f-a8af-3d90b13e1dee"
        },
        "item": {
          "id": "0cce0179-5f72-4a1a-8b35-2070621f0492",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "64d0d80e-a62c-4816-b6d2-7ddaf5847a16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cce0179-5f72-4a1a-8b35-2070621f0492",
        "cursor": {
          "ref": "761391df-7eae-42a7-bea4-dfb716673fef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eea2a2bc-3e45-4a8f-a8af-3d90b13e1dee"
        },
        "item": {
          "id": "0cce0179-5f72-4a1a-8b35-2070621f0492",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "64d0d80e-a62c-4816-b6d2-7ddaf5847a16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8881f2-21c5-471b-b24d-16f264b63628",
        "cursor": {
          "ref": "33f46669-9097-43f9-b6a8-532e575f49ff",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "02e0ac61-c69e-46c2-af94-e473db4c5d4d"
        },
        "item": {
          "id": "be8881f2-21c5-471b-b24d-16f264b63628",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "352a2ec9-4428-4aaf-a5f9-8bb4552eb675",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db14f3da-da51-4349-bd45-48ad43aa3237",
        "cursor": {
          "ref": "95f24637-8aea-41e1-bae3-4b244d9bc90a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "02b01c93-eb88-41dd-b6b3-4d2259f56417"
        },
        "item": {
          "id": "db14f3da-da51-4349-bd45-48ad43aa3237",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2857983a-ffc9-4c00-94ae-45402435664f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}